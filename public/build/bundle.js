
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var app = (function () {
    'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * True if the custom elements polyfill is in use.
     */
    const isCEPolyfill = typeof window !== 'undefined' &&
        window.customElements != null &&
        window.customElements.polyfillWrapFlushCallback !==
            undefined;
    /**
     * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),
     * into another container (could be the same container), before `before`. If
     * `before` is null, it appends the nodes to the container.
     */
    const reparentNodes = (container, start, end = null, before = null) => {
        while (start !== end) {
            const n = start.nextSibling;
            container.insertBefore(start, before);
            start = n;
        }
    };
    /**
     * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from
     * `container`.
     */
    const removeNodes = (container, start, end = null) => {
        while (start !== end) {
            const n = start.nextSibling;
            container.removeChild(start);
            start = n;
        }
    };

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * An expression marker with embedded unique key to avoid collision with
     * possible text in templates.
     */
    const marker = `{{lit-${String(Math.random()).slice(2)}}}`;
    /**
     * An expression marker used text-positions, multi-binding attributes, and
     * attributes with markup-like text values.
     */
    const nodeMarker = `<!--${marker}-->`;
    const markerRegex = new RegExp(`${marker}|${nodeMarker}`);
    /**
     * Suffix appended to all bound attribute names.
     */
    const boundAttributeSuffix = '$lit$';
    /**
     * An updatable Template that tracks the location of dynamic parts.
     */
    class Template {
        constructor(result, element) {
            this.parts = [];
            this.element = element;
            const nodesToRemove = [];
            const stack = [];
            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null
            const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);
            // Keeps track of the last index associated with a part. We try to delete
            // unnecessary nodes, but we never want to associate two different parts
            // to the same index. They must have a constant node between.
            let lastPartIndex = 0;
            let index = -1;
            let partIndex = 0;
            const { strings, values: { length } } = result;
            while (partIndex < length) {
                const node = walker.nextNode();
                if (node === null) {
                    // We've exhausted the content inside a nested template element.
                    // Because we still have parts (the outer for-loop), we know:
                    // - There is a template in the stack
                    // - The walker will find a nextNode outside the template
                    walker.currentNode = stack.pop();
                    continue;
                }
                index++;
                if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {
                    if (node.hasAttributes()) {
                        const attributes = node.attributes;
                        const { length } = attributes;
                        // Per
                        // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,
                        // attributes are not guaranteed to be returned in document order.
                        // In particular, Edge/IE can return them out of order, so we cannot
                        // assume a correspondence between part index and attribute index.
                        let count = 0;
                        for (let i = 0; i < length; i++) {
                            if (endsWith(attributes[i].name, boundAttributeSuffix)) {
                                count++;
                            }
                        }
                        while (count-- > 0) {
                            // Get the template literal section leading up to the first
                            // expression in this attribute
                            const stringForPart = strings[partIndex];
                            // Find the attribute name
                            const name = lastAttributeNameRegex.exec(stringForPart)[2];
                            // Find the corresponding attribute
                            // All bound attributes have had a suffix added in
                            // TemplateResult#getHTML to opt out of special attribute
                            // handling. To look up the attribute value we also need to add
                            // the suffix.
                            const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;
                            const attributeValue = node.getAttribute(attributeLookupName);
                            node.removeAttribute(attributeLookupName);
                            const statics = attributeValue.split(markerRegex);
                            this.parts.push({ type: 'attribute', index, name, strings: statics });
                            partIndex += statics.length - 1;
                        }
                    }
                    if (node.tagName === 'TEMPLATE') {
                        stack.push(node);
                        walker.currentNode = node.content;
                    }
                }
                else if (node.nodeType === 3 /* Node.TEXT_NODE */) {
                    const data = node.data;
                    if (data.indexOf(marker) >= 0) {
                        const parent = node.parentNode;
                        const strings = data.split(markerRegex);
                        const lastIndex = strings.length - 1;
                        // Generate a new text node for each literal section
                        // These nodes are also used as the markers for node parts
                        for (let i = 0; i < lastIndex; i++) {
                            let insert;
                            let s = strings[i];
                            if (s === '') {
                                insert = createMarker();
                            }
                            else {
                                const match = lastAttributeNameRegex.exec(s);
                                if (match !== null && endsWith(match[2], boundAttributeSuffix)) {
                                    s = s.slice(0, match.index) + match[1] +
                                        match[2].slice(0, -boundAttributeSuffix.length) + match[3];
                                }
                                insert = document.createTextNode(s);
                            }
                            parent.insertBefore(insert, node);
                            this.parts.push({ type: 'node', index: ++index });
                        }
                        // If there's no text, we must insert a comment to mark our place.
                        // Else, we can trust it will stick around after cloning.
                        if (strings[lastIndex] === '') {
                            parent.insertBefore(createMarker(), node);
                            nodesToRemove.push(node);
                        }
                        else {
                            node.data = strings[lastIndex];
                        }
                        // We have a part for each match found
                        partIndex += lastIndex;
                    }
                }
                else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {
                    if (node.data === marker) {
                        const parent = node.parentNode;
                        // Add a new marker node to be the startNode of the Part if any of
                        // the following are true:
                        //  * We don't have a previousSibling
                        //  * The previousSibling is already the start of a previous part
                        if (node.previousSibling === null || index === lastPartIndex) {
                            index++;
                            parent.insertBefore(createMarker(), node);
                        }
                        lastPartIndex = index;
                        this.parts.push({ type: 'node', index });
                        // If we don't have a nextSibling, keep this node so we have an end.
                        // Else, we can remove it to save future costs.
                        if (node.nextSibling === null) {
                            node.data = '';
                        }
                        else {
                            nodesToRemove.push(node);
                            index--;
                        }
                        partIndex++;
                    }
                    else {
                        let i = -1;
                        while ((i = node.data.indexOf(marker, i + 1)) !== -1) {
                            // Comment node has a binding marker inside, make an inactive part
                            // The binding won't work, but subsequent bindings will
                            // TODO (justinfagnani): consider whether it's even worth it to
                            // make bindings in comments work
                            this.parts.push({ type: 'node', index: -1 });
                            partIndex++;
                        }
                    }
                }
            }
            // Remove text binding nodes after the walk to not disturb the TreeWalker
            for (const n of nodesToRemove) {
                n.parentNode.removeChild(n);
            }
        }
    }
    const endsWith = (str, suffix) => {
        const index = str.length - suffix.length;
        return index >= 0 && str.slice(index) === suffix;
    };
    const isTemplatePartActive = (part) => part.index !== -1;
    // Allows `document.createComment('')` to be renamed for a
    // small manual size-savings.
    const createMarker = () => document.createComment('');
    /**
     * This regex extracts the attribute name preceding an attribute-position
     * expression. It does this by matching the syntax allowed for attributes
     * against the string literal directly preceding the expression, assuming that
     * the expression is in an attribute-value position.
     *
     * See attributes in the HTML spec:
     * https://www.w3.org/TR/html5/syntax.html#elements-attributes
     *
     * " \x09\x0a\x0c\x0d" are HTML space characters:
     * https://www.w3.org/TR/html5/infrastructure.html#space-characters
     *
     * "\0-\x1F\x7F-\x9F" are Unicode control characters, which includes every
     * space character except " ".
     *
     * So an attribute is:
     *  * The name: any character except a control character, space character, ('),
     *    ("), ">", "=", or "/"
     *  * Followed by zero or more space characters
     *  * Followed by "="
     *  * Followed by zero or more space characters
     *  * Followed by:
     *    * Any character except space, ('), ("), "<", ">", "=", (`), or
     *    * (") then any non-("), or
     *    * (') then any non-(')
     */
    const lastAttributeNameRegex = 
    // eslint-disable-next-line no-control-regex
    /([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    const walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;
    /**
     * Removes the list of nodes from a Template safely. In addition to removing
     * nodes from the Template, the Template part indices are updated to match
     * the mutated Template DOM.
     *
     * As the template is walked the removal state is tracked and
     * part indices are adjusted as needed.
     *
     * div
     *   div#1 (remove) <-- start removing (removing node is div#1)
     *     div
     *       div#2 (remove)  <-- continue removing (removing node is still div#1)
     *         div
     * div <-- stop removing since previous sibling is the removing node (div#1,
     * removed 4 nodes)
     */
    function removeNodesFromTemplate(template, nodesToRemove) {
        const { element: { content }, parts } = template;
        const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);
        let partIndex = nextActiveIndexInTemplateParts(parts);
        let part = parts[partIndex];
        let nodeIndex = -1;
        let removeCount = 0;
        const nodesToRemoveInTemplate = [];
        let currentRemovingNode = null;
        while (walker.nextNode()) {
            nodeIndex++;
            const node = walker.currentNode;
            // End removal if stepped past the removing node
            if (node.previousSibling === currentRemovingNode) {
                currentRemovingNode = null;
            }
            // A node to remove was found in the template
            if (nodesToRemove.has(node)) {
                nodesToRemoveInTemplate.push(node);
                // Track node we're removing
                if (currentRemovingNode === null) {
                    currentRemovingNode = node;
                }
            }
            // When removing, increment count by which to adjust subsequent part indices
            if (currentRemovingNode !== null) {
                removeCount++;
            }
            while (part !== undefined && part.index === nodeIndex) {
                // If part is in a removed node deactivate it by setting index to -1 or
                // adjust the index as needed.
                part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;
                // go to the next active part.
                partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
                part = parts[partIndex];
            }
        }
        nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));
    }
    const countNodes = (node) => {
        let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;
        const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);
        while (walker.nextNode()) {
            count++;
        }
        return count;
    };
    const nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {
        for (let i = startIndex + 1; i < parts.length; i++) {
            const part = parts[i];
            if (isTemplatePartActive(part)) {
                return i;
            }
        }
        return -1;
    };
    /**
     * Inserts the given node into the Template, optionally before the given
     * refNode. In addition to inserting the node into the Template, the Template
     * part indices are updated to match the mutated Template DOM.
     */
    function insertNodeIntoTemplate(template, node, refNode = null) {
        const { element: { content }, parts } = template;
        // If there's no refNode, then put node at end of template.
        // No part indices need to be shifted in this case.
        if (refNode === null || refNode === undefined) {
            content.appendChild(node);
            return;
        }
        const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);
        let partIndex = nextActiveIndexInTemplateParts(parts);
        let insertCount = 0;
        let walkerIndex = -1;
        while (walker.nextNode()) {
            walkerIndex++;
            const walkerNode = walker.currentNode;
            if (walkerNode === refNode) {
                insertCount = countNodes(node);
                refNode.parentNode.insertBefore(node, refNode);
            }
            while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {
                // If we've inserted the node, simply adjust all subsequent parts
                if (insertCount > 0) {
                    while (partIndex !== -1) {
                        parts[partIndex].index += insertCount;
                        partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
                    }
                    return;
                }
                partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
            }
        }
    }

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    const directives = new WeakMap();
    /**
     * Brands a function as a directive factory function so that lit-html will call
     * the function during template rendering, rather than passing as a value.
     *
     * A _directive_ is a function that takes a Part as an argument. It has the
     * signature: `(part: Part) => void`.
     *
     * A directive _factory_ is a function that takes arguments for data and
     * configuration and returns a directive. Users of directive usually refer to
     * the directive factory as the directive. For example, "The repeat directive".
     *
     * Usually a template author will invoke a directive factory in their template
     * with relevant arguments, which will then return a directive function.
     *
     * Here's an example of using the `repeat()` directive factory that takes an
     * array and a function to render an item:
     *
     * ```js
     * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`
     * ```
     *
     * When `repeat` is invoked, it returns a directive function that closes over
     * `items` and the template function. When the outer template is rendered, the
     * return directive function is called with the Part for the expression.
     * `repeat` then performs it's custom logic to render multiple items.
     *
     * @param f The directive factory function. Must be a function that returns a
     * function of the signature `(part: Part) => void`. The returned function will
     * be called with the part object.
     *
     * @example
     *
     * import {directive, html} from 'lit-html';
     *
     * const immutable = directive((v) => (part) => {
     *   if (part.value !== v) {
     *     part.setValue(v)
     *   }
     * });
     */
    const directive = (f) => ((...args) => {
        const d = f(...args);
        directives.set(d, true);
        return d;
    });
    const isDirective = (o) => {
        return typeof o === 'function' && directives.has(o);
    };

    /**
     * @license
     * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * A sentinel value that signals that a value was handled by a directive and
     * should not be written to the DOM.
     */
    const noChange = {};
    /**
     * A sentinel value that signals a NodePart to fully clear its content.
     */
    const nothing = {};

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * An instance of a `Template` that can be attached to the DOM and updated
     * with new values.
     */
    class TemplateInstance {
        constructor(template, processor, options) {
            this.__parts = [];
            this.template = template;
            this.processor = processor;
            this.options = options;
        }
        update(values) {
            let i = 0;
            for (const part of this.__parts) {
                if (part !== undefined) {
                    part.setValue(values[i]);
                }
                i++;
            }
            for (const part of this.__parts) {
                if (part !== undefined) {
                    part.commit();
                }
            }
        }
        _clone() {
            // There are a number of steps in the lifecycle of a template instance's
            // DOM fragment:
            //  1. Clone - create the instance fragment
            //  2. Adopt - adopt into the main document
            //  3. Process - find part markers and create parts
            //  4. Upgrade - upgrade custom elements
            //  5. Update - set node, attribute, property, etc., values
            //  6. Connect - connect to the document. Optional and outside of this
            //     method.
            //
            // We have a few constraints on the ordering of these steps:
            //  * We need to upgrade before updating, so that property values will pass
            //    through any property setters.
            //  * We would like to process before upgrading so that we're sure that the
            //    cloned fragment is inert and not disturbed by self-modifying DOM.
            //  * We want custom elements to upgrade even in disconnected fragments.
            //
            // Given these constraints, with full custom elements support we would
            // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect
            //
            // But Safari does not implement CustomElementRegistry#upgrade, so we
            // can not implement that order and still have upgrade-before-update and
            // upgrade disconnected fragments. So we instead sacrifice the
            // process-before-upgrade constraint, since in Custom Elements v1 elements
            // must not modify their light DOM in the constructor. We still have issues
            // when co-existing with CEv0 elements like Polymer 1, and with polyfills
            // that don't strictly adhere to the no-modification rule because shadow
            // DOM, which may be created in the constructor, is emulated by being placed
            // in the light DOM.
            //
            // The resulting order is on native is: Clone, Adopt, Upgrade, Process,
            // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade
            // in one step.
            //
            // The Custom Elements v1 polyfill supports upgrade(), so the order when
            // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,
            // Connect.
            const fragment = isCEPolyfill ?
                this.template.element.content.cloneNode(true) :
                document.importNode(this.template.element.content, true);
            const stack = [];
            const parts = this.template.parts;
            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null
            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);
            let partIndex = 0;
            let nodeIndex = 0;
            let part;
            let node = walker.nextNode();
            // Loop through all the nodes and parts of a template
            while (partIndex < parts.length) {
                part = parts[partIndex];
                if (!isTemplatePartActive(part)) {
                    this.__parts.push(undefined);
                    partIndex++;
                    continue;
                }
                // Progress the tree walker until we find our next part's node.
                // Note that multiple parts may share the same node (attribute parts
                // on a single element), so this loop may not run at all.
                while (nodeIndex < part.index) {
                    nodeIndex++;
                    if (node.nodeName === 'TEMPLATE') {
                        stack.push(node);
                        walker.currentNode = node.content;
                    }
                    if ((node = walker.nextNode()) === null) {
                        // We've exhausted the content inside a nested template element.
                        // Because we still have parts (the outer for-loop), we know:
                        // - There is a template in the stack
                        // - The walker will find a nextNode outside the template
                        walker.currentNode = stack.pop();
                        node = walker.nextNode();
                    }
                }
                // We've arrived at our part's node.
                if (part.type === 'node') {
                    const part = this.processor.handleTextExpression(this.options);
                    part.insertAfterNode(node.previousSibling);
                    this.__parts.push(part);
                }
                else {
                    this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));
                }
                partIndex++;
            }
            if (isCEPolyfill) {
                document.adoptNode(fragment);
                customElements.upgrade(fragment);
            }
            return fragment;
        }
    }

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * Our TrustedTypePolicy for HTML which is declared using the html template
     * tag function.
     *
     * That HTML is a developer-authored constant, and is parsed with innerHTML
     * before any untrusted expressions have been mixed in. Therefor it is
     * considered safe by construction.
     */
    const policy = window.trustedTypes &&
        trustedTypes.createPolicy('lit-html', { createHTML: (s) => s });
    const commentMarker = ` ${marker} `;
    /**
     * The return type of `html`, which holds a Template and the values from
     * interpolated expressions.
     */
    class TemplateResult {
        constructor(strings, values, type, processor) {
            this.strings = strings;
            this.values = values;
            this.type = type;
            this.processor = processor;
        }
        /**
         * Returns a string of HTML used to create a `<template>` element.
         */
        getHTML() {
            const l = this.strings.length - 1;
            let html = '';
            let isCommentBinding = false;
            for (let i = 0; i < l; i++) {
                const s = this.strings[i];
                // For each binding we want to determine the kind of marker to insert
                // into the template source before it's parsed by the browser's HTML
                // parser. The marker type is based on whether the expression is in an
                // attribute, text, or comment position.
                //   * For node-position bindings we insert a comment with the marker
                //     sentinel as its text content, like <!--{{lit-guid}}-->.
                //   * For attribute bindings we insert just the marker sentinel for the
                //     first binding, so that we support unquoted attribute bindings.
                //     Subsequent bindings can use a comment marker because multi-binding
                //     attributes must be quoted.
                //   * For comment bindings we insert just the marker sentinel so we don't
                //     close the comment.
                //
                // The following code scans the template source, but is *not* an HTML
                // parser. We don't need to track the tree structure of the HTML, only
                // whether a binding is inside a comment, and if not, if it appears to be
                // the first binding in an attribute.
                const commentOpen = s.lastIndexOf('<!--');
                // We're in comment position if we have a comment open with no following
                // comment close. Because <-- can appear in an attribute value there can
                // be false positives.
                isCommentBinding = (commentOpen > -1 || isCommentBinding) &&
                    s.indexOf('-->', commentOpen + 1) === -1;
                // Check to see if we have an attribute-like sequence preceding the
                // expression. This can match "name=value" like structures in text,
                // comments, and attribute values, so there can be false-positives.
                const attributeMatch = lastAttributeNameRegex.exec(s);
                if (attributeMatch === null) {
                    // We're only in this branch if we don't have a attribute-like
                    // preceding sequence. For comments, this guards against unusual
                    // attribute values like <div foo="<!--${'bar'}">. Cases like
                    // <!-- foo=${'bar'}--> are handled correctly in the attribute branch
                    // below.
                    html += s + (isCommentBinding ? commentMarker : nodeMarker);
                }
                else {
                    // For attributes we use just a marker sentinel, and also append a
                    // $lit$ suffix to the name to opt-out of attribute-specific parsing
                    // that IE and Edge do for style and certain SVG attributes.
                    html += s.substr(0, attributeMatch.index) + attributeMatch[1] +
                        attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +
                        marker;
                }
            }
            html += this.strings[l];
            return html;
        }
        getTemplateElement() {
            const template = document.createElement('template');
            let value = this.getHTML();
            if (policy !== undefined) {
                // this is secure because `this.strings` is a TemplateStringsArray.
                // TODO: validate this when
                // https://github.com/tc39/proposal-array-is-template-object is
                // implemented.
                value = policy.createHTML(value);
            }
            template.innerHTML = value;
            return template;
        }
    }
    /**
     * A TemplateResult for SVG fragments.
     *
     * This class wraps HTML in an `<svg>` tag in order to parse its contents in the
     * SVG namespace, then modifies the template to remove the `<svg>` tag so that
     * clones only container the original fragment.
     */
    class SVGTemplateResult extends TemplateResult {
        getHTML() {
            return `<svg>${super.getHTML()}</svg>`;
        }
        getTemplateElement() {
            const template = super.getTemplateElement();
            const content = template.content;
            const svgElement = content.firstChild;
            content.removeChild(svgElement);
            reparentNodes(content, svgElement.firstChild);
            return template;
        }
    }

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    const isPrimitive = (value) => {
        return (value === null ||
            !(typeof value === 'object' || typeof value === 'function'));
    };
    const isIterable = (value) => {
        return Array.isArray(value) ||
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            !!(value && value[Symbol.iterator]);
    };
    /**
     * Writes attribute values to the DOM for a group of AttributeParts bound to a
     * single attribute. The value is only set once even if there are multiple parts
     * for an attribute.
     */
    class AttributeCommitter {
        constructor(element, name, strings) {
            this.dirty = true;
            this.element = element;
            this.name = name;
            this.strings = strings;
            this.parts = [];
            for (let i = 0; i < strings.length - 1; i++) {
                this.parts[i] = this._createPart();
            }
        }
        /**
         * Creates a single part. Override this to create a differnt type of part.
         */
        _createPart() {
            return new AttributePart(this);
        }
        _getValue() {
            const strings = this.strings;
            const l = strings.length - 1;
            const parts = this.parts;
            // If we're assigning an attribute via syntax like:
            //    attr="${foo}"  or  attr=${foo}
            // but not
            //    attr="${foo} ${bar}" or attr="${foo} baz"
            // then we don't want to coerce the attribute value into one long
            // string. Instead we want to just return the value itself directly,
            // so that sanitizeDOMValue can get the actual value rather than
            // String(value)
            // The exception is if v is an array, in which case we do want to smash
            // it together into a string without calling String() on the array.
            //
            // This also allows trusted values (when using TrustedTypes) being
            // assigned to DOM sinks without being stringified in the process.
            if (l === 1 && strings[0] === '' && strings[1] === '') {
                const v = parts[0].value;
                if (typeof v === 'symbol') {
                    return String(v);
                }
                if (typeof v === 'string' || !isIterable(v)) {
                    return v;
                }
            }
            let text = '';
            for (let i = 0; i < l; i++) {
                text += strings[i];
                const part = parts[i];
                if (part !== undefined) {
                    const v = part.value;
                    if (isPrimitive(v) || !isIterable(v)) {
                        text += typeof v === 'string' ? v : String(v);
                    }
                    else {
                        for (const t of v) {
                            text += typeof t === 'string' ? t : String(t);
                        }
                    }
                }
            }
            text += strings[l];
            return text;
        }
        commit() {
            if (this.dirty) {
                this.dirty = false;
                this.element.setAttribute(this.name, this._getValue());
            }
        }
    }
    /**
     * A Part that controls all or part of an attribute value.
     */
    class AttributePart {
        constructor(committer) {
            this.value = undefined;
            this.committer = committer;
        }
        setValue(value) {
            if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {
                this.value = value;
                // If the value is a not a directive, dirty the committer so that it'll
                // call setAttribute. If the value is a directive, it'll dirty the
                // committer if it calls setValue().
                if (!isDirective(value)) {
                    this.committer.dirty = true;
                }
            }
        }
        commit() {
            while (isDirective(this.value)) {
                const directive = this.value;
                this.value = noChange;
                directive(this);
            }
            if (this.value === noChange) {
                return;
            }
            this.committer.commit();
        }
    }
    /**
     * A Part that controls a location within a Node tree. Like a Range, NodePart
     * has start and end locations and can set and update the Nodes between those
     * locations.
     *
     * NodeParts support several value types: primitives, Nodes, TemplateResults,
     * as well as arrays and iterables of those types.
     */
    class NodePart {
        constructor(options) {
            this.value = undefined;
            this.__pendingValue = undefined;
            this.options = options;
        }
        /**
         * Appends this part into a container.
         *
         * This part must be empty, as its contents are not automatically moved.
         */
        appendInto(container) {
            this.startNode = container.appendChild(createMarker());
            this.endNode = container.appendChild(createMarker());
        }
        /**
         * Inserts this part after the `ref` node (between `ref` and `ref`'s next
         * sibling). Both `ref` and its next sibling must be static, unchanging nodes
         * such as those that appear in a literal section of a template.
         *
         * This part must be empty, as its contents are not automatically moved.
         */
        insertAfterNode(ref) {
            this.startNode = ref;
            this.endNode = ref.nextSibling;
        }
        /**
         * Appends this part into a parent part.
         *
         * This part must be empty, as its contents are not automatically moved.
         */
        appendIntoPart(part) {
            part.__insert(this.startNode = createMarker());
            part.__insert(this.endNode = createMarker());
        }
        /**
         * Inserts this part after the `ref` part.
         *
         * This part must be empty, as its contents are not automatically moved.
         */
        insertAfterPart(ref) {
            ref.__insert(this.startNode = createMarker());
            this.endNode = ref.endNode;
            ref.endNode = this.startNode;
        }
        setValue(value) {
            this.__pendingValue = value;
        }
        commit() {
            if (this.startNode.parentNode === null) {
                return;
            }
            while (isDirective(this.__pendingValue)) {
                const directive = this.__pendingValue;
                this.__pendingValue = noChange;
                directive(this);
            }
            const value = this.__pendingValue;
            if (value === noChange) {
                return;
            }
            if (isPrimitive(value)) {
                if (value !== this.value) {
                    this.__commitText(value);
                }
            }
            else if (value instanceof TemplateResult) {
                this.__commitTemplateResult(value);
            }
            else if (value instanceof Node) {
                this.__commitNode(value);
            }
            else if (isIterable(value)) {
                this.__commitIterable(value);
            }
            else if (value === nothing) {
                this.value = nothing;
                this.clear();
            }
            else {
                // Fallback, will render the string representation
                this.__commitText(value);
            }
        }
        __insert(node) {
            this.endNode.parentNode.insertBefore(node, this.endNode);
        }
        __commitNode(value) {
            if (this.value === value) {
                return;
            }
            this.clear();
            this.__insert(value);
            this.value = value;
        }
        __commitText(value) {
            const node = this.startNode.nextSibling;
            value = value == null ? '' : value;
            // If `value` isn't already a string, we explicitly convert it here in case
            // it can't be implicitly converted - i.e. it's a symbol.
            const valueAsString = typeof value === 'string' ? value : String(value);
            if (node === this.endNode.previousSibling &&
                node.nodeType === 3 /* Node.TEXT_NODE */) {
                // If we only have a single text node between the markers, we can just
                // set its value, rather than replacing it.
                // TODO(justinfagnani): Can we just check if this.value is primitive?
                node.data = valueAsString;
            }
            else {
                this.__commitNode(document.createTextNode(valueAsString));
            }
            this.value = value;
        }
        __commitTemplateResult(value) {
            const template = this.options.templateFactory(value);
            if (this.value instanceof TemplateInstance &&
                this.value.template === template) {
                this.value.update(value.values);
            }
            else {
                // Make sure we propagate the template processor from the TemplateResult
                // so that we use its syntax extension, etc. The template factory comes
                // from the render function options so that it can control template
                // caching and preprocessing.
                const instance = new TemplateInstance(template, value.processor, this.options);
                const fragment = instance._clone();
                instance.update(value.values);
                this.__commitNode(fragment);
                this.value = instance;
            }
        }
        __commitIterable(value) {
            // For an Iterable, we create a new InstancePart per item, then set its
            // value to the item. This is a little bit of overhead for every item in
            // an Iterable, but it lets us recurse easily and efficiently update Arrays
            // of TemplateResults that will be commonly returned from expressions like:
            // array.map((i) => html`${i}`), by reusing existing TemplateInstances.
            // If _value is an array, then the previous render was of an
            // iterable and _value will contain the NodeParts from the previous
            // render. If _value is not an array, clear this part and make a new
            // array for NodeParts.
            if (!Array.isArray(this.value)) {
                this.value = [];
                this.clear();
            }
            // Lets us keep track of how many items we stamped so we can clear leftover
            // items from a previous render
            const itemParts = this.value;
            let partIndex = 0;
            let itemPart;
            for (const item of value) {
                // Try to reuse an existing part
                itemPart = itemParts[partIndex];
                // If no existing part, create a new one
                if (itemPart === undefined) {
                    itemPart = new NodePart(this.options);
                    itemParts.push(itemPart);
                    if (partIndex === 0) {
                        itemPart.appendIntoPart(this);
                    }
                    else {
                        itemPart.insertAfterPart(itemParts[partIndex - 1]);
                    }
                }
                itemPart.setValue(item);
                itemPart.commit();
                partIndex++;
            }
            if (partIndex < itemParts.length) {
                // Truncate the parts array so _value reflects the current state
                itemParts.length = partIndex;
                this.clear(itemPart && itemPart.endNode);
            }
        }
        clear(startNode = this.startNode) {
            removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);
        }
    }
    /**
     * Implements a boolean attribute, roughly as defined in the HTML
     * specification.
     *
     * If the value is truthy, then the attribute is present with a value of
     * ''. If the value is falsey, the attribute is removed.
     */
    class BooleanAttributePart {
        constructor(element, name, strings) {
            this.value = undefined;
            this.__pendingValue = undefined;
            if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {
                throw new Error('Boolean attributes can only contain a single expression');
            }
            this.element = element;
            this.name = name;
            this.strings = strings;
        }
        setValue(value) {
            this.__pendingValue = value;
        }
        commit() {
            while (isDirective(this.__pendingValue)) {
                const directive = this.__pendingValue;
                this.__pendingValue = noChange;
                directive(this);
            }
            if (this.__pendingValue === noChange) {
                return;
            }
            const value = !!this.__pendingValue;
            if (this.value !== value) {
                if (value) {
                    this.element.setAttribute(this.name, '');
                }
                else {
                    this.element.removeAttribute(this.name);
                }
                this.value = value;
            }
            this.__pendingValue = noChange;
        }
    }
    /**
     * Sets attribute values for PropertyParts, so that the value is only set once
     * even if there are multiple parts for a property.
     *
     * If an expression controls the whole property value, then the value is simply
     * assigned to the property under control. If there are string literals or
     * multiple expressions, then the strings are expressions are interpolated into
     * a string first.
     */
    class PropertyCommitter extends AttributeCommitter {
        constructor(element, name, strings) {
            super(element, name, strings);
            this.single =
                (strings.length === 2 && strings[0] === '' && strings[1] === '');
        }
        _createPart() {
            return new PropertyPart(this);
        }
        _getValue() {
            if (this.single) {
                return this.parts[0].value;
            }
            return super._getValue();
        }
        commit() {
            if (this.dirty) {
                this.dirty = false;
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this.element[this.name] = this._getValue();
            }
        }
    }
    class PropertyPart extends AttributePart {
    }
    // Detect event listener options support. If the `capture` property is read
    // from the options object, then options are supported. If not, then the third
    // argument to add/removeEventListener is interpreted as the boolean capture
    // value so we should only pass the `capture` property.
    let eventOptionsSupported = false;
    // Wrap into an IIFE because MS Edge <= v41 does not support having try/catch
    // blocks right into the body of a module
    (() => {
        try {
            const options = {
                get capture() {
                    eventOptionsSupported = true;
                    return false;
                }
            };
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            window.addEventListener('test', options, options);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            window.removeEventListener('test', options, options);
        }
        catch (_e) {
            // event options not supported
        }
    })();
    class EventPart {
        constructor(element, eventName, eventContext) {
            this.value = undefined;
            this.__pendingValue = undefined;
            this.element = element;
            this.eventName = eventName;
            this.eventContext = eventContext;
            this.__boundHandleEvent = (e) => this.handleEvent(e);
        }
        setValue(value) {
            this.__pendingValue = value;
        }
        commit() {
            while (isDirective(this.__pendingValue)) {
                const directive = this.__pendingValue;
                this.__pendingValue = noChange;
                directive(this);
            }
            if (this.__pendingValue === noChange) {
                return;
            }
            const newListener = this.__pendingValue;
            const oldListener = this.value;
            const shouldRemoveListener = newListener == null ||
                oldListener != null &&
                    (newListener.capture !== oldListener.capture ||
                        newListener.once !== oldListener.once ||
                        newListener.passive !== oldListener.passive);
            const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);
            if (shouldRemoveListener) {
                this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);
            }
            if (shouldAddListener) {
                this.__options = getOptions(newListener);
                this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);
            }
            this.value = newListener;
            this.__pendingValue = noChange;
        }
        handleEvent(event) {
            if (typeof this.value === 'function') {
                this.value.call(this.eventContext || this.element, event);
            }
            else {
                this.value.handleEvent(event);
            }
        }
    }
    // We copy options because of the inconsistent behavior of browsers when reading
    // the third argument of add/removeEventListener. IE11 doesn't support options
    // at all. Chrome 41 only reads `capture` if the argument is an object.
    const getOptions = (o) => o &&
        (eventOptionsSupported ?
            { capture: o.capture, passive: o.passive, once: o.once } :
            o.capture);

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * The default TemplateFactory which caches Templates keyed on
     * result.type and result.strings.
     */
    function templateFactory(result) {
        let templateCache = templateCaches.get(result.type);
        if (templateCache === undefined) {
            templateCache = {
                stringsArray: new WeakMap(),
                keyString: new Map()
            };
            templateCaches.set(result.type, templateCache);
        }
        let template = templateCache.stringsArray.get(result.strings);
        if (template !== undefined) {
            return template;
        }
        // If the TemplateStringsArray is new, generate a key from the strings
        // This key is shared between all templates with identical content
        const key = result.strings.join(marker);
        // Check if we already have a Template for this key
        template = templateCache.keyString.get(key);
        if (template === undefined) {
            // If we have not seen this key before, create a new Template
            template = new Template(result, result.getTemplateElement());
            // Cache the Template for this key
            templateCache.keyString.set(key, template);
        }
        // Cache all future queries for this TemplateStringsArray
        templateCache.stringsArray.set(result.strings, template);
        return template;
    }
    const templateCaches = new Map();

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    const parts = new WeakMap();
    /**
     * Renders a template result or other value to a container.
     *
     * To update a container with new values, reevaluate the template literal and
     * call `render` with the new result.
     *
     * @param result Any value renderable by NodePart - typically a TemplateResult
     *     created by evaluating a template tag like `html` or `svg`.
     * @param container A DOM parent to render to. The entire contents are either
     *     replaced, or efficiently updated if the same result type was previous
     *     rendered there.
     * @param options RenderOptions for the entire render tree rendered to this
     *     container. Render options must *not* change between renders to the same
     *     container, as those changes will not effect previously rendered DOM.
     */
    const render$1 = (result, container, options) => {
        let part = parts.get(container);
        if (part === undefined) {
            removeNodes(container, container.firstChild);
            parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));
            part.appendInto(container);
        }
        part.setValue(result);
        part.commit();
    };

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * Creates Parts when a template is instantiated.
     */
    class DefaultTemplateProcessor {
        /**
         * Create parts for an attribute-position binding, given the event, attribute
         * name, and string literals.
         *
         * @param element The element containing the binding
         * @param name  The attribute name
         * @param strings The string literals. There are always at least two strings,
         *   event for fully-controlled bindings with a single expression.
         */
        handleAttributeExpressions(element, name, strings, options) {
            const prefix = name[0];
            if (prefix === '.') {
                const committer = new PropertyCommitter(element, name.slice(1), strings);
                return committer.parts;
            }
            if (prefix === '@') {
                return [new EventPart(element, name.slice(1), options.eventContext)];
            }
            if (prefix === '?') {
                return [new BooleanAttributePart(element, name.slice(1), strings)];
            }
            const committer = new AttributeCommitter(element, name, strings);
            return committer.parts;
        }
        /**
         * Create parts for a text-position binding.
         * @param templateFactory
         */
        handleTextExpression(options) {
            return new NodePart(options);
        }
    }
    const defaultTemplateProcessor = new DefaultTemplateProcessor();

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    // IMPORTANT: do not change the property name or the assignment expression.
    // This line will be used in regexes to search for lit-html usage.
    // TODO(justinfagnani): inject version number at build time
    if (typeof window !== 'undefined') {
        (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.4.1');
    }
    /**
     * Interprets a template literal as an HTML template that can efficiently
     * render to and update a container.
     */
    const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);
    /**
     * Interprets a template literal as an SVG template that can efficiently
     * render to and update a container.
     */
    const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    // Get a key to lookup in `templateCaches`.
    const getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;
    let compatibleShadyCSSVersion = true;
    if (typeof window.ShadyCSS === 'undefined') {
        compatibleShadyCSSVersion = false;
    }
    else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {
        console.warn(`Incompatible ShadyCSS version detected. ` +
            `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +
            `@webcomponents/shadycss@1.3.1.`);
        compatibleShadyCSSVersion = false;
    }
    /**
     * Template factory which scopes template DOM using ShadyCSS.
     * @param scopeName {string}
     */
    const shadyTemplateFactory = (scopeName) => (result) => {
        const cacheKey = getTemplateCacheKey(result.type, scopeName);
        let templateCache = templateCaches.get(cacheKey);
        if (templateCache === undefined) {
            templateCache = {
                stringsArray: new WeakMap(),
                keyString: new Map()
            };
            templateCaches.set(cacheKey, templateCache);
        }
        let template = templateCache.stringsArray.get(result.strings);
        if (template !== undefined) {
            return template;
        }
        const key = result.strings.join(marker);
        template = templateCache.keyString.get(key);
        if (template === undefined) {
            const element = result.getTemplateElement();
            if (compatibleShadyCSSVersion) {
                window.ShadyCSS.prepareTemplateDom(element, scopeName);
            }
            template = new Template(result, element);
            templateCache.keyString.set(key, template);
        }
        templateCache.stringsArray.set(result.strings, template);
        return template;
    };
    const TEMPLATE_TYPES = ['html', 'svg'];
    /**
     * Removes all style elements from Templates for the given scopeName.
     */
    const removeStylesFromLitTemplates = (scopeName) => {
        TEMPLATE_TYPES.forEach((type) => {
            const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));
            if (templates !== undefined) {
                templates.keyString.forEach((template) => {
                    const { element: { content } } = template;
                    // IE 11 doesn't support the iterable param Set constructor
                    const styles = new Set();
                    Array.from(content.querySelectorAll('style')).forEach((s) => {
                        styles.add(s);
                    });
                    removeNodesFromTemplate(template, styles);
                });
            }
        });
    };
    const shadyRenderSet = new Set();
    /**
     * For the given scope name, ensures that ShadyCSS style scoping is performed.
     * This is done just once per scope name so the fragment and template cannot
     * be modified.
     * (1) extracts styles from the rendered fragment and hands them to ShadyCSS
     * to be scoped and appended to the document
     * (2) removes style elements from all lit-html Templates for this scope name.
     *
     * Note, <style> elements can only be placed into templates for the
     * initial rendering of the scope. If <style> elements are included in templates
     * dynamically rendered to the scope (after the first scope render), they will
     * not be scoped and the <style> will be left in the template and rendered
     * output.
     */
    const prepareTemplateStyles = (scopeName, renderedDOM, template) => {
        shadyRenderSet.add(scopeName);
        // If `renderedDOM` is stamped from a Template, then we need to edit that
        // Template's underlying template element. Otherwise, we create one here
        // to give to ShadyCSS, which still requires one while scoping.
        const templateElement = !!template ? template.element : document.createElement('template');
        // Move styles out of rendered DOM and store.
        const styles = renderedDOM.querySelectorAll('style');
        const { length } = styles;
        // If there are no styles, skip unnecessary work
        if (length === 0) {
            // Ensure prepareTemplateStyles is called to support adding
            // styles via `prepareAdoptedCssText` since that requires that
            // `prepareTemplateStyles` is called.
            //
            // ShadyCSS will only update styles containing @apply in the template
            // given to `prepareTemplateStyles`. If no lit Template was given,
            // ShadyCSS will not be able to update uses of @apply in any relevant
            // template. However, this is not a problem because we only create the
            // template for the purpose of supporting `prepareAdoptedCssText`,
            // which doesn't support @apply at all.
            window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);
            return;
        }
        const condensedStyle = document.createElement('style');
        // Collect styles into a single style. This helps us make sure ShadyCSS
        // manipulations will not prevent us from being able to fix up template
        // part indices.
        // NOTE: collecting styles is inefficient for browsers but ShadyCSS
        // currently does this anyway. When it does not, this should be changed.
        for (let i = 0; i < length; i++) {
            const style = styles[i];
            style.parentNode.removeChild(style);
            condensedStyle.textContent += style.textContent;
        }
        // Remove styles from nested templates in this scope.
        removeStylesFromLitTemplates(scopeName);
        // And then put the condensed style into the "root" template passed in as
        // `template`.
        const content = templateElement.content;
        if (!!template) {
            insertNodeIntoTemplate(template, condensedStyle, content.firstChild);
        }
        else {
            content.insertBefore(condensedStyle, content.firstChild);
        }
        // Note, it's important that ShadyCSS gets the template that `lit-html`
        // will actually render so that it can update the style inside when
        // needed (e.g. @apply native Shadow DOM case).
        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);
        const style = content.querySelector('style');
        if (window.ShadyCSS.nativeShadow && style !== null) {
            // When in native Shadow DOM, ensure the style created by ShadyCSS is
            // included in initially rendered output (`renderedDOM`).
            renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);
        }
        else if (!!template) {
            // When no style is left in the template, parts will be broken as a
            // result. To fix this, we put back the style node ShadyCSS removed
            // and then tell lit to remove that node from the template.
            // There can be no style in the template in 2 cases (1) when Shady DOM
            // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM
            // is in use ShadyCSS removes the style if it contains no content.
            // NOTE, ShadyCSS creates its own style so we can safely add/remove
            // `condensedStyle` here.
            content.insertBefore(condensedStyle, content.firstChild);
            const removes = new Set();
            removes.add(condensedStyle);
            removeNodesFromTemplate(template, removes);
        }
    };
    /**
     * Extension to the standard `render` method which supports rendering
     * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)
     * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used
     * or when the webcomponentsjs
     * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.
     *
     * Adds a `scopeName` option which is used to scope element DOM and stylesheets
     * when native ShadowDOM is unavailable. The `scopeName` will be added to
     * the class attribute of all rendered DOM. In addition, any style elements will
     * be automatically re-written with this `scopeName` selector and moved out
     * of the rendered DOM and into the document `<head>`.
     *
     * It is common to use this render method in conjunction with a custom element
     * which renders a shadowRoot. When this is done, typically the element's
     * `localName` should be used as the `scopeName`.
     *
     * In addition to DOM scoping, ShadyCSS also supports a basic shim for css
     * custom properties (needed only on older browsers like IE11) and a shim for
     * a deprecated feature called `@apply` that supports applying a set of css
     * custom properties to a given location.
     *
     * Usage considerations:
     *
     * * Part values in `<style>` elements are only applied the first time a given
     * `scopeName` renders. Subsequent changes to parts in style elements will have
     * no effect. Because of this, parts in style elements should only be used for
     * values that will never change, for example parts that set scope-wide theme
     * values or parts which render shared style elements.
     *
     * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a
     * custom element's `constructor` is not supported. Instead rendering should
     * either done asynchronously, for example at microtask timing (for example
     * `Promise.resolve()`), or be deferred until the first time the element's
     * `connectedCallback` runs.
     *
     * Usage considerations when using shimmed custom properties or `@apply`:
     *
     * * Whenever any dynamic changes are made which affect
     * css custom properties, `ShadyCSS.styleElement(element)` must be called
     * to update the element. There are two cases when this is needed:
     * (1) the element is connected to a new parent, (2) a class is added to the
     * element that causes it to match different custom properties.
     * To address the first case when rendering a custom element, `styleElement`
     * should be called in the element's `connectedCallback`.
     *
     * * Shimmed custom properties may only be defined either for an entire
     * shadowRoot (for example, in a `:host` rule) or via a rule that directly
     * matches an element with a shadowRoot. In other words, instead of flowing from
     * parent to child as do native css custom properties, shimmed custom properties
     * flow only from shadowRoots to nested shadowRoots.
     *
     * * When using `@apply` mixing css shorthand property names with
     * non-shorthand names (for example `border` and `border-width`) is not
     * supported.
     */
    const render = (result, container, options) => {
        if (!options || typeof options !== 'object' || !options.scopeName) {
            throw new Error('The `scopeName` option is required.');
        }
        const scopeName = options.scopeName;
        const hasRendered = parts.has(container);
        const needsScoping = compatibleShadyCSSVersion &&
            container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&
            !!container.host;
        // Handle first render to a scope specially...
        const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);
        // On first scope render, render into a fragment; this cannot be a single
        // fragment that is reused since nested renders can occur synchronously.
        const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;
        render$1(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));
        // When performing first scope render,
        // (1) We've rendered into a fragment so that there's a chance to
        // `prepareTemplateStyles` before sub-elements hit the DOM
        // (which might cause them to render based on a common pattern of
        // rendering in a custom element's `connectedCallback`);
        // (2) Scope the template with ShadyCSS one time only for this scope.
        // (3) Render the fragment into the container and make sure the
        // container knows its `part` is the one we just rendered. This ensures
        // DOM will be re-used on subsequent renders.
        if (firstScopeRender) {
            const part = parts.get(renderContainer);
            parts.delete(renderContainer);
            // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)
            // that should apply to `renderContainer` even if the rendered value is
            // not a TemplateInstance. However, it will only insert scoped styles
            // into the document if `prepareTemplateStyles` has already been called
            // for the given scope name.
            const template = part.value instanceof TemplateInstance ?
                part.value.template :
                undefined;
            prepareTemplateStyles(scopeName, renderContainer, template);
            removeNodes(container, container.firstChild);
            container.appendChild(renderContainer);
            parts.set(container, part);
        }
        // After elements have hit the DOM, update styling if this is the
        // initial render to this container.
        // This is needed whenever dynamic changes are made so it would be
        // safest to do every render; however, this would regress performance
        // so we leave it up to the user to call `ShadyCSS.styleElement`
        // for dynamic changes.
        if (!hasRendered && needsScoping) {
            window.ShadyCSS.styleElement(container.host);
        }
    };

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    var _a;
    /**
     * Use this module if you want to create your own base class extending
     * [[UpdatingElement]].
     * @packageDocumentation
     */
    /*
     * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
     * replaced at compile time by the munged name for object[property]. We cannot
     * alias this function, so we have to use a small shim that has the same
     * behavior when not compiling.
     */
    window.JSCompiler_renameProperty =
        (prop, _obj) => prop;
    const defaultConverter = {
        toAttribute(value, type) {
            switch (type) {
                case Boolean:
                    return value ? '' : null;
                case Object:
                case Array:
                    // if the value is `null` or `undefined` pass this through
                    // to allow removing/no change behavior.
                    return value == null ? value : JSON.stringify(value);
            }
            return value;
        },
        fromAttribute(value, type) {
            switch (type) {
                case Boolean:
                    return value !== null;
                case Number:
                    return value === null ? null : Number(value);
                case Object:
                case Array:
                    // Type assert to adhere to Bazel's "must type assert JSON parse" rule.
                    return JSON.parse(value);
            }
            return value;
        }
    };
    /**
     * Change function that returns true if `value` is different from `oldValue`.
     * This method is used as the default for a property's `hasChanged` function.
     */
    const notEqual = (value, old) => {
        // This ensures (old==NaN, value==NaN) always returns false
        return old !== value && (old === old || value === value);
    };
    const defaultPropertyDeclaration = {
        attribute: true,
        type: String,
        converter: defaultConverter,
        reflect: false,
        hasChanged: notEqual
    };
    const STATE_HAS_UPDATED = 1;
    const STATE_UPDATE_REQUESTED = 1 << 2;
    const STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;
    const STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;
    /**
     * The Closure JS Compiler doesn't currently have good support for static
     * property semantics where "this" is dynamic (e.g.
     * https://github.com/google/closure-compiler/issues/3177 and others) so we use
     * this hack to bypass any rewriting by the compiler.
     */
    const finalized = 'finalized';
    /**
     * Base element class which manages element properties and attributes. When
     * properties change, the `update` method is asynchronously called. This method
     * should be supplied by subclassers to render updates as desired.
     * @noInheritDoc
     */
    class UpdatingElement extends HTMLElement {
        constructor() {
            super();
            this.initialize();
        }
        /**
         * Returns a list of attributes corresponding to the registered properties.
         * @nocollapse
         */
        static get observedAttributes() {
            // note: piggy backing on this to ensure we're finalized.
            this.finalize();
            const attributes = [];
            // Use forEach so this works even if for/of loops are compiled to for loops
            // expecting arrays
            this._classProperties.forEach((v, p) => {
                const attr = this._attributeNameForProperty(p, v);
                if (attr !== undefined) {
                    this._attributeToPropertyMap.set(attr, p);
                    attributes.push(attr);
                }
            });
            return attributes;
        }
        /**
         * Ensures the private `_classProperties` property metadata is created.
         * In addition to `finalize` this is also called in `createProperty` to
         * ensure the `@property` decorator can add property metadata.
         */
        /** @nocollapse */
        static _ensureClassProperties() {
            // ensure private storage for property declarations.
            if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {
                this._classProperties = new Map();
                // NOTE: Workaround IE11 not supporting Map constructor argument.
                const superProperties = Object.getPrototypeOf(this)._classProperties;
                if (superProperties !== undefined) {
                    superProperties.forEach((v, k) => this._classProperties.set(k, v));
                }
            }
        }
        /**
         * Creates a property accessor on the element prototype if one does not exist
         * and stores a PropertyDeclaration for the property with the given options.
         * The property setter calls the property's `hasChanged` property option
         * or uses a strict identity check to determine whether or not to request
         * an update.
         *
         * This method may be overridden to customize properties; however,
         * when doing so, it's important to call `super.createProperty` to ensure
         * the property is setup correctly. This method calls
         * `getPropertyDescriptor` internally to get a descriptor to install.
         * To customize what properties do when they are get or set, override
         * `getPropertyDescriptor`. To customize the options for a property,
         * implement `createProperty` like this:
         *
         * static createProperty(name, options) {
         *   options = Object.assign(options, {myOption: true});
         *   super.createProperty(name, options);
         * }
         *
         * @nocollapse
         */
        static createProperty(name, options = defaultPropertyDeclaration) {
            // Note, since this can be called by the `@property` decorator which
            // is called before `finalize`, we ensure storage exists for property
            // metadata.
            this._ensureClassProperties();
            this._classProperties.set(name, options);
            // Do not generate an accessor if the prototype already has one, since
            // it would be lost otherwise and that would never be the user's intention;
            // Instead, we expect users to call `requestUpdate` themselves from
            // user-defined accessors. Note that if the super has an accessor we will
            // still overwrite it
            if (options.noAccessor || this.prototype.hasOwnProperty(name)) {
                return;
            }
            const key = typeof name === 'symbol' ? Symbol() : `__${name}`;
            const descriptor = this.getPropertyDescriptor(name, key, options);
            if (descriptor !== undefined) {
                Object.defineProperty(this.prototype, name, descriptor);
            }
        }
        /**
         * Returns a property descriptor to be defined on the given named property.
         * If no descriptor is returned, the property will not become an accessor.
         * For example,
         *
         *   class MyElement extends LitElement {
         *     static getPropertyDescriptor(name, key, options) {
         *       const defaultDescriptor =
         *           super.getPropertyDescriptor(name, key, options);
         *       const setter = defaultDescriptor.set;
         *       return {
         *         get: defaultDescriptor.get,
         *         set(value) {
         *           setter.call(this, value);
         *           // custom action.
         *         },
         *         configurable: true,
         *         enumerable: true
         *       }
         *     }
         *   }
         *
         * @nocollapse
         */
        static getPropertyDescriptor(name, key, options) {
            return {
                // tslint:disable-next-line:no-any no symbol in index
                get() {
                    return this[key];
                },
                set(value) {
                    const oldValue = this[name];
                    this[key] = value;
                    this
                        .requestUpdateInternal(name, oldValue, options);
                },
                configurable: true,
                enumerable: true
            };
        }
        /**
         * Returns the property options associated with the given property.
         * These options are defined with a PropertyDeclaration via the `properties`
         * object or the `@property` decorator and are registered in
         * `createProperty(...)`.
         *
         * Note, this method should be considered "final" and not overridden. To
         * customize the options for a given property, override `createProperty`.
         *
         * @nocollapse
         * @final
         */
        static getPropertyOptions(name) {
            return this._classProperties && this._classProperties.get(name) ||
                defaultPropertyDeclaration;
        }
        /**
         * Creates property accessors for registered properties and ensures
         * any superclasses are also finalized.
         * @nocollapse
         */
        static finalize() {
            // finalize any superclasses
            const superCtor = Object.getPrototypeOf(this);
            if (!superCtor.hasOwnProperty(finalized)) {
                superCtor.finalize();
            }
            this[finalized] = true;
            this._ensureClassProperties();
            // initialize Map populated in observedAttributes
            this._attributeToPropertyMap = new Map();
            // make any properties
            // Note, only process "own" properties since this element will inherit
            // any properties defined on the superClass, and finalization ensures
            // the entire prototype chain is finalized.
            if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {
                const props = this.properties;
                // support symbols in properties (IE11 does not support this)
                const propKeys = [
                    ...Object.getOwnPropertyNames(props),
                    ...(typeof Object.getOwnPropertySymbols === 'function') ?
                        Object.getOwnPropertySymbols(props) :
                        []
                ];
                // This for/of is ok because propKeys is an array
                for (const p of propKeys) {
                    // note, use of `any` is due to TypeSript lack of support for symbol in
                    // index types
                    // tslint:disable-next-line:no-any no symbol in index
                    this.createProperty(p, props[p]);
                }
            }
        }
        /**
         * Returns the property name for the given attribute `name`.
         * @nocollapse
         */
        static _attributeNameForProperty(name, options) {
            const attribute = options.attribute;
            return attribute === false ?
                undefined :
                (typeof attribute === 'string' ?
                    attribute :
                    (typeof name === 'string' ? name.toLowerCase() : undefined));
        }
        /**
         * Returns true if a property should request an update.
         * Called when a property value is set and uses the `hasChanged`
         * option for the property if present or a strict identity check.
         * @nocollapse
         */
        static _valueHasChanged(value, old, hasChanged = notEqual) {
            return hasChanged(value, old);
        }
        /**
         * Returns the property value for the given attribute value.
         * Called via the `attributeChangedCallback` and uses the property's
         * `converter` or `converter.fromAttribute` property option.
         * @nocollapse
         */
        static _propertyValueFromAttribute(value, options) {
            const type = options.type;
            const converter = options.converter || defaultConverter;
            const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);
            return fromAttribute ? fromAttribute(value, type) : value;
        }
        /**
         * Returns the attribute value for the given property value. If this
         * returns undefined, the property will *not* be reflected to an attribute.
         * If this returns null, the attribute will be removed, otherwise the
         * attribute will be set to the value.
         * This uses the property's `reflect` and `type.toAttribute` property options.
         * @nocollapse
         */
        static _propertyValueToAttribute(value, options) {
            if (options.reflect === undefined) {
                return;
            }
            const type = options.type;
            const converter = options.converter;
            const toAttribute = converter && converter.toAttribute ||
                defaultConverter.toAttribute;
            return toAttribute(value, type);
        }
        /**
         * Performs element initialization. By default captures any pre-set values for
         * registered properties.
         */
        initialize() {
            this._updateState = 0;
            this._updatePromise =
                new Promise((res) => this._enableUpdatingResolver = res);
            this._changedProperties = new Map();
            this._saveInstanceProperties();
            // ensures first update will be caught by an early access of
            // `updateComplete`
            this.requestUpdateInternal();
        }
        /**
         * Fixes any properties set on the instance before upgrade time.
         * Otherwise these would shadow the accessor and break these properties.
         * The properties are stored in a Map which is played back after the
         * constructor runs. Note, on very old versions of Safari (<=9) or Chrome
         * (<=41), properties created for native platform properties like (`id` or
         * `name`) may not have default values set in the element constructor. On
         * these browsers native properties appear on instances and therefore their
         * default value will overwrite any element default (e.g. if the element sets
         * this.id = 'id' in the constructor, the 'id' will become '' since this is
         * the native platform default).
         */
        _saveInstanceProperties() {
            // Use forEach so this works even if for/of loops are compiled to for loops
            // expecting arrays
            this.constructor
                ._classProperties.forEach((_v, p) => {
                if (this.hasOwnProperty(p)) {
                    const value = this[p];
                    delete this[p];
                    if (!this._instanceProperties) {
                        this._instanceProperties = new Map();
                    }
                    this._instanceProperties.set(p, value);
                }
            });
        }
        /**
         * Applies previously saved instance properties.
         */
        _applyInstanceProperties() {
            // Use forEach so this works even if for/of loops are compiled to for loops
            // expecting arrays
            // tslint:disable-next-line:no-any
            this._instanceProperties.forEach((v, p) => this[p] = v);
            this._instanceProperties = undefined;
        }
        connectedCallback() {
            // Ensure first connection completes an update. Updates cannot complete
            // before connection.
            this.enableUpdating();
        }
        enableUpdating() {
            if (this._enableUpdatingResolver !== undefined) {
                this._enableUpdatingResolver();
                this._enableUpdatingResolver = undefined;
            }
        }
        /**
         * Allows for `super.disconnectedCallback()` in extensions while
         * reserving the possibility of making non-breaking feature additions
         * when disconnecting at some point in the future.
         */
        disconnectedCallback() {
        }
        /**
         * Synchronizes property values when attributes change.
         */
        attributeChangedCallback(name, old, value) {
            if (old !== value) {
                this._attributeToProperty(name, value);
            }
        }
        _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {
            const ctor = this.constructor;
            const attr = ctor._attributeNameForProperty(name, options);
            if (attr !== undefined) {
                const attrValue = ctor._propertyValueToAttribute(value, options);
                // an undefined value does not change the attribute.
                if (attrValue === undefined) {
                    return;
                }
                // Track if the property is being reflected to avoid
                // setting the property again via `attributeChangedCallback`. Note:
                // 1. this takes advantage of the fact that the callback is synchronous.
                // 2. will behave incorrectly if multiple attributes are in the reaction
                // stack at time of calling. However, since we process attributes
                // in `update` this should not be possible (or an extreme corner case
                // that we'd like to discover).
                // mark state reflecting
                this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;
                if (attrValue == null) {
                    this.removeAttribute(attr);
                }
                else {
                    this.setAttribute(attr, attrValue);
                }
                // mark state not reflecting
                this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;
            }
        }
        _attributeToProperty(name, value) {
            // Use tracking info to avoid deserializing attribute value if it was
            // just set from a property setter.
            if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {
                return;
            }
            const ctor = this.constructor;
            // Note, hint this as an `AttributeMap` so closure clearly understands
            // the type; it has issues with tracking types through statics
            // tslint:disable-next-line:no-unnecessary-type-assertion
            const propName = ctor._attributeToPropertyMap.get(name);
            if (propName !== undefined) {
                const options = ctor.getPropertyOptions(propName);
                // mark state reflecting
                this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;
                this[propName] =
                    // tslint:disable-next-line:no-any
                    ctor._propertyValueFromAttribute(value, options);
                // mark state not reflecting
                this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;
            }
        }
        /**
         * This protected version of `requestUpdate` does not access or return the
         * `updateComplete` promise. This promise can be overridden and is therefore
         * not free to access.
         */
        requestUpdateInternal(name, oldValue, options) {
            let shouldRequestUpdate = true;
            // If we have a property key, perform property update steps.
            if (name !== undefined) {
                const ctor = this.constructor;
                options = options || ctor.getPropertyOptions(name);
                if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {
                    if (!this._changedProperties.has(name)) {
                        this._changedProperties.set(name, oldValue);
                    }
                    // Add to reflecting properties set.
                    // Note, it's important that every change has a chance to add the
                    // property to `_reflectingProperties`. This ensures setting
                    // attribute + property reflects correctly.
                    if (options.reflect === true &&
                        !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {
                        if (this._reflectingProperties === undefined) {
                            this._reflectingProperties = new Map();
                        }
                        this._reflectingProperties.set(name, options);
                    }
                }
                else {
                    // Abort the request if the property should not be considered changed.
                    shouldRequestUpdate = false;
                }
            }
            if (!this._hasRequestedUpdate && shouldRequestUpdate) {
                this._updatePromise = this._enqueueUpdate();
            }
        }
        /**
         * Requests an update which is processed asynchronously. This should
         * be called when an element should update based on some state not triggered
         * by setting a property. In this case, pass no arguments. It should also be
         * called when manually implementing a property setter. In this case, pass the
         * property `name` and `oldValue` to ensure that any configured property
         * options are honored. Returns the `updateComplete` Promise which is resolved
         * when the update completes.
         *
         * @param name {PropertyKey} (optional) name of requesting property
         * @param oldValue {any} (optional) old value of requesting property
         * @returns {Promise} A Promise that is resolved when the update completes.
         */
        requestUpdate(name, oldValue) {
            this.requestUpdateInternal(name, oldValue);
            return this.updateComplete;
        }
        /**
         * Sets up the element to asynchronously update.
         */
        async _enqueueUpdate() {
            this._updateState = this._updateState | STATE_UPDATE_REQUESTED;
            try {
                // Ensure any previous update has resolved before updating.
                // This `await` also ensures that property changes are batched.
                await this._updatePromise;
            }
            catch (e) {
                // Ignore any previous errors. We only care that the previous cycle is
                // done. Any error should have been handled in the previous update.
            }
            const result = this.performUpdate();
            // If `performUpdate` returns a Promise, we await it. This is done to
            // enable coordinating updates with a scheduler. Note, the result is
            // checked to avoid delaying an additional microtask unless we need to.
            if (result != null) {
                await result;
            }
            return !this._hasRequestedUpdate;
        }
        get _hasRequestedUpdate() {
            return (this._updateState & STATE_UPDATE_REQUESTED);
        }
        get hasUpdated() {
            return (this._updateState & STATE_HAS_UPDATED);
        }
        /**
         * Performs an element update. Note, if an exception is thrown during the
         * update, `firstUpdated` and `updated` will not be called.
         *
         * You can override this method to change the timing of updates. If this
         * method is overridden, `super.performUpdate()` must be called.
         *
         * For instance, to schedule updates to occur just before the next frame:
         *
         * ```
         * protected async performUpdate(): Promise<unknown> {
         *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));
         *   super.performUpdate();
         * }
         * ```
         */
        performUpdate() {
            // Abort any update if one is not pending when this is called.
            // This can happen if `performUpdate` is called early to "flush"
            // the update.
            if (!this._hasRequestedUpdate) {
                return;
            }
            // Mixin instance properties once, if they exist.
            if (this._instanceProperties) {
                this._applyInstanceProperties();
            }
            let shouldUpdate = false;
            const changedProperties = this._changedProperties;
            try {
                shouldUpdate = this.shouldUpdate(changedProperties);
                if (shouldUpdate) {
                    this.update(changedProperties);
                }
                else {
                    this._markUpdated();
                }
            }
            catch (e) {
                // Prevent `firstUpdated` and `updated` from running when there's an
                // update exception.
                shouldUpdate = false;
                // Ensure element can accept additional updates after an exception.
                this._markUpdated();
                throw e;
            }
            if (shouldUpdate) {
                if (!(this._updateState & STATE_HAS_UPDATED)) {
                    this._updateState = this._updateState | STATE_HAS_UPDATED;
                    this.firstUpdated(changedProperties);
                }
                this.updated(changedProperties);
            }
        }
        _markUpdated() {
            this._changedProperties = new Map();
            this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;
        }
        /**
         * Returns a Promise that resolves when the element has completed updating.
         * The Promise value is a boolean that is `true` if the element completed the
         * update without triggering another update. The Promise result is `false` if
         * a property was set inside `updated()`. If the Promise is rejected, an
         * exception was thrown during the update.
         *
         * To await additional asynchronous work, override the `_getUpdateComplete`
         * method. For example, it is sometimes useful to await a rendered element
         * before fulfilling this Promise. To do this, first await
         * `super._getUpdateComplete()`, then any subsequent state.
         *
         * @returns {Promise} The Promise returns a boolean that indicates if the
         * update resolved without triggering another update.
         */
        get updateComplete() {
            return this._getUpdateComplete();
        }
        /**
         * Override point for the `updateComplete` promise.
         *
         * It is not safe to override the `updateComplete` getter directly due to a
         * limitation in TypeScript which means it is not possible to call a
         * superclass getter (e.g. `super.updateComplete.then(...)`) when the target
         * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).
         * This method should be overridden instead. For example:
         *
         *   class MyElement extends LitElement {
         *     async _getUpdateComplete() {
         *       await super._getUpdateComplete();
         *       await this._myChild.updateComplete;
         *     }
         *   }
         * @deprecated Override `getUpdateComplete()` instead for forward
         *     compatibility with `lit-element` 3.0 / `@lit/reactive-element`.
         */
        _getUpdateComplete() {
            return this.getUpdateComplete();
        }
        /**
         * Override point for the `updateComplete` promise.
         *
         * It is not safe to override the `updateComplete` getter directly due to a
         * limitation in TypeScript which means it is not possible to call a
         * superclass getter (e.g. `super.updateComplete.then(...)`) when the target
         * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).
         * This method should be overridden instead. For example:
         *
         *   class MyElement extends LitElement {
         *     async getUpdateComplete() {
         *       await super.getUpdateComplete();
         *       await this._myChild.updateComplete;
         *     }
         *   }
         */
        getUpdateComplete() {
            return this._updatePromise;
        }
        /**
         * Controls whether or not `update` should be called when the element requests
         * an update. By default, this method always returns `true`, but this can be
         * customized to control when to update.
         *
         * @param _changedProperties Map of changed properties with old values
         */
        shouldUpdate(_changedProperties) {
            return true;
        }
        /**
         * Updates the element. This method reflects property values to attributes.
         * It can be overridden to render and keep updated element DOM.
         * Setting properties inside this method will *not* trigger
         * another update.
         *
         * @param _changedProperties Map of changed properties with old values
         */
        update(_changedProperties) {
            if (this._reflectingProperties !== undefined &&
                this._reflectingProperties.size > 0) {
                // Use forEach so this works even if for/of loops are compiled to for
                // loops expecting arrays
                this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));
                this._reflectingProperties = undefined;
            }
            this._markUpdated();
        }
        /**
         * Invoked whenever the element is updated. Implement to perform
         * post-updating tasks via DOM APIs, for example, focusing an element.
         *
         * Setting properties inside this method will trigger the element to update
         * again after this update cycle completes.
         *
         * @param _changedProperties Map of changed properties with old values
         */
        updated(_changedProperties) {
        }
        /**
         * Invoked when the element is first updated. Implement to perform one time
         * work on the element after update.
         *
         * Setting properties inside this method will trigger the element to update
         * again after this update cycle completes.
         *
         * @param _changedProperties Map of changed properties with old values
         */
        firstUpdated(_changedProperties) {
        }
    }
    _a = finalized;
    /**
     * Marks class as having finished creating properties.
     */
    UpdatingElement[_a] = true;

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    const standardProperty = (options, element) => {
        // When decorating an accessor, pass it through and add property metadata.
        // Note, the `hasOwnProperty` check in `createProperty` ensures we don't
        // stomp over the user's accessor.
        if (element.kind === 'method' && element.descriptor &&
            !('value' in element.descriptor)) {
            return Object.assign(Object.assign({}, element), { finisher(clazz) {
                    clazz.createProperty(element.key, options);
                } });
        }
        else {
            // createProperty() takes care of defining the property, but we still
            // must return some kind of descriptor, so return a descriptor for an
            // unused prototype field. The finisher calls createProperty().
            return {
                kind: 'field',
                key: Symbol(),
                placement: 'own',
                descriptor: {},
                // When @babel/plugin-proposal-decorators implements initializers,
                // do this instead of the initializer below. See:
                // https://github.com/babel/babel/issues/9260 extras: [
                //   {
                //     kind: 'initializer',
                //     placement: 'own',
                //     initializer: descriptor.initializer,
                //   }
                // ],
                initializer() {
                    if (typeof element.initializer === 'function') {
                        this[element.key] = element.initializer.call(this);
                    }
                },
                finisher(clazz) {
                    clazz.createProperty(element.key, options);
                }
            };
        }
    };
    const legacyProperty = (options, proto, name) => {
        proto.constructor
            .createProperty(name, options);
    };
    /**
     * A property decorator which creates a LitElement property which reflects a
     * corresponding attribute value. A [[`PropertyDeclaration`]] may optionally be
     * supplied to configure property features.
     *
     * This decorator should only be used for public fields. Private or protected
     * fields should use the [[`internalProperty`]] decorator.
     *
     * @example
     * ```ts
     * class MyElement {
     *   @property({ type: Boolean })
     *   clicked = false;
     * }
     * ```
     * @category Decorator
     * @ExportDecoratedItems
     */
    function property(options) {
        // tslint:disable-next-line:no-any decorator
        return (protoOrDescriptor, name) => (name !== undefined) ?
            legacyProperty(options, protoOrDescriptor, name) :
            standardProperty(options, protoOrDescriptor);
    }
    /**
     * A property decorator that converts a class property into a getter that
     * executes a querySelector on the element's renderRoot.
     *
     * @param selector A DOMString containing one or more selectors to match.
     * @param cache An optional boolean which when true performs the DOM query only
     * once and caches the result.
     *
     * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector
     *
     * @example
     *
     * ```ts
     * class MyElement {
     *   @query('#first')
     *   first;
     *
     *   render() {
     *     return html`
     *       <div id="first"></div>
     *       <div id="second"></div>
     *     `;
     *   }
     * }
     * ```
     * @category Decorator
     */
    function query(selector, cache) {
        return (protoOrDescriptor, 
        // tslint:disable-next-line:no-any decorator
        name) => {
            const descriptor = {
                get() {
                    return this.renderRoot.querySelector(selector);
                },
                enumerable: true,
                configurable: true,
            };
            if (cache) {
                const prop = name !== undefined ? name : protoOrDescriptor.key;
                const key = typeof prop === 'symbol' ? Symbol() : `__${prop}`;
                descriptor.get = function () {
                    if (this[key] === undefined) {
                        (this[key] =
                            this.renderRoot.querySelector(selector));
                    }
                    return this[key];
                };
            }
            return (name !== undefined) ?
                legacyQuery(descriptor, protoOrDescriptor, name) :
                standardQuery(descriptor, protoOrDescriptor);
        };
    }
    const legacyQuery = (descriptor, proto, name) => {
        Object.defineProperty(proto, name, descriptor);
    };
    const standardQuery = (descriptor, element) => ({
        kind: 'method',
        placement: 'prototype',
        key: element.key,
        descriptor,
    });
    // x-browser support for matches
    // tslint:disable-next-line:no-any
    const ElementProto = Element.prototype;
    const legacyMatches = ElementProto.msMatchesSelector || ElementProto.webkitMatchesSelector;
    /**
     * A property decorator that converts a class property into a getter that
     * returns the `assignedNodes` of the given named `slot`. Note, the type of
     * this property should be annotated as `NodeListOf<HTMLElement>`.
     *
     * @param slotName A string name of the slot.
     * @param flatten A boolean which when true flattens the assigned nodes,
     * meaning any assigned nodes that are slot elements are replaced with their
     * assigned nodes.
     * @param selector A string which filters the results to elements that match
     * the given css selector.
     *
     * * @example
     * ```ts
     * class MyElement {
     *   @queryAssignedNodes('list', true, '.item')
     *   listItems;
     *
     *   render() {
     *     return html`
     *       <slot name="list"></slot>
     *     `;
     *   }
     * }
     * ```
     * @category Decorator
     */
    function queryAssignedNodes(slotName = '', flatten = false, selector = '') {
        return (protoOrDescriptor, 
        // tslint:disable-next-line:no-any decorator
        name) => {
            const descriptor = {
                get() {
                    const slotSelector = `slot${slotName ? `[name=${slotName}]` : ':not([name])'}`;
                    const slot = this.renderRoot.querySelector(slotSelector);
                    let nodes = slot && slot.assignedNodes({ flatten });
                    if (nodes && selector) {
                        nodes = nodes.filter((node) => node.nodeType === Node.ELEMENT_NODE &&
                            // tslint:disable-next-line:no-any testing existence on older browsers
                            (node.matches ?
                                node.matches(selector) :
                                legacyMatches.call(node, selector)));
                    }
                    return nodes;
                },
                enumerable: true,
                configurable: true,
            };
            return (name !== undefined) ?
                legacyQuery(descriptor, protoOrDescriptor, name) :
                standardQuery(descriptor, protoOrDescriptor);
        };
    }

    /**
    @license
    Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at
    http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
    http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
    found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
    part of the polymer project is also subject to an additional IP rights grant
    found at http://polymer.github.io/PATENTS.txt
    */
    /**
     * Whether the current browser supports `adoptedStyleSheets`.
     */
    const supportsAdoptingStyleSheets = (window.ShadowRoot) &&
        (window.ShadyCSS === undefined || window.ShadyCSS.nativeShadow) &&
        ('adoptedStyleSheets' in Document.prototype) &&
        ('replace' in CSSStyleSheet.prototype);
    const constructionToken = Symbol();
    class CSSResult {
        constructor(cssText, safeToken) {
            if (safeToken !== constructionToken) {
                throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');
            }
            this.cssText = cssText;
        }
        // Note, this is a getter so that it's lazy. In practice, this means
        // stylesheets are not created until the first element instance is made.
        get styleSheet() {
            if (this._styleSheet === undefined) {
                // Note, if `supportsAdoptingStyleSheets` is true then we assume
                // CSSStyleSheet is constructable.
                if (supportsAdoptingStyleSheets) {
                    this._styleSheet = new CSSStyleSheet();
                    this._styleSheet.replaceSync(this.cssText);
                }
                else {
                    this._styleSheet = null;
                }
            }
            return this._styleSheet;
        }
        toString() {
            return this.cssText;
        }
    }
    /**
     * Wrap a value for interpolation in a [[`css`]] tagged template literal.
     *
     * This is unsafe because untrusted CSS text can be used to phone home
     * or exfiltrate data to an attacker controlled site. Take care to only use
     * this with trusted input.
     */
    const unsafeCSS = (value) => {
        return new CSSResult(String(value), constructionToken);
    };
    const textFromCSSResult = (value) => {
        if (value instanceof CSSResult) {
            return value.cssText;
        }
        else if (typeof value === 'number') {
            return value;
        }
        else {
            throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but
            take care to ensure page security.`);
        }
    };
    /**
     * Template tag which which can be used with LitElement's [[LitElement.styles |
     * `styles`]] property to set element styles. For security reasons, only literal
     * string values may be used. To incorporate non-literal values [[`unsafeCSS`]]
     * may be used inside a template string part.
     */
    const css = (strings, ...values) => {
        const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);
        return new CSSResult(cssText, constructionToken);
    };

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    // IMPORTANT: do not change the property name or the assignment expression.
    // This line will be used in regexes to search for LitElement usage.
    // TODO(justinfagnani): inject version number at build time
    (window['litElementVersions'] || (window['litElementVersions'] = []))
        .push('2.5.1');
    /**
     * Sentinal value used to avoid calling lit-html's render function when
     * subclasses do not implement `render`
     */
    const renderNotImplemented = {};
    /**
     * Base element class that manages element properties and attributes, and
     * renders a lit-html template.
     *
     * To define a component, subclass `LitElement` and implement a
     * `render` method to provide the component's template. Define properties
     * using the [[`properties`]] property or the [[`property`]] decorator.
     */
    class LitElement extends UpdatingElement {
        /**
         * Return the array of styles to apply to the element.
         * Override this method to integrate into a style management system.
         *
         * @nocollapse
         */
        static getStyles() {
            return this.styles;
        }
        /** @nocollapse */
        static _getUniqueStyles() {
            // Only gather styles once per class
            if (this.hasOwnProperty(JSCompiler_renameProperty('_styles', this))) {
                return;
            }
            // Take care not to call `this.getStyles()` multiple times since this
            // generates new CSSResults each time.
            // TODO(sorvell): Since we do not cache CSSResults by input, any
            // shared styles will generate new stylesheet objects, which is wasteful.
            // This should be addressed when a browser ships constructable
            // stylesheets.
            const userStyles = this.getStyles();
            if (Array.isArray(userStyles)) {
                // De-duplicate styles preserving the _last_ instance in the set.
                // This is a performance optimization to avoid duplicated styles that can
                // occur especially when composing via subclassing.
                // The last item is kept to try to preserve the cascade order with the
                // assumption that it's most important that last added styles override
                // previous styles.
                const addStyles = (styles, set) => styles.reduceRight((set, s) => 
                // Note: On IE set.add() does not return the set
                Array.isArray(s) ? addStyles(s, set) : (set.add(s), set), set);
                // Array.from does not work on Set in IE, otherwise return
                // Array.from(addStyles(userStyles, new Set<CSSResult>())).reverse()
                const set = addStyles(userStyles, new Set());
                const styles = [];
                set.forEach((v) => styles.unshift(v));
                this._styles = styles;
            }
            else {
                this._styles = userStyles === undefined ? [] : [userStyles];
            }
            // Ensure that there are no invalid CSSStyleSheet instances here. They are
            // invalid in two conditions.
            // (1) the sheet is non-constructible (`sheet` of a HTMLStyleElement), but
            //     this is impossible to check except via .replaceSync or use
            // (2) the ShadyCSS polyfill is enabled (:. supportsAdoptingStyleSheets is
            //     false)
            this._styles = this._styles.map((s) => {
                if (s instanceof CSSStyleSheet && !supportsAdoptingStyleSheets) {
                    // Flatten the cssText from the passed constructible stylesheet (or
                    // undetectable non-constructible stylesheet). The user might have
                    // expected to update their stylesheets over time, but the alternative
                    // is a crash.
                    const cssText = Array.prototype.slice.call(s.cssRules)
                        .reduce((css, rule) => css + rule.cssText, '');
                    return unsafeCSS(cssText);
                }
                return s;
            });
        }
        /**
         * Performs element initialization. By default this calls
         * [[`createRenderRoot`]] to create the element [[`renderRoot`]] node and
         * captures any pre-set values for registered properties.
         */
        initialize() {
            super.initialize();
            this.constructor._getUniqueStyles();
            this.renderRoot = this.createRenderRoot();
            // Note, if renderRoot is not a shadowRoot, styles would/could apply to the
            // element's getRootNode(). While this could be done, we're choosing not to
            // support this now since it would require different logic around de-duping.
            if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {
                this.adoptStyles();
            }
        }
        /**
         * Returns the node into which the element should render and by default
         * creates and returns an open shadowRoot. Implement to customize where the
         * element's DOM is rendered. For example, to render into the element's
         * childNodes, return `this`.
         * @returns {Element|DocumentFragment} Returns a node into which to render.
         */
        createRenderRoot() {
            return this.attachShadow(this.constructor.shadowRootOptions);
        }
        /**
         * Applies styling to the element shadowRoot using the [[`styles`]]
         * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where
         * available and will fallback otherwise. When Shadow DOM is polyfilled,
         * ShadyCSS scopes styles and adds them to the document. When Shadow DOM
         * is available but `adoptedStyleSheets` is not, styles are appended to the
         * end of the `shadowRoot` to [mimic spec
         * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).
         */
        adoptStyles() {
            const styles = this.constructor._styles;
            if (styles.length === 0) {
                return;
            }
            // There are three separate cases here based on Shadow DOM support.
            // (1) shadowRoot polyfilled: use ShadyCSS
            // (2) shadowRoot.adoptedStyleSheets available: use it
            // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after
            // rendering
            if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {
                window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);
            }
            else if (supportsAdoptingStyleSheets) {
                this.renderRoot.adoptedStyleSheets =
                    styles.map((s) => s instanceof CSSStyleSheet ? s : s.styleSheet);
            }
            else {
                // This must be done after rendering so the actual style insertion is done
                // in `update`.
                this._needsShimAdoptedStyleSheets = true;
            }
        }
        connectedCallback() {
            super.connectedCallback();
            // Note, first update/render handles styleElement so we only call this if
            // connected after first update.
            if (this.hasUpdated && window.ShadyCSS !== undefined) {
                window.ShadyCSS.styleElement(this);
            }
        }
        /**
         * Updates the element. This method reflects property values to attributes
         * and calls `render` to render DOM via lit-html. Setting properties inside
         * this method will *not* trigger another update.
         * @param _changedProperties Map of changed properties with old values
         */
        update(changedProperties) {
            // Setting properties in `render` should not trigger an update. Since
            // updates are allowed after super.update, it's important to call `render`
            // before that.
            const templateResult = this.render();
            super.update(changedProperties);
            // If render is not implemented by the component, don't call lit-html render
            if (templateResult !== renderNotImplemented) {
                this.constructor
                    .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });
            }
            // When native Shadow DOM is used but adoptedStyles are not supported,
            // insert styling after rendering to ensure adoptedStyles have highest
            // priority.
            if (this._needsShimAdoptedStyleSheets) {
                this._needsShimAdoptedStyleSheets = false;
                this.constructor._styles.forEach((s) => {
                    const style = document.createElement('style');
                    style.textContent = s.cssText;
                    this.renderRoot.appendChild(style);
                });
            }
        }
        /**
         * Invoked on each update to perform rendering tasks. This method may return
         * any value renderable by lit-html's `NodePart` - typically a
         * `TemplateResult`. Setting properties inside this method will *not* trigger
         * the element to update.
         */
        render() {
            return renderNotImplemented;
        }
    }
    /**
     * Ensure this class is marked as `finalized` as an optimization ensuring
     * it will not needlessly try to `finalize`.
     *
     * Note this property name is a string to prevent breaking Closure JS Compiler
     * optimizations. See updating-element.ts for more information.
     */
    LitElement['finalized'] = true;
    /**
     * Reference to the underlying library method used to render the element's
     * DOM. By default, points to the `render` method from lit-html's shady-render
     * module.
     *
     * **Most users will never need to touch this property.**
     *
     * This  property should not be confused with the `render` instance method,
     * which should be overridden to define a template for the element.
     *
     * Advanced users creating a new base class based on LitElement can override
     * this property to point to a custom render method with a signature that
     * matches [shady-render's `render`
     * method](https://lit-html.polymer-project.org/api/modules/shady_render.html#render).
     *
     * @nocollapse
     */
    LitElement.render = render;
    /** @nocollapse */
    LitElement.shadowRootOptions = { mode: 'open' };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const observedForElements = new Set();
    const updateRTL = () => {
        const dir = document.documentElement.dir === 'rtl'
            ? document.documentElement.dir
            : 'ltr';
        observedForElements.forEach((el) => {
            el.setAttribute('dir', dir);
        });
    };
    const rtlObserver = new MutationObserver(updateRTL);
    rtlObserver.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ['dir'],
    });
    const canManageContentDirection = (el) => typeof el.startManagingContentDirection !== 'undefined' ||
        el.tagName === 'SP-THEME';
    function SpectrumMixin(constructor) {
        class SlotTextObservingElement extends constructor {
            constructor() {
                super(...arguments);
                /**
                 * @private
                 */
                this.dir = 'ltr';
            }
            /**
             * @private
             */
            get isLTR() {
                return this.dir === 'ltr';
            }
            connectedCallback() {
                if (!this.hasAttribute('dir')) {
                    let dirParent = (this.assignedSlot ||
                        this.parentNode);
                    while (dirParent !== document.documentElement &&
                        !canManageContentDirection(dirParent)) {
                        dirParent = (dirParent.assignedSlot || // step into the shadow DOM of the parent of a slotted node
                            dirParent.parentNode || // DOM Element detected
                            dirParent
                                .host);
                    }
                    this.dir =
                        dirParent.dir === 'rtl' ? dirParent.dir : this.dir || 'ltr';
                    if (dirParent === document.documentElement) {
                        observedForElements.add(this);
                    }
                    else {
                        const { localName } = dirParent;
                        if (localName.search('-') > -1 &&
                            !customElements.get(localName)) {
                            customElements.whenDefined(localName).then(() => {
                                dirParent.startManagingContentDirection(this);
                            });
                        }
                        else {
                            dirParent.startManagingContentDirection(this);
                        }
                    }
                    this._dirParent = dirParent;
                }
                super.connectedCallback();
            }
            disconnectedCallback() {
                super.disconnectedCallback();
                if (this._dirParent) {
                    if (this._dirParent === document.documentElement) {
                        observedForElements.delete(this);
                    }
                    else {
                        this._dirParent.stopManagingContentDirection(this);
                    }
                    this.removeAttribute('dir');
                }
            }
        }
        __decorate([
            property({ reflect: true })
        ], SlotTextObservingElement.prototype, "dir", void 0);
        return SlotTextObservingElement;
    }
    class SpectrumElement extends SpectrumMixin(LitElement) {
    }

    function SizedMixin(constructor, { validSizes = ['s', 'm', 'l', 'xl'], noDefaultSize, } = {}) {
        class SizedElement extends constructor {
            constructor() {
                super(...arguments);
                this._size = 'm';
            }
            get size() {
                return this._size || 'm';
            }
            set size(value) {
                const defaultSize = noDefaultSize ? null : 'm';
                const size = (value
                    ? value.toLocaleLowerCase()
                    : value);
                const validSize = (validSizes.includes(size)
                    ? size
                    : defaultSize);
                if (validSize) {
                    this.setAttribute('size', validSize);
                }
                if (this._size === validSize) {
                    return;
                }
                const oldSize = this._size;
                this._size = validSize;
                this.requestUpdate('size', oldSize);
            }
            firstUpdated(changes) {
                super.firstUpdated(changes);
                if (!this.hasAttribute('size') && !noDefaultSize) {
                    this.setAttribute('size', this.size);
                }
            }
        }
        __decorate([
            property({ type: String, reflect: true })
        ], SizedElement.prototype, "size", null);
        return SizedElement;
    }

    /**
     * @license
     * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    const previousValues$1 = new WeakMap();
    /**
     * For AttributeParts, sets the attribute if the value is defined and removes
     * the attribute if the value is undefined.
     *
     * For other part types, this directive is a no-op.
     */
    const ifDefined = directive((value) => (part) => {
        const previousValue = previousValues$1.get(part);
        if (value === undefined && part instanceof AttributePart) {
            // If the value is undefined, remove the attribute, but only if the value
            // was previously defined.
            if (previousValue !== undefined || !previousValues$1.has(part)) {
                const name = part.committer.name;
                part.committer.element.removeAttribute(name);
            }
        }
        else if (value !== previousValue) {
            part.setValue(value);
        }
        previousValues$1.set(part, value);
    });

    /**
     * @license
     * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    // IE11 doesn't support classList on SVG elements, so we emulate it with a Set
    class ClassList {
        constructor(element) {
            this.classes = new Set();
            this.changed = false;
            this.element = element;
            const classList = (element.getAttribute('class') || '').split(/\s+/);
            for (const cls of classList) {
                this.classes.add(cls);
            }
        }
        add(cls) {
            this.classes.add(cls);
            this.changed = true;
        }
        remove(cls) {
            this.classes.delete(cls);
            this.changed = true;
        }
        commit() {
            if (this.changed) {
                let classString = '';
                this.classes.forEach((cls) => classString += cls + ' ');
                this.element.setAttribute('class', classString);
            }
        }
    }
    /**
     * Stores the ClassInfo object applied to a given AttributePart.
     * Used to unset existing values when a new ClassInfo object is applied.
     */
    const previousClassesCache = new WeakMap();
    /**
     * A directive that applies CSS classes. This must be used in the `class`
     * attribute and must be the only part used in the attribute. It takes each
     * property in the `classInfo` argument and adds the property name to the
     * element's `class` if the property value is truthy; if the property value is
     * falsey, the property name is removed from the element's `class`. For example
     * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.
     * @param classInfo {ClassInfo}
     */
    const classMap$1 = directive((classInfo) => (part) => {
        if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||
            part.committer.name !== 'class' || part.committer.parts.length > 1) {
            throw new Error('The `classMap` directive must be used in the `class` attribute ' +
                'and must be the only part in the attribute.');
        }
        const { committer } = part;
        const { element } = committer;
        let previousClasses = previousClassesCache.get(part);
        if (previousClasses === undefined) {
            // Write static classes once
            // Use setAttribute() because className isn't a string on SVG elements
            element.setAttribute('class', committer.strings.join(' '));
            previousClassesCache.set(part, previousClasses = new Set());
        }
        const classList = (element.classList || new ClassList(element));
        // Remove old classes that no longer apply
        // We use forEach() instead of for-of so that re don't require down-level
        // iteration.
        previousClasses.forEach((name) => {
            if (!(name in classInfo)) {
                classList.remove(name);
                previousClasses.delete(name);
            }
        });
        // Add or remove classes based on their classMap value
        for (const name in classInfo) {
            const value = classInfo[name];
            if (value != previousClasses.has(name)) {
                // We explicitly want a loose truthy check of `value` because it seems
                // more convenient that '' and 0 are skipped.
                if (value) {
                    classList.add(name);
                    previousClasses.add(name);
                }
                else {
                    classList.remove(name);
                    previousClasses.delete(name);
                }
            }
        }
        if (typeof classList.commit === 'function') {
            classList.commit();
        }
    });

    /**
     * @license
     * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * Stores the StyleInfo object applied to a given AttributePart.
     * Used to unset existing values when a new StyleInfo object is applied.
     */
    const previousStylePropertyCache = new WeakMap();
    /**
     * A directive that applies CSS properties to an element.
     *
     * `styleMap` can only be used in the `style` attribute and must be the only
     * expression in the attribute. It takes the property names in the `styleInfo`
     * object and adds the property values as CSS properties. Property names with
     * dashes (`-`) are assumed to be valid CSS property names and set on the
     * element's style object using `setProperty()`. Names without dashes are
     * assumed to be camelCased JavaScript property names and set on the element's
     * style object using property assignment, allowing the style object to
     * translate JavaScript-style names to CSS property names.
     *
     * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':
     * '0'})` sets the `background-color`, `border-top` and `--size` properties.
     *
     * @param styleInfo {StyleInfo}
     */
    const styleMap = directive((styleInfo) => (part) => {
        if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||
            part.committer.name !== 'style' || part.committer.parts.length > 1) {
            throw new Error('The `styleMap` directive must be used in the style attribute ' +
                'and must be the only part in the attribute.');
        }
        const { committer } = part;
        const { style } = committer.element;
        let previousStyleProperties = previousStylePropertyCache.get(part);
        if (previousStyleProperties === undefined) {
            // Write static styles once
            style.cssText = committer.strings.join(' ');
            previousStylePropertyCache.set(part, previousStyleProperties = new Set());
        }
        // Remove old properties that no longer exist in styleInfo
        // We use forEach() instead of for-of so that re don't require down-level
        // iteration.
        previousStyleProperties.forEach((name) => {
            if (!(name in styleInfo)) {
                previousStyleProperties.delete(name);
                if (name.indexOf('-') === -1) {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    style[name] = null;
                }
                else {
                    style.removeProperty(name);
                }
            }
        });
        // Add or update properties
        for (const name in styleInfo) {
            previousStyleProperties.add(name);
            if (name.indexOf('-') === -1) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                style[name] = styleInfo[name];
            }
            else {
                style.setProperty(name, styleInfo[name]);
            }
        }
    });

    /**
     * @license
     * Copyright (c) 2020 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * Checks binding values against live DOM values, instead of previously bound
     * values, when determining whether to update the value.
     *
     * This is useful for cases where the DOM value may change from outside of
     * lit-html, such as with a binding to an `<input>` element's `value` property,
     * a content editable elements text, or to a custom element that changes it's
     * own properties or attributes.
     *
     * In these cases if the DOM value changes, but the value set through lit-html
     * bindings hasn't, lit-html won't know to update the DOM value and will leave
     * it alone. If this is not what you want—if you want to overwrite the DOM
     * value with the bound value no matter what—use the `live()` directive:
     *
     *     html`<input .value=${live(x)}>`
     *
     * `live()` performs a strict equality check agains the live DOM value, and if
     * the new value is equal to the live value, does nothing. This means that
     * `live()` should not be used when the binding will cause a type conversion. If
     * you use `live()` with an attribute binding, make sure that only strings are
     * passed in, or the binding will update every render.
     */
    const live = directive((value) => (part) => {
        let previousValue;
        if (part instanceof EventPart || part instanceof NodePart) {
            throw new Error('The `live` directive is not allowed on text or event bindings');
        }
        if (part instanceof BooleanAttributePart) {
            checkStrings(part.strings);
            previousValue = part.element.hasAttribute(part.name);
            // This is a hack needed because BooleanAttributePart doesn't have a
            // committer and does its own dirty checking after directives
            part.value = previousValue;
        }
        else {
            const { element, name, strings } = part.committer;
            checkStrings(strings);
            if (part instanceof PropertyPart) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                previousValue = element[name];
                if (previousValue === value) {
                    return;
                }
            }
            else if (part instanceof AttributePart) {
                previousValue = element.getAttribute(name);
            }
            if (previousValue === String(value)) {
                return;
            }
        }
        part.setValue(value);
    });
    const checkStrings = (strings) => {
        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {
            throw new Error('`live` bindings can only contain a single expression');
        }
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$14 = css `
:host{--spectrum-accordion-item-title-tracking-actual:calc(var(--spectrum-accordion-item-title-tracking,
var(--spectrum-global-font-letter-spacing-medium))/100);--spectrum-accordion-item-title-padding-y:var(--spectrum-global-dimension-size-150);--spectrum-accordion-item-line-height:1.3;--spectrum-accordion-animation-duration:var(--spectrum-global-animation-duration-100,130ms);--spectrum-accordion-icon-width:var(--spectrum-global-dimension-size-125);display:block;list-style:none;padding:0;margin:0}
`;

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    createCommonjsModule(function (module, exports) {
    (function (global, factory) {
      factory() ;
    }(commonjsGlobal, (function () {
      /**
       * Applies the :focus-visible polyfill at the given scope.
       * A scope in this case is either the top-level Document or a Shadow Root.
       *
       * @param {(Document|ShadowRoot)} scope
       * @see https://github.com/WICG/focus-visible
       */
      function applyFocusVisiblePolyfill(scope) {
        var hadKeyboardEvent = true;
        var hadFocusVisibleRecently = false;
        var hadFocusVisibleRecentlyTimeout = null;

        var inputTypesAllowlist = {
          text: true,
          search: true,
          url: true,
          tel: true,
          email: true,
          password: true,
          number: true,
          date: true,
          month: true,
          week: true,
          time: true,
          datetime: true,
          'datetime-local': true
        };

        /**
         * Helper function for legacy browsers and iframes which sometimes focus
         * elements like document, body, and non-interactive SVG.
         * @param {Element} el
         */
        function isValidFocusTarget(el) {
          if (
            el &&
            el !== document &&
            el.nodeName !== 'HTML' &&
            el.nodeName !== 'BODY' &&
            'classList' in el &&
            'contains' in el.classList
          ) {
            return true;
          }
          return false;
        }

        /**
         * Computes whether the given element should automatically trigger the
         * `focus-visible` class being added, i.e. whether it should always match
         * `:focus-visible` when focused.
         * @param {Element} el
         * @return {boolean}
         */
        function focusTriggersKeyboardModality(el) {
          var type = el.type;
          var tagName = el.tagName;

          if (tagName === 'INPUT' && inputTypesAllowlist[type] && !el.readOnly) {
            return true;
          }

          if (tagName === 'TEXTAREA' && !el.readOnly) {
            return true;
          }

          if (el.isContentEditable) {
            return true;
          }

          return false;
        }

        /**
         * Add the `focus-visible` class to the given element if it was not added by
         * the author.
         * @param {Element} el
         */
        function addFocusVisibleClass(el) {
          if (el.classList.contains('focus-visible')) {
            return;
          }
          el.classList.add('focus-visible');
          el.setAttribute('data-focus-visible-added', '');
        }

        /**
         * Remove the `focus-visible` class from the given element if it was not
         * originally added by the author.
         * @param {Element} el
         */
        function removeFocusVisibleClass(el) {
          if (!el.hasAttribute('data-focus-visible-added')) {
            return;
          }
          el.classList.remove('focus-visible');
          el.removeAttribute('data-focus-visible-added');
        }

        /**
         * If the most recent user interaction was via the keyboard;
         * and the key press did not include a meta, alt/option, or control key;
         * then the modality is keyboard. Otherwise, the modality is not keyboard.
         * Apply `focus-visible` to any current active element and keep track
         * of our keyboard modality state with `hadKeyboardEvent`.
         * @param {KeyboardEvent} e
         */
        function onKeyDown(e) {
          if (e.metaKey || e.altKey || e.ctrlKey) {
            return;
          }

          if (isValidFocusTarget(scope.activeElement)) {
            addFocusVisibleClass(scope.activeElement);
          }

          hadKeyboardEvent = true;
        }

        /**
         * If at any point a user clicks with a pointing device, ensure that we change
         * the modality away from keyboard.
         * This avoids the situation where a user presses a key on an already focused
         * element, and then clicks on a different element, focusing it with a
         * pointing device, while we still think we're in keyboard modality.
         * @param {Event} e
         */
        function onPointerDown(e) {
          hadKeyboardEvent = false;
        }

        /**
         * On `focus`, add the `focus-visible` class to the target if:
         * - the target received focus as a result of keyboard navigation, or
         * - the event target is an element that will likely require interaction
         *   via the keyboard (e.g. a text box)
         * @param {Event} e
         */
        function onFocus(e) {
          // Prevent IE from focusing the document or HTML element.
          if (!isValidFocusTarget(e.target)) {
            return;
          }

          if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {
            addFocusVisibleClass(e.target);
          }
        }

        /**
         * On `blur`, remove the `focus-visible` class from the target.
         * @param {Event} e
         */
        function onBlur(e) {
          if (!isValidFocusTarget(e.target)) {
            return;
          }

          if (
            e.target.classList.contains('focus-visible') ||
            e.target.hasAttribute('data-focus-visible-added')
          ) {
            // To detect a tab/window switch, we look for a blur event followed
            // rapidly by a visibility change.
            // If we don't see a visibility change within 100ms, it's probably a
            // regular focus change.
            hadFocusVisibleRecently = true;
            window.clearTimeout(hadFocusVisibleRecentlyTimeout);
            hadFocusVisibleRecentlyTimeout = window.setTimeout(function() {
              hadFocusVisibleRecently = false;
            }, 100);
            removeFocusVisibleClass(e.target);
          }
        }

        /**
         * If the user changes tabs, keep track of whether or not the previously
         * focused element had .focus-visible.
         * @param {Event} e
         */
        function onVisibilityChange(e) {
          if (document.visibilityState === 'hidden') {
            // If the tab becomes active again, the browser will handle calling focus
            // on the element (Safari actually calls it twice).
            // If this tab change caused a blur on an element with focus-visible,
            // re-apply the class when the user switches back to the tab.
            if (hadFocusVisibleRecently) {
              hadKeyboardEvent = true;
            }
            addInitialPointerMoveListeners();
          }
        }

        /**
         * Add a group of listeners to detect usage of any pointing devices.
         * These listeners will be added when the polyfill first loads, and anytime
         * the window is blurred, so that they are active when the window regains
         * focus.
         */
        function addInitialPointerMoveListeners() {
          document.addEventListener('mousemove', onInitialPointerMove);
          document.addEventListener('mousedown', onInitialPointerMove);
          document.addEventListener('mouseup', onInitialPointerMove);
          document.addEventListener('pointermove', onInitialPointerMove);
          document.addEventListener('pointerdown', onInitialPointerMove);
          document.addEventListener('pointerup', onInitialPointerMove);
          document.addEventListener('touchmove', onInitialPointerMove);
          document.addEventListener('touchstart', onInitialPointerMove);
          document.addEventListener('touchend', onInitialPointerMove);
        }

        function removeInitialPointerMoveListeners() {
          document.removeEventListener('mousemove', onInitialPointerMove);
          document.removeEventListener('mousedown', onInitialPointerMove);
          document.removeEventListener('mouseup', onInitialPointerMove);
          document.removeEventListener('pointermove', onInitialPointerMove);
          document.removeEventListener('pointerdown', onInitialPointerMove);
          document.removeEventListener('pointerup', onInitialPointerMove);
          document.removeEventListener('touchmove', onInitialPointerMove);
          document.removeEventListener('touchstart', onInitialPointerMove);
          document.removeEventListener('touchend', onInitialPointerMove);
        }

        /**
         * When the polfyill first loads, assume the user is in keyboard modality.
         * If any event is received from a pointing device (e.g. mouse, pointer,
         * touch), turn off keyboard modality.
         * This accounts for situations where focus enters the page from the URL bar.
         * @param {Event} e
         */
        function onInitialPointerMove(e) {
          // Work around a Safari quirk that fires a mousemove on <html> whenever the
          // window blurs, even if you're tabbing out of the page. ¯\_(ツ)_/¯
          if (e.target.nodeName && e.target.nodeName.toLowerCase() === 'html') {
            return;
          }

          hadKeyboardEvent = false;
          removeInitialPointerMoveListeners();
        }

        // For some kinds of state, we are interested in changes at the global scope
        // only. For example, global pointer input, global key presses and global
        // visibility change should affect the state at every scope:
        document.addEventListener('keydown', onKeyDown, true);
        document.addEventListener('mousedown', onPointerDown, true);
        document.addEventListener('pointerdown', onPointerDown, true);
        document.addEventListener('touchstart', onPointerDown, true);
        document.addEventListener('visibilitychange', onVisibilityChange, true);

        addInitialPointerMoveListeners();

        // For focus and blur, we specifically care about state changes in the local
        // scope. This is because focus / blur events that originate from within a
        // shadow root are not re-dispatched from the host element if it was already
        // the active element in its own scope:
        scope.addEventListener('focus', onFocus, true);
        scope.addEventListener('blur', onBlur, true);

        // We detect that a node is a ShadowRoot by ensuring that it is a
        // DocumentFragment and also has a host property. This check covers native
        // implementation and polyfill implementation transparently. If we only cared
        // about the native implementation, we could just check if the scope was
        // an instance of a ShadowRoot.
        if (scope.nodeType === Node.DOCUMENT_FRAGMENT_NODE && scope.host) {
          // Since a ShadowRoot is a special kind of DocumentFragment, it does not
          // have a root element to add a class to. So, we add this attribute to the
          // host element instead:
          scope.host.setAttribute('data-js-focus-visible', '');
        } else if (scope.nodeType === Node.DOCUMENT_NODE) {
          document.documentElement.classList.add('js-focus-visible');
          document.documentElement.setAttribute('data-js-focus-visible', '');
        }
      }

      // It is important to wrap all references to global window and document in
      // these checks to support server-side rendering use cases
      // @see https://github.com/WICG/focus-visible/issues/199
      if (typeof window !== 'undefined' && typeof document !== 'undefined') {
        // Make the polyfill helper globally available. This can be used as a signal
        // to interested libraries that wish to coordinate with the polyfill for e.g.,
        // applying the polyfill to a shadow root:
        window.applyFocusVisiblePolyfill = applyFocusVisiblePolyfill;

        // Notify interested libraries of the polyfill's presence, in case the
        // polyfill was loaded lazily:
        var event;

        try {
          event = new CustomEvent('focus-visible-polyfill-ready');
        } catch (error) {
          // IE11 does not support using CustomEvent as a constructor directly:
          event = document.createEvent('CustomEvent');
          event.initCustomEvent('focus-visible-polyfill-ready', false, false, {});
        }

        window.dispatchEvent(event);
      }

      if (typeof document !== 'undefined') {
        // Apply the polyfill to the global document, so that no JavaScript
        // coordination is required to use the polyfill in the top-level document:
        applyFocusVisiblePolyfill(document);
      }

    })));
    });

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    let hasFocusVisible = true;
    try {
        document.body.querySelector(':focus-visible');
    }
    catch (error) {
        hasFocusVisible = false;
    }
    /**
     * This mixin function is designed to be applied to a class that inherits
     * from HTMLElement. It makes it easy for a custom element to coordinate with
     * the :focus-visible polyfill.
     *
     * NOTE(cdata): The code here was adapted from an example proposed with the
     * introduction of ShadowDOM support in the :focus-visible polyfill.
     *
     * @see https://github.com/WICG/focus-visible/pull/196
     * @param {Function} SuperClass The base class implementation to decorate with
     * implementation that coordinates with the :focus-visible polyfill
     */
    const FocusVisiblePolyfillMixin = (SuperClass) => {
        var _a;
        const coordinateWithPolyfill = (instance) => {
            // If there is no shadow root, there is no need to coordinate with
            // the polyfill. If we already coordinated with the polyfill, we can
            // skip subsequent invokcations:
            if (instance.shadowRoot == null ||
                instance.hasAttribute('data-js-focus-visible')) {
                // eslint-disable-next-line @typescript-eslint/no-empty-function
                return () => { };
            }
            // The polyfill might already be loaded. If so, we can apply it to
            // the shadow root immediately:
            if (self.applyFocusVisiblePolyfill) {
                self.applyFocusVisiblePolyfill(instance.shadowRoot);
                if (instance.manageAutoFocus) {
                    instance.manageAutoFocus();
                }
            }
            else {
                const coordinationHandler = () => {
                    if (self.applyFocusVisiblePolyfill && instance.shadowRoot) {
                        self.applyFocusVisiblePolyfill(instance.shadowRoot);
                    }
                    if (instance.manageAutoFocus) {
                        instance.manageAutoFocus();
                    }
                };
                // Otherwise, wait for the polyfill to be loaded lazily. It might
                // never be loaded, but if it is then we can apply it to the
                // shadow root at the appropriate time by waiting for the ready
                // event:
                self.addEventListener('focus-visible-polyfill-ready', coordinationHandler, { once: true });
                return () => {
                    self.removeEventListener('focus-visible-polyfill-ready', coordinationHandler);
                };
            }
            // eslint-disable-next-line @typescript-eslint/no-empty-function
            return () => { };
        };
        const $endPolyfillCoordination = Symbol('endPolyfillCoordination');
        // IE11 doesn't natively support custom elements or JavaScript class
        // syntax The mixin implementation assumes that the user will take the
        // appropriate steps to support both:
        class FocusVisibleCoordinator extends SuperClass {
            constructor() {
                super(...arguments);
                this[_a] = null;
            }
            // Attempt to coordinate with the polyfill when connected to the
            // document:
            connectedCallback() {
                super.connectedCallback && super.connectedCallback();
                if (!hasFocusVisible) {
                    requestAnimationFrame(() => {
                        if (this[$endPolyfillCoordination] == null) {
                            this[$endPolyfillCoordination] = coordinateWithPolyfill(this);
                        }
                    });
                }
            }
            disconnectedCallback() {
                super.disconnectedCallback && super.disconnectedCallback();
                // It's important to remove the polyfill event listener when we
                // disconnect, otherwise we will leak the whole element via window:
                if (!hasFocusVisible) {
                    requestAnimationFrame(() => {
                        if (this[$endPolyfillCoordination] != null) {
                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                            this[$endPolyfillCoordination]();
                            this[$endPolyfillCoordination] = null;
                        }
                    });
                }
            }
        }
        _a = $endPolyfillCoordination;
        return FocusVisibleCoordinator;
    };

    /**
     * Focusable base class handles tabindex setting into shadowed elements automatically.
     *
     * This implementation is based heavily on the aybolit delegate-focus-mixin at
     * https://github.com/web-padawan/aybolit/blob/master/packages/core/src/mixins/delegate-focus-mixin.js
     */
    class Focusable extends FocusVisiblePolyfillMixin(SpectrumElement) {
        constructor() {
            super(...arguments);
            /**
             * Disable this control. It will not receive focus or events
             */
            this.disabled = false;
            /**
             * When this control is rendered, focus it automatically
             * @private
             */
            this.autofocus = false;
            this._tabIndex = 0;
            this.manipulatingTabindex = false;
        }
        /**
         * The tab index to apply to this control. See general documentation about
         * the tabindex HTML property
         *
         * @private
         */
        get tabIndex() {
            if (this.focusElement === this) {
                const tabindex = this.hasAttribute('tabindex')
                    ? Number(this.getAttribute('tabindex'))
                    : NaN;
                return !isNaN(tabindex) ? tabindex : -1;
            }
            const tabIndexAttribute = parseFloat(this.hasAttribute('tabindex')
                ? this.getAttribute('tabindex') || '0'
                : '0');
            // When `disabled` tabindex is -1.
            // When host tabindex -1, use that as the cache.
            if (this.disabled || tabIndexAttribute < 0) {
                return -1;
            }
            // When `focusElement` isn't available yet,
            // use host tabindex as the cache.
            if (!this.focusElement) {
                return tabIndexAttribute;
            }
            // All other times, use the tabindex of `focusElement`
            // as the cache for this value.
            return this.focusElement.tabIndex;
        }
        set tabIndex(tabIndex) {
            // Flipping `manipulatingTabindex` to true before a change
            // allows for that change NOT to effect the cached value of tabindex
            if (this.manipulatingTabindex) {
                this.manipulatingTabindex = false;
                return;
            }
            if (this.focusElement === this) {
                if (tabIndex !== this.tabIndex) {
                    this._tabIndex = tabIndex;
                    const tabindex = this.disabled ? '-1' : '' + tabIndex;
                    this.setAttribute('tabindex', tabindex);
                }
                return;
            }
            // All code paths are about to address the host tabindex without side effect.
            this.manipulatingTabindex = true;
            if (tabIndex === -1 || this.disabled) {
                // Do not cange the tabindex of `focusElement` as it is the "old" value cache.
                // Make element NOT focusable.
                this.setAttribute('tabindex', '-1');
                this.removeAttribute('focusable');
                if (tabIndex !== -1) {
                    // Cache all NON-`-1` values on the `focusElement`.
                    this.manageFocusElementTabindex(tabIndex);
                }
                return;
            }
            this.setAttribute('focusable', '');
            if (this.hasAttribute('tabindex')) {
                this.removeAttribute('tabindex');
            }
            else {
                // You can't remove an attribute that isn't there,
                // manually end the `manipulatingTabindex` guard.
                this.manipulatingTabindex = false;
            }
            this.manageFocusElementTabindex(tabIndex);
        }
        async manageFocusElementTabindex(tabIndex) {
            if (!this.focusElement) {
                // allow setting these values to be async when needed.
                await this.updateComplete;
            }
            if (tabIndex === null) {
                this.focusElement.removeAttribute('tabindex');
            }
            else {
                this.focusElement.tabIndex = tabIndex;
            }
        }
        /**
         * @private
         */
        get focusElement() {
            throw new Error('Must implement focusElement getter!');
        }
        focus() {
            if (this.disabled || !this.focusElement) {
                return;
            }
            if (this.focusElement !== this) {
                this.focusElement.focus();
            }
            else {
                HTMLElement.prototype.focus.apply(this);
            }
        }
        blur() {
            if (this.focusElement !== this) {
                this.focusElement.blur();
            }
            else {
                HTMLElement.prototype.blur.apply(this);
            }
        }
        click() {
            if (this.disabled) {
                return;
            }
            if (this.focusElement !== this) {
                this.focusElement.click();
            }
            else {
                HTMLElement.prototype.click.apply(this);
            }
        }
        manageAutoFocus() {
            if (this.autofocus) {
                /**
                 * Trick :focus-visible polyfill into thinking keyboard based focus
                 *
                 * @private
                 **/
                this.dispatchEvent(new KeyboardEvent('keydown', {
                    code: 'Tab',
                }));
                this.focusElement.focus();
            }
        }
        firstUpdated(changes) {
            super.firstUpdated(changes);
            this.manageAutoFocus();
            if (!this.hasAttribute('tabindex') ||
                this.getAttribute('tabindex') !== '-1') {
                this.setAttribute('focusable', '');
            }
        }
        update(changedProperties) {
            if (changedProperties.has('disabled')) {
                this.handleDisabledChanged(this.disabled, changedProperties.get('disabled'));
            }
            super.update(changedProperties);
        }
        updated(changedProperties) {
            super.updated(changedProperties);
            if (changedProperties.has('disabled') && this.disabled) {
                this.blur();
            }
        }
        async handleDisabledChanged(disabled, oldDisabled) {
            const canSetDisabled = () => this.focusElement !== this &&
                typeof this.focusElement.disabled !== 'undefined';
            if (disabled) {
                this.manipulatingTabindex = true;
                this.setAttribute('tabindex', '-1');
                await this.updateComplete;
                if (canSetDisabled()) {
                    this.focusElement.disabled = true;
                }
                else {
                    this.setAttribute('aria-disabled', 'true');
                }
            }
            else if (oldDisabled) {
                this.manipulatingTabindex = true;
                if (this.focusElement === this) {
                    this.setAttribute('tabindex', '' + this._tabIndex);
                }
                else {
                    this.removeAttribute('tabindex');
                }
                await this.updateComplete;
                if (canSetDisabled()) {
                    this.focusElement.disabled = false;
                }
                else {
                    this.removeAttribute('aria-disabled');
                }
            }
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Focusable.prototype, "disabled", void 0);
    __decorate([
        property({ type: Boolean })
    ], Focusable.prototype, "autofocus", void 0);
    __decorate([
        property({ type: Number })
    ], Focusable.prototype, "tabIndex", null);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const getActiveElement = (el) => {
        return el.getRootNode().activeElement;
    };

    function LikeAnchor(constructor) {
        class LikeAnchorElement extends constructor {
            renderAnchor({ id, className, 
            // prettier-ignore
            anchorContent = html `<slot></slot>` }) {
                // prettier-ignore
                return html `<a
                    id=${id}
                    class=${ifDefined(className)}
                    href=${ifDefined(this.href)}
                    download=${ifDefined(this.download)}
                    target=${ifDefined(this.target)}
                    aria-label=${ifDefined(this.label)}
                    rel=${ifDefined(this.rel)}
                >${anchorContent}</a>`;
            }
        }
        __decorate([
            property({ reflect: true })
        ], LikeAnchorElement.prototype, "download", void 0);
        __decorate([
            property()
        ], LikeAnchorElement.prototype, "label", void 0);
        __decorate([
            property({ reflect: true })
        ], LikeAnchorElement.prototype, "href", void 0);
        __decorate([
            property({ reflect: true })
        ], LikeAnchorElement.prototype, "target", void 0);
        __decorate([
            property({ reflect: true })
        ], LikeAnchorElement.prototype, "rel", void 0);
        return LikeAnchorElement;
    }

    const slotElementObserver$1 = Symbol('slotElementObserver');
    const startObserving$1 = Symbol('startObserving');
    const slotContentIsPresent = Symbol('slotContentIsPresent');
    function ObserveSlotPresence(constructor, lightDomSelector) {
        var _a;
        const lightDomSelectors = Array.isArray(lightDomSelector)
            ? lightDomSelector
            : [lightDomSelector];
        class SlotPresenceObservingElement extends constructor {
            constructor() {
                super(...arguments);
                this[_a] = new Map();
                this.managePresenceObservedSlot = () => {
                    lightDomSelectors.forEach((selector) => {
                        this[slotContentIsPresent].set(selector, !!this.querySelector(selector));
                    });
                    this.requestUpdate();
                };
            }
            /**
             *  @private
             */
            get slotContentIsPresent() {
                if (lightDomSelectors.length === 1) {
                    return (this[slotContentIsPresent].get(lightDomSelectors[0]) ||
                        false);
                }
                else {
                    throw new Error('Multiple selectors provided to `ObserveSlotPresence` use `getSlotContentPresence(selector: string)` instead.');
                }
            }
            getSlotContentPresence(selector) {
                if (this[slotContentIsPresent].has(selector)) {
                    return this[slotContentIsPresent].get(selector) || false;
                }
                throw new Error(`The provided selector \`\` is not being observed.`);
            }
            [(_a = slotContentIsPresent, startObserving$1)]() {
                const config = { childList: true, subtree: true };
                if (!this[slotElementObserver$1]) {
                    this[slotElementObserver$1] = new MutationObserver(this.managePresenceObservedSlot);
                }
                this[slotElementObserver$1].observe(this, config);
                this.managePresenceObservedSlot();
            }
            connectedCallback() {
                super.connectedCallback();
                this[startObserving$1]();
            }
            disconnectedCallback() {
                this[slotElementObserver$1].disconnect();
                super.disconnectedCallback();
            }
        }
        return SlotPresenceObservingElement;
    }

    const slotElementObserver = Symbol('slotElementObserver');
    const assignedNodesList = Symbol('assignedNodes');
    const startObserving = Symbol('startObserving');
    function ObserveSlotText(constructor, slotSelector) {
        var _a;
        class SlotTextObservingElement extends constructor {
            constructor() {
                super(...arguments);
                this.slotHasContent = false;
            }
            manageTextObservedSlot() {
                if (!this[assignedNodesList])
                    return;
                const assignedNodes = [...this[assignedNodesList]].filter((node) => {
                    if (node.tagName) {
                        return true;
                    }
                    return node.textContent ? node.textContent.trim() : false;
                });
                this.slotHasContent = assignedNodes.length > 0;
            }
            firstUpdated(changedProperties) {
                super.firstUpdated(changedProperties);
                this.manageTextObservedSlot();
            }
            [(_a = assignedNodesList, startObserving)]() {
                const config = { characterData: true, subtree: true };
                if (!this[slotElementObserver]) {
                    const callback = (mutationsList) => {
                        for (const mutation of mutationsList) {
                            if (mutation.type === 'characterData') {
                                this.manageTextObservedSlot();
                            }
                        }
                    };
                    this[slotElementObserver] = new MutationObserver(callback);
                }
                this[slotElementObserver].observe(this, config);
            }
            connectedCallback() {
                super.connectedCallback();
                this[startObserving]();
            }
            disconnectedCallback() {
                if (this[slotElementObserver]) {
                    this[slotElementObserver].disconnect();
                }
                super.disconnectedCallback();
            }
        }
        __decorate([
            property({ type: Boolean, attribute: false })
        ], SlotTextObservingElement.prototype, "slotHasContent", void 0);
        __decorate([
            queryAssignedNodes(slotSelector, true)
        ], SlotTextObservingElement.prototype, _a, void 0);
        return SlotTextObservingElement;
    }

    function restoreChildren(placeholderItems, srcElements, cleanupCallbacks = []) {
        for (let index = 0; index < srcElements.length; ++index) {
            const srcElement = srcElements[index];
            const placeholderItem = placeholderItems[index];
            const parentElement = placeholderItem.parentElement || placeholderItem.getRootNode();
            if (cleanupCallbacks[index]) {
                cleanupCallbacks[index](srcElement);
            }
            parentElement.replaceChild(srcElement, placeholderItem);
            delete placeholderItems[index];
        }
        return srcElements;
    }
    const reparentChildren = (srcElements, newParent, prepareCallback) => {
        let placeholderItems = [];
        let cleanupCallbacks = [];
        for (let index = 0; index < srcElements.length; ++index) {
            const placeholderItem = document.createComment('placeholder for reparented element');
            placeholderItems.push(placeholderItem);
            const srcElement = srcElements[index];
            if (prepareCallback) {
                cleanupCallbacks.push(prepareCallback(srcElement) || ((_el) => { }));
            }
            const parentElement = srcElement.parentElement || srcElement.getRootNode();
            parentElement.replaceChild(placeholderItem, srcElement);
            newParent.append(srcElement);
        }
        return function () {
            return restoreChildren(placeholderItems, srcElements, cleanupCallbacks);
        };
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @element sp-accordion
     */
    class Accordion extends Focusable {
        constructor() {
            super(...arguments);
            /**
             * Allows multiple accordion items to be opened at the same time
             */
            this.allowMultiple = false;
        }
        static get styles() {
            return [styles$14];
        }
        get items() {
            return [...(this.defaultNodes || [])].filter((node) => typeof node.tagName !== 'undefined');
        }
        focus() {
            if (this.focusElement === this) {
                return;
            }
            super.focus();
        }
        /**
         * @private
         */
        get focusElement() {
            const items = this.items;
            if (items && !items.length) {
                return this;
            }
            let index = 0;
            while (index < items.length && items[index] && items[index].disabled) {
                index += 1;
            }
            if (items[index]) {
                return items[index];
            }
            /* c8 ignore next */
            return this;
        }
        startListeningToKeyboard() {
            const items = this.items;
            /* c8 ignore next 3 */
            if (items && !items.length) {
                return;
            }
            this.addEventListener('keydown', this.handleKeydown);
        }
        stopListeningToKeyboard() {
            this.removeEventListener('keydown', this.handleKeydown);
        }
        handleKeydown(event) {
            const { code } = event;
            /* c8 ignore next 3 */
            if (code !== 'ArrowDown' && code !== 'ArrowUp') {
                return;
            }
            event.preventDefault();
            const direction = code === 'ArrowDown' ? 1 : -1;
            this.focusItemByOffset(direction);
        }
        focusItemByOffset(direction) {
            const items = this.items;
            const focused = items.indexOf(getActiveElement(this));
            let next = focused;
            let availableItems = items.length;
            // cycle through the available items in the directions of the offset to find the next non-disabled item
            while ((items[next].disabled || next === focused) && availableItems) {
                availableItems -= 1;
                next = (items.length + next + direction) % items.length;
            }
            // if there are no non-disabled items, skip the work to focus a child
            if (items[next].disabled || next === focused) {
                return;
            }
            items[next].focus();
        }
        onToggle(event) {
            const target = event.target;
            const items = [...this.items];
            /* c8 ignore next 3 */
            if (items && !items.length) {
                return;
            }
            if (!this.allowMultiple && !event.defaultPrevented) {
                items.forEach((item) => {
                    if (item.open && item !== target) {
                        item.open = false;
                    }
                });
            }
        }
        render() {
            return html `
            <slot></slot>
        `;
        }
        firstUpdated(changed) {
            super.firstUpdated(changed);
            this.addEventListener('focusin', this.startListeningToKeyboard);
            this.addEventListener('focusout', this.stopListeningToKeyboard);
            this.addEventListener('sp-accordion-item-toggle', this.onToggle);
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true, attribute: 'allow-multiple' })
    ], Accordion.prototype, "allowMultiple", void 0);
    __decorate([
        queryAssignedNodes()
    ], Accordion.prototype, "defaultNodes", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-accordion', Accordion);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$13 = css `
:host{display:inline-block;color:inherit;fill:currentColor;pointer-events:none}:host(:not(:root)){overflow:hidden}:host{--spectrum-icon-size-s:var(--spectrum-alias-workflow-icon-size-s,var(--spectrum-global-dimension-size-200));--spectrum-icon-size-m:var(--spectrum-alias-workflow-icon-size-m,var(--spectrum-global-dimension-size-225));--spectrum-icon-size-l:var(--spectrum-alias-workflow-icon-size-l);--spectrum-icon-size-xl:var(--spectrum-alias-workflow-icon-size-xl,var(--spectrum-global-dimension-size-275));--spectrum-icon-size-xxl:var(--spectrum-global-dimension-size-400)}:host([size=s]){height:var(--spectrum-icon-size-s);width:var(--spectrum-icon-size-s)}:host([size=m]){height:var(--spectrum-icon-size-m);width:var(--spectrum-icon-size-m)}:host([size=l]){height:var(--spectrum-icon-size-l);width:var(--spectrum-icon-size-l)}:host([size=xl]){height:var(--spectrum-icon-size-xl);width:var(--spectrum-icon-size-xl)}:host([size=xxl]){height:var(--spectrum-icon-size-xxl);width:var(--spectrum-icon-size-xxl)}:host{height:var(--spectrum-icon-tshirt-size-height,var(--spectrum-alias-workflow-icon-size,var(--spectrum-global-dimension-size-225)));width:var(--spectrum-icon-tshirt-size-width,var(--spectrum-alias-workflow-icon-size,var(--spectrum-global-dimension-size-225)))}#container{height:100%}::slotted(*),img,svg{height:100%;width:100%;vertical-align:top}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class IconBase extends SpectrumElement {
        static get styles() {
            return [styles$13];
        }
        render() {
            return html `
            <slot></slot>
        `;
        }
    }
    __decorate([
        property()
    ], IconBase.prototype, "label", void 0);
    __decorate([
        property({ reflect: true })
    ], IconBase.prototype, "size", void 0);

    class IconsetRegistry {
        constructor() {
            this.iconsetMap = new Map();
        }
        // singleton getter
        static getInstance() {
            if (!IconsetRegistry.instance) {
                IconsetRegistry.instance = new IconsetRegistry();
            }
            return IconsetRegistry.instance;
        }
        addIconset(name, iconset) {
            this.iconsetMap.set(name, iconset);
            // dispatch a sp-iconset-added event on window to let everyone know we have a new iconset
            // note we're using window here for efficiency since we don't need to bubble through the dom since everyone
            // will know where to look for this event
            const event = new CustomEvent('sp-iconset-added', {
                bubbles: true,
                composed: true,
                detail: { name, iconset },
            });
            // we're dispatching this event in the next tick to allow the iconset to finish any slotchange or other event
            // listeners caused by connection to the dom and first render to complete, this way any icons listening for
            // this iconset will be able to access the completed iconset
            setTimeout(() => window.dispatchEvent(event), 0);
        }
        removeIconset(name) {
            this.iconsetMap.delete(name);
            // dispatch a sp-iconset-removed event on window to let everyone know we have a new iconset
            // note we're using window here for efficiency since we don't need to bubble through the dom since everyone
            // will know where to look for this event
            const event = new CustomEvent('sp-iconset-removed', {
                bubbles: true,
                composed: true,
                detail: { name },
            });
            // we're dispatching this event in the next tick To keep the event model consistent with the added event
            setTimeout(() => window.dispatchEvent(event), 0);
        }
        getIconset(name) {
            return this.iconsetMap.get(name);
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class Icon extends IconBase {
        constructor() {
            super(...arguments);
            this.iconsetListener = (event) => {
                if (!this.name) {
                    return;
                }
                // parse the icon name to get iconset name
                const icon = this.parseIcon(this.name);
                if (event.detail.name === icon.iconset) {
                    this.updateIconPromise = this.updateIcon();
                }
            };
        }
        connectedCallback() {
            super.connectedCallback();
            window.addEventListener('sp-iconset-added', this.iconsetListener);
        }
        disconnectedCallback() {
            super.disconnectedCallback();
            window.removeEventListener('sp-iconset-added', this.iconsetListener);
        }
        firstUpdated() {
            this.updateIconPromise = this.updateIcon();
        }
        attributeChangedCallback(name, old, value) {
            super.attributeChangedCallback(name, old, value);
            this.updateIconPromise = this.updateIcon(); // any of our attributes change, update our icon
        }
        render() {
            if (this.name) {
                return html `
                <div id="container"></div>
            `;
            }
            else if (this.src) {
                return html `
                <img src="${this.src}" alt=${ifDefined(this.label)} />
            `;
            }
            return super.render();
        }
        async updateIcon() {
            if (!this.name) {
                return Promise.resolve();
            }
            // parse the icon name to get iconset name
            const icon = this.parseIcon(this.name);
            // try to retrieve the iconset
            const iconset = IconsetRegistry.getInstance().getIconset(icon.iconset);
            if (!iconset) {
                // we can stop here as there's nothing to be done till we get the iconset
                return Promise.resolve();
            }
            if (!this.iconContainer) {
                return Promise.resolve();
            }
            this.iconContainer.innerHTML = '';
            return iconset.applyIconToElement(this.iconContainer, icon.icon, this.size || '', this.label ? this.label : '');
        }
        parseIcon(icon) {
            const iconParts = icon.split(':');
            let iconsetName = 'default';
            let iconName = icon;
            if (iconParts.length > 1) {
                iconsetName = iconParts[0];
                iconName = iconParts[1];
            }
            return { iconset: iconsetName, icon: iconName };
        }
        async _getUpdateComplete() {
            await super._getUpdateComplete();
            await this.updateIconPromise;
        }
    }
    __decorate([
        property()
    ], Icon.prototype, "src", void 0);
    __decorate([
        property()
    ], Icon.prototype, "name", void 0);
    __decorate([
        query('#container')
    ], Icon.prototype, "iconContainer", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    let customTemplateLiteralTag$1;
    const tag$1 = function (strings, ...values) {
        if (customTemplateLiteralTag$1) {
            return customTemplateLiteralTag$1(strings, ...values);
        }
        return values.reduce((acc, v, idx) => acc + v + strings[idx + 1], strings[0]);
    };
    const setCustomTemplateLiteralTag$1 = (tag) => {
        customTemplateLiteralTag$1 = tag;
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const Chevron100Icon = () => {
        return tag$1 `<svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 10 10"
    aria-hidden="true"
    fill="currentColor"
  >
    <path
      d="M3 9.95a.875.875 0 01-.615-1.498L5.88 5 2.385 1.547A.875.875 0 013.615.302L7.74 4.377a.876.876 0 010 1.246L3.615 9.698A.872.872 0 013 9.95z"
    />
  </svg>`;
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class IconChevron100 extends IconBase {
        render() {
            setCustomTemplateLiteralTag$1(html);
            return Chevron100Icon();
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-icon-chevron100', IconChevron100);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$12 = css `
.spectrum-UIIcon-ChevronDown75,.spectrum-UIIcon-ChevronDown100,.spectrum-UIIcon-ChevronDown200,.spectrum-UIIcon-ChevronDown300,.spectrum-UIIcon-ChevronDown400,.spectrum-UIIcon-ChevronDown500{transform:rotate(90deg)}.spectrum-UIIcon-ChevronLeft75,.spectrum-UIIcon-ChevronLeft100,.spectrum-UIIcon-ChevronLeft200,.spectrum-UIIcon-ChevronLeft300,.spectrum-UIIcon-ChevronLeft400,.spectrum-UIIcon-ChevronLeft500{transform:rotate(180deg)}.spectrum-UIIcon-ChevronUp75,.spectrum-UIIcon-ChevronUp100,.spectrum-UIIcon-ChevronUp200,.spectrum-UIIcon-ChevronUp300,.spectrum-UIIcon-ChevronUp400,.spectrum-UIIcon-ChevronUp500{transform:rotate(270deg)}.spectrum-UIIcon-ChevronDown75,.spectrum-UIIcon-ChevronLeft75,.spectrum-UIIcon-ChevronRight75,.spectrum-UIIcon-ChevronUp75{width:var(--spectrum-alias-ui-icon-chevron-size-75);height:var(--spectrum-alias-ui-icon-chevron-size-75)}.spectrum-UIIcon-ChevronDown100,.spectrum-UIIcon-ChevronLeft100,.spectrum-UIIcon-ChevronRight100,.spectrum-UIIcon-ChevronUp100{width:var(--spectrum-alias-ui-icon-chevron-size-100);height:var(--spectrum-alias-ui-icon-chevron-size-100)}.spectrum-UIIcon-ChevronDown200,.spectrum-UIIcon-ChevronLeft200,.spectrum-UIIcon-ChevronRight200,.spectrum-UIIcon-ChevronUp200{width:var(--spectrum-alias-ui-icon-chevron-size-200);height:var(--spectrum-alias-ui-icon-chevron-size-200)}.spectrum-UIIcon-ChevronDown300,.spectrum-UIIcon-ChevronLeft300,.spectrum-UIIcon-ChevronRight300,.spectrum-UIIcon-ChevronUp300{width:var(--spectrum-alias-ui-icon-chevron-size-300);height:var(--spectrum-alias-ui-icon-chevron-size-300)}.spectrum-UIIcon-ChevronDown400,.spectrum-UIIcon-ChevronLeft400,.spectrum-UIIcon-ChevronRight400,.spectrum-UIIcon-ChevronUp400{width:var(--spectrum-alias-ui-icon-chevron-size-400);height:var(--spectrum-alias-ui-icon-chevron-size-400)}.spectrum-UIIcon-ChevronDown500,.spectrum-UIIcon-ChevronLeft500,.spectrum-UIIcon-ChevronRight500,.spectrum-UIIcon-ChevronUp500{width:var(--spectrum-alias-ui-icon-chevron-size-500);height:var(--spectrum-alias-ui-icon-chevron-size-500)}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$11 = css `
:host([dir=ltr]) #indicator{left:var(--spectrum-accordion-item-padding-x,var(--spectrum-global-dimension-size-225))}:host([dir=rtl]) #indicator{right:var(--spectrum-accordion-item-padding-x,var(--spectrum-global-dimension-size-225));transform:matrix(-1,0,0,1,0,0)}#indicator{display:block;position:absolute;transition:transform ease var(--spectrum-accordion-animation-duration)}:host{z-index:inherit;position:relative;display:list-item;margin:0;border-bottom:var(--spectrum-accordion-item-border-size,var(--spectrum-alias-border-size-thin)) solid transparent}:host(:first-of-type){border-top:var(--spectrum-accordion-item-border-size,var(--spectrum-alias-border-size-thin)) solid transparent}#heading{margin:0;box-sizing:border-box}:host([dir=ltr]) #header{padding-left:calc(var(--spectrum-accordion-item-padding-x,
var(--spectrum-global-dimension-size-225)) + var(--spectrum-accordion-icon-width,
var(--spectrum-global-dimension-size-75)) + var(--spectrum-accordion-icon-gap,
var(--spectrum-global-dimension-size-100)) + var(--spectrum-accordion-item-border-left-size-key-focus,
var(--spectrum-alias-border-size-thick)))}:host([dir=rtl]) #header{padding-right:calc(var(--spectrum-accordion-item-padding-x,
var(--spectrum-global-dimension-size-225)) + var(--spectrum-accordion-icon-width,
var(--spectrum-global-dimension-size-75)) + var(--spectrum-accordion-icon-gap,
var(--spectrum-global-dimension-size-100)) + var(--spectrum-accordion-item-border-left-size-key-focus,
var(--spectrum-alias-border-size-thick)))}:host([dir=ltr]) #header{padding-right:var(--spectrum-accordion-item-padding-x,var(--spectrum-global-dimension-size-225))}:host([dir=rtl]) #header{padding-left:var(--spectrum-accordion-item-padding-x,var(--spectrum-global-dimension-size-225))}:host([dir=ltr]) #header{text-align:left}:host([dir=rtl]) #header{text-align:right}#header{position:relative;display:flex;align-items:center;justify-content:flex-start;box-sizing:border-box;padding-top:var(--spectrum-accordion-item-title-padding-y);padding-bottom:var(--spectrum-accordion-item-title-padding-y);margin:0;font-size:var(--spectrum-accordion-item-title-text-size,var(--spectrum-global-dimension-font-size-50));line-height:var(--spectrum-accordion-item-line-height);text-transform:uppercase;letter-spacing:var(--spectrum-accordion-item-title-tracking-actual);text-overflow:ellipsis;cursor:pointer;font-weight:500;-webkit-appearance:none;appearance:none;background-color:inherit;border:0;font-family:inherit;width:100%}#header:focus{outline:none}:host([dir=ltr]) #header:focus:after{left:0}:host([dir=rtl]) #header:focus:after{right:0}#header:focus:after{content:"";position:absolute;top:calc(-1*var(--spectrum-accordion-item-border-size, var(--spectrum-alias-border-size-thin)));bottom:calc(-1*var(--spectrum-accordion-item-border-size, var(--spectrum-alias-border-size-thin)));width:var(--spectrum-accordion-item-border-left-size-key-focus,var(--spectrum-alias-border-size-thick))}#content{padding-top:0;padding-bottom:var(--spectrum-accordion-item-content-padding,var(--spectrum-global-dimension-size-200));padding-left:var(--spectrum-accordion-item-content-padding,var(--spectrum-global-dimension-size-200));padding-right:var(--spectrum-accordion-item-content-padding,var(--spectrum-global-dimension-size-200));display:none}:host([dir=ltr][open])>#heading>#indicator{transform:rotate(90deg)}:host([dir=rtl][open])>#heading>#indicator{transform:matrix(-1,0,0,1,0,0) rotate(90deg)}:host([dir=ltr][open])>#indicator{transform:rotate(90deg)}:host([dir=rtl][open])>#indicator{transform:matrix(-1,0,0,1,0,0) rotate(90deg)}:host([open])>#content{display:block}:host([disabled]) #header{cursor:default}:host{border-color:var(--spectrum-accordion-border-color,var(--spectrum-global-color-gray-300))}#indicator{color:var(--spectrum-accordion-icon-color,var(--spectrum-global-color-gray-600))}#header{color:var(--spectrum-accordion-text-color,var(--spectrum-global-color-gray-700))}#header:hover{color:var(--spectrum-accordion-text-color-hover,var(--spectrum-global-color-gray-900));background-color:var(--spectrum-accordion-background-color-hover,var(--spectrum-global-color-gray-200))}#header:hover+#indicator{color:var(--spectrum-accordion-icon-color-hover,var(--spectrum-global-color-gray-800))}#header.focus-visible:after,#header.focus-visible:after{background-color:var(--spectrum-accordion-item-border-left-color-key-focus,var(--spectrum-alias-border-color-focus))}#header.focus-visible:after,#header:focus-visible:after{background-color:var(--spectrum-accordion-item-border-left-color-key-focus,var(--spectrum-alias-border-color-focus))}:host([open]) #header:hover{background-color:initial}:host([disabled]) #header,:host([disabled]) #header.focus-visible,:host([disabled]) #header.focus-visible,:host([disabled]) #header:hover{color:var(--spectrum-accordion-text-color-disabled,var(--spectrum-global-color-gray-500));background-color:initial}:host([disabled]) #header,:host([disabled]) #header.focus-visible,:host([disabled]) #header:focus-visible,:host([disabled]) #header:hover{color:var(--spectrum-accordion-text-color-disabled,var(--spectrum-global-color-gray-500));background-color:initial}:host([disabled]) #header+#indicator{color:var(--spectrum-accordion-icon-color-disabled,var(--spectrum-global-color-gray-400))}:host{--spectrum-accordion-item-header-height:46px}#indicator{top:calc(50% - var(--spectrum-accordion-icon-height,
var(--spectrum-global-dimension-size-125))/2)}#heading{height:auto;position:relative}#header{min-height:calc(100% - var(--spectrum-accordion-item-border-size,
var(--spectrum-alias-border-size-thin)))}:host([open])>#header:after{height:calc(100% - var(--spectrum-accordion-item-border-size,
var(--spectrum-alias-border-size-thin)))}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @element sp-accordion
     * @slot - The content of the item that is hidden when the item is not open
     */
    class AccordionItem extends Focusable {
        constructor() {
            super();
            this.open = false;
            this.label = '';
            this.disabled = false;
            this.addEventListener('keydown', this.onKeyDown);
        }
        static get styles() {
            return [styles$11, styles$12];
        }
        get focusElement() {
            return this.shadowRoot.querySelector('#header');
        }
        onKeyDown(event) {
            /* c8 ignore next 3 */
            if (this.disabled) {
                return;
            }
            if (event.code === 'Enter' || event.code === 'Space') {
                event.preventDefault();
                this.toggle();
            }
        }
        onClick() {
            /* c8 ignore next 3 */
            if (this.disabled) {
                return;
            }
            this.toggle();
        }
        toggle() {
            this.open = !this.open;
            const applyDefault = this.dispatchEvent(new CustomEvent('sp-accordion-item-toggle', {
                bubbles: true,
                composed: true,
                cancelable: true,
            }));
            if (!applyDefault) {
                this.open = !this.open;
            }
        }
        render() {
            return html `
            <h3 id="heading">
                <button
                    id="header"
                    @click=${this.onClick}
                    aria-expanded=${this.open}
                    aria-controls="content"
                >
                    ${this.label}
                </button>
                <sp-icon-chevron100
                    id="indicator"
                    class="spectrum-UIIcon-ChevronRight100"
                ></sp-icon-chevron100>
            </h3>
            <div id="content" role="region" aria-labelledby="header">
                <slot></slot>
            </div>
        `;
        }
        updated(changes) {
            super.updated(changes);
            if (changes.has('disabled')) {
                if (this.disabled) {
                    this.setAttribute('aria-disabled', 'true');
                }
                else {
                    this.removeAttribute('aria-disabled');
                }
            }
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], AccordionItem.prototype, "open", void 0);
    __decorate([
        property({ type: String, reflect: true })
    ], AccordionItem.prototype, "label", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], AccordionItem.prototype, "disabled", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-accordion-item', AccordionItem);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$10 = css `
:host{--spectrum-button-line-height:1.3;position:relative;box-sizing:border-box;align-items:center;justify-content:center;overflow:visible;margin:0;border-style:solid;text-transform:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;-webkit-appearance:button;transition:background var(--spectrum-global-animation-duration-100,.13s) ease-out,border-color var(--spectrum-global-animation-duration-100,.13s) ease-out,color var(--spectrum-global-animation-duration-100,.13s) ease-out,box-shadow var(--spectrum-global-animation-duration-100,.13s) ease-out;text-decoration:none;font-family:var(--spectrum-alias-body-text-font-family,var(--spectrum-global-font-family-base));line-height:var(--spectrum-button-line-height);user-select:none;-webkit-user-select:none;cursor:pointer}:host(:focus){outline:none}:host(::-moz-focus-inner){border:0;border-style:none;padding:0;margin-top:-2px;margin-bottom:-2px}:host(:disabled){cursor:default}:host:after{border-radius:calc(var(--spectrum-button-primary-border-radius) + var(--spectrum-alias-focus-ring-gap,
var(--spectrum-global-dimension-static-size-25)));content:"";display:block;position:absolute;left:0;right:0;bottom:0;top:0;margin:calc(var(--spectrum-alias-focus-ring-gap,
var(--spectrum-global-dimension-static-size-25))*-1);transition:opacity var(--spectrum-global-animation-duration-100,.13s) ease-out,margin var(--spectrum-global-animation-duration-100,.13s) ease-out}:host(.focus-visible):after,:host(.focus-visible):after{margin:calc(var(--spectrum-alias-focus-ring-gap,
var(--spectrum-global-dimension-static-size-25))*-2)}:host(.focus-visible):after,:host(:focus-visible):after{margin:calc(var(--spectrum-alias-focus-ring-gap,
var(--spectrum-global-dimension-static-size-25))*-2)}:host{display:inline-flex;vertical-align:top}:host([dir]){-webkit-appearance:none}:host([disabled]){pointer-events:none;cursor:auto}#button{position:absolute;top:0;right:0;bottom:0;left:0}:host:after{pointer-events:none}slot[name=icon]::slotted(:not(sp-icon)){fill:currentColor;stroke:currentColor;height:var(--spectrum-alias-workflow-icon-size-m,var(--spectrum-global-dimension-size-225));width:var(--spectrum-alias-workflow-icon-size-m,var(--spectrum-global-dimension-size-225))}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class ButtonBase extends LikeAnchor(ObserveSlotText(ObserveSlotPresence(Focusable, '[slot="icon"]'))) {
        constructor() {
            super();
            this.active = false;
            this.type = 'button';
            this.proxyFocus = this.proxyFocus.bind(this);
            this.addEventListener('click', this.handleClickCapture, {
                capture: true,
            });
        }
        static get styles() {
            return [styles$10];
        }
        get hasIcon() {
            return this.slotContentIsPresent;
        }
        get hasLabel() {
            return this.slotHasContent;
        }
        get focusElement() {
            return this;
        }
        get buttonContent() {
            const content = [
                html `
                <div id="label" ?hidden=${!this.hasLabel}>
                    <slot
                        id="slot"
                        @slotchange=${this.manageTextObservedSlot}
                    ></slot>
                </div>
            `,
            ];
            if (this.hasIcon) {
                content.unshift(html `
                <slot name="icon" ?icon-only=${!this.hasLabel}></slot>
            `);
            }
            return content;
        }
        click() {
            if (this.disabled) {
                return;
            }
            if (this.shouldProxyClick()) {
                return;
            }
            super.click();
        }
        handleClickCapture(event) {
            if (this.disabled) {
                event.preventDefault();
                event.stopImmediatePropagation();
                event.stopPropagation();
                return false;
            }
        }
        proxyFocus() {
            this.focus();
        }
        shouldProxyClick() {
            let handled = false;
            if (this.anchorElement) {
                this.anchorElement.click();
                handled = true;
            }
            else if (this.type !== 'button') {
                const proxy = document.createElement('button');
                proxy.type = this.type;
                this.insertAdjacentElement('afterend', proxy);
                proxy.click();
                proxy.remove();
                handled = true;
            }
            return handled;
        }
        renderAnchor() {
            return html `
            ${this.buttonContent}
            ${super.renderAnchor({
            id: 'button',
            className: 'button anchor hidden',
        })}
        `;
        }
        renderButton() {
            return html `
            ${this.buttonContent}
        `;
        }
        render() {
            return this.href && this.href.length > 0
                ? this.renderAnchor()
                : this.renderButton();
        }
        handleKeydown(event) {
            const { code } = event;
            switch (code) {
                case 'Space':
                    event.preventDefault();
                    if (typeof this.href === 'undefined') {
                        this.addEventListener('keyup', this.handleKeyup);
                        this.active = true;
                    }
                    break;
            }
        }
        handleKeypress(event) {
            const { code } = event;
            switch (code) {
                case 'Enter':
                    this.click();
                    break;
            }
        }
        handleKeyup(event) {
            const { code } = event;
            switch (code) {
                case 'Space':
                    this.removeEventListener('keyup', this.handleKeyup);
                    this.active = false;
                    this.click();
                    break;
            }
        }
        handleRemoveActive() {
            this.active = false;
        }
        handlePointerdown() {
            this.active = true;
        }
        manageAnchor() {
            if (this.href && this.href.length > 0) {
                this.removeAttribute('role');
                this.removeEventListener('click', this.shouldProxyClick);
            }
            else if (!this.hasAttribute('role')) {
                this.setAttribute('role', 'button');
                this.addEventListener('click', this.shouldProxyClick);
            }
        }
        firstUpdated(changed) {
            super.firstUpdated(changed);
            if (!this.hasAttribute('tabindex')) {
                this.tabIndex = 0;
            }
            this.manageAnchor();
            this.addEventListener('keydown', this.handleKeydown);
            this.addEventListener('keypress', this.handleKeypress);
            this.addEventListener('pointerdown', this.handlePointerdown);
        }
        updated(changed) {
            super.updated(changed);
            if (changed.has('href')) {
                this.manageAnchor();
            }
            if (changed.has('label')) {
                this.setAttribute('aria-label', this.label || '');
            }
            if (changed.has('active')) {
                if (this.active) {
                    this.addEventListener('focusout', this.handleRemoveActive);
                    this.addEventListener('pointerup', this.handleRemoveActive);
                    this.addEventListener('pointerleave', this.handleRemoveActive);
                }
                else {
                    this.removeEventListener('focusout', this.handleRemoveActive);
                    this.removeEventListener('pointerup', this.handleRemoveActive);
                    this.removeEventListener('pointerleave', this.handleRemoveActive);
                }
            }
            if (this.anchorElement) {
                this.anchorElement.addEventListener('focus', this.proxyFocus);
                this.anchorElement.tabIndex = -1;
            }
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ButtonBase.prototype, "active", void 0);
    __decorate([
        property({ type: String })
    ], ButtonBase.prototype, "type", void 0);
    __decorate([
        query('.anchor')
    ], ButtonBase.prototype, "anchorElement", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$$ = css `
::slotted([slot=icon]){max-height:100%;flex-shrink:0}#label{align-self:center;justify-self:center;text-align:center}#label:empty{display:none}:host([size=s]){--spectrum-button-primary-focus-ring-size-key-focus:var(--spectrum-button-primary-s-focus-ring-size-key-focus,var(--spectrum-alias-focus-ring-size));--spectrum-button-primary-text-font-weight:var(--spectrum-button-primary-s-text-font-weight,var(--spectrum-global-font-weight-bold));--spectrum-button-primary-text-line-height:var(--spectrum-button-primary-s-text-line-height,var(--spectrum-alias-component-text-line-height));--spectrum-button-primary-border-size:var(--spectrum-button-primary-s-border-size,var(--spectrum-alias-border-size-thick));--spectrum-button-primary-text-size:var(--spectrum-button-primary-s-text-size,var(--spectrum-alias-item-text-size-s));--spectrum-button-primary-icon-gap:var(--spectrum-button-primary-s-icon-gap,var(--spectrum-alias-item-workflow-icon-gap-s));--spectrum-button-primary-height:var(--spectrum-button-primary-s-height,var(--spectrum-alias-item-height-s));--spectrum-button-primary-padding-left:var(--spectrum-button-primary-s-padding-left,var(--spectrum-alias-item-rounded-workflow-padding-left-s));--spectrum-button-primary-border-radius:var(--spectrum-button-primary-s-border-radius,var(--spectrum-alias-item-rounded-border-radius-s));--spectrum-button-primary-min-width:var(--spectrum-button-primary-s-min-width,var(--spectrum-global-dimension-size-675));--spectrum-button-primary-textonly-padding-left:var(--spectrum-button-primary-s-textonly-padding-left,var(--spectrum-alias-item-rounded-padding-s));--spectrum-button-primary-textonly-padding-right:var(--spectrum-button-primary-s-textonly-padding-right,var(--spectrum-alias-item-rounded-padding-s));--spectrum-button-primary-text-padding-top:calc(var(--spectrum-button-primary-s-text-padding-top,
var(--spectrum-alias-item-text-padding-top-s)) - 3px)}:host([size=m]){--spectrum-button-primary-min-width:var(--spectrum-button-primary-m-min-width);--spectrum-button-primary-focus-ring-size-key-focus:var(--spectrum-button-primary-m-focus-ring-size-key-focus,var(--spectrum-alias-focus-ring-size));--spectrum-button-primary-text-font-weight:var(--spectrum-button-primary-m-text-font-weight,var(--spectrum-global-font-weight-bold));--spectrum-button-primary-text-line-height:var(--spectrum-button-primary-m-text-line-height,var(--spectrum-alias-component-text-line-height));--spectrum-button-primary-border-size:var(--spectrum-button-primary-m-border-size,var(--spectrum-alias-border-size-thick));--spectrum-button-primary-text-size:var(--spectrum-button-primary-m-text-size,var(--spectrum-alias-item-text-size-m));--spectrum-button-primary-text-padding-top:var(--spectrum-button-primary-m-text-padding-top,var(--spectrum-alias-item-text-padding-top-m));--spectrum-button-primary-height:var(--spectrum-button-primary-m-height,var(--spectrum-alias-item-height-m));--spectrum-button-primary-icon-gap:var(--spectrum-button-primary-m-icon-gap,var(--spectrum-alias-item-workflow-icon-gap-m));--spectrum-button-primary-padding-left:var(--spectrum-button-primary-m-padding-left,var(--spectrum-alias-item-rounded-workflow-padding-left-m));--spectrum-button-primary-border-radius:var(--spectrum-button-primary-m-border-radius,var(--spectrum-alias-item-rounded-border-radius-m));--spectrum-button-primary-textonly-padding-left:var(--spectrum-button-primary-m-textonly-padding-left,var(--spectrum-alias-item-rounded-padding-m));--spectrum-button-primary-textonly-padding-right:var(--spectrum-button-primary-m-textonly-padding-right,var(--spectrum-alias-item-rounded-padding-m))}:host([size=l]){--spectrum-button-primary-focus-ring-size-key-focus:var(--spectrum-button-primary-l-focus-ring-size-key-focus,var(--spectrum-alias-focus-ring-size));--spectrum-button-primary-text-font-weight:var(--spectrum-button-primary-l-text-font-weight,var(--spectrum-global-font-weight-bold));--spectrum-button-primary-text-line-height:var(--spectrum-button-primary-l-text-line-height,var(--spectrum-alias-component-text-line-height));--spectrum-button-primary-border-size:var(--spectrum-button-primary-l-border-size,var(--spectrum-alias-border-size-thick));--spectrum-button-primary-text-size:var(--spectrum-button-primary-l-text-size,var(--spectrum-alias-item-text-size-l));--spectrum-button-primary-text-padding-top:var(--spectrum-button-primary-l-text-padding-top,var(--spectrum-alias-item-text-padding-top-l));--spectrum-button-primary-icon-gap:var(--spectrum-button-primary-l-icon-gap,var(--spectrum-alias-item-workflow-icon-gap-l));--spectrum-button-primary-height:var(--spectrum-button-primary-l-height,var(--spectrum-alias-item-height-l));--spectrum-button-primary-padding-left:var(--spectrum-button-primary-l-padding-left,var(--spectrum-alias-item-rounded-workflow-padding-left-l));--spectrum-button-primary-border-radius:var(--spectrum-button-primary-l-border-radius,var(--spectrum-alias-item-rounded-border-radius-l));--spectrum-button-primary-min-width:var(--spectrum-button-primary-l-min-width,var(--spectrum-global-dimension-size-1125));--spectrum-button-primary-textonly-padding-left:var(--spectrum-button-primary-l-textonly-padding-left,var(--spectrum-alias-item-rounded-padding-l));--spectrum-button-primary-textonly-padding-right:var(--spectrum-button-primary-l-textonly-padding-right,var(--spectrum-alias-item-rounded-padding-l))}:host([size=xl]){--spectrum-button-primary-focus-ring-size-key-focus:var(--spectrum-button-primary-xl-focus-ring-size-key-focus,var(--spectrum-alias-focus-ring-size));--spectrum-button-primary-text-font-weight:var(--spectrum-button-primary-xl-text-font-weight,var(--spectrum-global-font-weight-bold));--spectrum-button-primary-text-line-height:var(--spectrum-button-primary-xl-text-line-height,var(--spectrum-alias-component-text-line-height));--spectrum-button-primary-border-size:var(--spectrum-button-primary-xl-border-size,var(--spectrum-alias-border-size-thick));--spectrum-button-primary-icon-gap:var(--spectrum-button-primary-xl-icon-gap,var(--spectrum-alias-item-workflow-icon-gap-l));--spectrum-button-primary-text-size:var(--spectrum-button-primary-xl-text-size,var(--spectrum-alias-item-text-size-xl));--spectrum-button-primary-text-padding-top:var(--spectrum-button-primary-xl-text-padding-top,var(--spectrum-alias-item-text-padding-top-xl));--spectrum-button-primary-height:var(--spectrum-button-primary-xl-height,var(--spectrum-alias-item-height-xl));--spectrum-button-primary-padding-left:var(--spectrum-button-primary-xl-padding-left,var(--spectrum-alias-item-rounded-workflow-padding-left-xl));--spectrum-button-primary-border-radius:var(--spectrum-button-primary-xl-border-radius,var(--spectrum-alias-item-rounded-border-radius-xl));--spectrum-button-primary-min-width:var(--spectrum-button-primary-xl-min-width,var(--spectrum-global-dimension-size-1250));--spectrum-button-primary-textonly-padding-left:var(--spectrum-button-primary-xl-textonly-padding-left,var(--spectrum-alias-item-rounded-padding-xl));--spectrum-button-primary-textonly-padding-right:var(--spectrum-button-primary-xl-textonly-padding-right,var(--spectrum-alias-item-rounded-padding-xl))}:host{--spectrum-button-primary-padding-left-adjusted:calc(var(--spectrum-button-primary-padding-left) - var(--spectrum-button-primary-border-size));--spectrum-button-primary-textonly-padding-left-adjusted:calc(var(--spectrum-button-primary-textonly-padding-left) - var(--spectrum-button-primary-border-size));--spectrum-button-primary-textonly-padding-right-adjusted:calc(var(--spectrum-button-primary-textonly-padding-right) - var(--spectrum-button-primary-border-size));--spectrum-button-padding-y:calc(var(--spectrum-button-primary-text-padding-top) - 1px)}:host([dir=ltr]){padding-left:var(--spectrum-button-primary-textonly-padding-left-adjusted);padding-right:var(--spectrum-button-primary-textonly-padding-right-adjusted)}:host([dir=rtl]){padding-right:var(--spectrum-button-primary-textonly-padding-left-adjusted);padding-left:var(--spectrum-button-primary-textonly-padding-right-adjusted)}:host{border-width:var(--spectrum-button-primary-border-size);border-style:solid;border-radius:var(--spectrum-button-primary-border-radius);min-height:var(--spectrum-button-primary-height);height:auto;min-width:var(--spectrum-button-primary-min-width);padding-bottom:calc(var(--spectrum-button-padding-y) + 1px);padding-top:calc(var(--spectrum-button-padding-y) - 1px);font-size:var(--spectrum-button-primary-text-size);font-weight:var(--spectrum-button-primary-text-font-weight)}:host(:hover),:host([active]){box-shadow:none}:host([dir=ltr]) ::slotted([slot=icon]){margin-left:calc(-1*(var(--spectrum-button-primary-textonly-padding-left-adjusted) - var(--spectrum-button-primary-padding-left-adjusted)))}:host([dir=rtl]) ::slotted([slot=icon]){margin-right:calc(-1*(var(--spectrum-button-primary-textonly-padding-left-adjusted) - var(--spectrum-button-primary-padding-left-adjusted)))}:host([dir=ltr]) slot[name=icon]+#label{padding-left:var(--spectrum-button-primary-icon-gap)}:host([dir=rtl]) slot[name=icon]+#label{padding-right:var(--spectrum-button-primary-icon-gap)}:host([dir=ltr]) slot[name=icon]+#label{padding-right:0}:host([dir=rtl]) slot[name=icon]+#label{padding-left:0}#label{line-height:var(--spectrum-button-primary-text-line-height)}:host(.focus-visible):after,:host(.focus-visible):after,:host([focused]):after{box-shadow:0 0 0 var(--spectrum-button-primary-focus-ring-size-key-focus) var(--spectrum-button-primary-m-focus-ring-color-key-focus,var(--spectrum-alias-focus-ring-color))}:host(.focus-visible):after,:host(:focus-visible):after,:host([focused]):after{box-shadow:0 0 0 var(--spectrum-button-primary-focus-ring-size-key-focus) var(--spectrum-button-primary-m-focus-ring-color-key-focus,var(--spectrum-alias-focus-ring-color))}:host([variant=cta]){background-color:var(--spectrum-button-cta-m-background-color,var(--spectrum-semantic-cta-color-background-default));border-color:var(--spectrum-button-cta-m-border-color,var(--spectrum-semantic-cta-color-background-default));color:var(--spectrum-button-cta-m-text-color,var(--spectrum-global-color-static-white))}:host([variant=cta]:hover){background-color:var(--spectrum-button-cta-m-background-color-hover,var(--spectrum-semantic-cta-color-background-hover));border-color:var(--spectrum-button-cta-m-border-color-hover,var(--spectrum-semantic-cta-color-background-hover));color:var(--spectrum-button-cta-m-text-color-hover,var(--spectrum-global-color-static-white))}:host([variant=cta].focus-visible),:host([variant=cta].focus-visible){background-color:var(--spectrum-button-cta-m-background-color-key-focus,var(--spectrum-semantic-cta-color-background-hover));border-color:var(--spectrum-button-cta-m-border-color-key-focus,var(--spectrum-semantic-cta-color-background-hover));color:var(--spectrum-button-cta-m-text-color-key-focus,var(--spectrum-global-color-static-white))}:host([variant=cta].focus-visible),:host([variant=cta]:focus-visible){background-color:var(--spectrum-button-cta-m-background-color-key-focus,var(--spectrum-semantic-cta-color-background-hover));border-color:var(--spectrum-button-cta-m-border-color-key-focus,var(--spectrum-semantic-cta-color-background-hover));color:var(--spectrum-button-cta-m-text-color-key-focus,var(--spectrum-global-color-static-white))}:host([variant=cta][active]){background-color:var(--spectrum-button-cta-m-background-color-down,var(--spectrum-semantic-cta-color-background-down));border-color:var(--spectrum-button-cta-m-border-color-down,var(--spectrum-semantic-cta-color-background-down));color:var(--spectrum-button-cta-m-text-color-down,var(--spectrum-global-color-static-white))}:host([variant=cta]:disabled),:host([variant=cta][disabled]){background-color:var(--spectrum-button-cta-m-background-color-disabled,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-button-cta-m-border-color-disabled,var(--spectrum-global-color-gray-200));color:var(--spectrum-button-cta-m-text-color-disabled,var(--spectrum-global-color-gray-500))}:host([variant=primary]){background-color:var(--spectrum-button-primary-m-background-color,var(--spectrum-alias-background-color-transparent));border-color:var(--spectrum-button-primary-m-border-color,var(--spectrum-global-color-gray-800));color:var(--spectrum-button-primary-m-text-color,var(--spectrum-global-color-gray-800))}:host([variant=primary]:hover){background-color:var(--spectrum-button-primary-m-background-color-hover,var(--spectrum-global-color-gray-800));border-color:var(--spectrum-button-primary-m-border-color-hover,var(--spectrum-global-color-gray-800));color:var(--spectrum-button-primary-m-text-color-hover,var(--spectrum-global-color-gray-50))}:host([variant=primary].focus-visible),:host([variant=primary].focus-visible){background-color:var(--spectrum-button-primary-m-background-color-key-focus,var(--spectrum-global-color-gray-800));border-color:var(--spectrum-button-primary-m-border-color-key-focus,var(--spectrum-global-color-gray-800));color:var(--spectrum-button-primary-m-text-color-key-focus,var(--spectrum-global-color-gray-50))}:host([variant=primary].focus-visible),:host([variant=primary]:focus-visible){background-color:var(--spectrum-button-primary-m-background-color-key-focus,var(--spectrum-global-color-gray-800));border-color:var(--spectrum-button-primary-m-border-color-key-focus,var(--spectrum-global-color-gray-800));color:var(--spectrum-button-primary-m-text-color-key-focus,var(--spectrum-global-color-gray-50))}:host([variant=primary][active]){background-color:var(--spectrum-button-primary-m-background-color-down,var(--spectrum-global-color-gray-900));border-color:var(--spectrum-button-primary-m-border-color-down,var(--spectrum-global-color-gray-900));color:var(--spectrum-button-primary-m-text-color-down,var(--spectrum-global-color-gray-50))}:host([variant=primary]:disabled),:host([variant=primary][disabled]){background-color:var(--spectrum-button-primary-m-background-color-disabled,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-button-primary-m-border-color-disabled,var(--spectrum-global-color-gray-200));color:var(--spectrum-button-primary-m-text-color-disabled,var(--spectrum-global-color-gray-500))}:host([variant=secondary]){background-color:var(--spectrum-button-secondary-m-background-color,var(--spectrum-alias-background-color-transparent));border-color:var(--spectrum-button-secondary-m-border-color,var(--spectrum-global-color-gray-700));color:var(--spectrum-button-secondary-m-text-color,var(--spectrum-global-color-gray-700))}:host([variant=secondary]:hover){background-color:var(--spectrum-button-secondary-m-background-color-hover,var(--spectrum-global-color-gray-700));border-color:var(--spectrum-button-secondary-m-border-color-hover,var(--spectrum-global-color-gray-700));color:var(--spectrum-button-secondary-m-text-color-hover,var(--spectrum-global-color-gray-50))}:host([variant=secondary].focus-visible),:host([variant=secondary].focus-visible){background-color:var(--spectrum-button-secondary-m-background-color-key-focus,var(--spectrum-global-color-gray-700));border-color:var(--spectrum-button-secondary-m-border-color-key-focus,var(--spectrum-global-color-gray-700));color:var(--spectrum-button-secondary-m-text-color-key-focus,var(--spectrum-global-color-gray-50))}:host([variant=secondary].focus-visible),:host([variant=secondary]:focus-visible){background-color:var(--spectrum-button-secondary-m-background-color-key-focus,var(--spectrum-global-color-gray-700));border-color:var(--spectrum-button-secondary-m-border-color-key-focus,var(--spectrum-global-color-gray-700));color:var(--spectrum-button-secondary-m-text-color-key-focus,var(--spectrum-global-color-gray-50))}:host([variant=secondary][active]){background-color:var(--spectrum-button-secondary-m-background-color-down,var(--spectrum-global-color-gray-800));border-color:var(--spectrum-button-secondary-m-border-color-down,var(--spectrum-global-color-gray-800));color:var(--spectrum-button-secondary-m-text-color-down,var(--spectrum-global-color-gray-50))}:host([variant=secondary]:disabled),:host([variant=secondary][disabled]){background-color:var(--spectrum-button-secondary-m-background-color-disabled,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-button-secondary-m-border-color-disabled,var(--spectrum-global-color-gray-200));color:var(--spectrum-button-secondary-m-text-color-disabled,var(--spectrum-global-color-gray-500))}:host([variant=negative]){background-color:var(--spectrum-button-warning-m-background-color,var(--spectrum-alias-background-color-transparent));border-color:var(--spectrum-button-warning-m-border-color,var(--spectrum-semantic-negative-color-text-small));color:var(--spectrum-button-warning-m-text-color,var(--spectrum-semantic-negative-color-text-small))}:host([variant=negative]:hover){background-color:var(--spectrum-button-warning-m-background-color-hover,var(--spectrum-semantic-negative-color-text-small));border-color:var(--spectrum-button-warning-m-border-color-hover,var(--spectrum-semantic-negative-color-text-small));color:var(--spectrum-button-warning-m-text-color-hover,var(--spectrum-global-color-gray-50))}:host([variant=negative].focus-visible),:host([variant=negative].focus-visible){background-color:var(--spectrum-button-warning-m-background-color-key-focus,var(--spectrum-semantic-negative-color-text-small));border-color:var(--spectrum-button-warning-m-border-color-key-focus,var(--spectrum-semantic-negative-color-text-small));color:var(--spectrum-button-warning-m-text-color-key-focus,var(--spectrum-global-color-gray-50))}:host([variant=negative].focus-visible),:host([variant=negative]:focus-visible){background-color:var(--spectrum-button-warning-m-background-color-key-focus,var(--spectrum-semantic-negative-color-text-small));border-color:var(--spectrum-button-warning-m-border-color-key-focus,var(--spectrum-semantic-negative-color-text-small));color:var(--spectrum-button-warning-m-text-color-key-focus,var(--spectrum-global-color-gray-50))}:host([variant=negative][active]){background-color:var(--spectrum-button-warning-m-background-color-down,var(--spectrum-global-color-red-700));border-color:var(--spectrum-button-warning-m-border-color-down,var(--spectrum-global-color-red-700));color:var(--spectrum-button-warning-m-text-color-down,var(--spectrum-global-color-gray-50))}:host([variant=negative]:disabled),:host([variant=negative][disabled]){background-color:var(--spectrum-button-warning-m-background-color-disabled,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-button-warning-m-border-color-disabled,var(--spectrum-global-color-gray-200));color:var(--spectrum-button-warning-m-text-color-disabled,var(--spectrum-global-color-gray-500))}:host([variant=overBackground]){background-color:var(--spectrum-button-over-background-m-background-color,var(--spectrum-alias-background-color-transparent));border-color:var(--spectrum-button-over-background-m-border-color,var(--spectrum-global-color-static-white));color:var(--spectrum-button-over-background-m-text-color,var(--spectrum-global-color-static-white))}:host([variant=overBackground].focus-visible),:host([variant=overBackground].focus-visible),:host([variant=overBackground]:hover){background-color:var(--spectrum-button-over-background-m-background-color-hover,var(--spectrum-global-color-static-white));border-color:var(--spectrum-button-over-background-m-border-color-hover,var(--spectrum-global-color-static-white));color:inherit}:host([variant=overBackground].focus-visible),:host([variant=overBackground]:focus-visible),:host([variant=overBackground]:hover){background-color:var(--spectrum-button-over-background-m-background-color-hover,var(--spectrum-global-color-static-white));border-color:var(--spectrum-button-over-background-m-border-color-hover,var(--spectrum-global-color-static-white));color:inherit}:host([variant=overBackground].focus-visible):after,:host([variant=overBackground].focus-visible):after{box-shadow:0 0 0 var(--spectrum-alias-focus-ring-size,var(--spectrum-global-dimension-static-size-25)) var(--spectrum-button-over-background-m-border-color-key-focus,var(--spectrum-global-color-static-white))}:host([variant=overBackground].focus-visible):after,:host([variant=overBackground]:focus-visible):after{box-shadow:0 0 0 var(--spectrum-alias-focus-ring-size,var(--spectrum-global-dimension-static-size-25)) var(--spectrum-button-over-background-m-border-color-key-focus,var(--spectrum-global-color-static-white))}:host([variant=overBackground][active]){background-color:var(--spectrum-button-over-background-m-background-color-down,var(--spectrum-global-color-static-white));border-color:var(--spectrum-button-over-background-m-border-color-down,var(--spectrum-global-color-static-white));color:inherit}:host([variant=overBackground]:disabled),:host([variant=overBackground][disabled]){background-color:var(--spectrum-button-over-background-m-background-color-disabled,hsla(0,0%,100%,.1));border-color:var(--spectrum-button-over-background-m-border-color-disabled,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-button-over-background-m-text-color-disabled,hsla(0,0%,100%,.35))}:host([variant=overBackground][quiet]){background-color:var(--spectrum-button-quiet-over-background-m-background-color,var(--spectrum-alias-background-color-transparent));border-color:var(--spectrum-button-quiet-over-background-m-border-color,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-button-quiet-over-background-m-text-color,var(--spectrum-global-color-static-white))}:host([variant=overBackground][quiet].focus-visible),:host([variant=overBackground][quiet].focus-visible),:host([variant=overBackground][quiet]:hover){background-color:var(--spectrum-button-quiet-over-background-m-background-color-hover,hsla(0,0%,100%,.1));border-color:var(--spectrum-button-quiet-over-background-m-border-color-hover,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-button-quiet-over-background-m-text-color-hover,var(--spectrum-global-color-static-white))}:host([variant=overBackground][quiet].focus-visible),:host([variant=overBackground][quiet]:focus-visible),:host([variant=overBackground][quiet]:hover){background-color:var(--spectrum-button-quiet-over-background-m-background-color-hover,hsla(0,0%,100%,.1));border-color:var(--spectrum-button-quiet-over-background-m-border-color-hover,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-button-quiet-over-background-m-text-color-hover,var(--spectrum-global-color-static-white))}:host([variant=overBackground][quiet].focus-visible),:host([variant=overBackground][quiet].focus-visible){box-shadow:none}:host([variant=overBackground][quiet].focus-visible),:host([variant=overBackground][quiet]:focus-visible){box-shadow:none}:host([variant=overBackground][quiet].focus-visible):after,:host([variant=overBackground][quiet].focus-visible):after{box-shadow:0 0 0 var(--spectrum-alias-focus-ring-size,var(--spectrum-global-dimension-static-size-25)) var(--spectrum-button-over-background-m-border-color-key-focus,var(--spectrum-global-color-static-white))}:host([variant=overBackground][quiet].focus-visible):after,:host([variant=overBackground][quiet]:focus-visible):after{box-shadow:0 0 0 var(--spectrum-alias-focus-ring-size,var(--spectrum-global-dimension-static-size-25)) var(--spectrum-button-over-background-m-border-color-key-focus,var(--spectrum-global-color-static-white))}:host([variant=overBackground][quiet][active]){background-color:var(--spectrum-button-quiet-over-background-m-background-color-down,hsla(0,0%,100%,.2));border-color:var(--spectrum-button-quiet-over-background-m-border-color-down,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-button-quiet-over-background-m-text-color-down,var(--spectrum-global-color-static-white))}:host([variant=overBackground][quiet]:disabled),:host([variant=overBackground][quiet][disabled]){background-color:var(--spectrum-button-quiet-over-background-m-background-color-disabled,var(--spectrum-alias-background-color-transparent));border-color:var(--spectrum-button-quiet-over-background-m-border-color-disabled,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-button-quiet-over-background-m-text-color-disabled,hsla(0,0%,100%,.15))}:host([variant=primary][quiet]){background-color:var(--spectrum-button-quiet-primary-m-background-color,var(--spectrum-alias-background-color-transparent));border-color:var(--spectrum-button-quiet-primary-m-border-color,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-button-quiet-primary-m-text-color,var(--spectrum-global-color-gray-800))}:host([variant=primary][quiet]:hover){background-color:var(--spectrum-button-quiet-primary-m-background-color-hover,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-button-quiet-primary-m-border-color-hover,var(--spectrum-global-color-gray-200));color:var(--spectrum-button-quiet-primary-m-text-color-hover,var(--spectrum-global-color-gray-900))}:host([variant=primary][quiet].focus-visible),:host([variant=primary][quiet].focus-visible){background-color:var(--spectrum-button-quiet-primary-m-background-color-key-focus,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-button-quiet-primary-m-border-color-key-focus,var(--spectrum-global-color-gray-200));color:var(--spectrum-button-quiet-primary-m-text-color-key-focus,var(--spectrum-global-color-gray-900))}:host([variant=primary][quiet].focus-visible),:host([variant=primary][quiet]:focus-visible){background-color:var(--spectrum-button-quiet-primary-m-background-color-key-focus,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-button-quiet-primary-m-border-color-key-focus,var(--spectrum-global-color-gray-200));color:var(--spectrum-button-quiet-primary-m-text-color-key-focus,var(--spectrum-global-color-gray-900))}:host([variant=primary][quiet][active]){background-color:var(--spectrum-button-quiet-primary-m-background-color-down,var(--spectrum-global-color-gray-300));border-color:var(--spectrum-button-quiet-primary-m-border-color-down,var(--spectrum-global-color-gray-300));color:var(--spectrum-button-quiet-primary-m-text-color-down,var(--spectrum-global-color-gray-900))}:host([variant=primary][quiet]:disabled),:host([variant=primary][quiet][disabled]){background-color:var(--spectrum-button-quiet-primary-m-background-color-disabled,var(--spectrum-alias-background-color-transparent));border-color:var(--spectrum-button-quiet-primary-m-border-color-disabled,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-button-quiet-primary-m-text-color-disabled,var(--spectrum-global-color-gray-500))}:host([variant=secondary][quiet]){background-color:var(--spectrum-button-quiet-secondary-m-background-color,var(--spectrum-alias-background-color-transparent));border-color:var(--spectrum-button-quiet-secondary-m-border-color,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-button-quiet-secondary-m-text-color,var(--spectrum-global-color-gray-700))}:host([variant=secondary][quiet]:hover){background-color:var(--spectrum-button-quiet-secondary-m-background-color-hover,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-button-quiet-secondary-m-border-color-hover,var(--spectrum-global-color-gray-200));color:var(--spectrum-button-quiet-secondary-m-text-color-hover,var(--spectrum-global-color-gray-800))}:host([variant=secondary][quiet].focus-visible),:host([variant=secondary][quiet].focus-visible){background-color:var(--spectrum-button-quiet-secondary-m-background-color-key-focus,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-button-quiet-secondary-m-border-color-key-focus,var(--spectrum-global-color-gray-200));color:var(--spectrum-button-quiet-secondary-m-text-color-key-focus,var(--spectrum-global-color-gray-800))}:host([variant=secondary][quiet].focus-visible),:host([variant=secondary][quiet]:focus-visible){background-color:var(--spectrum-button-quiet-secondary-m-background-color-key-focus,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-button-quiet-secondary-m-border-color-key-focus,var(--spectrum-global-color-gray-200));color:var(--spectrum-button-quiet-secondary-m-text-color-key-focus,var(--spectrum-global-color-gray-800))}:host([variant=secondary][quiet][active]){background-color:var(--spectrum-button-quiet-secondary-m-background-color-down,var(--spectrum-global-color-gray-300));border-color:var(--spectrum-button-quiet-secondary-m-border-color-down,var(--spectrum-global-color-gray-300));color:var(--spectrum-button-quiet-secondary-m-text-color-down,var(--spectrum-global-color-gray-800))}:host([variant=secondary][quiet]:disabled),:host([variant=secondary][quiet][disabled]){background-color:var(--spectrum-button-quiet-secondary-m-background-color-disabled,var(--spectrum-alias-background-color-transparent));border-color:var(--spectrum-button-quiet-secondary-m-border-color-disabled,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-button-quiet-secondary-m-text-color-disabled,var(--spectrum-global-color-gray-500))}:host([variant=negative][quiet]){background-color:var(--spectrum-button-quiet-warning-m-background-color,var(--spectrum-alias-background-color-transparent));border-color:var(--spectrum-button-quiet-warning-m-border-color,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-button-quiet-warning-m-text-color,var(--spectrum-semantic-negative-color-text-small))}:host([variant=negative][quiet]:hover){background-color:var(--spectrum-button-quiet-warning-m-background-color-hover,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-button-quiet-warning-m-border-color-hover,var(--spectrum-global-color-gray-200));color:var(--spectrum-button-quiet-warning-m-text-color-hover,var(--spectrum-global-color-red-700))}:host([variant=negative][quiet].focus-visible),:host([variant=negative][quiet].focus-visible){background-color:var(--spectrum-button-quiet-warning-m-background-color-key-focus,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-button-quiet-warning-m-border-color-key-focus,var(--spectrum-global-color-gray-200));color:var(--spectrum-button-quiet-warning-m-text-color-key-focus,var(--spectrum-global-color-red-700))}:host([variant=negative][quiet].focus-visible),:host([variant=negative][quiet]:focus-visible){background-color:var(--spectrum-button-quiet-warning-m-background-color-key-focus,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-button-quiet-warning-m-border-color-key-focus,var(--spectrum-global-color-gray-200));color:var(--spectrum-button-quiet-warning-m-text-color-key-focus,var(--spectrum-global-color-red-700))}:host([variant=negative][quiet][active]){background-color:var(--spectrum-button-quiet-warning-m-background-color-down,var(--spectrum-global-color-gray-300));border-color:var(--spectrum-button-quiet-warning-m-border-color-down,var(--spectrum-global-color-gray-300));color:var(--spectrum-button-quiet-warning-m-text-color-down,var(--spectrum-global-color-red-700))}:host([variant=negative][quiet]:disabled),:host([variant=negative][quiet][disabled]){background-color:var(--spectrum-button-quiet-warning-m-background-color-disabled,var(--spectrum-alias-background-color-transparent));border-color:var(--spectrum-button-quiet-warning-m-border-color-disabled,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-button-quiet-warning-m-text-color-disabled,var(--spectrum-global-color-gray-500))}:host([size=s]){--spectrum-icon-tshirt-size-height:var(--spectrum-alias-workflow-icon-size-s);--spectrum-icon-tshirt-size-width:var(--spectrum-alias-workflow-icon-size-s);--spectrum-ui-icon-tshirt-size-height:var(--spectrum-alias-ui-icon-cornertriangle-size-75);--spectrum-ui-icon-tshirt-size-width:var(--spectrum-alias-ui-icon-cornertriangle-size-75)}:host([size=m]){--spectrum-icon-tshirt-size-height:var(--spectrum-alias-workflow-icon-size-m);--spectrum-icon-tshirt-size-width:var(--spectrum-alias-workflow-icon-size-m);--spectrum-ui-icon-tshirt-size-height:var(--spectrum-alias-ui-icon-cornertriangle-size-100);--spectrum-ui-icon-tshirt-size-width:var(--spectrum-alias-ui-icon-cornertriangle-size-100)}:host([size=l]){--spectrum-icon-tshirt-size-height:var(--spectrum-alias-workflow-icon-size-l);--spectrum-icon-tshirt-size-width:var(--spectrum-alias-workflow-icon-size-l);--spectrum-ui-icon-tshirt-size-height:var(--spectrum-alias-ui-icon-cornertriangle-size-200);--spectrum-ui-icon-tshirt-size-width:var(--spectrum-alias-ui-icon-cornertriangle-size-200)}:host([size=xl]){--spectrum-icon-tshirt-size-height:var(--spectrum-alias-workflow-icon-size-xl);--spectrum-icon-tshirt-size-width:var(--spectrum-alias-workflow-icon-size-xl);--spectrum-ui-icon-tshirt-size-height:var(--spectrum-alias-ui-icon-cornertriangle-size-300);--spectrum-ui-icon-tshirt-size-width:var(--spectrum-alias-ui-icon-cornertriangle-size-300)}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * A Spectrum button control.
     * @element sp-button
     */
    class Button extends SizedMixin(ButtonBase) {
        constructor() {
            super(...arguments);
            /**
             * The visual variant to apply to this button.
             */
            this.variant = 'cta';
            /**
             * There is a warning in place for this control
             */
            this.warning = false;
            /**
             * Style this button to be less obvious
             */
            this.quiet = false;
        }
        static get styles() {
            return [...super.styles, styles$$];
        }
    }
    __decorate([
        property({ reflect: true })
    ], Button.prototype, "variant", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Button.prototype, "warning", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Button.prototype, "quiet", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$_ = css `
:host{background-color:var(--spectrum-clearbutton-medium-background-color,var(--spectrum-alias-background-color-transparent));color:var(--spectrum-clearbutton-medium-icon-color,var(--spectrum-alias-icon-color))}:host(:hover){background-color:var(--spectrum-clearbutton-medium-background-color-hover,var(--spectrum-alias-background-color-transparent));color:var(--spectrum-clearbutton-medium-icon-color-hover,var(--spectrum-alias-icon-color-hover))}:host([active]){background-color:var(--spectrum-clearbutton-medium-background-color-down,var(--spectrum-alias-background-color-transparent));color:var(--spectrum-clearbutton-medium-icon-color-down,var(--spectrum-alias-icon-color-down))}:host(.focus-visible),:host(.focus-visible){background-color:var(--spectrum-clearbutton-medium-background-color-key-focus,var(--spectrum-alias-background-color-transparent));color:var(--spectrum-clearbutton-medium-icon-color-key-focus,var(--spectrum-alias-icon-color-focus))}:host(.focus-visible),:host(:focus-visible){background-color:var(--spectrum-clearbutton-medium-background-color-key-focus,var(--spectrum-alias-background-color-transparent));color:var(--spectrum-clearbutton-medium-icon-color-key-focus,var(--spectrum-alias-icon-color-focus))}:host(:disabled),:host([disabled]){background-color:var(--spectrum-clearbutton-medium-background-color-disabled,var(--spectrum-alias-background-color-transparent));color:var(--spectrum-clearbutton-medium-icon-color-disabled,var(--spectrum-alias-icon-color-disabled))}:host{width:var(--spectrum-clearbutton-medium-width,var(--spectrum-alias-single-line-height));height:var(--spectrum-clearbutton-medium-height,var(--spectrum-alias-single-line-height));border-radius:100%;padding:0;margin:0;border:none}:host>.icon{margin:0 auto}:host([variant=overBackground].focus-visible):after,:host([variant=overBackground].focus-visible):after{margin:calc(var(--spectrum-alias-focus-ring-gap,
var(--spectrum-global-dimension-static-size-25))*-1)}:host([variant=overBackground].focus-visible):after,:host([variant=overBackground]:focus-visible):after{margin:calc(var(--spectrum-alias-focus-ring-gap,
var(--spectrum-global-dimension-static-size-25))*-1)}@media (-ms-high-contrast:none),screen and (-ms-high-contrast:active){:host>.icon{margin:0}}:host([small]){width:var(--spectrum-clearbutton-small-width,var(--spectrum-global-dimension-size-300));height:var(--spectrum-clearbutton-small-height,var(--spectrum-global-dimension-size-300))}:host([variant=overBackground]){background-color:var(--spectrum-button-quiet-over-background-m-background-color,var(--spectrum-alias-background-color-transparent));border-color:var(--spectrum-button-quiet-over-background-m-border-color,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-button-quiet-over-background-m-text-color,var(--spectrum-global-color-static-white))}:host([variant=overBackground].focus-visible),:host([variant=overBackground].focus-visible),:host([variant=overBackground]:hover){background-color:var(--spectrum-button-quiet-over-background-m-background-color-hover,hsla(0,0%,100%,.1));border-color:var(--spectrum-button-quiet-over-background-m-border-color-hover,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-button-quiet-over-background-m-text-color-hover,var(--spectrum-global-color-static-white))}:host([variant=overBackground].focus-visible),:host([variant=overBackground]:focus-visible),:host([variant=overBackground]:hover){background-color:var(--spectrum-button-quiet-over-background-m-background-color-hover,hsla(0,0%,100%,.1));border-color:var(--spectrum-button-quiet-over-background-m-border-color-hover,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-button-quiet-over-background-m-text-color-hover,var(--spectrum-global-color-static-white))}:host([variant=overBackground].focus-visible),:host([variant=overBackground].focus-visible){box-shadow:none}:host([variant=overBackground].focus-visible),:host([variant=overBackground]:focus-visible){box-shadow:none}:host([variant=overBackground].focus-visible):after,:host([variant=overBackground].focus-visible):after{box-shadow:0 0 0 var(--spectrum-alias-focus-ring-size,var(--spectrum-global-dimension-static-size-25)) var(--spectrum-button-over-background-m-border-color-key-focus,var(--spectrum-global-color-static-white))}:host([variant=overBackground].focus-visible):after,:host([variant=overBackground]:focus-visible):after{box-shadow:0 0 0 var(--spectrum-alias-focus-ring-size,var(--spectrum-global-dimension-static-size-25)) var(--spectrum-button-over-background-m-border-color-key-focus,var(--spectrum-global-color-static-white))}:host([variant=overBackground][active]){background-color:var(--spectrum-button-quiet-over-background-m-background-color-down,hsla(0,0%,100%,.2));border-color:var(--spectrum-button-quiet-over-background-m-border-color-down,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-button-quiet-over-background-m-text-color-down,var(--spectrum-global-color-static-white))}:host([variant=overBackground]:disabled),:host([variant=overBackground][disabled]){background-color:var(--spectrum-button-quiet-over-background-m-background-color-disabled,var(--spectrum-alias-background-color-transparent));border-color:var(--spectrum-button-quiet-over-background-m-border-color-disabled,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-button-quiet-over-background-m-text-color-disabled,hsla(0,0%,100%,.15))}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const Cross75Icon = () => {
        return tag$1 `<svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 8 8"
    aria-hidden="true"
    fill="currentColor"
  >
    <path
      d="M5.188 4l2.14-2.14A.84.84 0 106.141.672L4 2.812 1.86.672A.84.84 0 00.672 1.86L2.812 4 .672 6.14A.84.84 0 101.86 7.328L4 5.188l2.14 2.14A.84.84 0 107.328 6.14z"
    />
  </svg>`;
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class IconCross75 extends IconBase {
        render() {
            setCustomTemplateLiteralTag$1(html);
            return Cross75Icon();
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-icon-cross75', IconCross75);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$Z = css `
.spectrum-UIIcon-Cross75{width:var(--spectrum-alias-ui-icon-cross-size-75);height:var(--spectrum-alias-ui-icon-cross-size-75)}.spectrum-UIIcon-Cross100{width:var(--spectrum-alias-ui-icon-cross-size-100);height:var(--spectrum-alias-ui-icon-cross-size-100)}.spectrum-UIIcon-Cross200{width:var(--spectrum-alias-ui-icon-cross-size-200);height:var(--spectrum-alias-ui-icon-cross-size-200)}.spectrum-UIIcon-Cross300{width:var(--spectrum-alias-ui-icon-cross-size-300);height:var(--spectrum-alias-ui-icon-cross-size-300)}.spectrum-UIIcon-Cross400{width:var(--spectrum-alias-ui-icon-cross-size-400);height:var(--spectrum-alias-ui-icon-cross-size-400)}.spectrum-UIIcon-Cross500{width:var(--spectrum-alias-ui-icon-cross-size-500);height:var(--spectrum-alias-ui-icon-cross-size-500)}.spectrum-UIIcon-Cross600{width:var(--spectrum-alias-ui-icon-cross-size-600);height:var(--spectrum-alias-ui-icon-cross-size-600)}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class ClearButton extends ButtonBase {
        constructor() {
            super(...arguments);
            /**
             * The visual variant to apply to this button.
             */
            this.variant = '';
        }
        static get styles() {
            return [...super.styles, styles$_, styles$Z];
        }
        get buttonContent() {
            return [
                html `
                <sp-icon-cross75
                    slot="icon"
                    class="icon spectrum-UIIcon-Cross75"
                ></sp-icon-cross75>
            `,
            ];
        }
    }
    __decorate([
        property({ reflect: true })
    ], ClearButton.prototype, "variant", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$Y = css `
:host{--spectrum-button-line-height:1.3;box-sizing:border-box;align-items:center;justify-content:center;overflow:visible;margin:0;border-style:solid;text-transform:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;-webkit-appearance:button;vertical-align:top;transition:background var(--spectrum-global-animation-duration-100,.13s) ease-out,border-color var(--spectrum-global-animation-duration-100,.13s) ease-out,color var(--spectrum-global-animation-duration-100,.13s) ease-out,box-shadow var(--spectrum-global-animation-duration-100,.13s) ease-out;text-decoration:none;font-family:var(--spectrum-alias-body-text-font-family,var(--spectrum-global-font-family-base));line-height:var(--spectrum-button-line-height);user-select:none;-webkit-user-select:none;cursor:pointer}:host(:focus){outline:none}:host(::-moz-focus-inner){border:0;border-style:none;padding:0;margin-top:-2px;margin-bottom:-2px}:host(:disabled){cursor:default}::slotted([slot=icon]){max-height:100%}#label{align-self:center;justify-self:center;text-align:center}#label:empty{display:none}:host([size=s]){--spectrum-actionbutton-quiet-border-size:var(--spectrum-actionbutton-s-quiet-border-size,var(--spectrum-alias-border-size-thin));--spectrum-actionbutton-quiet-border-radius:var(--spectrum-actionbutton-s-quiet-border-radius,var(--spectrum-alias-border-radius-regular));--spectrum-actionbutton-quiet-text-font-weight:var(--spectrum-actionbutton-s-quiet-text-font-weight,var(--spectrum-alias-body-text-font-weight));--spectrum-actionbutton-quiet-text-size:var(--spectrum-actionbutton-s-quiet-text-size,var(--spectrum-alias-item-text-size-s));--spectrum-actionbutton-border-size:var(--spectrum-actionbutton-s-border-size,var(--spectrum-alias-border-size-thin));--spectrum-actionbutton-border-radius:var(--spectrum-actionbutton-s-border-radius,var(--spectrum-alias-border-radius-regular));--spectrum-actionbutton-min-width:var(--spectrum-actionbutton-s-min-width,var(--spectrum-global-dimension-size-400));--spectrum-actionbutton-text-font-weight:var(--spectrum-actionbutton-s-text-font-weight,var(--spectrum-alias-body-text-font-weight));--spectrum-actionbutton-text-line-height:var(--spectrum-actionbutton-s-text-line-height,var(--spectrum-alias-component-text-line-height));--spectrum-actionbutton-text-size:var(--spectrum-actionbutton-s-text-size,var(--spectrum-alias-item-text-size-s));--spectrum-actionbutton-icon-gap:var(--spectrum-actionbutton-s-icon-gap,var(--spectrum-alias-item-workflow-icon-gap-s));--spectrum-actionbutton-height:var(--spectrum-actionbutton-s-height,var(--spectrum-alias-item-height-s));--spectrum-actionbutton-padding-left:var(--spectrum-actionbutton-s-padding-left,var(--spectrum-alias-item-workflow-padding-left-s));--spectrum-actionbutton-icononly-padding-left:var(--spectrum-actionbutton-s-icononly-padding-left,var(--spectrum-alias-item-icononly-padding-s));--spectrum-actionbutton-icononly-padding-right:var(--spectrum-actionbutton-s-icononly-padding-right,var(--spectrum-alias-item-icononly-padding-s));--spectrum-actionbutton-textonly-padding-left:var(--spectrum-actionbutton-s-textonly-padding-left,var(--spectrum-alias-item-padding-s));--spectrum-actionbutton-textonly-padding-right:var(--spectrum-actionbutton-s-textonly-padding-right,var(--spectrum-alias-item-padding-s));--spectrum-actionbutton-hold-icon-padding-bottom:var(--spectrum-global-dimension-size-25);--spectrum-actionbutton-hold-icon-padding-right:var(--spectrum-global-dimension-size-25)}:host([size=m]){--spectrum-actionbutton-quiet-border-size:var(--spectrum-actionbutton-m-quiet-border-size,var(--spectrum-alias-border-size-thin));--spectrum-actionbutton-quiet-border-radius:var(--spectrum-actionbutton-m-quiet-border-radius,var(--spectrum-alias-border-radius-regular));--spectrum-actionbutton-quiet-text-font-weight:var(--spectrum-actionbutton-m-quiet-text-font-weight,var(--spectrum-alias-body-text-font-weight));--spectrum-actionbutton-quiet-text-size:var(--spectrum-actionbutton-m-quiet-text-size,var(--spectrum-alias-item-text-size-m));--spectrum-actionbutton-border-size:var(--spectrum-actionbutton-m-border-size,var(--spectrum-alias-border-size-thin));--spectrum-actionbutton-border-radius:var(--spectrum-actionbutton-m-border-radius,var(--spectrum-alias-border-radius-regular));--spectrum-actionbutton-min-width:var(--spectrum-actionbutton-m-min-width,var(--spectrum-global-dimension-size-400));--spectrum-actionbutton-text-font-weight:var(--spectrum-actionbutton-m-text-font-weight,var(--spectrum-alias-body-text-font-weight));--spectrum-actionbutton-text-line-height:var(--spectrum-actionbutton-m-text-line-height,var(--spectrum-alias-component-text-line-height));--spectrum-actionbutton-text-size:var(--spectrum-actionbutton-m-text-size,var(--spectrum-alias-item-text-size-m));--spectrum-actionbutton-height:var(--spectrum-actionbutton-m-height,var(--spectrum-alias-item-height-m));--spectrum-actionbutton-icon-gap:var(--spectrum-actionbutton-m-icon-gap,var(--spectrum-alias-item-workflow-icon-gap-m));--spectrum-actionbutton-padding-left:var(--spectrum-actionbutton-m-padding-left,var(--spectrum-alias-item-workflow-padding-left-m));--spectrum-actionbutton-icononly-padding-left:var(--spectrum-actionbutton-m-icononly-padding-left,var(--spectrum-alias-item-icononly-padding-m));--spectrum-actionbutton-icononly-padding-right:var(--spectrum-actionbutton-m-icononly-padding-right,var(--spectrum-alias-item-icononly-padding-m));--spectrum-actionbutton-textonly-padding-left:var(--spectrum-actionbutton-m-textonly-padding-left,var(--spectrum-alias-item-padding-m));--spectrum-actionbutton-textonly-padding-right:var(--spectrum-actionbutton-m-textonly-padding-right,var(--spectrum-alias-item-padding-m));--spectrum-actionbutton-hold-icon-padding-bottom:var(--spectrum-global-dimension-size-40);--spectrum-actionbutton-hold-icon-padding-right:var(--spectrum-global-dimension-size-40)}:host([size=l]){--spectrum-actionbutton-quiet-border-size:var(--spectrum-actionbutton-l-quiet-border-size,var(--spectrum-alias-border-size-thin));--spectrum-actionbutton-quiet-border-radius:var(--spectrum-actionbutton-l-quiet-border-radius,var(--spectrum-alias-border-radius-regular));--spectrum-actionbutton-quiet-text-font-weight:var(--spectrum-actionbutton-l-quiet-text-font-weight,var(--spectrum-alias-body-text-font-weight));--spectrum-actionbutton-quiet-text-size:var(--spectrum-actionbutton-l-quiet-text-size,var(--spectrum-alias-item-text-size-l));--spectrum-actionbutton-border-size:var(--spectrum-actionbutton-l-border-size,var(--spectrum-alias-border-size-thin));--spectrum-actionbutton-border-radius:var(--spectrum-actionbutton-l-border-radius,var(--spectrum-alias-border-radius-regular));--spectrum-actionbutton-min-width:var(--spectrum-actionbutton-l-min-width,var(--spectrum-global-dimension-size-400));--spectrum-actionbutton-text-font-weight:var(--spectrum-actionbutton-l-text-font-weight,var(--spectrum-alias-body-text-font-weight));--spectrum-actionbutton-text-line-height:var(--spectrum-actionbutton-l-text-line-height,var(--spectrum-alias-component-text-line-height));--spectrum-actionbutton-text-size:var(--spectrum-actionbutton-l-text-size,var(--spectrum-alias-item-text-size-l));--spectrum-actionbutton-icon-gap:var(--spectrum-actionbutton-l-icon-gap,var(--spectrum-alias-item-workflow-icon-gap-l));--spectrum-actionbutton-height:var(--spectrum-actionbutton-l-height,var(--spectrum-alias-item-height-l));--spectrum-actionbutton-padding-left:var(--spectrum-actionbutton-l-padding-left,var(--spectrum-alias-item-workflow-padding-left-l));--spectrum-actionbutton-icononly-padding-left:var(--spectrum-actionbutton-l-icononly-padding-left,var(--spectrum-alias-item-icononly-padding-l));--spectrum-actionbutton-icononly-padding-right:var(--spectrum-actionbutton-l-icononly-padding-right,var(--spectrum-alias-item-icononly-padding-l));--spectrum-actionbutton-textonly-padding-left:var(--spectrum-actionbutton-l-textonly-padding-left,var(--spectrum-alias-item-padding-l));--spectrum-actionbutton-textonly-padding-right:var(--spectrum-actionbutton-l-textonly-padding-right,var(--spectrum-alias-item-padding-l));--spectrum-actionbutton-hold-icon-padding-bottom:var(--spectrum-global-dimension-size-50);--spectrum-actionbutton-hold-icon-padding-right:var(--spectrum-global-dimension-size-50)}:host([size=xl]){--spectrum-actionbutton-quiet-border-size:var(--spectrum-actionbutton-xl-quiet-border-size,var(--spectrum-alias-border-size-thin));--spectrum-actionbutton-quiet-border-radius:var(--spectrum-actionbutton-xl-quiet-border-radius,var(--spectrum-alias-border-radius-regular));--spectrum-actionbutton-quiet-text-font-weight:var(--spectrum-actionbutton-xl-quiet-text-font-weight,var(--spectrum-alias-body-text-font-weight));--spectrum-actionbutton-quiet-text-size:var(--spectrum-actionbutton-xl-quiet-text-size,var(--spectrum-alias-item-text-size-xl));--spectrum-actionbutton-border-size:var(--spectrum-actionbutton-xl-border-size,var(--spectrum-alias-border-size-thin));--spectrum-actionbutton-border-radius:var(--spectrum-actionbutton-xl-border-radius,var(--spectrum-alias-border-radius-regular));--spectrum-actionbutton-min-width:var(--spectrum-actionbutton-xl-min-width,var(--spectrum-global-dimension-size-400));--spectrum-actionbutton-text-font-weight:var(--spectrum-actionbutton-xl-text-font-weight,var(--spectrum-alias-body-text-font-weight));--spectrum-actionbutton-text-line-height:var(--spectrum-actionbutton-xl-text-line-height,var(--spectrum-alias-component-text-line-height));--spectrum-actionbutton-icon-gap:var(--spectrum-actionbutton-xl-icon-gap,var(--spectrum-alias-item-workflow-icon-gap-l));--spectrum-actionbutton-text-size:var(--spectrum-actionbutton-xl-text-size,var(--spectrum-alias-item-text-size-xl));--spectrum-actionbutton-height:var(--spectrum-actionbutton-xl-height,var(--spectrum-alias-item-height-xl));--spectrum-actionbutton-padding-left:var(--spectrum-actionbutton-xl-padding-left,var(--spectrum-alias-item-workflow-padding-left-xl));--spectrum-actionbutton-icononly-padding-left:var(--spectrum-actionbutton-xl-icononly-padding-left,var(--spectrum-alias-item-icononly-padding-xl));--spectrum-actionbutton-icononly-padding-right:var(--spectrum-actionbutton-xl-icononly-padding-right,var(--spectrum-alias-item-icononly-padding-xl));--spectrum-actionbutton-textonly-padding-left:var(--spectrum-actionbutton-xl-textonly-padding-left,var(--spectrum-alias-item-padding-xl));--spectrum-actionbutton-textonly-padding-right:var(--spectrum-actionbutton-xl-textonly-padding-right,var(--spectrum-alias-item-padding-xl));--spectrum-actionbutton-hold-icon-padding-bottom:var(--spectrum-global-dimension-size-65);--spectrum-actionbutton-hold-icon-padding-right:var(--spectrum-global-dimension-size-65)}:host{--spectrum-actionbutton-padding-left-adjusted:calc(var(--spectrum-actionbutton-padding-left) - var(--spectrum-actionbutton-border-size));--spectrum-actionbutton-textonly-padding-left-adjusted:calc(var(--spectrum-actionbutton-textonly-padding-left) - var(--spectrum-actionbutton-border-size));--spectrum-actionbutton-textonly-padding-right-adjusted:calc(var(--spectrum-actionbutton-textonly-padding-right) - var(--spectrum-actionbutton-border-size));--spectrum-actionbutton-icononly-padding-left-adjusted:calc(var(--spectrum-actionbutton-icononly-padding-left) - var(--spectrum-actionbutton-border-size));--spectrum-actionbutton-icononly-padding-right-adjusted:calc(var(--spectrum-actionbutton-icononly-padding-right) - var(--spectrum-actionbutton-border-size))}:host([dir=ltr]){padding-left:var(--spectrum-actionbutton-textonly-padding-left-adjusted);padding-right:var(--spectrum-actionbutton-textonly-padding-right-adjusted)}:host([dir=rtl]){padding-right:var(--spectrum-actionbutton-textonly-padding-left-adjusted);padding-left:var(--spectrum-actionbutton-textonly-padding-right-adjusted)}:host{position:relative;height:var(--spectrum-actionbutton-height);min-width:var(--spectrum-actionbutton-min-width);border-width:var(--spectrum-actionbutton-border-size);border-radius:var(--spectrum-actionbutton-border-radius);font-size:var(--spectrum-actionbutton-text-size);font-weight:var(--spectrum-actionbutton-text-font-weight);line-height:var(--spectrum-actionbutton-text-line-height)}:host([dir=ltr]) ::slotted([slot=icon]){margin-left:calc(-1*(var(--spectrum-actionbutton-textonly-padding-left-adjusted) - var(--spectrum-actionbutton-padding-left-adjusted)))}:host([dir=rtl]) ::slotted([slot=icon]){margin-right:calc(-1*(var(--spectrum-actionbutton-textonly-padding-left-adjusted) - var(--spectrum-actionbutton-padding-left-adjusted)))}:host([dir=ltr]) slot[name=icon]+#label{padding-left:var(--spectrum-actionbutton-icon-gap)}:host([dir=rtl]) slot[name=icon]+#label{padding-right:var(--spectrum-actionbutton-icon-gap)}:host([dir=ltr]) slot[name=icon]+#label{padding-right:0}:host([dir=rtl]) slot[name=icon]+#label{padding-left:0}#hold-affordance+::slotted([slot=icon]),:host([dir]) slot[icon-only]::slotted([slot=icon]),:host([dir]) slot[icon-only] sp-icon{margin-left:calc(-1*(var(--spectrum-actionbutton-textonly-padding-left-adjusted) - var(--spectrum-actionbutton-icononly-padding-left-adjusted)));margin-right:calc(-1*(var(--spectrum-actionbutton-textonly-padding-right-adjusted) - var(--spectrum-actionbutton-icononly-padding-right-adjusted)))}#label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}:host([dir=ltr]) #hold-affordance{right:var(--spectrum-actionbutton-hold-icon-padding-right)}:host([dir=rtl]) #hold-affordance{left:var(--spectrum-actionbutton-hold-icon-padding-right);transform:matrix(-1,0,0,1,0,0)}#hold-affordance{position:absolute;bottom:var(--spectrum-actionbutton-hold-icon-padding-bottom)}:host([quiet]){border-width:var(--spectrum-actionbutton-quiet-border-size);border-radius:var(--spectrum-actionbutton-quiet-border-radius);font-size:var(--spectrum-actionbutton-quiet-text-size);font-weight:var(--spectrum-actionbutton-quiet-text-font-weight)}:host{--spectrum-actionbutton-m-quiet-border-size-key-focus:1px;background-color:var(--spectrum-actionbutton-m-background-color,var(--spectrum-global-color-gray-75));border-color:var(--spectrum-actionbutton-m-border-color,var(--spectrum-alias-border-color));color:var(--spectrum-actionbutton-m-text-color,var(--spectrum-alias-text-color))}::slotted([slot=icon]){color:var(--spectrum-actionbutton-m-icon-color,var(--spectrum-alias-icon-color))}#hold-affordance{color:var(--spectrum-actionbutton-m-hold-icon-color,var(--spectrum-alias-icon-color))}:host(:hover){background-color:var(--spectrum-actionbutton-m-background-color-hover,var(--spectrum-global-color-gray-50));border-color:var(--spectrum-actionbutton-m-border-color-hover,var(--spectrum-alias-border-color-hover));color:var(--spectrum-actionbutton-m-text-color-hover,var(--spectrum-alias-text-color-hover))}:host(:hover) ::slotted([slot=icon]){color:var(--spectrum-actionbutton-m-icon-color-hover,var(--spectrum-alias-icon-color-hover))}:host(:hover) #hold-affordance{color:var(--spectrum-actionbutton-m-hold-icon-color-hover,var(--spectrum-alias-icon-color-hover))}:host(.focus-visible),:host(.focus-visible){background-color:var(--spectrum-actionbutton-m-background-color-key-focus,var(--spectrum-global-color-gray-50));box-shadow:0 0 0 var(--spectrum-actionbutton-m-quiet-border-size-key-focus,var(--spectrum-alias-border-size-thick)) var(--spectrum-actionbutton-m-border-color-key-focus,var(--spectrum-alias-border-color-focus));color:var(--spectrum-actionbutton-m-text-color-key-focus,var(--spectrum-alias-text-color-hover))}:host(.focus-visible),:host(:focus-visible){background-color:var(--spectrum-actionbutton-m-background-color-key-focus,var(--spectrum-global-color-gray-50));box-shadow:0 0 0 var(--spectrum-actionbutton-m-quiet-border-size-key-focus,var(--spectrum-alias-border-size-thick)) var(--spectrum-actionbutton-m-border-color-key-focus,var(--spectrum-alias-border-color-focus));color:var(--spectrum-actionbutton-m-text-color-key-focus,var(--spectrum-alias-text-color-hover))}:host(.focus-visible),:host(.focus-visible[active]),:host(.focus-visible),:host(.focus-visible[active]){border-color:var(--spectrum-actionbutton-m-border-color-key-focus,var(--spectrum-alias-border-color-focus))}:host(.focus-visible),:host(.focus-visible[active]),:host(:focus-visible),:host(:focus-visible[active]){border-color:var(--spectrum-actionbutton-m-border-color-key-focus,var(--spectrum-alias-border-color-focus))}:host(.focus-visible) ::slotted([slot=icon]),:host(.focus-visible) ::slotted([slot=icon]){color:var(--spectrum-actionbutton-m-icon-color-key-focus,var(--spectrum-alias-icon-color-focus))}:host(.focus-visible) ::slotted([slot=icon]),:host(:focus-visible) ::slotted([slot=icon]){color:var(--spectrum-actionbutton-m-icon-color-key-focus,var(--spectrum-alias-icon-color-focus))}:host(.focus-visible) #hold-affordance,:host(.focus-visible) #hold-affordance{color:var(--spectrum-actionbutton-m-hold-icon-color-key-focus,var(--spectrum-alias-icon-color-hover))}:host(.focus-visible) #hold-affordance,:host(:focus-visible) #hold-affordance{color:var(--spectrum-actionbutton-m-hold-icon-color-key-focus,var(--spectrum-alias-icon-color-hover))}:host([active]){background-color:var(--spectrum-actionbutton-m-background-color-down,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-m-border-color-down,var(--spectrum-alias-border-color-down));color:var(--spectrum-actionbutton-m-text-color-down,var(--spectrum-alias-text-color-down))}:host([active]) #hold-affordance{color:var(--spectrum-actionbutton-m-hold-icon-color-down,var(--spectrum-alias-icon-color-down))}:host(:disabled),:host([disabled]){background-color:var(--spectrum-actionbutton-m-background-color-disabled,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-m-border-color-disabled,var(--spectrum-alias-border-color-disabled));color:var(--spectrum-actionbutton-m-text-color-disabled,var(--spectrum-alias-text-color-disabled))}:host(:disabled) ::slotted([slot=icon]),:host([disabled]) ::slotted([slot=icon]){color:var(--spectrum-actionbutton-m-icon-color-disabled,var(--spectrum-alias-icon-color-disabled))}:host(:disabled) #hold-affordance,:host([disabled]) #hold-affordance{color:var(--spectrum-actionbutton-m-hold-icon-color-disabled,var(--spectrum-alias-icon-color-disabled))}:host([selected]){background-color:var(--spectrum-actionbutton-m-background-color-selected,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-m-border-color-selected,var(--spectrum-alias-border-color));color:var(--spectrum-actionbutton-m-text-color-selected,var(--spectrum-alias-text-color))}:host([selected]) ::slotted([slot=icon]){color:var(--spectrum-actionbutton-m-icon-color-selected,var(--spectrum-alias-icon-color))}:host([selected].focus-visible),:host([selected].focus-visible){background-color:var(--spectrum-actionbutton-m-background-color-selected-key-focus,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-m-border-color-selected-key-focus,var(--spectrum-alias-border-color-focus));color:var(--spectrum-actionbutton-m-text-color-selected-key-focus,var(--spectrum-alias-text-color-hover))}:host([selected].focus-visible),:host([selected]:focus-visible){background-color:var(--spectrum-actionbutton-m-background-color-selected-key-focus,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-m-border-color-selected-key-focus,var(--spectrum-alias-border-color-focus));color:var(--spectrum-actionbutton-m-text-color-selected-key-focus,var(--spectrum-alias-text-color-hover))}:host([selected].focus-visible[active]),:host([selected].focus-visible[active]){border-color:var(--spectrum-actionbutton-m-border-color-key-focus,var(--spectrum-alias-border-color-focus))}:host([selected].focus-visible[active]),:host([selected]:focus-visible[active]){border-color:var(--spectrum-actionbutton-m-border-color-key-focus,var(--spectrum-alias-border-color-focus))}:host([selected].focus-visible) ::slotted([slot=icon]),:host([selected].focus-visible) ::slotted([slot=icon]){color:var(--spectrum-actionbutton-m-icon-color-selected-key-focus,var(--spectrum-alias-icon-color-hover))}:host([selected].focus-visible) ::slotted([slot=icon]),:host([selected]:focus-visible) ::slotted([slot=icon]){color:var(--spectrum-actionbutton-m-icon-color-selected-key-focus,var(--spectrum-alias-icon-color-hover))}:host([selected]:hover){background-color:var(--spectrum-actionbutton-m-background-color-selected-hover,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-m-border-color-selected-hover,var(--spectrum-alias-border-color-hover));color:var(--spectrum-actionbutton-m-text-color-selected-hover,var(--spectrum-alias-text-color-hover))}:host([selected]:hover) ::slotted([slot=icon]){color:var(--spectrum-actionbutton-m-icon-color-selected-hover,var(--spectrum-alias-icon-color-hover))}:host([selected][active]){background-color:var(--spectrum-actionbutton-m-background-color-selected-down,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-m-border-color-selected-down,var(--spectrum-alias-border-color-down));color:var(--spectrum-actionbutton-m-text-color-selected-down,var(--spectrum-alias-text-color-down))}:host([selected][active]) ::slotted([slot=icon]){color:var(--spectrum-actionbutton-m-icon-color-selected-down,var(--spectrum-alias-icon-color-down))}:host([selected]:disabled),:host([selected][disabled]){background-color:var(--spectrum-actionbutton-m-background-color-selected-disabled,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-m-border-color-selected-disabled,var(--spectrum-alias-border-color-disabled));color:var(--spectrum-actionbutton-m-text-color-selected-disabled,var(--spectrum-alias-text-color-disabled))}:host([selected]:disabled) ::slotted([slot=icon]),:host([selected][disabled]) ::slotted([slot=icon]){color:var(--spectrum-actionbutton-m-icon-color-selected-disabled,var(--spectrum-alias-icon-color-disabled))}:host([emphasized]){background-color:var(--spectrum-actionbutton-m-emphasized-background-color,var(--spectrum-global-color-gray-75));border-color:var(--spectrum-actionbutton-m-emphasized-border-color,var(--spectrum-alias-border-color));color:var(--spectrum-actionbutton-m-emphasized-text-color,var(--spectrum-alias-text-color))}:host([emphasized]) ::slotted([slot=icon]){color:var(--spectrum-actionbutton-m-emphasized-icon-color,var(--spectrum-alias-icon-color))}:host([emphasized]) #hold-affordance{color:var(--spectrum-actionbutton-m-emphasized-hold-icon-color,var(--spectrum-alias-icon-color))}:host([emphasized][selected]) #hold-affordance{color:var(--spectrum-actionbutton-m-emphasized-hold-icon-color-selected,var(--spectrum-global-color-static-white))}:host([emphasized][selected]:hover) #hold-affordance{color:var(--spectrum-actionbutton-m-emphasized-text-color-selected-hover,var(--spectrum-global-color-static-white))}:host([emphasized]:hover){background-color:var(--spectrum-actionbutton-m-emphasized-background-color-hover,var(--spectrum-global-color-gray-50));border-color:var(--spectrum-actionbutton-m-emphasized-border-color-hover,var(--spectrum-alias-border-color-hover));box-shadow:none;color:var(--spectrum-actionbutton-m-emphasized-text-color-hover,var(--spectrum-alias-text-color-hover))}:host([emphasized]:hover) ::slotted([slot=icon]){color:var(--spectrum-actionbutton-m-emphasized-icon-color-hover,var(--spectrum-alias-icon-color-hover))}:host([emphasized]:hover) #hold-affordance{color:var(--spectrum-actionbutton-m-emphasized-hold-icon-color-hover,var(--spectrum-alias-icon-color-hover))}:host([emphasized].focus-visible),:host([emphasized].focus-visible){background-color:var(--spectrum-actionbutton-m-emphasized-background-color-key-focus,var(--spectrum-global-color-gray-50));border-color:var(--spectrum-actionbutton-m-emphasized-border-color-key-focus,var(--spectrum-alias-border-color-hover));box-shadow:0 0 0 var(--spectrum-actionbutton-m-quiet-border-size-key-focus,var(--spectrum-alias-border-size-thick)) var(--spectrum-actionbutton-m-border-color-key-focus,var(--spectrum-alias-border-color-focus));color:var(--spectrum-actionbutton-m-emphasized-text-color-key-focus,var(--spectrum-alias-text-color-hover))}:host([emphasized].focus-visible),:host([emphasized]:focus-visible){background-color:var(--spectrum-actionbutton-m-emphasized-background-color-key-focus,var(--spectrum-global-color-gray-50));border-color:var(--spectrum-actionbutton-m-emphasized-border-color-key-focus,var(--spectrum-alias-border-color-hover));box-shadow:0 0 0 var(--spectrum-actionbutton-m-quiet-border-size-key-focus,var(--spectrum-alias-border-size-thick)) var(--spectrum-actionbutton-m-border-color-key-focus,var(--spectrum-alias-border-color-focus));color:var(--spectrum-actionbutton-m-emphasized-text-color-key-focus,var(--spectrum-alias-text-color-hover))}:host([emphasized].focus-visible) ::slotted([slot=icon]),:host([emphasized].focus-visible) ::slotted([slot=icon]){color:var(--spectrum-actionbutton-m-emphasized-icon-color-key-focus,var(--spectrum-alias-icon-color-focus))}:host([emphasized].focus-visible) ::slotted([slot=icon]),:host([emphasized]:focus-visible) ::slotted([slot=icon]){color:var(--spectrum-actionbutton-m-emphasized-icon-color-key-focus,var(--spectrum-alias-icon-color-focus))}:host([emphasized].focus-visible) #hold-affordance,:host([emphasized].focus-visible) #hold-affordance{color:var(--spectrum-actionbutton-m-emphasized-hold-icon-color-key-focus,var(--spectrum-alias-icon-color-hover))}:host([emphasized].focus-visible) #hold-affordance,:host([emphasized]:focus-visible) #hold-affordance{color:var(--spectrum-actionbutton-m-emphasized-hold-icon-color-key-focus,var(--spectrum-alias-icon-color-hover))}:host([emphasized][active]){background-color:var(--spectrum-actionbutton-m-emphasized-background-color-down,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-m-emphasized-border-color-down,var(--spectrum-alias-border-color-down));box-shadow:none;color:var(--spectrum-actionbutton-m-emphasized-text-color-down,var(--spectrum-alias-text-color-down))}:host([emphasized][active]) #hold-affordance{color:var(--spectrum-actionbutton-m-emphasized-hold-icon-color-down,var(--spectrum-alias-icon-color-down))}:host([emphasized]:disabled),:host([emphasized][disabled]){background-color:var(--spectrum-actionbutton-m-emphasized-background-color-disabled,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-m-emphasized-border-color-disabled,var(--spectrum-alias-border-color-disabled));color:var(--spectrum-actionbutton-m-emphasized-text-color-disabled,var(--spectrum-alias-text-color-disabled))}:host([emphasized]:disabled) ::slotted([slot=icon]),:host([emphasized][disabled]) ::slotted([slot=icon]){color:var(--spectrum-actionbutton-m-emphasized-icon-color-disabled,var(--spectrum-alias-icon-color-disabled))}:host([emphasized]:disabled) #hold-affordance,:host([emphasized][disabled]) #hold-affordance{color:var(--spectrum-actionbutton-m-emphasized-hold-icon-color-disabled,var(--spectrum-alias-icon-color-disabled))}:host([emphasized][quiet][selected]),:host([emphasized][selected]){background-color:var(--spectrum-actionbutton-m-emphasized-background-color-selected,var(--spectrum-semantic-cta-color-background-default));border-color:var(--spectrum-actionbutton-m-emphasized-border-color-selected,var(--spectrum-semantic-cta-color-background-default));color:var(--spectrum-actionbutton-m-emphasized-text-color-selected,var(--spectrum-global-color-static-white))}:host([emphasized][quiet][selected]) ::slotted([slot=icon]),:host([emphasized][selected]) ::slotted([slot=icon]){color:var(--spectrum-actionbutton-m-emphasized-icon-color-selected,var(--spectrum-global-color-static-white))}:host([emphasized][quiet][selected].focus-visible),:host([emphasized][quiet][selected].focus-visible),:host([emphasized][selected].focus-visible),:host([emphasized][selected].focus-visible){background-color:var(--spectrum-actionbutton-m-emphasized-background-color-selected-key-focus,var(--spectrum-semantic-cta-color-background-key-focus));border-color:var(--spectrum-actionbutton-m-emphasized-border-color-selected-key-focus,var(--spectrum-semantic-cta-color-background-key-focus));color:var(--spectrum-actionbutton-m-emphasized-text-color-selected-key-focus,var(--spectrum-global-color-static-white))}:host([emphasized][quiet][selected].focus-visible),:host([emphasized][quiet][selected]:focus-visible),:host([emphasized][selected].focus-visible),:host([emphasized][selected]:focus-visible){background-color:var(--spectrum-actionbutton-m-emphasized-background-color-selected-key-focus,var(--spectrum-semantic-cta-color-background-key-focus));border-color:var(--spectrum-actionbutton-m-emphasized-border-color-selected-key-focus,var(--spectrum-semantic-cta-color-background-key-focus));color:var(--spectrum-actionbutton-m-emphasized-text-color-selected-key-focus,var(--spectrum-global-color-static-white))}:host([emphasized][quiet][selected].focus-visible) ::slotted([slot=icon]),:host([emphasized][quiet][selected].focus-visible) ::slotted([slot=icon]),:host([emphasized][selected].focus-visible) ::slotted([slot=icon]),:host([emphasized][selected].focus-visible) ::slotted([slot=icon]){color:var(--spectrum-actionbutton-m-emphasized-icon-color-selected-key-focus,var(--spectrum-global-color-static-white))}:host([emphasized][quiet][selected].focus-visible) ::slotted([slot=icon]),:host([emphasized][quiet][selected]:focus-visible) ::slotted([slot=icon]),:host([emphasized][selected].focus-visible) ::slotted([slot=icon]),:host([emphasized][selected]:focus-visible) ::slotted([slot=icon]){color:var(--spectrum-actionbutton-m-emphasized-icon-color-selected-key-focus,var(--spectrum-global-color-static-white))}:host([emphasized][quiet][selected]:hover),:host([emphasized][selected]:hover){background-color:var(--spectrum-actionbutton-m-emphasized-background-color-selected-hover,var(--spectrum-semantic-cta-color-background-hover));border-color:var(--spectrum-actionbutton-m-emphasized-border-color-selected-hover,var(--spectrum-semantic-cta-color-background-hover));color:var(--spectrum-actionbutton-m-emphasized-text-color-selected-hover,var(--spectrum-global-color-static-white))}:host([emphasized][quiet][selected]:hover) ::slotted([slot=icon]),:host([emphasized][selected]:hover) ::slotted([slot=icon]){color:var(--spectrum-actionbutton-m-emphasized-icon-color-selected-hover,var(--spectrum-global-color-static-white))}:host([emphasized][quiet][selected][active]),:host([emphasized][selected][active]){background-color:var(--spectrum-actionbutton-m-emphasized-background-color-selected-down,var(--spectrum-semantic-cta-color-background-down));border-color:var(--spectrum-actionbutton-m-emphasized-border-color-selected-down,var(--spectrum-semantic-cta-color-background-down));color:var(--spectrum-actionbutton-m-emphasized-text-color-selected-down,var(--spectrum-global-color-static-white))}:host([emphasized][quiet][selected][active]) ::slotted([slot=icon]),:host([emphasized][selected][active]) ::slotted([slot=icon]){color:var(--spectrum-actionbutton-m-emphasized-icon-color-selected-down,var(--spectrum-global-color-static-white))}:host([emphasized][quiet][selected]:disabled),:host([emphasized][quiet][selected][disabled]),:host([emphasized][selected]:disabled),:host([emphasized][selected][disabled]){background-color:var(--spectrum-actionbutton-m-emphasized-background-color-selected-disabled,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-m-emphasized-border-color-selected-disabled,var(--spectrum-alias-border-color-disabled));color:var(--spectrum-actionbutton-m-emphasized-text-color-selected-disabled,var(--spectrum-alias-text-color-disabled))}:host([emphasized][quiet][selected]:disabled) ::slotted([slot=icon]),:host([emphasized][quiet][selected][disabled]) ::slotted([slot=icon]),:host([emphasized][selected]:disabled) ::slotted([slot=icon]),:host([emphasized][selected][disabled]) ::slotted([slot=icon]){color:var(--spectrum-actionbutton-m-emphasized-icon-color-selected-disabled,var(--spectrum-alias-icon-color-disabled))}:host([quiet]){background-color:var(--spectrum-actionbutton-m-quiet-background-color,var(--spectrum-alias-background-color-transparent));border-color:var(--spectrum-actionbutton-m-quiet-border-color,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-actionbutton-m-quiet-text-color,var(--spectrum-alias-text-color))}:host([quiet]:hover){background-color:var(--spectrum-actionbutton-m-quiet-background-color-hover,var(--spectrum-alias-background-color-transparent));border-color:var(--spectrum-actionbutton-m-quiet-border-color-hover,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-actionbutton-m-quiet-text-color-hover,var(--spectrum-alias-text-color-hover))}:host([quiet].focus-visible),:host([quiet].focus-visible){background-color:var(--spectrum-actionbutton-m-quiet-background-color-key-focus,var(--spectrum-alias-background-color-transparent));box-shadow:0 0 0 var(--spectrum-actionbutton-m-quiet-border-size-key-focus,var(--spectrum-alias-border-size-thick)) var(--spectrum-actionbutton-m-quiet-border-color-key-focus,var(--spectrum-alias-border-color-focus));border-color:var(--spectrum-actionbutton-m-quiet-border-color-key-focus,var(--spectrum-alias-border-color-focus));color:var(--spectrum-actionbutton-m-quiet-text-color-key-focus,var(--spectrum-alias-text-color-hover))}:host([quiet].focus-visible),:host([quiet]:focus-visible){background-color:var(--spectrum-actionbutton-m-quiet-background-color-key-focus,var(--spectrum-alias-background-color-transparent));box-shadow:0 0 0 var(--spectrum-actionbutton-m-quiet-border-size-key-focus,var(--spectrum-alias-border-size-thick)) var(--spectrum-actionbutton-m-quiet-border-color-key-focus,var(--spectrum-alias-border-color-focus));border-color:var(--spectrum-actionbutton-m-quiet-border-color-key-focus,var(--spectrum-alias-border-color-focus));color:var(--spectrum-actionbutton-m-quiet-text-color-key-focus,var(--spectrum-alias-text-color-hover))}:host([quiet][active]){background-color:var(--spectrum-actionbutton-m-quiet-background-color-down,var(--spectrum-global-color-gray-300));border-color:var(--spectrum-actionbutton-m-quiet-border-color-down,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-actionbutton-m-quiet-text-color-down,var(--spectrum-alias-text-color-down))}:host([quiet]:disabled),:host([quiet][disabled]){background-color:var(--spectrum-actionbutton-m-quiet-background-color-disabled,var(--spectrum-alias-background-color-transparent));border-color:var(--spectrum-actionbutton-m-quiet-border-color-disabled,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-actionbutton-m-quiet-text-color-disabled,var(--spectrum-alias-text-color-disabled))}:host([quiet][selected]){background-color:var(--spectrum-actionbutton-m-quiet-background-color-selected,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-m-quiet-border-color-selected,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-actionbutton-m-quiet-text-color-selected,var(--spectrum-alias-text-color))}:host([quiet][selected].focus-visible),:host([quiet][selected].focus-visible){background-color:var(--spectrum-actionbutton-m-quiet-background-color-selected-key-focus,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-m-quiet-border-color-selected-key-focus,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-actionbutton-m-quiet-text-color-selected-key-focus,var(--spectrum-alias-text-color-hover))}:host([quiet][selected].focus-visible),:host([quiet][selected]:focus-visible){background-color:var(--spectrum-actionbutton-m-quiet-background-color-selected-key-focus,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-m-quiet-border-color-selected-key-focus,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-actionbutton-m-quiet-text-color-selected-key-focus,var(--spectrum-alias-text-color-hover))}:host([quiet][selected]:hover){background-color:var(--spectrum-actionbutton-m-quiet-background-color-selected-hover,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-m-quiet-border-color-selected-hover,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-actionbutton-m-quiet-text-color-selected-hover,var(--spectrum-alias-text-color-hover))}:host([quiet][selected][active]){background-color:var(--spectrum-actionbutton-m-quiet-background-color-selected-down,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-m-quiet-border-color-selected-down,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-actionbutton-m-quiet-text-color-selected-down,var(--spectrum-alias-text-color-down))}:host([quiet][selected]:disabled),:host([quiet][selected][disabled]){background-color:var(--spectrum-actionbutton-m-quiet-background-color-selected-disabled,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-m-quiet-border-color-selected-disabled,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-actionbutton-m-quiet-text-color-selected-disabled,var(--spectrum-alias-text-color-disabled))}:host{display:inline-flex;flex-direction:row}:host([dir]){-webkit-appearance:none}::slotted([slot=icon]){flex-shrink:0}#button{position:absolute;top:0;right:0;bottom:0;left:0}#label{flex-grow:var(--spectrum-actionbutton-label-flex-grow);text-align:var(--spectrum-actionbutton-label-text-align)}:host([size=s]){--spectrum-icon-tshirt-size-height:var(--spectrum-alias-workflow-icon-size-s);--spectrum-icon-tshirt-size-width:var(--spectrum-alias-workflow-icon-size-s);--spectrum-ui-icon-tshirt-size-height:var(--spectrum-alias-ui-icon-cornertriangle-size-75);--spectrum-ui-icon-tshirt-size-width:var(--spectrum-alias-ui-icon-cornertriangle-size-75)}:host([size=m]){--spectrum-icon-tshirt-size-height:var(--spectrum-alias-workflow-icon-size-m);--spectrum-icon-tshirt-size-width:var(--spectrum-alias-workflow-icon-size-m);--spectrum-ui-icon-tshirt-size-height:var(--spectrum-alias-ui-icon-cornertriangle-size-100);--spectrum-ui-icon-tshirt-size-width:var(--spectrum-alias-ui-icon-cornertriangle-size-100)}:host([size=l]){--spectrum-icon-tshirt-size-height:var(--spectrum-alias-workflow-icon-size-l);--spectrum-icon-tshirt-size-width:var(--spectrum-alias-workflow-icon-size-l);--spectrum-ui-icon-tshirt-size-height:var(--spectrum-alias-ui-icon-cornertriangle-size-200);--spectrum-ui-icon-tshirt-size-width:var(--spectrum-alias-ui-icon-cornertriangle-size-200)}:host([size=xl]){--spectrum-icon-tshirt-size-height:var(--spectrum-alias-workflow-icon-size-xl);--spectrum-icon-tshirt-size-width:var(--spectrum-alias-workflow-icon-size-xl);--spectrum-ui-icon-tshirt-size-height:var(--spectrum-alias-ui-icon-cornertriangle-size-300);--spectrum-ui-icon-tshirt-size-width:var(--spectrum-alias-ui-icon-cornertriangle-size-300)}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$X = css `
.spectrum-UIIcon-CornerTriangle75{width:var(--spectrum-alias-ui-icon-cornertriangle-size-75,var(--spectrum-global-dimension-size-65));height:var(--spectrum-alias-ui-icon-cornertriangle-size-75,var(--spectrum-global-dimension-size-65))}.spectrum-UIIcon-CornerTriangle100{width:var(--spectrum-alias-ui-icon-cornertriangle-size-100);height:var(--spectrum-alias-ui-icon-cornertriangle-size-100)}.spectrum-UIIcon-CornerTriangle200{width:var(--spectrum-alias-ui-icon-cornertriangle-size-200,var(--spectrum-global-dimension-size-75));height:var(--spectrum-alias-ui-icon-cornertriangle-size-200,var(--spectrum-global-dimension-size-75))}.spectrum-UIIcon-CornerTriangle300{width:var(--spectrum-alias-ui-icon-cornertriangle-size-300);height:var(--spectrum-alias-ui-icon-cornertriangle-size-300)}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const CornerTriangle300Icon = () => {
        return tag$1 `<svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 7 7"
    aria-hidden="true"
    fill="currentColor"
  >
    <path
      d="M6.683.67a.315.315 0 00-.223.093l-5.7 5.7a.316.316 0 00.224.54h5.7A.316.316 0 007 6.687V.986A.316.316 0 006.684.67z"
    />
  </svg>`;
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class IconCornerTriangle300 extends IconBase {
        render() {
            setCustomTemplateLiteralTag$1(html);
            return CornerTriangle300Icon();
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-icon-corner-triangle300', IconCornerTriangle300);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const holdAffordanceClass = {
        s: 'spectrum-UIIcon-CornerTriangle75',
        m: 'spectrum-UIIcon-CornerTriangle100',
        l: 'spectrum-UIIcon-CornerTriangle200',
        xl: 'spectrum-UIIcon-CornerTriangle300',
    };
    const LONGPRESS_DURATION = 300;
    let LONGPRESS_TIMEOUT;
    /**
     * @element sp-card
     *
     * @fires change - Announces a change in the `selected` property of an action button
     * @fires longpress - Synthesizes a "longpress" interaction that signifies a
     * `pointerdown` event that is >=300ms or a keyboard event wher code is `Space` or code is `ArrowDown`
     * while `altKey===true`.
     */
    class ActionButton extends SizedMixin(ButtonBase) {
        constructor() {
            super();
            this.emphasized = false;
            this.holdAffordance = false;
            this.quiet = false;
            this.selected = false;
            this.toggles = false;
            this._value = '';
            this.onClick = () => {
                if (!this.toggles) {
                    return;
                }
                this.selected = !this.selected;
                const applyDefault = this.dispatchEvent(new Event('change', {
                    cancelable: true,
                }));
                if (!applyDefault) {
                    this.selected = !this.selected;
                }
            };
            this.addEventListener('click', this.onClick);
            this.addEventListener('pointerdown', this.onPointerdown);
        }
        static get styles() {
            return [styles$Y, styles$X];
        }
        get value() {
            return this._value || this.itemText;
        }
        set value(value) {
            if (value === this._value) {
                return;
            }
            this._value = value || '';
            if (this._value) {
                this.setAttribute('value', this._value);
            }
            else {
                this.removeAttribute('value');
            }
        }
        /**
         * @private
         */
        get itemText() {
            return (this.textContent || /* c8 ignore next */ '').trim();
        }
        onPointerdown() {
            this.addEventListener('pointerup', this.onPointerup);
            this.addEventListener('pointercancel', this.onPointerup);
            LONGPRESS_TIMEOUT = setTimeout(() => {
                this.dispatchEvent(new CustomEvent('longpress', {
                    bubbles: true,
                    composed: true,
                    detail: {
                        source: 'pointer',
                    },
                }));
            }, LONGPRESS_DURATION);
        }
        onPointerup() {
            clearTimeout(LONGPRESS_TIMEOUT);
            this.removeEventListener('pointerup', this.onPointerup);
            this.removeEventListener('pointercancel', this.onPointerup);
        }
        /**
         * @private
         */
        handleKeydown(event) {
            if (!this.holdAffordance) {
                return super.handleKeydown(event);
            }
            const { code, altKey } = event;
            if (code === 'Space' || (altKey && code === 'ArrowDown')) {
                event.preventDefault();
                if (code === 'ArrowDown') {
                    event.stopPropagation();
                    event.stopImmediatePropagation();
                }
                this.addEventListener('keyup', this.handleKeyup);
                this.active = true;
            }
        }
        handleKeyup(event) {
            if (!this.holdAffordance) {
                return super.handleKeyup(event);
            }
            const { code, altKey } = event;
            if (code === 'Space' || (altKey && code === 'ArrowDown')) {
                event.stopPropagation();
                this.dispatchEvent(new CustomEvent('longpress', {
                    bubbles: true,
                    composed: true,
                    detail: {
                        source: 'keyboard',
                    },
                }));
                this.active = false;
            }
        }
        get buttonContent() {
            const buttonContent = super.buttonContent;
            if (this.holdAffordance) {
                buttonContent.unshift(html `
                <sp-icon-corner-triangle300
                    id="hold-affordance"
                    class="${holdAffordanceClass[this.size]}"
                ></sp-icon-corner-triangle300>
            `);
            }
            return buttonContent;
        }
        updated(changes) {
            super.updated(changes);
            if (this.toggles && changes.has('selected')) {
                this.focusElement.setAttribute('aria-pressed', this.selected ? 'true' : 'false');
            }
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ActionButton.prototype, "emphasized", void 0);
    __decorate([
        property({ type: Boolean, reflect: true, attribute: 'hold-affordance' })
    ], ActionButton.prototype, "holdAffordance", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ActionButton.prototype, "quiet", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ActionButton.prototype, "selected", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ActionButton.prototype, "toggles", void 0);
    __decorate([
        property({ type: String })
    ], ActionButton.prototype, "value", null);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-action-button', ActionButton);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$W = css `
:host{--spectrum-actiongroup-button-gap-reset:0;--spectrum-actiongroup-quiet-compact-button-gap:var(--spectrum-global-dimension-size-25);display:flex;flex-wrap:wrap}::slotted(*){flex-shrink:0}:host(:not([vertical]):not([compact])){margin-top:calc(-1*var(--spectrum-actiongroup-button-gap-y, var(--spectrum-global-dimension-size-100)))}:host(:not([vertical]):not([compact])) ::slotted(*){flex-shrink:0;margin-top:var(--spectrum-actiongroup-button-gap-y,var(--spectrum-global-dimension-size-100))}:host([dir=ltr]:not([vertical]):not([compact])) ::slotted(:not(:last-child)){margin-right:var(--spectrum-actiongroup-button-gap-x,var(--spectrum-global-dimension-size-100))}:host([dir=rtl]:not([vertical]):not([compact])) ::slotted(:not(:last-child)){margin-left:var(--spectrum-actiongroup-button-gap-x,var(--spectrum-global-dimension-size-100))}:host([vertical]){display:inline-flex;flex-direction:column}:host([dir=ltr][vertical]) ::slotted(:not(:first-child)){margin-left:var(--spectrum-actiongroup-button-gap-reset)}:host([dir=rtl][vertical]) ::slotted(:not(:first-child)){margin-right:var(--spectrum-actiongroup-button-gap-reset)}:host([vertical]) ::slotted(:not(:first-child)){margin-top:var(--spectrum-actiongroup-button-gap-y,var(--spectrum-global-dimension-size-100))}:host([dir=ltr][vertical][vertical]){margin-left:var(--spectrum-actiongroup-button-gap-reset)}:host([dir=rtl][vertical][vertical]){margin-right:var(--spectrum-actiongroup-button-gap-reset)}:host([vertical][vertical]){margin-top:var(--spectrum-actiongroup-button-gap-y,var(--spectrum-global-dimension-size-100))}:host([dir=ltr][compact][quiet]) ::slotted(:not(:first-child)){margin-left:var(--spectrum-actiongroup-quiet-compact-button-gap)}:host([dir=rtl][compact][quiet]) ::slotted(:not(:first-child)){margin-right:var(--spectrum-actiongroup-quiet-compact-button-gap)}:host([compact][quiet]) ::slotted(:not(:first-child)){margin-top:var(--spectrum-actiongroup-button-gap-reset)}:host([dir=ltr][compact][quiet][vertical]) ::slotted(:not(:first-child)){margin-left:var(--spectrum-actiongroup-button-gap-reset)}:host([dir=rtl][compact][quiet][vertical]) ::slotted(:not(:first-child)){margin-right:var(--spectrum-actiongroup-button-gap-reset)}:host([compact][quiet][vertical]) ::slotted(:not(:first-child)){margin-top:var(--spectrum-actiongroup-quiet-compact-button-gap)}:host([compact]:not([quiet])){flex-wrap:nowrap}:host([compact]:not([quiet])) ::slotted(*){position:relative;border-radius:0;z-index:0}:host([dir=ltr][compact]:not([quiet])) ::slotted(:first-child){border-top-left-radius:var(--spectrum-actionbutton-m-border-radius,var(--spectrum-alias-border-radius-regular))}:host([dir=rtl][compact]:not([quiet])) ::slotted(:first-child){border-top-right-radius:var(--spectrum-actionbutton-m-border-radius,var(--spectrum-alias-border-radius-regular))}:host([dir=ltr][compact]:not([quiet])) ::slotted(:first-child){border-bottom-left-radius:var(--spectrum-actionbutton-m-border-radius,var(--spectrum-alias-border-radius-regular))}:host([dir=rtl][compact]:not([quiet])) ::slotted(:first-child){border-bottom-right-radius:var(--spectrum-actionbutton-m-border-radius,var(--spectrum-alias-border-radius-regular))}:host([dir=ltr][compact]:not([quiet])) ::slotted(:first-child){margin-right:calc(-1*var(--spectrum-actionbutton-m-border-size,
var(--spectrum-alias-border-size-thin))/2)}:host([dir=rtl][compact]:not([quiet])) ::slotted(:first-child){margin-left:calc(-1*var(--spectrum-actionbutton-m-border-size,
var(--spectrum-alias-border-size-thin))/2)}:host([dir=ltr][compact]:not([quiet])) ::slotted(:last-child){border-top-right-radius:var(--spectrum-actionbutton-m-border-radius,var(--spectrum-alias-border-radius-regular))}:host([dir=rtl][compact]:not([quiet])) ::slotted(:last-child){border-top-left-radius:var(--spectrum-actionbutton-m-border-radius,var(--spectrum-alias-border-radius-regular))}:host([dir=ltr][compact]:not([quiet])) ::slotted(:last-child){border-bottom-right-radius:var(--spectrum-actionbutton-m-border-radius,var(--spectrum-alias-border-radius-regular))}:host([dir=rtl][compact]:not([quiet])) ::slotted(:last-child){border-bottom-left-radius:var(--spectrum-actionbutton-m-border-radius,var(--spectrum-alias-border-radius-regular))}:host([dir=ltr][compact]:not([quiet])) ::slotted(:last-child){margin-left:calc(-1*var(--spectrum-actionbutton-m-border-size,
var(--spectrum-alias-border-size-thin))/2)}:host([dir=rtl][compact]:not([quiet])) ::slotted(:last-child){margin-right:calc(-1*var(--spectrum-actionbutton-m-border-size,
var(--spectrum-alias-border-size-thin))/2)}:host([dir=ltr][compact]:not([quiet])) ::slotted(:last-child){margin-right:0}:host([dir=rtl][compact]:not([quiet])) ::slotted(:last-child){margin-left:0}:host([compact]:not([quiet])) ::slotted([selected]){z-index:1}:host([compact]:not([quiet])) ::slotted(:hover){z-index:2}:host([compact]:not([quiet])) ::slotted(.focus-visible),:host([compact]:not([quiet])) ::slotted(.focus-visible){z-index:3}:host([compact]:not([quiet])) ::slotted(.focus-visible),:host([compact]:not([quiet])) ::slotted(:focus-visible){z-index:3}:host([dir=ltr][compact]:not([quiet])) ::slotted(:not(:first-child)){margin-left:calc(-1*var(--spectrum-actionbutton-m-border-size,
var(--spectrum-alias-border-size-thin))/2)}:host([dir=ltr][compact]:not([quiet])) ::slotted(:not(:first-child)),:host([dir=rtl][compact]:not([quiet])) ::slotted(:not(:first-child)){margin-right:calc(-1*var(--spectrum-actionbutton-m-border-size,
var(--spectrum-alias-border-size-thin))/2)}:host([dir=rtl][compact]:not([quiet])) ::slotted(:not(:first-child)){margin-left:calc(-1*var(--spectrum-actionbutton-m-border-size,
var(--spectrum-alias-border-size-thin))/2)}:host([compact][vertical]:not([quiet])) ::slotted(*){border-radius:0}:host([compact][vertical]:not([quiet])) ::slotted(:not(:first-child)){margin-top:calc(-1*var(--spectrum-actionbutton-m-border-size,
var(--spectrum-alias-border-size-thin))/2);margin-bottom:calc(-1*var(--spectrum-actionbutton-m-border-size,
var(--spectrum-alias-border-size-thin))/2)}:host([dir=ltr][compact][vertical]:not([quiet])) ::slotted(:first-child){border-top-left-radius:var(--spectrum-actionbutton-m-border-radius,var(--spectrum-alias-border-radius-regular))}:host([dir=ltr][compact][vertical]:not([quiet])) ::slotted(:first-child),:host([dir=rtl][compact][vertical]:not([quiet])) ::slotted(:first-child){border-top-right-radius:var(--spectrum-actionbutton-m-border-radius,var(--spectrum-alias-border-radius-regular))}:host([dir=rtl][compact][vertical]:not([quiet])) ::slotted(:first-child){border-top-left-radius:var(--spectrum-actionbutton-m-border-radius,var(--spectrum-alias-border-radius-regular))}:host([compact][vertical]:not([quiet])) ::slotted(:first-child){border-radius:0;margin-bottom:calc(-1*var(--spectrum-actionbutton-m-border-size,
var(--spectrum-alias-border-size-thin))/2)}:host([dir=ltr][compact][vertical]:not([quiet])) ::slotted(:last-child){border-bottom-left-radius:var(--spectrum-actionbutton-m-border-radius,var(--spectrum-alias-border-radius-regular))}:host([dir=ltr][compact][vertical]:not([quiet])) ::slotted(:last-child),:host([dir=rtl][compact][vertical]:not([quiet])) ::slotted(:last-child){border-bottom-right-radius:var(--spectrum-actionbutton-m-border-radius,var(--spectrum-alias-border-radius-regular))}:host([dir=rtl][compact][vertical]:not([quiet])) ::slotted(:last-child){border-bottom-left-radius:var(--spectrum-actionbutton-m-border-radius,var(--spectrum-alias-border-radius-regular))}:host([compact][vertical]:not([quiet])) ::slotted(:last-child){border-radius:0;margin-top:calc(-1*var(--spectrum-actionbutton-m-border-size,
var(--spectrum-alias-border-size-thin))/2);margin-bottom:0}:host([justified]) ::slotted(*){flex:1}:host([dir][compact][vertical]) ::slotted(:nth-child(n)){margin-right:0;margin-left:0}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const EMPTY_SELECTION = [];
    /**
     * @element sp-action-group
     */
    class ActionGroup extends SpectrumElement {
        constructor() {
            super(...arguments);
            this.buttons = [];
            this._buttonSelector = 'sp-action-button';
            this.compact = false;
            this.emphasized = false;
            this.justified = false;
            this.label = '';
            this.quiet = false;
            this.vertical = false;
            this._selected = EMPTY_SELECTION;
            this.handleFocusin = () => {
                this.addEventListener('focusout', this.handleFocusout);
                this.addEventListener('keydown', this.handleKeydown);
            };
            this.handleKeydown = (event) => {
                const { code } = event;
                if (![
                    'ArrowUp',
                    'ArrowLeft',
                    'ArrowRight',
                    'ArrowDown',
                    'End',
                    'Home',
                    'PageUp',
                    'PageDown',
                ].includes(code)) {
                    return;
                }
                const activeElement = this.getRootNode()
                    .activeElement;
                /* c8 ignore next 3 */
                if (!activeElement) {
                    return;
                }
                let nextIndex = this.buttons.indexOf(activeElement);
                /* c8 ignore next 3 */
                if (nextIndex === -1) {
                    return;
                }
                const circularIndexedElement = (list, index) => list[(list.length + index) % list.length];
                const buttonFromDelta = (delta) => {
                    nextIndex += delta;
                    while (circularIndexedElement(this.buttons, nextIndex).disabled) {
                        nextIndex += delta;
                    }
                };
                switch (code) {
                    case 'ArrowUp':
                        buttonFromDelta(-1);
                        break;
                    case 'ArrowLeft':
                        buttonFromDelta(this.isLTR ? -1 : 1);
                        break;
                    case 'ArrowRight':
                        buttonFromDelta(this.isLTR ? 1 : -1);
                        break;
                    case 'ArrowDown':
                        buttonFromDelta(1);
                        break;
                    case 'End':
                        nextIndex = this.buttons.length;
                        buttonFromDelta(-1);
                        break;
                    case 'Home':
                        nextIndex = -1;
                        buttonFromDelta(1);
                        break;
                    case 'PageUp':
                    case 'PageDown':
                    default:
                        const tagsSiblings = [
                            ...this.getRootNode().querySelectorAll('sp-action-group'),
                        ];
                        if (tagsSiblings.length < 2) {
                            return;
                        }
                        event.preventDefault();
                        const currentIndex = tagsSiblings.indexOf(this);
                        const offset = code === 'PageUp' ? -1 : 1;
                        let nextRadioGroupIndex = currentIndex + offset;
                        let nextRadioGroup = circularIndexedElement(tagsSiblings, nextRadioGroupIndex);
                        while (!nextRadioGroup.buttons.length) {
                            nextRadioGroupIndex += offset;
                            nextRadioGroup = circularIndexedElement(tagsSiblings, nextRadioGroupIndex);
                        }
                        nextRadioGroup.focus();
                        return;
                }
                event.preventDefault();
                const nextRadio = circularIndexedElement(this.buttons, nextIndex);
                activeElement.tabIndex = -1;
                nextRadio.tabIndex = 0;
                nextRadio.focus();
            };
            this.handleFocusout = (event) => {
                const { relatedTarget } = event;
                if (!relatedTarget || !this.contains(relatedTarget)) {
                    const firstButtonNonDisabled = this.buttons.find((button) => {
                        if (this.selected.length) {
                            return button.selected;
                        }
                        return !button.disabled;
                    });
                    if (firstButtonNonDisabled) {
                        firstButtonNonDisabled.tabIndex = 0;
                    }
                }
                this.removeEventListener('keydown', this.handleKeydown);
                this.removeEventListener('focusout', this.handleFocusout);
            };
        }
        static get styles() {
            return [styles$W];
        }
        get selected() {
            return this._selected;
        }
        set selected(selected) {
            if (selected === this.selected)
                return;
            const old = this.selected;
            this._selected = selected;
            const applyDefault = this.dispatchEvent(new Event('change', {
                bubbles: true,
                composed: true,
                cancelable: true,
            }));
            if (!applyDefault) {
                this._selected = old;
                this.buttons.map((button) => {
                    button.selected = this.selected.includes(button.value);
                });
            }
        }
        handleClick(event) {
            const target = event.target;
            if (typeof target.value === 'undefined') {
                return;
            }
            switch (this.selects) {
                case 'single': {
                    const selected = [
                        ...this.querySelectorAll('[selected]'),
                    ];
                    selected.forEach((el) => {
                        el.selected = false;
                        el.tabIndex = -1;
                        el.setAttribute('aria-checked', 'false');
                    });
                    target.selected = true;
                    target.tabIndex = 0;
                    target.setAttribute('aria-checked', 'true');
                    this.selected = [target.value];
                    target.focus();
                    break;
                }
                case 'multiple': {
                    const selected = [...this.selected];
                    target.selected = !target.selected;
                    target.setAttribute('aria-checked', target.selected ? 'true' : 'false');
                    if (target.selected) {
                        selected.push(target.value);
                    }
                    else {
                        selected.splice(this.selected.indexOf(target.value), 1);
                    }
                    this.selected = selected;
                    break;
                }
                default:
                    this.selected = EMPTY_SELECTION;
                    break;
            }
        }
        async manageSelects() {
            if (!this.buttons.length) {
                return;
            }
            switch (this.selects) {
                case 'single': {
                    this.setAttribute('role', 'radiogroup');
                    let selection;
                    let firstEnabled;
                    const options = this.buttons;
                    const updates = options.map(async (option) => {
                        await option.updateComplete;
                        option.setAttribute('role', 'radio');
                        option.setAttribute('aria-checked', option.selected ? 'true' : 'false');
                        option.tabIndex = option.selected ? 0 : -1;
                        if (option.selected) {
                            selection = option;
                        }
                        if (!firstEnabled && !option.disabled) {
                            firstEnabled = option;
                        }
                    });
                    await Promise.all(updates);
                    if (selection || firstEnabled) {
                        (selection || firstEnabled).tabIndex = 0;
                    }
                    this.selected = selection ? [selection.value] : EMPTY_SELECTION;
                    break;
                }
                case 'multiple': {
                    this.setAttribute('role', 'group');
                    const selection = [];
                    const options = this.buttons;
                    const updates = options.map(async (option) => {
                        await option.updateComplete;
                        option.setAttribute('role', 'checkbox');
                        option.setAttribute('aria-checked', option.selected ? 'true' : 'false');
                        option.tabIndex = 0;
                        if (option.selected) {
                            selection.push(option.value);
                        }
                    });
                    await Promise.all(updates);
                    this.selected = !!selection.length
                        ? selection
                        : EMPTY_SELECTION;
                    break;
                }
                default:
                    this.buttons.forEach((option) => {
                        option.removeAttribute('role');
                        option.tabIndex = 0;
                    });
                    this.removeAttribute('role');
                    this.selected = EMPTY_SELECTION;
                    break;
            }
        }
        render() {
            return html `
            <slot role="presentation"></slot>
        `;
        }
        firstUpdated(changes) {
            super.firstUpdated(changes);
            this.addEventListener('click', this.handleClick);
            this.addEventListener('focusin', this.handleFocusin);
        }
        updated(changes) {
            super.updated(changes);
            if (changes.has('selects')) {
                this.manageSelects();
            }
            if ((changes.has('quiet') && this.quiet) ||
                (changes.has('emphasized') && this.emphasized)) {
                this.manageChildren();
            }
            if (changes.has('label')) {
                if (this.label.length) {
                    this.setAttribute('aria-label', this.label);
                }
                else {
                    this.removeAttribute('aria-label');
                }
            }
        }
        manageChildren() {
            this.buttons.forEach((button) => {
                button.quiet = this.quiet;
                button.emphasized = this.emphasized;
            });
        }
        connectedCallback() {
            super.connectedCallback();
            if (!this.observer) {
                const findButtons = () => {
                    const buttons = [
                        ...this.querySelectorAll(this._buttonSelector),
                    ];
                    buttons.filter((button) => {
                        const buttonParent = button.parentElement;
                        return !(buttonParent === null || buttonParent === void 0 ? void 0 : buttonParent.closest(this._buttonSelector));
                    });
                    this.buttons = buttons;
                    this.manageChildren();
                    this.manageSelects();
                };
                this.observer = new MutationObserver(findButtons);
                findButtons();
            }
            this.observer.observe(this, { childList: true, subtree: true });
        }
        disconnectedCallback() {
            this.observer.disconnect();
            super.disconnectedCallback();
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ActionGroup.prototype, "compact", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ActionGroup.prototype, "emphasized", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ActionGroup.prototype, "justified", void 0);
    __decorate([
        property({ type: String })
    ], ActionGroup.prototype, "label", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ActionGroup.prototype, "quiet", void 0);
    __decorate([
        property({ type: String })
    ], ActionGroup.prototype, "selects", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ActionGroup.prototype, "vertical", void 0);
    __decorate([
        property({ type: Array })
    ], ActionGroup.prototype, "selected", null);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-action-group', ActionGroup);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$V = css `
:host{--spectrum-button-line-height:1.3}#button{position:relative;display:inline-flex;box-sizing:border-box;overflow:visible;text-transform:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;-webkit-appearance:button;vertical-align:top;transition:background var(--spectrum-global-animation-duration-100,.13s) ease-out,border-color var(--spectrum-global-animation-duration-100,.13s) ease-out,color var(--spectrum-global-animation-duration-100,.13s) ease-out,box-shadow var(--spectrum-global-animation-duration-100,.13s) ease-out;text-decoration:none;font-family:var(--spectrum-alias-body-text-font-family,var(--spectrum-global-font-family-base));line-height:var(--spectrum-button-line-height);user-select:none;-webkit-user-select:none;cursor:pointer}#button:focus{outline:none}#button::-moz-focus-inner{border:0;border-style:none;padding:0;margin-top:-2px;margin-bottom:-2px}#button:disabled{cursor:default}:host([dir=ltr]) #button{padding-left:var(--spectrum-picker-textonly-padding-left);padding-right:var(--spectrum-picker-textonly-padding-right)}:host([dir=rtl]) #button{padding-right:var(--spectrum-picker-textonly-padding-left);padding-left:var(--spectrum-picker-textonly-padding-right)}#button{display:flex;justify-content:center;align-items:center;width:var(--spectrum-picker-width);min-width:var(--spectrum-picker-min-width);height:var(--spectrum-picker-height);margin:0;padding-top:0;padding-bottom:0;border-width:var(--spectrum-picker-border-size);border-style:solid;border-radius:var(--spectrum-picker-border-radius);transition:background-color var(--spectrum-global-animation-duration-100,.13s),box-shadow var(--spectrum-global-animation-duration-100,.13s),border-color var(--spectrum-global-animation-duration-100,.13s)}#button:disabled,:host([disabled]) #button{border-width:var(--spectrum-picker-disabled-border-size);cursor:default}:host([dir=ltr]) #button .spectrum-Picker-icon{margin-right:var(--spectrum-picker-icon-gap)}:host([dir=rtl]) #button .spectrum-Picker-icon{margin-left:var(--spectrum-picker-icon-gap)}.spectrum-Picker-icon{flex-shrink:0}:host([dir=ltr]) #button #label+.spectrum-Picker-icon{margin-left:var(--spectrum-picker-icon-gap)}:host([dir=rtl]) #button #label+.spectrum-Picker-icon{margin-right:var(--spectrum-picker-icon-gap)}:host([size=s]){--spectrum-picker-border-size:var(--spectrum-picker-s-border-size,var(--spectrum-alias-border-size-thin));--spectrum-picker-text-size:var(--spectrum-picker-s-text-size,var(--spectrum-alias-item-text-size-s));--spectrum-picker-icon-gap:var(--spectrum-picker-s-icon-gap,var(--spectrum-alias-item-workflow-icon-gap-s));--spectrum-picker-height:var(--spectrum-picker-s-height,var(--spectrum-alias-item-height-s));--spectrum-picker-placeholder-text-font-style:var(--spectrum-picker-s-placeholder-text-font-style,var(--spectrum-global-font-style-italic));--spectrum-picker-placeholder-text-font-weight:var(--spectrum-picker-s-placeholder-text-font-weight,var(--spectrum-global-font-weight-regular));--spectrum-picker-border-radius:var(--spectrum-picker-s-border-radius,var(--spectrum-alias-border-radius-regular));--spectrum-picker-width:var(--spectrum-picker-s-width,var(--spectrum-global-dimension-size-2000));--spectrum-picker-min-width:var(--spectrum-picker-s-min-width,var(--spectrum-global-dimension-size-450));--spectrum-picker-popover-max-width:var(--spectrum-picker-s-popover-max-width,var(--spectrum-global-dimension-size-1800));--spectrum-picker-ui-icon-gap:var(--spectrum-picker-s-ui-icon-gap,var(--spectrum-alias-item-ui-icon-gap-s));--spectrum-picker-error-icon-margin-left:var(--spectrum-picker-s-error-icon-margin-left,var(--spectrum-global-dimension-size-100));--spectrum-picker-textonly-padding-left:var(--spectrum-picker-s-textonly-padding-left,var(--spectrum-alias-item-padding-s));--spectrum-picker-textonly-padding-right:var(--spectrum-picker-s-textonly-padding-right,var(--spectrum-alias-item-padding-s))}:host([size=m]){--spectrum-picker-border-size:var(--spectrum-picker-m-border-size,var(--spectrum-alias-border-size-thin));--spectrum-picker-text-size:var(--spectrum-picker-m-text-size,var(--spectrum-alias-item-text-size-m));--spectrum-picker-height:var(--spectrum-picker-m-height,var(--spectrum-alias-item-height-m));--spectrum-picker-icon-gap:var(--spectrum-picker-m-icon-gap,var(--spectrum-alias-item-workflow-icon-gap-m));--spectrum-picker-placeholder-text-font-style:var(--spectrum-picker-m-placeholder-text-font-style,var(--spectrum-global-font-style-italic));--spectrum-picker-placeholder-text-font-weight:var(--spectrum-picker-m-placeholder-text-font-weight,var(--spectrum-global-font-weight-regular));--spectrum-picker-border-radius:var(--spectrum-picker-m-border-radius,var(--spectrum-alias-border-radius-regular));--spectrum-picker-width:var(--spectrum-picker-m-width,var(--spectrum-global-dimension-size-3000));--spectrum-picker-min-width:var(--spectrum-picker-m-min-width,var(--spectrum-global-dimension-size-600));--spectrum-picker-popover-max-width:var(--spectrum-picker-m-popover-max-width,var(--spectrum-global-dimension-size-2400));--spectrum-picker-ui-icon-gap:var(--spectrum-picker-m-ui-icon-gap,var(--spectrum-alias-item-ui-icon-gap-m));--spectrum-picker-error-icon-margin-left:var(--spectrum-picker-m-error-icon-margin-left,var(--spectrum-global-dimension-size-150));--spectrum-picker-textonly-padding-left:var(--spectrum-picker-m-textonly-padding-left,var(--spectrum-alias-item-padding-m));--spectrum-picker-textonly-padding-right:var(--spectrum-picker-m-textonly-padding-right,var(--spectrum-alias-item-padding-m))}:host([size=l]){--spectrum-picker-border-size:var(--spectrum-picker-l-border-size,var(--spectrum-alias-border-size-thin));--spectrum-picker-text-size:var(--spectrum-picker-l-text-size,var(--spectrum-alias-item-text-size-l));--spectrum-picker-icon-gap:var(--spectrum-picker-l-icon-gap,var(--spectrum-alias-item-workflow-icon-gap-l));--spectrum-picker-height:var(--spectrum-picker-l-height,var(--spectrum-alias-item-height-l));--spectrum-picker-placeholder-text-font-style:var(--spectrum-picker-l-placeholder-text-font-style,var(--spectrum-global-font-style-italic));--spectrum-picker-placeholder-text-font-weight:var(--spectrum-picker-l-placeholder-text-font-weight,var(--spectrum-global-font-weight-regular));--spectrum-picker-border-radius:var(--spectrum-picker-l-border-radius,var(--spectrum-alias-border-radius-regular));--spectrum-picker-width:var(--spectrum-picker-l-width,var(--spectrum-global-dimension-size-2000));--spectrum-picker-min-width:var(--spectrum-picker-l-min-width,var(--spectrum-global-dimension-size-750));--spectrum-picker-popover-max-width:var(--spectrum-picker-l-popover-max-width,var(--spectrum-global-dimension-size-3000));--spectrum-picker-ui-icon-gap:var(--spectrum-picker-l-ui-icon-gap,var(--spectrum-alias-item-ui-icon-gap-l));--spectrum-picker-error-icon-margin-left:var(--spectrum-picker-l-error-icon-margin-left,var(--spectrum-global-dimension-size-185));--spectrum-picker-textonly-padding-left:var(--spectrum-picker-l-textonly-padding-left,var(--spectrum-alias-item-padding-l));--spectrum-picker-textonly-padding-right:var(--spectrum-picker-l-textonly-padding-right,var(--spectrum-alias-item-padding-l))}:host([size=xl]){--spectrum-picker-border-size:var(--spectrum-picker-xl-border-size,var(--spectrum-alias-border-size-thin));--spectrum-picker-icon-gap:var(--spectrum-picker-xl-icon-gap,var(--spectrum-alias-item-workflow-icon-gap-l));--spectrum-picker-text-size:var(--spectrum-picker-xl-text-size,var(--spectrum-alias-item-text-size-xl));--spectrum-picker-height:var(--spectrum-picker-xl-height,var(--spectrum-alias-item-height-xl));--spectrum-picker-placeholder-text-font-style:var(--spectrum-picker-xl-placeholder-text-font-style,var(--spectrum-global-font-style-italic));--spectrum-picker-placeholder-text-font-weight:var(--spectrum-picker-xl-placeholder-text-font-weight,var(--spectrum-global-font-weight-regular));--spectrum-picker-border-radius:var(--spectrum-picker-xl-border-radius,var(--spectrum-alias-border-radius-regular));--spectrum-picker-width:var(--spectrum-picker-xl-width,var(--spectrum-global-dimension-size-3000));--spectrum-picker-min-width:var(--spectrum-picker-xl-min-width,var(--spectrum-global-dimension-size-900));--spectrum-picker-popover-max-width:var(--spectrum-picker-xl-popover-max-width,var(--spectrum-global-dimension-size-3600));--spectrum-picker-ui-icon-gap:var(--spectrum-picker-xl-ui-icon-gap,var(--spectrum-alias-item-ui-icon-gap-xl));--spectrum-picker-error-icon-margin-left:var(--spectrum-picker-xl-error-icon-margin-left,var(--spectrum-global-dimension-size-225));--spectrum-picker-textonly-padding-left:var(--spectrum-picker-xl-textonly-padding-left,var(--spectrum-alias-item-padding-xl));--spectrum-picker-textonly-padding-right:var(--spectrum-picker-xl-textonly-padding-right,var(--spectrum-alias-item-padding-xl))}:host{--spectrum-picker-min-width:var(--spectrum-global-dimension-size-400);--spectrum-picker-disabled-border-size:0;--spectrum-picker-popover-max-width:var(--spectrum-global-dimension-size-3000);--spectrum-picker-width:var(--spectrum-global-dimension-size-2400);--spectrum-picker-border-size-increase-focus:1px}:host([quiet]) #button{--spectrum-picker-border-size:0;--spectrum-picker-border-radius:0;--spectrum-picker-textonly-padding-left:0;--spectrum-picker-textonly-padding-right:0;width:auto;min-width:0}:host([quiet]) #button:disabled.focus-visible,:host([quiet]) #button:disabled.focus-visible,:host([quiet][disabled]) #button.focus-visible,:host([quiet][disabled]) #button.focus-visible{box-shadow:none}:host([quiet]) #button:disabled.focus-visible,:host([quiet]) #button:disabled:focus-visible,:host([quiet][disabled]) #button.focus-visible,:host([quiet][disabled]) #button:focus-visible{box-shadow:none}:host([dir=ltr]) #label{text-align:left}:host([dir=rtl]) #label{text-align:right}#label{flex:1 1 auto;white-space:nowrap;overflow:hidden;height:calc(var(--spectrum-picker-height) - var(--spectrum-picker-border-size)*2);line-height:calc(var(--spectrum-picker-height) - var(--spectrum-picker-border-size)*2);font-size:var(--spectrum-picker-text-size);text-overflow:ellipsis}#label.placeholder{font-weight:var(--spectrum-picker-placeholder-text-font-weight);font-style:var(--spectrum-picker-placeholder-text-font-style);transition:color var(--spectrum-global-animation-duration-100,.13s) ease-in-out}.picker{display:inline-block;position:relative;vertical-align:top;transition:color var(--spectrum-global-animation-duration-100,.13s) ease-out;flex-shrink:0}:host([dir=ltr]) .validationIcon{margin-left:var(--spectrum-picker-error-icon-margin-left)}:host([dir=rtl]) .validationIcon{margin-right:var(--spectrum-picker-error-icon-margin-left)}:host([dir=ltr]) #label~.picker{margin-left:var(--spectrum-picker-ui-icon-gap)}:host([dir=rtl]) #label~.picker{margin-right:var(--spectrum-picker-ui-icon-gap)}#popover{max-width:var(--spectrum-picker-popover-max-width)}:host([dir=ltr]) .spectrum-Picker-popover--quiet{margin-left:calc(-1*(var(--spectrum-picker-quiet-m-popover-offset-x,
var(--spectrum-global-dimension-size-150)) + var(--spectrum-popover-border-size,
var(--spectrum-alias-border-size-thin))))}:host([dir=rtl]) .spectrum-Picker-popover--quiet{margin-right:calc(-1*(var(--spectrum-picker-quiet-m-popover-offset-x,
var(--spectrum-global-dimension-size-150)) + var(--spectrum-popover-border-size,
var(--spectrum-alias-border-size-thin))))}#button{color:var(--spectrum-picker-m-text-color,var(--spectrum-alias-text-color));background-color:var(--spectrum-picker-m-background-color,var(--spectrum-global-color-gray-75));border-color:var(--spectrum-picker-m-border-color,var(--spectrum-alias-border-color))}#button:hover{color:var(--spectrum-picker-m-text-color-hover,var(--spectrum-alias-text-color-hover));background-color:var(--spectrum-picker-m-background-color-hover,var(--spectrum-global-color-gray-50));border-color:var(--spectrum-picker-m-border-color-hover,var(--spectrum-alias-border-color-hover))}#button:hover .picker{color:var(--spectrum-picker-m-icon-color-hover,var(--spectrum-alias-icon-color-hover))}#button:active,:host([open]) #button{background-color:var(--spectrum-picker-m-background-color-down,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-picker-m-border-color-down,var(--spectrum-alias-border-color-down))}#button:active.placeholder #label,:host([open]) #button.placeholder #label{color:var(--spectrum-picker-m-placeholder-text-color-down,var(--spectrum-alias-placeholder-text-color-down))}#button.focus-visible,#button.focus-visible,:host([focused]) #button{background-color:var(--spectrum-picker-m-background-color-key-focus,var(--spectrum-global-color-gray-50));border-color:var(--spectrum-picker-m-border-color-key-focus,var(--spectrum-alias-border-color-focus));box-shadow:0 0 0 var(--spectrum-picker-border-size-increase-focus) var(--spectrum-picker-m-border-color-key-focus,var(--spectrum-alias-border-color-focus));color:var(--spectrum-picker-m-text-color-key-focus,var(--spectrum-alias-text-color-hover))}#button.focus-visible,#button:focus-visible,:host([focused]) #button{background-color:var(--spectrum-picker-m-background-color-key-focus,var(--spectrum-global-color-gray-50));border-color:var(--spectrum-picker-m-border-color-key-focus,var(--spectrum-alias-border-color-focus));box-shadow:0 0 0 var(--spectrum-picker-border-size-increase-focus) var(--spectrum-picker-m-border-color-key-focus,var(--spectrum-alias-border-color-focus));color:var(--spectrum-picker-m-text-color-key-focus,var(--spectrum-alias-text-color-hover))}#button.focus-visible.placeholder,#button.focus-visible.placeholder,:host([focused]) #button.placeholder{color:var(--spectrum-picker-m-placeholder-text-color-key-focus,var(--spectrum-alias-placeholder-text-color-hover))}#button.focus-visible.placeholder,#button:focus-visible.placeholder,:host([focused]) #button.placeholder{color:var(--spectrum-picker-m-placeholder-text-color-key-focus,var(--spectrum-alias-placeholder-text-color-hover))}:host([invalid]) #button{border-color:var(--spectrum-picker-m-border-color-error,var(--spectrum-global-color-red-500))}:host([invalid]) #button .validationIcon{color:var(--spectrum-picker-m-validation-icon-color-error,var(--spectrum-semantic-negative-color-icon))}:host([invalid]) #button:hover{border-color:var(--spectrum-picker-m-border-color-error-hover,var(--spectrum-global-color-red-600))}:host([invalid]) #button:active,:host([invalid][open]) #button{border-color:var(--spectrum-picker-m-border-color-error-down,var(--spectrum-global-color-red-600))}:host([invalid]) #button.focus-visible,:host([invalid]) #button.focus-visible,:host([invalid][focused]) #button{border-color:var(--spectrum-picker-m-border-color-error-key-focus,var(--spectrum-alias-border-color-focus));box-shadow:0 0 0 var(--spectrum-picker-border-size-increase-focus) var(--spectrum-picker-m-border-color-error-key-focus,var(--spectrum-alias-border-color-focus))}:host([invalid]) #button.focus-visible,:host([invalid]) #button:focus-visible,:host([invalid][focused]) #button{border-color:var(--spectrum-picker-m-border-color-error-key-focus,var(--spectrum-alias-border-color-focus));box-shadow:0 0 0 var(--spectrum-picker-border-size-increase-focus) var(--spectrum-picker-m-border-color-error-key-focus,var(--spectrum-alias-border-color-focus))}#button:disabled,:host([disabled]) #button{background-color:var(--spectrum-picker-m-background-color-disabled,var(--spectrum-global-color-gray-200));color:var(--spectrum-picker-m-text-color-disabled,var(--spectrum-alias-text-color-disabled))}#button:disabled .picker,#button:disabled .spectrum-Picker-icon,#button:disabled .validationIcon,:host([disabled]) #button .picker,:host([disabled]) #button .spectrum-Picker-icon,:host([disabled]) #button .validationIcon{color:var(--spectrum-picker-m-icon-color-disabled,var(--spectrum-alias-icon-color-disabled))}#button:disabled #label.placeholder,:host([disabled]) #button #label.placeholder{color:var(--spectrum-picker-m-placeholder-text-color-disabled,var(--spectrum-alias-text-color-disabled))}.picker{color:var(--spectrum-picker-m-icon-color,var(--spectrum-alias-icon-color))}#label.placeholder{color:var(--spectrum-picker-m-placeholder-text-color,var(--spectrum-alias-placeholder-text-color))}#label.placeholder:hover{color:var(--spectrum-picker-m-placeholder-text-color-hover,var(--spectrum-alias-placeholder-text-color-hover))}#label.placeholder:active{color:var(--spectrum-picker-m-placeholder-text-color-mouse-focus,var(--spectrum-alias-placeholder-text-color))}:host([quiet]) #button{color:var(--spectrum-picker-m-text-color,var(--spectrum-alias-text-color));border-color:var(--spectrum-picker-quiet-m-border-color,var(--spectrum-alias-border-color-transparent));background-color:var(--spectrum-picker-quiet-m-background-color,var(--spectrum-alias-background-color-transparent))}:host([quiet]) #button:hover{background-color:var(--spectrum-picker-quiet-m-background-color-hover,var(--spectrum-alias-background-color-transparent));color:var(--spectrum-picker-m-text-color-hover,var(--spectrum-alias-text-color-hover))}:host([quiet]) #button.focus-visible,:host([quiet]) #button.focus-visible,:host([quiet][focused]) #button{background-color:var(--spectrum-picker-quiet-m-background-color-key-focus,var(--spectrum-alias-background-color-transparent));box-shadow:0 2px 0 0 var(--spectrum-picker-m-border-color-key-focus,var(--spectrum-alias-border-color-focus))}:host([quiet]) #button.focus-visible,:host([quiet]) #button:focus-visible,:host([quiet][focused]) #button{background-color:var(--spectrum-picker-quiet-m-background-color-key-focus,var(--spectrum-alias-background-color-transparent));box-shadow:0 2px 0 0 var(--spectrum-picker-m-border-color-key-focus,var(--spectrum-alias-border-color-focus))}:host([quiet]) #button.focus-visible.placeholder,:host([quiet]) #button.focus-visible.placeholder,:host([quiet][focused]) #button.placeholder{color:var(--spectrum-picker-quiet-m-placeholder-text-color-key-focus,var(--spectrum-alias-placeholder-text-color-hover))}:host([quiet]) #button.focus-visible.placeholder,:host([quiet]) #button:focus-visible.placeholder,:host([quiet][focused]) #button.placeholder{color:var(--spectrum-picker-quiet-m-placeholder-text-color-key-focus,var(--spectrum-alias-placeholder-text-color-hover))}:host([quiet]) #button.focus-visible .picker,:host([quiet]) #button.focus-visible .picker,:host([quiet][focused]) #button .picker{color:var(--spectrum-picker-m-icon-color-key-focus,var(--spectrum-alias-icon-color-focus))}:host([quiet]) #button.focus-visible .picker,:host([quiet]) #button:focus-visible .picker,:host([quiet][focused]) #button .picker{color:var(--spectrum-picker-m-icon-color-key-focus,var(--spectrum-alias-icon-color-focus))}:host([quiet]) #button:active,:host([quiet][open]) #button{background-color:var(--spectrum-picker-quiet-m-background-color-down,var(--spectrum-alias-background-color-transparent));border-color:var(--spectrum-picker-quiet-m-border-color-down,var(--spectrum-alias-border-color-transparent))}:host([quiet]) #button:active.focus-visible,:host([quiet]) #button:active.focus-visible,:host([quiet][focused]) #button:active,:host([quiet][open]) #button.focus-visible,:host([quiet][open]) #button.focus-visible,:host([quiet][open][focused]) #button{background-color:var(--spectrum-picker-quiet-m-background-color-key-focus,var(--spectrum-alias-background-color-transparent));box-shadow:0 2px 0 0 var(--spectrum-picker-m-border-color-key-focus,var(--spectrum-alias-border-color-focus))}:host([quiet]) #button:active.focus-visible,:host([quiet]) #button:active:focus-visible,:host([quiet][focused]) #button:active,:host([quiet][open]) #button.focus-visible,:host([quiet][open]) #button:focus-visible,:host([quiet][open][focused]) #button{background-color:var(--spectrum-picker-quiet-m-background-color-key-focus,var(--spectrum-alias-background-color-transparent));box-shadow:0 2px 0 0 var(--spectrum-picker-m-border-color-key-focus,var(--spectrum-alias-border-color-focus))}:host([quiet][invalid]) #button.focus-visible,:host([quiet][invalid]) #button.focus-visible,:host([quiet][invalid][focused]) #button{box-shadow:0 2px 0 0 var(--spectrum-picker-m-border-color-error-key-focus,var(--spectrum-alias-border-color-focus))}:host([quiet][invalid]) #button.focus-visible,:host([quiet][invalid]) #button:focus-visible,:host([quiet][invalid][focused]) #button{box-shadow:0 2px 0 0 var(--spectrum-picker-m-border-color-error-key-focus,var(--spectrum-alias-border-color-focus))}:host([quiet]) #button:disabled,:host([quiet][disabled]) #button{background-color:var(--spectrum-picker-quiet-m-background-color-disabled,var(--spectrum-alias-background-color-transparent));color:var(--spectrum-picker-m-text-color-disabled,var(--spectrum-alias-text-color-disabled))}:host{display:inline-flex;vertical-align:top;max-width:100%;width:var(--spectrum-picker-width);min-width:var(--spectrum-picker-min-width)}:host([quiet]){width:auto;min-width:0}:host([size]){--spectrum-picker-width:var(--spectrum-global-dimension-size-2400)}#button{width:100%;min-width:100%;max-width:100%}:host([readonly]) #button{-webkit-user-select:inherit;user-select:inherit}sp-popover{display:none}.picker,.validationIcon{flex-shrink:0}:host([focused]:not([quiet])) #button #label.placeholder{color:var(--spectrum-picker-placeholder-text-color-key-focus,var(--spectrum-alias-placeholder-text-color-hover))}:host([focused]:not([quiet])) #button .picker{color:var(--spectrum-picker-icon-color-key-focus,var(--spectrum-alias-icon-color-focus))}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    let customTemplateLiteralTag;
    const tag = function (strings, ...values) {
        if (customTemplateLiteralTag) {
            return customTemplateLiteralTag(strings, ...values);
        }
        return values.reduce((acc, v, idx) => acc + v + strings[idx + 1], strings[0]);
    };
    const setCustomTemplateLiteralTag = (tag) => {
        customTemplateLiteralTag = tag;
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const AlertIcon = ({ width = 24, height = 24, hidden = false, title = 'Alert' } = {}) => {
        return tag `<svg
    xmlns="http://www.w3.org/2000/svg"
    height="${height}"
    viewBox="0 0 36 36"
    width="${width}"
    aria-hidden="${hidden ? 'true' : 'false'}"
    role="img"
    fill="currentColor"
    aria-label="${title}"
  >
    <path
      d="M17.127 2.579L.4 32.512A1 1 0 001.272 34h33.456a1 1 0 00.872-1.488L18.873 2.579a1 1 0 00-1.746 0zM20 29.5a.5.5 0 01-.5.5h-3a.5.5 0 01-.5-.5v-3a.5.5 0 01.5-.5h3a.5.5 0 01.5.5zm0-6a.5.5 0 01-.5.5h-3a.5.5 0 01-.5-.5v-12a.5.5 0 01.5-.5h3a.5.5 0 01.5.5z"
    />
  </svg>`;
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class IconAlert extends IconBase {
        render() {
            setCustomTemplateLiteralTag(html);
            return AlertIcon({ hidden: !this.label, title: this.label });
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-icon-alert', IconAlert);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$U = css `
:host{--spectrum-menu-margin-x:var(--spectrum-global-dimension-size-40);--spectrum-listitem-heading-text-size:var(--spectrum-global-dimension-font-size-50);--spectrum-listitem-heading-text-font-weight:400;--spectrum-listitem-heading-text-transform:uppercase;--spectrum-listitem-heading-letter-spacing:0.06em;--spectrum-listitem-heading-margin:var(--spectrum-global-dimension-size-75) 0 0 0;--spectrum-listitem-heading-padding:0 var(--spectrum-global-dimension-size-450) 0 var(--spectrum-global-dimension-size-150);--spectrum-listitem-padding-y:var(--spectrum-global-dimension-size-85);--spectrum-listitem-icon-margin-top:var(--spectrum-global-dimension-size-50);--spectrum-listitem-label-line-height:1.3;--spectrum-listitem-heading-line-height:var(--spectrum-alias-body-text-line-height,var(--spectrum-global-font-line-height-medium));--spectrum-listitem-divider-size:var(--spectrum-listitem-m-divider-size,var(--spectrum-alias-border-size-thick));--spectrum-listitem-divider-padding:var(--spectrum-listitem-m-divider-padding,3px);--spectrum-listitem-focus-indicator-size:var(--spectrum-listitem-m-focus-indicator-size,var(--spectrum-alias-border-size-thick));--spectrum-listitem-text-font-weight:var(--spectrum-listitem-m-text-font-weight,var(--spectrum-alias-body-text-font-weight));--spectrum-listitem-text-size:var(--spectrum-listitem-m-text-size,var(--spectrum-alias-item-text-size-m));--spectrum-listitem-height:var(--spectrum-listitem-m-height,var(--spectrum-alias-item-height-m));--spectrum-listitem-icon-gap:var(--spectrum-listitem-m-icon-gap,var(--spectrum-alias-item-workflow-icon-gap-m));--spectrum-listitem-padding-left:var(--spectrum-listitem-m-padding-left,var(--spectrum-alias-item-workflow-padding-left-m));--spectrum-listitem-padding-right:var(--spectrum-listitem-m-padding-right,var(--spectrum-alias-item-padding-m));--spectrum-listitem-thumbnail-padding-left:var(--spectrum-listitem-m-thumbnail-padding-left,var(--spectrum-alias-item-padding-m));display:inline-block;box-sizing:border-box;margin-top:var(--spectrum-popover-padding-y,var(--spectrum-global-dimension-size-50));margin-bottom:var(--spectrum-popover-padding-y,var(--spectrum-global-dimension-size-50));margin-left:0;margin-right:0;padding:0;list-style-type:none;overflow:auto}:host([dir=ltr][selectable]) ::slotted(sp-menu-item){padding-right:var(--spectrum-listitem-selectable-padding-right)}:host([dir=rtl][selectable]) ::slotted(sp-menu-item){padding-left:var(--spectrum-listitem-selectable-padding-right)}:host([dir=ltr][selectable]) ::slotted(sp-menu-item[selected]){padding-right:calc(var(--spectrum-listitem-padding-right) - var(--spectrum-popover-border-size,
var(--spectrum-alias-border-size-thin)))}:host([dir=rtl][selectable]) ::slotted(sp-menu-item[selected]){padding-left:calc(var(--spectrum-listitem-padding-right) - var(--spectrum-popover-border-size,
var(--spectrum-alias-border-size-thin)))}::slotted(sp-menu){display:block}:host{--spectrum-listheading-text-color:var(--spectrum-global-color-gray-700);background-color:var(--spectrum-listitem-m-background-color,var(--spectrum-alias-background-color-transparent));--spectrum-listitem-selectable-padding-right:calc(var(--spectrum-global-dimension-size-100) + var(--spectrum-icon-checkmark-medium-width) + var(--spectrum-listitem-icon-gap))}:host(:focus){outline:none}:host sp-menu{display:block}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * Spectrum Menu Component
     * @element sp-menu
     *
     */
    class Menu extends SpectrumElement {
        constructor() {
            super();
            this.selectable = false;
            this.menuItems = [];
            this.focusedItemIndex = 0;
            this.focusInItemIndex = 0;
            this.prepItems = () => {
                this.menuItems = [
                    ...this.querySelectorAll(`[role="${this.childRole}"]`),
                ];
                if (!this.menuItems || this.menuItems.length === 0) {
                    return;
                }
                this.updateSelectedItemIndex();
                const focusInItem = this.menuItems[this.focusInItemIndex];
                if (this.getRootNode().activeElement === this) {
                    focusInItem.focused = true;
                }
            };
            this.handleKeydown = this.handleKeydown.bind(this);
            this.startListeningToKeyboard = this.startListeningToKeyboard.bind(this);
            this.stopListeningToKeyboard = this.stopListeningToKeyboard.bind(this);
            this.onClick = this.onClick.bind(this);
            this.addEventListener('click', this.onClick);
            this.addEventListener('focusin', this.startListeningToKeyboard);
            this.addEventListener('focus', this.focus);
        }
        static get styles() {
            return [styles$U];
        }
        /**
         * Hide this getter from web-component-analyzer until
         * https://github.com/runem/web-component-analyzer/issues/131
         * has been addressed.
         *
         * @private
         */
        get childRole() {
            return this.getAttribute('role') === 'menu' ? 'menuitem' : 'option';
        }
        focus() {
            if (!this.menuItems.length ||
                this.menuItems.every((item) => item.disabled)) {
                return;
            }
            this.focusMenuItemByOffset(0);
            super.focus();
        }
        onClick(event) {
            const path = event.composedPath();
            const target = path.find((el) => {
                /* c8 ignore next 3 */
                if (!(el instanceof Element)) {
                    return false;
                }
                return el.getAttribute('role') === this.childRole;
            });
            /* c8 ignore next 3 */
            if (!target) {
                return;
            }
            this.prepareToCleanUp();
        }
        startListeningToKeyboard() {
            const activeElement = this.getRootNode().activeElement;
            if (activeElement !== this) {
                this.focus();
                if (activeElement && this.focusedItemIndex === 0) {
                    const offset = this.menuItems.indexOf(activeElement);
                    if (offset > 0) {
                        this.focusMenuItemByOffset(offset);
                    }
                }
            }
            this.addEventListener('keydown', this.handleKeydown);
            this.addEventListener('focusout', this.handleFocusout);
        }
        handleFocusout() {
            this.stopListeningToKeyboard();
            const focusedItem = this.menuItems[this.focusedItemIndex];
            if (focusedItem) {
                focusedItem.focused = false;
            }
        }
        stopListeningToKeyboard() {
            this.removeEventListener('keydown', this.handleKeydown);
        }
        handleKeydown(event) {
            const { code } = event;
            if (code === 'Tab') {
                this.prepareToCleanUp();
                return;
            }
            if (code === 'Space' || code === 'Enter') {
                this.menuItems[this.focusedItemIndex].click();
                return;
            }
            if (code !== 'ArrowDown' && code !== 'ArrowUp') {
                return;
            }
            const lastFocusedItem = this.menuItems[this.focusedItemIndex];
            const direction = code === 'ArrowDown' ? 1 : -1;
            const itemToFocus = this.focusMenuItemByOffset(direction);
            if (itemToFocus === lastFocusedItem) {
                return;
            }
            event.preventDefault();
            itemToFocus.scrollIntoView({ block: 'nearest' });
        }
        focusMenuItemByOffset(offset) {
            const step = offset || 1;
            const focusedItem = this.menuItems[this.focusedItemIndex];
            focusedItem.focused = false;
            this.focusedItemIndex =
                (this.menuItems.length + this.focusedItemIndex + offset) %
                    this.menuItems.length;
            let itemToFocus = this.menuItems[this.focusedItemIndex];
            let availableItems = this.menuItems.length;
            // cycle through the available items in the directions of the offset to find the next non-disabled item
            while (itemToFocus.disabled && availableItems) {
                availableItems -= 1;
                this.focusedItemIndex =
                    (this.menuItems.length + this.focusedItemIndex + step) %
                        this.menuItems.length;
                itemToFocus = this.menuItems[this.focusedItemIndex];
            }
            // if there are no non-disabled items, skip the work to focus a child
            if (!itemToFocus.disabled) {
                itemToFocus.focused = true;
                this.setAttribute('aria-activedescendant', itemToFocus.id);
            }
            return itemToFocus;
        }
        prepareToCleanUp() {
            document.addEventListener('focusout', () => {
                requestAnimationFrame(() => {
                    /* c8 ignore next 3 */
                    if (this.menuItems.length === 0) {
                        return;
                    }
                    const focusedItem = this.menuItems[this.focusedItemIndex];
                    focusedItem.focused = false;
                    this.updateSelectedItemIndex();
                });
            }, { once: true });
        }
        updateSelectedItemIndex() {
            let index = this.menuItems.length - 1;
            let item = this.menuItems[index];
            while (index && item && !item.selected) {
                index -= 1;
                item = this.menuItems[index];
            }
            index = Math.max(index, 0);
            this.menuItems.forEach((item, i) => {
                if (i !== index) {
                    item.focused = false;
                }
            });
            this.focusedItemIndex = index;
            this.focusInItemIndex = index;
        }
        render() {
            return html `
            <slot></slot>
        `;
        }
        firstUpdated(changed) {
            super.firstUpdated(changed);
            if (this.getAttribute('role') !== 'presentation') {
                this.tabIndex = 0;
            }
        }
        connectedCallback() {
            super.connectedCallback();
            if (!this.hasAttribute('role')) {
                const queryRoleEvent = new CustomEvent('sp-menu-query-role', {
                    bubbles: true,
                    composed: true,
                    detail: {
                        role: '',
                    },
                });
                this.dispatchEvent(queryRoleEvent);
                this.setAttribute('role', queryRoleEvent.detail.role || 'menu');
            }
            if (!this.observer) {
                this.observer = new MutationObserver(this.prepItems);
            }
            this.observer.observe(this, { childList: true, subtree: true });
            this.updateComplete.then(() => this.prepItems());
            const selectedItem = this.querySelector('[selected]');
            if (selectedItem) {
                requestAnimationFrame(() => {
                    selectedItem.scrollIntoView({ block: 'nearest' });
                });
            }
        }
        disconnectedCallback() {
            this.observer.disconnect();
            super.disconnectedCallback();
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Menu.prototype, "selectable", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-menu', Menu);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$T = css `
:host{--spectrum-overlay-animation-distance:var(--spectrum-picker-m-popover-offset-y,var(--spectrum-global-dimension-size-75));visibility:hidden;opacity:0;transition:transform var(--spectrum-global-animation-duration-100,.13s) ease-in-out,opacity var(--spectrum-global-animation-duration-100,.13s) ease-in-out,visibility 0ms linear var(--spectrum-global-animation-duration-100,.13s);pointer-events:none}:host([open]){visibility:visible;opacity:1;transition-delay:0ms;pointer-events:auto}:host([placement*=bottom][open]){transform:translateY(var(--spectrum-overlay-animation-distance))}:host([placement*=top][open]){transform:translateY(calc(-1*var(--spectrum-overlay-animation-distance)))}:host([placement*=right][open]){transform:translateX(var(--spectrum-overlay-animation-distance))}:host([placement*=left][open]){transform:translateX(calc(-1*var(--spectrum-overlay-animation-distance)))}:host{--spectrum-popover-target-offset:13px;--spectrum-popover-dialog-padding:30px 29px;--spectrum-popover-dialog-min-width:270px;--spectrum-popover-min-width:var(--spectrum-global-dimension-size-400);--spectrum-popover-min-height:var(--spectrum-global-dimension-size-400);display:inline-flex;flex-direction:column;min-width:var(--spectrum-popover-min-width,var(--spectrum-global-dimension-size-400));min-height:var(--spectrum-popover-min-height,var(--spectrum-global-dimension-size-400));border-style:solid;border-width:var(--spectrum-popover-border-size,var(--spectrum-alias-border-size-thin));border-radius:var(--spectrum-popover-border-radius,var(--spectrum-alias-border-radius-regular));outline:none;box-sizing:border-box}#tip,:host{position:absolute}#tip{-webkit-transform:translate(0)}#tip .triangle{stroke-linecap:square;stroke-linejoin:miter;stroke-width:var(--spectrum-popover-border-size,var(--spectrum-alias-border-size-thin))}:host([dialog]){min-width:var(--spectrum-popover-dialog-min-width);padding:var(--spectrum-popover-dialog-padding)}:host([placement*=left][tip]){margin-right:var(--spectrum-popover-target-offset)}:host([placement*=left]) #tip{left:100%}:host([placement*=right][tip]){margin-left:var(--spectrum-popover-target-offset)}:host([placement*=right]) #tip{right:100%;transform:scaleX(-1)}:host([placement*=left]) #tip,:host([placement*=right]) #tip{top:50%;margin-top:calc(var(--spectrum-global-dimension-size-150)*-1)}:host([placement*=bottom][tip]){margin-top:var(--spectrum-popover-target-offset)}:host([placement*=bottom]) #tip{bottom:100%;transform:scaleY(-1)}:host([placement*=top][tip]){margin-bottom:var(--spectrum-popover-target-offset)}:host([placement*=top]) #tip{top:100%}:host([placement*=bottom]) #tip,:host([placement*=top]) #tip{left:50%;margin-left:calc(var(--spectrum-global-dimension-size-150)*-1)}:host{background-color:var(--spectrum-popover-background-color,var(--spectrum-global-color-gray-50));border-color:var(--spectrum-popover-border-color,var(--spectrum-alias-border-color-dark));filter:drop-shadow(0 1px 4px var(--spectrum-popover-shadow-color,var(--spectrum-alias-dropshadow-color)));-webkit-filter:drop-shadow(0 1px 4px var(--spectrum-popover-shadow-color,var(--spectrum-alias-dropshadow-color)));will-change:filter;-webkit-clip-path:inset(-30px -30px);clip-path:inset(-30px -30px)}#tip .triangle{fill:var(--spectrum-popover-background-color,var(--spectrum-global-color-gray-50));stroke:var(--spectrum-popover-border-color,var(--spectrum-alias-border-color-dark))}:host{--sp-popover-tip-size:24px}:host([placement*=bottom]),:host([placement*=top]){max-height:calc(100% - var(--spectrum-overlay-animation-distance))}:host([placement*=left]),:host([placement*=right]){max-width:calc(100% - var(--spectrum-overlay-animation-distance))}::slotted(*){overscroll-behavior:contain}.tip{width:var(--sp-popover-tip-size);height:calc(var(--sp-popover-tip-size)/2);position:absolute;left:0}:host([placement*=bottom]) #tip,:host([placement*=right]) #tip{transform:none}:host([placement*=top]) .tip{top:100%}:host([placement*=bottom]) .tip{bottom:100%;transform:scaleY(-1)}:host([placement*=left]) .tip{transform-origin:100% 0;transform:rotate(-90deg) translateY(-200%)}:host([placement*=right]) .tip{transform-origin:0 0;transform:rotate(90deg)}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @attr {Boolean} open - The open state of the popover
     * @attr {Boolean} dialog - Adds some padding to the popover
     */
    class Popover extends SpectrumElement {
        constructor() {
            super(...arguments);
            this.open = false;
            /**
             * @type {"auto" | "auto-start" | "auto-end" | "top" | "bottom" | "right" | "left" | "top-start" | "top-end" | "bottom-start" | "bottom-end" | "right-start" | "right-end" | "left-start" | "left-end" | "none"}
             * @attr
             */
            this.placement = 'none';
            this.tip = false;
        }
        static get styles() {
            return [styles$T];
        }
        renderTip() {
            return html `
            <div id="tip">
                <svg
                    xmlns="http://www.w3.org/svg/2000"
                    class="tip"
                    viewBox="0 0 24 12"
                >
                    <path
                        class="triangle"
                        d="M 0.7071067811865476 0 L 11.414213562373096 10.707106781186548 L 22.121320343559645 0"
                    ></path>
                </svg>
            </div>
        `;
        }
        connectedCallback() {
            super.connectedCallback();
            this.addEventListener('sp-overlay-query', this.onOverlayQuery);
        }
        disconnectedCallback() {
            super.disconnectedCallback();
            this.removeEventListener('sp-overlay-query', this.onOverlayQuery);
        }
        onOverlayQuery(event) {
            /* c8 ignore next */
            if (!event.target)
                return;
            const target = event.target;
            /* c8 ignore next */
            if (target !== this)
                return;
            const tipElement = this.shadowRoot.querySelector('#tip');
            if (tipElement) {
                event.detail.overlayContentTipElement = tipElement;
            }
        }
        render() {
            return html `
            <slot></slot>
            ${this.tip ? this.renderTip() : nothing}
        `;
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Popover.prototype, "open", void 0);
    __decorate([
        property({ reflect: true })
    ], Popover.prototype, "placement", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Popover.prototype, "tip", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-popover', Popover);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$S = css `
@keyframes spOverlayFadeIn{0%{opacity:0;transform:var(--sp-overlay-from)}to{opacity:1;transform:translate(0)}}@keyframes spOverlayFadeOut{0%{opacity:1;transform:translate(0)}to{opacity:0;transform:var(--sp-overlay-from)}}:host{z-index:1000;position:absolute;display:inline-block;pointer-events:none}:host(:focus){outline:none}:host([placement=none]){top:0;left:0}:host([placement=none]) ::slotted(*){height:calc(100vh - var(--swc-body-margins-block, 0 * 1px))}#contents,sp-theme{height:100%}#contents{display:inline-block;pointer-events:none;animation-duration:var(--spectrum-global-animation-duration-200,.16s);animation-timing-function:var(--spectrum-global-animation-ease-out,ease-out);opacity:1;visibility:visible}:host([data-popper-placement*=top]) #contents{--sp-overlay-from:translateY(var(--spectrum-global-dimension-size-75))}:host([data-popper-placement*=right]) #contents{--sp-overlay-from:translateX(calc(-1*var(--spectrum-global-dimension-size-75)))}:host([data-popper-placement*=bottom]) #contents{--sp-overlay-from:translateY(calc(-1*var(--spectrum-global-dimension-size-75)))}:host([data-popper-placement*=left]) #contents{--sp-overlay-from:translateX(var(--spectrum-global-dimension-size-75))}:host([animating]) ::slotted(*){pointer-events:none}#contents ::slotted(*){position:relative}
`;

    var top$1 = 'top';
    var bottom$1 = 'bottom';
    var right$1 = 'right';
    var left$1 = 'left';
    var auto = 'auto';
    var basePlacements$1 = [top$1, bottom$1, right$1, left$1];
    var start$1 = 'start';
    var end$1 = 'end';
    var clippingParents$1 = 'clippingParents';
    var viewport$1 = 'viewport';
    var popper$1 = 'popper';
    var reference$1 = 'reference';
    var variationPlacements = /*#__PURE__*/basePlacements$1.reduce(function (acc, placement) {
      return acc.concat([placement + "-" + start$1, placement + "-" + end$1]);
    }, []);
    var placements = /*#__PURE__*/[].concat(basePlacements$1, [auto]).reduce(function (acc, placement) {
      return acc.concat([placement, placement + "-" + start$1, placement + "-" + end$1]);
    }, []); // modifiers that need to read the DOM

    var beforeRead = 'beforeRead';
    var read = 'read';
    var afterRead = 'afterRead'; // pure-logic modifiers

    var beforeMain = 'beforeMain';
    var main = 'main';
    var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

    var beforeWrite = 'beforeWrite';
    var write = 'write';
    var afterWrite = 'afterWrite';
    var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

    function getBasePlacement$1(placement) {
      return placement.split('-')[0];
    }

    function getBoundingClientRect$1(element) {
      var rect = element.getBoundingClientRect();
      return {
        width: rect.width,
        height: rect.height,
        top: rect.top,
        right: rect.right,
        bottom: rect.bottom,
        left: rect.left,
        x: rect.left,
        y: rect.top
      };
    }

    // means it doesn't take into account transforms.

    function getLayoutRect(element) {
      var clientRect = getBoundingClientRect$1(element); // Use the clientRect sizes if it's not been transformed.
      // Fixes https://github.com/popperjs/popper-core/issues/1223

      var width = element.offsetWidth;
      var height = element.offsetHeight;

      if (Math.abs(clientRect.width - width) <= 1) {
        width = clientRect.width;
      }

      if (Math.abs(clientRect.height - height) <= 1) {
        height = clientRect.height;
      }

      return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: width,
        height: height
      };
    }

    function getWindow$1(node) {
      if (node == null) {
        return window;
      }

      if (node.toString() !== '[object Window]') {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
      }

      return node;
    }

    function isElement$1(node) {
      var OwnElement = getWindow$1(node).Element;
      return node instanceof OwnElement || node instanceof Element;
    }

    function isHTMLElement$1(node) {
      var OwnElement = getWindow$1(node).HTMLElement;
      return node instanceof OwnElement || node instanceof HTMLElement;
    }

    function isShadowRoot$1(node) {
      // IE 11 has no ShadowRoot
      if (typeof ShadowRoot === 'undefined') {
        return false;
      }

      var OwnElement = getWindow$1(node).ShadowRoot;
      return node instanceof OwnElement || node instanceof ShadowRoot;
    }

    function contains$1(parent, child) {
      var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

      if (parent.contains(child)) {
        return true;
      } // then fallback to custom implementation with Shadow DOM support
      else if (rootNode && isShadowRoot$1(rootNode)) {
          var next = child;

          do {
            if (next && parent.isSameNode(next)) {
              return true;
            } // $FlowFixMe[prop-missing]: need a better way to handle this...


            next = next.parentNode || next.host;
          } while (next);
        } // Give up, the result is false


      return false;
    }

    function getNodeName$1(element) {
      return element ? (element.nodeName || '').toLowerCase() : null;
    }

    function getComputedStyle$2(element) {
      return getWindow$1(element).getComputedStyle(element);
    }

    function isTableElement$1(element) {
      return ['table', 'td', 'th'].indexOf(getNodeName$1(element)) >= 0;
    }

    function getDocumentElement$1(element) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return ((isElement$1(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
      element.document) || window.document).documentElement;
    }

    function getParentNode$1(element) {
      if (getNodeName$1(element) === 'html') {
        return element;
      }

      return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
        // $FlowFixMe[incompatible-return]
        // $FlowFixMe[prop-missing]
        element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
        element.parentNode || ( // DOM Element detected
        isShadowRoot$1(element) ? element.host : null) || // ShadowRoot detected
        // $FlowFixMe[incompatible-call]: HTMLElement is a Node
        getDocumentElement$1(element) // fallback

      );
    }

    function getTrueOffsetParent$1(element) {
      if (!isHTMLElement$1(element) || // https://github.com/popperjs/popper-core/issues/837
      getComputedStyle$2(element).position === 'fixed') {
        return null;
      }

      return element.offsetParent;
    } // `.offsetParent` reports `null` for fixed elements, while absolute elements
    // return the containing block


    function getContainingBlock$1(element) {
      var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
      var isIE = navigator.userAgent.indexOf('Trident') !== -1;

      if (isIE && isHTMLElement$1(element)) {
        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
        var elementCss = getComputedStyle$2(element);

        if (elementCss.position === 'fixed') {
          return null;
        }
      }

      var currentNode = getParentNode$1(element);

      while (isHTMLElement$1(currentNode) && ['html', 'body'].indexOf(getNodeName$1(currentNode)) < 0) {
        var css = getComputedStyle$2(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

        if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
          return currentNode;
        } else {
          currentNode = currentNode.parentNode;
        }
      }

      return null;
    } // Gets the closest ancestor positioned element. Handles some edge cases,
    // such as table ancestors and cross browser bugs.


    function getOffsetParent$1(element) {
      var window = getWindow$1(element);
      var offsetParent = getTrueOffsetParent$1(element);

      while (offsetParent && isTableElement$1(offsetParent) && getComputedStyle$2(offsetParent).position === 'static') {
        offsetParent = getTrueOffsetParent$1(offsetParent);
      }

      if (offsetParent && (getNodeName$1(offsetParent) === 'html' || getNodeName$1(offsetParent) === 'body' && getComputedStyle$2(offsetParent).position === 'static')) {
        return window;
      }

      return offsetParent || getContainingBlock$1(element) || window;
    }

    function getMainAxisFromPlacement$1(placement) {
      return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
    }

    var max$1 = Math.max;
    var min$1 = Math.min;
    var round$1 = Math.round;

    function within(min, value, max) {
      return max$1(min, min$1(value, max));
    }

    function getFreshSideObject$1() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }

    function mergePaddingObject$1(paddingObject) {
      return Object.assign({}, getFreshSideObject$1(), paddingObject);
    }

    function expandToHashMap$1(value, keys) {
      return keys.reduce(function (hashMap, key) {
        hashMap[key] = value;
        return hashMap;
      }, {});
    }

    var toPaddingObject = function toPaddingObject(padding, state) {
      padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
        placement: state.placement
      })) : padding;
      return mergePaddingObject$1(typeof padding !== 'number' ? padding : expandToHashMap$1(padding, basePlacements$1));
    };

    function arrow(_ref) {
      var _state$modifiersData$;

      var state = _ref.state,
          name = _ref.name,
          options = _ref.options;
      var arrowElement = state.elements.arrow;
      var popperOffsets = state.modifiersData.popperOffsets;
      var basePlacement = getBasePlacement$1(state.placement);
      var axis = getMainAxisFromPlacement$1(basePlacement);
      var isVertical = [left$1, right$1].indexOf(basePlacement) >= 0;
      var len = isVertical ? 'height' : 'width';

      if (!arrowElement || !popperOffsets) {
        return;
      }

      var paddingObject = toPaddingObject(options.padding, state);
      var arrowRect = getLayoutRect(arrowElement);
      var minProp = axis === 'y' ? top$1 : left$1;
      var maxProp = axis === 'y' ? bottom$1 : right$1;
      var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
      var startDiff = popperOffsets[axis] - state.rects.reference[axis];
      var arrowOffsetParent = getOffsetParent$1(arrowElement);
      var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
      var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
      // outside of the popper bounds

      var min = paddingObject[minProp];
      var max = clientSize - arrowRect[len] - paddingObject[maxProp];
      var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
      var offset = within(min, center, max); // Prevents breaking syntax highlighting...

      var axisProp = axis;
      state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
    }

    function effect$2(_ref2) {
      var state = _ref2.state,
          options = _ref2.options;
      var _options$element = options.element,
          arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

      if (arrowElement == null) {
        return;
      } // CSS selector


      if (typeof arrowElement === 'string') {
        arrowElement = state.elements.popper.querySelector(arrowElement);

        if (!arrowElement) {
          return;
        }
      }

      if (!contains$1(state.elements.popper, arrowElement)) {

        return;
      }

      state.elements.arrow = arrowElement;
    } // eslint-disable-next-line import/no-unused-modules


    var arrow$1 = {
      name: 'arrow',
      enabled: true,
      phase: 'main',
      fn: arrow,
      effect: effect$2,
      requires: ['popperOffsets'],
      requiresIfExists: ['preventOverflow']
    };

    var hash$1 = {
      left: 'right',
      right: 'left',
      bottom: 'top',
      top: 'bottom'
    };
    function getOppositePlacement(placement) {
      return placement.replace(/left|right|bottom|top/g, function (matched) {
        return hash$1[matched];
      });
    }

    var hash = {
      start: 'end',
      end: 'start'
    };
    function getOppositeVariationPlacement(placement) {
      return placement.replace(/start|end/g, function (matched) {
        return hash[matched];
      });
    }

    function getWindowScroll$1(node) {
      var win = getWindow$1(node);
      var scrollLeft = win.pageXOffset;
      var scrollTop = win.pageYOffset;
      return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
      };
    }

    function getWindowScrollBarX$1(element) {
      // If <html> has a CSS width greater than the viewport, then this will be
      // incorrect for RTL.
      // Popper 1 is broken in this case and never had a bug report so let's assume
      // it's not an issue. I don't think anyone ever specifies width on <html>
      // anyway.
      // Browsers where the left scrollbar doesn't cause an issue report `0` for
      // this (e.g. Edge 2019, IE11, Safari)
      return getBoundingClientRect$1(getDocumentElement$1(element)).left + getWindowScroll$1(element).scrollLeft;
    }

    function getViewportRect$1(element) {
      var win = getWindow$1(element);
      var html = getDocumentElement$1(element);
      var visualViewport = win.visualViewport;
      var width = html.clientWidth;
      var height = html.clientHeight;
      var x = 0;
      var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
      // can be obscured underneath it.
      // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
      // if it isn't open, so if this isn't available, the popper will be detected
      // to overflow the bottom of the screen too early.

      if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
        // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
        // errors due to floating point numbers, so we need to check precision.
        // Safari returns a number <= 0, usually < -1 when pinch-zoomed
        // Feature detection fails in mobile emulation mode in Chrome.
        // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
        // 0.001
        // Fallback here: "Not Safari" userAgent

        if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
          x = visualViewport.offsetLeft;
          y = visualViewport.offsetTop;
        }
      }

      return {
        width: width,
        height: height,
        x: x + getWindowScrollBarX$1(element),
        y: y
      };
    }

    // of the `<html>` and `<body>` rect bounds if horizontally scrollable

    function getDocumentRect$1(element) {
      var _element$ownerDocumen;

      var html = getDocumentElement$1(element);
      var winScroll = getWindowScroll$1(element);
      var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
      var width = max$1(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
      var height = max$1(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
      var x = -winScroll.scrollLeft + getWindowScrollBarX$1(element);
      var y = -winScroll.scrollTop;

      if (getComputedStyle$2(body || html).direction === 'rtl') {
        x += max$1(html.clientWidth, body ? body.clientWidth : 0) - width;
      }

      return {
        width: width,
        height: height,
        x: x,
        y: y
      };
    }

    function isScrollParent$1(element) {
      // Firefox wants us to check `-x` and `-y` variations as well
      var _getComputedStyle = getComputedStyle$2(element),
          overflow = _getComputedStyle.overflow,
          overflowX = _getComputedStyle.overflowX,
          overflowY = _getComputedStyle.overflowY;

      return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
    }

    function getScrollParent$1(node) {
      if (['html', 'body', '#document'].indexOf(getNodeName$1(node)) >= 0) {
        // $FlowFixMe[incompatible-return]: assume body is always available
        return node.ownerDocument.body;
      }

      if (isHTMLElement$1(node) && isScrollParent$1(node)) {
        return node;
      }

      return getScrollParent$1(getParentNode$1(node));
    }

    /*
    given a DOM element, return the list of all scroll parents, up the list of ancesors
    until we get to the top window object. This list is what we attach scroll listeners
    to, because if any of these parent elements scroll, we'll need to re-calculate the
    reference element's position.
    */

    function listScrollParents$1(element, list) {
      var _element$ownerDocumen;

      if (list === void 0) {
        list = [];
      }

      var scrollParent = getScrollParent$1(element);
      var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
      var win = getWindow$1(scrollParent);
      var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent$1(scrollParent) ? scrollParent : []) : scrollParent;
      var updatedList = list.concat(target);
      return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents$1(getParentNode$1(target)));
    }

    function rectToClientRect$1(rect) {
      return Object.assign({}, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
      });
    }

    function getInnerBoundingClientRect$1(element) {
      var rect = getBoundingClientRect$1(element);
      rect.top = rect.top + element.clientTop;
      rect.left = rect.left + element.clientLeft;
      rect.bottom = rect.top + element.clientHeight;
      rect.right = rect.left + element.clientWidth;
      rect.width = element.clientWidth;
      rect.height = element.clientHeight;
      rect.x = rect.left;
      rect.y = rect.top;
      return rect;
    }

    function getClientRectFromMixedType$1(element, clippingParent) {
      return clippingParent === viewport$1 ? rectToClientRect$1(getViewportRect$1(element)) : isHTMLElement$1(clippingParent) ? getInnerBoundingClientRect$1(clippingParent) : rectToClientRect$1(getDocumentRect$1(getDocumentElement$1(element)));
    } // A "clipping parent" is an overflowable container with the characteristic of
    // clipping (or hiding) overflowing elements with a position different from
    // `initial`


    function getClippingParents$1(element) {
      var clippingParents = listScrollParents$1(getParentNode$1(element));
      var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$2(element).position) >= 0;
      var clipperElement = canEscapeClipping && isHTMLElement$1(element) ? getOffsetParent$1(element) : element;

      if (!isElement$1(clipperElement)) {
        return [];
      } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


      return clippingParents.filter(function (clippingParent) {
        return isElement$1(clippingParent) && contains$1(clippingParent, clipperElement) && getNodeName$1(clippingParent) !== 'body';
      });
    } // Gets the maximum area that the element is visible in due to any number of
    // clipping parents


    function getClippingRect$1(element, boundary, rootBoundary) {
      var mainClippingParents = boundary === 'clippingParents' ? getClippingParents$1(element) : [].concat(boundary);
      var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
      var firstClippingParent = clippingParents[0];
      var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
        var rect = getClientRectFromMixedType$1(element, clippingParent);
        accRect.top = max$1(rect.top, accRect.top);
        accRect.right = min$1(rect.right, accRect.right);
        accRect.bottom = min$1(rect.bottom, accRect.bottom);
        accRect.left = max$1(rect.left, accRect.left);
        return accRect;
      }, getClientRectFromMixedType$1(element, firstClippingParent));
      clippingRect.width = clippingRect.right - clippingRect.left;
      clippingRect.height = clippingRect.bottom - clippingRect.top;
      clippingRect.x = clippingRect.left;
      clippingRect.y = clippingRect.top;
      return clippingRect;
    }

    function getVariation$1(placement) {
      return placement.split('-')[1];
    }

    function computeOffsets$1(_ref) {
      var reference = _ref.reference,
          element = _ref.element,
          placement = _ref.placement;
      var basePlacement = placement ? getBasePlacement$1(placement) : null;
      var variation = placement ? getVariation$1(placement) : null;
      var commonX = reference.x + reference.width / 2 - element.width / 2;
      var commonY = reference.y + reference.height / 2 - element.height / 2;
      var offsets;

      switch (basePlacement) {
        case top$1:
          offsets = {
            x: commonX,
            y: reference.y - element.height
          };
          break;

        case bottom$1:
          offsets = {
            x: commonX,
            y: reference.y + reference.height
          };
          break;

        case right$1:
          offsets = {
            x: reference.x + reference.width,
            y: commonY
          };
          break;

        case left$1:
          offsets = {
            x: reference.x - element.width,
            y: commonY
          };
          break;

        default:
          offsets = {
            x: reference.x,
            y: reference.y
          };
      }

      var mainAxis = basePlacement ? getMainAxisFromPlacement$1(basePlacement) : null;

      if (mainAxis != null) {
        var len = mainAxis === 'y' ? 'height' : 'width';

        switch (variation) {
          case start$1:
            offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
            break;

          case end$1:
            offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
            break;
        }
      }

      return offsets;
    }

    function detectOverflow$1(state, options) {
      if (options === void 0) {
        options = {};
      }

      var _options = options,
          _options$placement = _options.placement,
          placement = _options$placement === void 0 ? state.placement : _options$placement,
          _options$boundary = _options.boundary,
          boundary = _options$boundary === void 0 ? clippingParents$1 : _options$boundary,
          _options$rootBoundary = _options.rootBoundary,
          rootBoundary = _options$rootBoundary === void 0 ? viewport$1 : _options$rootBoundary,
          _options$elementConte = _options.elementContext,
          elementContext = _options$elementConte === void 0 ? popper$1 : _options$elementConte,
          _options$altBoundary = _options.altBoundary,
          altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
          _options$padding = _options.padding,
          padding = _options$padding === void 0 ? 0 : _options$padding;
      var paddingObject = mergePaddingObject$1(typeof padding !== 'number' ? padding : expandToHashMap$1(padding, basePlacements$1));
      var altContext = elementContext === popper$1 ? reference$1 : popper$1;
      var referenceElement = state.elements.reference;
      var popperRect = state.rects.popper;
      var element = state.elements[altBoundary ? altContext : elementContext];
      var clippingClientRect = getClippingRect$1(isElement$1(element) ? element : element.contextElement || getDocumentElement$1(state.elements.popper), boundary, rootBoundary);
      var referenceClientRect = getBoundingClientRect$1(referenceElement);
      var popperOffsets = computeOffsets$1({
        reference: referenceClientRect,
        element: popperRect,
        strategy: 'absolute',
        placement: placement
      });
      var popperClientRect = rectToClientRect$1(Object.assign({}, popperRect, popperOffsets));
      var elementClientRect = elementContext === popper$1 ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
      // 0 or negative = within the clipping rect

      var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
      };
      var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

      if (elementContext === popper$1 && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function (key) {
          var multiply = [right$1, bottom$1].indexOf(key) >= 0 ? 1 : -1;
          var axis = [top$1, bottom$1].indexOf(key) >= 0 ? 'y' : 'x';
          overflowOffsets[key] += offset[axis] * multiply;
        });
      }

      return overflowOffsets;
    }

    function computeAutoPlacement(state, options) {
      if (options === void 0) {
        options = {};
      }

      var _options = options,
          placement = _options.placement,
          boundary = _options.boundary,
          rootBoundary = _options.rootBoundary,
          padding = _options.padding,
          flipVariations = _options.flipVariations,
          _options$allowedAutoP = _options.allowedAutoPlacements,
          allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
      var variation = getVariation$1(placement);
      var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
        return getVariation$1(placement) === variation;
      }) : basePlacements$1;
      var allowedPlacements = placements$1.filter(function (placement) {
        return allowedAutoPlacements.indexOf(placement) >= 0;
      });

      if (allowedPlacements.length === 0) {
        allowedPlacements = placements$1;
      } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


      var overflows = allowedPlacements.reduce(function (acc, placement) {
        acc[placement] = detectOverflow$1(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          padding: padding
        })[getBasePlacement$1(placement)];
        return acc;
      }, {});
      return Object.keys(overflows).sort(function (a, b) {
        return overflows[a] - overflows[b];
      });
    }

    function getExpandedFallbackPlacements(placement) {
      if (getBasePlacement$1(placement) === auto) {
        return [];
      }

      var oppositePlacement = getOppositePlacement(placement);
      return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
    }

    function flip$1(_ref) {
      var state = _ref.state,
          options = _ref.options,
          name = _ref.name;

      if (state.modifiersData[name]._skip) {
        return;
      }

      var _options$mainAxis = options.mainAxis,
          checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
          _options$altAxis = options.altAxis,
          checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
          specifiedFallbackPlacements = options.fallbackPlacements,
          padding = options.padding,
          boundary = options.boundary,
          rootBoundary = options.rootBoundary,
          altBoundary = options.altBoundary,
          _options$flipVariatio = options.flipVariations,
          flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
          allowedAutoPlacements = options.allowedAutoPlacements;
      var preferredPlacement = state.options.placement;
      var basePlacement = getBasePlacement$1(preferredPlacement);
      var isBasePlacement = basePlacement === preferredPlacement;
      var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
      var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
        return acc.concat(getBasePlacement$1(placement) === auto ? computeAutoPlacement(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          padding: padding,
          flipVariations: flipVariations,
          allowedAutoPlacements: allowedAutoPlacements
        }) : placement);
      }, []);
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var checksMap = new Map();
      var makeFallbackChecks = true;
      var firstFittingPlacement = placements[0];

      for (var i = 0; i < placements.length; i++) {
        var placement = placements[i];

        var _basePlacement = getBasePlacement$1(placement);

        var isStartVariation = getVariation$1(placement) === start$1;
        var isVertical = [top$1, bottom$1].indexOf(_basePlacement) >= 0;
        var len = isVertical ? 'width' : 'height';
        var overflow = detectOverflow$1(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          altBoundary: altBoundary,
          padding: padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? right$1 : left$1 : isStartVariation ? bottom$1 : top$1;

        if (referenceRect[len] > popperRect[len]) {
          mainVariationSide = getOppositePlacement(mainVariationSide);
        }

        var altVariationSide = getOppositePlacement(mainVariationSide);
        var checks = [];

        if (checkMainAxis) {
          checks.push(overflow[_basePlacement] <= 0);
        }

        if (checkAltAxis) {
          checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        }

        if (checks.every(function (check) {
          return check;
        })) {
          firstFittingPlacement = placement;
          makeFallbackChecks = false;
          break;
        }

        checksMap.set(placement, checks);
      }

      if (makeFallbackChecks) {
        // `2` may be desired in some cases – research later
        var numberOfChecks = flipVariations ? 3 : 1;

        var _loop = function _loop(_i) {
          var fittingPlacement = placements.find(function (placement) {
            var checks = checksMap.get(placement);

            if (checks) {
              return checks.slice(0, _i).every(function (check) {
                return check;
              });
            }
          });

          if (fittingPlacement) {
            firstFittingPlacement = fittingPlacement;
            return "break";
          }
        };

        for (var _i = numberOfChecks; _i > 0; _i--) {
          var _ret = _loop(_i);

          if (_ret === "break") break;
        }
      }

      if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
      }
    } // eslint-disable-next-line import/no-unused-modules


    var flip$2 = {
      name: 'flip',
      enabled: true,
      phase: 'main',
      fn: flip$1,
      requiresIfExists: ['offset'],
      data: {
        _skip: false
      }
    };

    function distanceAndSkiddingToXY(placement, rects, offset) {
      var basePlacement = getBasePlacement$1(placement);
      var invertDistance = [left$1, top$1].indexOf(basePlacement) >= 0 ? -1 : 1;

      var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
        placement: placement
      })) : offset,
          skidding = _ref[0],
          distance = _ref[1];

      skidding = skidding || 0;
      distance = (distance || 0) * invertDistance;
      return [left$1, right$1].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
      } : {
        x: skidding,
        y: distance
      };
    }

    function offset(_ref2) {
      var state = _ref2.state,
          options = _ref2.options,
          name = _ref2.name;
      var _options$offset = options.offset,
          offset = _options$offset === void 0 ? [0, 0] : _options$offset;
      var data = placements.reduce(function (acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
        return acc;
      }, {});
      var _data$state$placement = data[state.placement],
          x = _data$state$placement.x,
          y = _data$state$placement.y;

      if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
      }

      state.modifiersData[name] = data;
    } // eslint-disable-next-line import/no-unused-modules


    var offset$1 = {
      name: 'offset',
      enabled: true,
      phase: 'main',
      requires: ['popperOffsets'],
      fn: offset
    };

    function getAltAxis(axis) {
      return axis === 'x' ? 'y' : 'x';
    }

    function preventOverflow(_ref) {
      var state = _ref.state,
          options = _ref.options,
          name = _ref.name;
      var _options$mainAxis = options.mainAxis,
          checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
          _options$altAxis = options.altAxis,
          checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
          boundary = options.boundary,
          rootBoundary = options.rootBoundary,
          altBoundary = options.altBoundary,
          padding = options.padding,
          _options$tether = options.tether,
          tether = _options$tether === void 0 ? true : _options$tether,
          _options$tetherOffset = options.tetherOffset,
          tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
      var overflow = detectOverflow$1(state, {
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        altBoundary: altBoundary
      });
      var basePlacement = getBasePlacement$1(state.placement);
      var variation = getVariation$1(state.placement);
      var isBasePlacement = !variation;
      var mainAxis = getMainAxisFromPlacement$1(basePlacement);
      var altAxis = getAltAxis(mainAxis);
      var popperOffsets = state.modifiersData.popperOffsets;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
        placement: state.placement
      })) : tetherOffset;
      var data = {
        x: 0,
        y: 0
      };

      if (!popperOffsets) {
        return;
      }

      if (checkMainAxis || checkAltAxis) {
        var mainSide = mainAxis === 'y' ? top$1 : left$1;
        var altSide = mainAxis === 'y' ? bottom$1 : right$1;
        var len = mainAxis === 'y' ? 'height' : 'width';
        var offset = popperOffsets[mainAxis];
        var min = popperOffsets[mainAxis] + overflow[mainSide];
        var max = popperOffsets[mainAxis] - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === start$1 ? referenceRect[len] : popperRect[len];
        var maxLen = variation === start$1 ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
        // outside the reference bounds

        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
          width: 0,
          height: 0
        };
        var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject$1();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
        // to include its full size in the calculation. If the reference is small
        // and near the edge of a boundary, the popper can overflow even if the
        // reference is not overflowing as well (e.g. virtual elements with no
        // width or height)

        var arrowLen = within(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
        var arrowOffsetParent = state.elements.arrow && getOffsetParent$1(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
        var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;

        if (checkMainAxis) {
          var preventedOffset = within(tether ? min$1(min, tetherMin) : min, offset, tether ? max$1(max, tetherMax) : max);
          popperOffsets[mainAxis] = preventedOffset;
          data[mainAxis] = preventedOffset - offset;
        }

        if (checkAltAxis) {
          var _mainSide = mainAxis === 'x' ? top$1 : left$1;

          var _altSide = mainAxis === 'x' ? bottom$1 : right$1;

          var _offset = popperOffsets[altAxis];

          var _min = _offset + overflow[_mainSide];

          var _max = _offset - overflow[_altSide];

          var _preventedOffset = within(tether ? min$1(_min, tetherMin) : _min, _offset, tether ? max$1(_max, tetherMax) : _max);

          popperOffsets[altAxis] = _preventedOffset;
          data[altAxis] = _preventedOffset - _offset;
        }
      }

      state.modifiersData[name] = data;
    } // eslint-disable-next-line import/no-unused-modules


    var preventOverflow$1 = {
      name: 'preventOverflow',
      enabled: true,
      phase: 'main',
      fn: preventOverflow,
      requiresIfExists: ['offset']
    };

    function getHTMLElementScroll(element) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }

    function getNodeScroll(node) {
      if (node === getWindow$1(node) || !isHTMLElement$1(node)) {
        return getWindowScroll$1(node);
      } else {
        return getHTMLElementScroll(node);
      }
    }

    // Composite means it takes into account transforms as well as layout.

    function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
      if (isFixed === void 0) {
        isFixed = false;
      }

      var documentElement = getDocumentElement$1(offsetParent);
      var rect = getBoundingClientRect$1(elementOrVirtualElement);
      var isOffsetParentAnElement = isHTMLElement$1(offsetParent);
      var scroll = {
        scrollLeft: 0,
        scrollTop: 0
      };
      var offsets = {
        x: 0,
        y: 0
      };

      if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (getNodeName$1(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
        isScrollParent$1(documentElement)) {
          scroll = getNodeScroll(offsetParent);
        }

        if (isHTMLElement$1(offsetParent)) {
          offsets = getBoundingClientRect$1(offsetParent);
          offsets.x += offsetParent.clientLeft;
          offsets.y += offsetParent.clientTop;
        } else if (documentElement) {
          offsets.x = getWindowScrollBarX$1(documentElement);
        }
      }

      return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
      };
    }

    function order(modifiers) {
      var map = new Map();
      var visited = new Set();
      var result = [];
      modifiers.forEach(function (modifier) {
        map.set(modifier.name, modifier);
      }); // On visiting object, check for its dependencies and visit them recursively

      function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function (dep) {
          if (!visited.has(dep)) {
            var depModifier = map.get(dep);

            if (depModifier) {
              sort(depModifier);
            }
          }
        });
        result.push(modifier);
      }

      modifiers.forEach(function (modifier) {
        if (!visited.has(modifier.name)) {
          // check for visited object
          sort(modifier);
        }
      });
      return result;
    }

    function orderModifiers(modifiers) {
      // order based on dependencies
      var orderedModifiers = order(modifiers); // order based on phase

      return modifierPhases.reduce(function (acc, phase) {
        return acc.concat(orderedModifiers.filter(function (modifier) {
          return modifier.phase === phase;
        }));
      }, []);
    }

    function debounce(fn) {
      var pending;
      return function () {
        if (!pending) {
          pending = new Promise(function (resolve) {
            Promise.resolve().then(function () {
              pending = undefined;
              resolve(fn());
            });
          });
        }

        return pending;
      };
    }

    function mergeByName(modifiers) {
      var merged = modifiers.reduce(function (merged, current) {
        var existing = merged[current.name];
        merged[current.name] = existing ? Object.assign({}, existing, current, {
          options: Object.assign({}, existing.options, current.options),
          data: Object.assign({}, existing.data, current.data)
        }) : current;
        return merged;
      }, {}); // IE11 does not support Object.values

      return Object.keys(merged).map(function (key) {
        return merged[key];
      });
    }

    var DEFAULT_OPTIONS = {
      placement: 'bottom',
      modifiers: [],
      strategy: 'absolute'
    };

    function areValidElements() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return !args.some(function (element) {
        return !(element && typeof element.getBoundingClientRect === 'function');
      });
    }

    function popperGenerator(generatorOptions) {
      if (generatorOptions === void 0) {
        generatorOptions = {};
      }

      var _generatorOptions = generatorOptions,
          _generatorOptions$def = _generatorOptions.defaultModifiers,
          defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
          _generatorOptions$def2 = _generatorOptions.defaultOptions,
          defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
      return function createPopper(reference, popper, options) {
        if (options === void 0) {
          options = defaultOptions;
        }

        var state = {
          placement: 'bottom',
          orderedModifiers: [],
          options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
          modifiersData: {},
          elements: {
            reference: reference,
            popper: popper
          },
          attributes: {},
          styles: {}
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
          state: state,
          setOptions: function setOptions(options) {
            cleanupModifierEffects();
            state.options = Object.assign({}, defaultOptions, state.options, options);
            state.scrollParents = {
              reference: isElement$1(reference) ? listScrollParents$1(reference) : reference.contextElement ? listScrollParents$1(reference.contextElement) : [],
              popper: listScrollParents$1(popper)
            }; // Orders the modifiers based on their dependencies and `phase`
            // properties

            var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

            state.orderedModifiers = orderedModifiers.filter(function (m) {
              return m.enabled;
            }); // Validate the provided modifiers so that the consumer will get warned

            runModifierEffects();
            return instance.update();
          },
          // Sync update – it will always be executed, even if not necessary. This
          // is useful for low frequency updates where sync behavior simplifies the
          // logic.
          // For high frequency updates (e.g. `resize` and `scroll` events), always
          // prefer the async Popper#update method
          forceUpdate: function forceUpdate() {
            if (isDestroyed) {
              return;
            }

            var _state$elements = state.elements,
                reference = _state$elements.reference,
                popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
            // anymore

            if (!areValidElements(reference, popper)) {

              return;
            } // Store the reference and popper rects to be read by modifiers


            state.rects = {
              reference: getCompositeRect(reference, getOffsetParent$1(popper), state.options.strategy === 'fixed'),
              popper: getLayoutRect(popper)
            }; // Modifiers have the ability to reset the current update cycle. The
            // most common use case for this is the `flip` modifier changing the
            // placement, which then needs to re-run all the modifiers, because the
            // logic was previously ran for the previous placement and is therefore
            // stale/incorrect

            state.reset = false;
            state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
            // is filled with the initial data specified by the modifier. This means
            // it doesn't persist and is fresh on each update.
            // To ensure persistent data, use `${name}#persistent`

            state.orderedModifiers.forEach(function (modifier) {
              return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
            });

            for (var index = 0; index < state.orderedModifiers.length; index++) {

              if (state.reset === true) {
                state.reset = false;
                index = -1;
                continue;
              }

              var _state$orderedModifie = state.orderedModifiers[index],
                  fn = _state$orderedModifie.fn,
                  _state$orderedModifie2 = _state$orderedModifie.options,
                  _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                  name = _state$orderedModifie.name;

              if (typeof fn === 'function') {
                state = fn({
                  state: state,
                  options: _options,
                  name: name,
                  instance: instance
                }) || state;
              }
            }
          },
          // Async and optimistically optimized update – it will not be executed if
          // not necessary (debounced to run at most once-per-tick)
          update: debounce(function () {
            return new Promise(function (resolve) {
              instance.forceUpdate();
              resolve(state);
            });
          }),
          destroy: function destroy() {
            cleanupModifierEffects();
            isDestroyed = true;
          }
        };

        if (!areValidElements(reference, popper)) {

          return instance;
        }

        instance.setOptions(options).then(function (state) {
          if (!isDestroyed && options.onFirstUpdate) {
            options.onFirstUpdate(state);
          }
        }); // Modifiers have the ability to execute arbitrary code before the first
        // update cycle runs. They will be executed in the same order as the update
        // cycle. This is useful when a modifier adds some persistent data that
        // other modifiers need to use, but the modifier is run after the dependent
        // one.

        function runModifierEffects() {
          state.orderedModifiers.forEach(function (_ref3) {
            var name = _ref3.name,
                _ref3$options = _ref3.options,
                options = _ref3$options === void 0 ? {} : _ref3$options,
                effect = _ref3.effect;

            if (typeof effect === 'function') {
              var cleanupFn = effect({
                state: state,
                name: name,
                instance: instance,
                options: options
              });

              var noopFn = function noopFn() {};

              effectCleanupFns.push(cleanupFn || noopFn);
            }
          });
        }

        function cleanupModifierEffects() {
          effectCleanupFns.forEach(function (fn) {
            return fn();
          });
          effectCleanupFns = [];
        }

        return instance;
      };
    }

    var passive = {
      passive: true
    };

    function effect$1(_ref) {
      var state = _ref.state,
          instance = _ref.instance,
          options = _ref.options;
      var _options$scroll = options.scroll,
          scroll = _options$scroll === void 0 ? true : _options$scroll,
          _options$resize = options.resize,
          resize = _options$resize === void 0 ? true : _options$resize;
      var window = getWindow$1(state.elements.popper);
      var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.addEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.addEventListener('resize', instance.update, passive);
      }

      return function () {
        if (scroll) {
          scrollParents.forEach(function (scrollParent) {
            scrollParent.removeEventListener('scroll', instance.update, passive);
          });
        }

        if (resize) {
          window.removeEventListener('resize', instance.update, passive);
        }
      };
    } // eslint-disable-next-line import/no-unused-modules


    var eventListeners = {
      name: 'eventListeners',
      enabled: true,
      phase: 'write',
      fn: function fn() {},
      effect: effect$1,
      data: {}
    };

    function popperOffsets(_ref) {
      var state = _ref.state,
          name = _ref.name;
      // Offsets are the actual position the popper needs to have to be
      // properly positioned near its reference element
      // This is the most basic placement, and will be adjusted by
      // the modifiers in the next step
      state.modifiersData[name] = computeOffsets$1({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: 'absolute',
        placement: state.placement
      });
    } // eslint-disable-next-line import/no-unused-modules


    var popperOffsets$1 = {
      name: 'popperOffsets',
      enabled: true,
      phase: 'read',
      fn: popperOffsets,
      data: {}
    };

    var unsetSides = {
      top: 'auto',
      right: 'auto',
      bottom: 'auto',
      left: 'auto'
    }; // Round the offsets to the nearest suitable subpixel based on the DPR.
    // Zooming can change the DPR, but it seems to report a value that will
    // cleanly divide the values into the appropriate subpixels.

    function roundOffsetsByDPR(_ref) {
      var x = _ref.x,
          y = _ref.y;
      var win = window;
      var dpr = win.devicePixelRatio || 1;
      return {
        x: round$1(round$1(x * dpr) / dpr) || 0,
        y: round$1(round$1(y * dpr) / dpr) || 0
      };
    }

    function mapToStyles(_ref2) {
      var _Object$assign2;

      var popper = _ref2.popper,
          popperRect = _ref2.popperRect,
          placement = _ref2.placement,
          offsets = _ref2.offsets,
          position = _ref2.position,
          gpuAcceleration = _ref2.gpuAcceleration,
          adaptive = _ref2.adaptive,
          roundOffsets = _ref2.roundOffsets;

      var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === 'function' ? roundOffsets(offsets) : offsets,
          _ref3$x = _ref3.x,
          x = _ref3$x === void 0 ? 0 : _ref3$x,
          _ref3$y = _ref3.y,
          y = _ref3$y === void 0 ? 0 : _ref3$y;

      var hasX = offsets.hasOwnProperty('x');
      var hasY = offsets.hasOwnProperty('y');
      var sideX = left$1;
      var sideY = top$1;
      var win = window;

      if (adaptive) {
        var offsetParent = getOffsetParent$1(popper);
        var heightProp = 'clientHeight';
        var widthProp = 'clientWidth';

        if (offsetParent === getWindow$1(popper)) {
          offsetParent = getDocumentElement$1(popper);

          if (getComputedStyle$2(offsetParent).position !== 'static') {
            heightProp = 'scrollHeight';
            widthProp = 'scrollWidth';
          }
        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


        offsetParent = offsetParent;

        if (placement === top$1) {
          sideY = bottom$1; // $FlowFixMe[prop-missing]

          y -= offsetParent[heightProp] - popperRect.height;
          y *= gpuAcceleration ? 1 : -1;
        }

        if (placement === left$1) {
          sideX = right$1; // $FlowFixMe[prop-missing]

          x -= offsetParent[widthProp] - popperRect.width;
          x *= gpuAcceleration ? 1 : -1;
        }
      }

      var commonStyles = Object.assign({
        position: position
      }, adaptive && unsetSides);

      if (gpuAcceleration) {
        var _Object$assign;

        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) < 2 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
      }

      return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
    }

    function computeStyles(_ref4) {
      var state = _ref4.state,
          options = _ref4.options;
      var _options$gpuAccelerat = options.gpuAcceleration,
          gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
          _options$adaptive = options.adaptive,
          adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
          _options$roundOffsets = options.roundOffsets,
          roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

      var commonStyles = {
        placement: getBasePlacement$1(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration: gpuAcceleration
      };

      if (state.modifiersData.popperOffsets != null) {
        state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.popperOffsets,
          position: state.options.strategy,
          adaptive: adaptive,
          roundOffsets: roundOffsets
        })));
      }

      if (state.modifiersData.arrow != null) {
        state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.arrow,
          position: 'absolute',
          adaptive: false,
          roundOffsets: roundOffsets
        })));
      }

      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-placement': state.placement
      });
    } // eslint-disable-next-line import/no-unused-modules


    var computeStyles$1 = {
      name: 'computeStyles',
      enabled: true,
      phase: 'beforeWrite',
      fn: computeStyles,
      data: {}
    };

    // and applies them to the HTMLElements such as popper and arrow

    function applyStyles(_ref) {
      var state = _ref.state;
      Object.keys(state.elements).forEach(function (name) {
        var style = state.styles[name] || {};
        var attributes = state.attributes[name] || {};
        var element = state.elements[name]; // arrow is optional + virtual elements

        if (!isHTMLElement$1(element) || !getNodeName$1(element)) {
          return;
        } // Flow doesn't support to extend this property, but it's the most
        // effective way to apply styles to an HTMLElement
        // $FlowFixMe[cannot-write]


        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (name) {
          var value = attributes[name];

          if (value === false) {
            element.removeAttribute(name);
          } else {
            element.setAttribute(name, value === true ? '' : value);
          }
        });
      });
    }

    function effect(_ref2) {
      var state = _ref2.state;
      var initialStyles = {
        popper: {
          position: state.options.strategy,
          left: '0',
          top: '0',
          margin: '0'
        },
        arrow: {
          position: 'absolute'
        },
        reference: {}
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);
      state.styles = initialStyles;

      if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
      }

      return function () {
        Object.keys(state.elements).forEach(function (name) {
          var element = state.elements[name];
          var attributes = state.attributes[name] || {};
          var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

          var style = styleProperties.reduce(function (style, property) {
            style[property] = '';
            return style;
          }, {}); // arrow is optional + virtual elements

          if (!isHTMLElement$1(element) || !getNodeName$1(element)) {
            return;
          }

          Object.assign(element.style, style);
          Object.keys(attributes).forEach(function (attribute) {
            element.removeAttribute(attribute);
          });
        });
      };
    } // eslint-disable-next-line import/no-unused-modules


    var applyStyles$1 = {
      name: 'applyStyles',
      enabled: true,
      phase: 'write',
      fn: applyStyles,
      effect: effect,
      requires: ['computeStyles']
    };

    var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];

    var top = 'top';
    var bottom = 'bottom';
    var right = 'right';
    var left = 'left';
    var basePlacements = [top, bottom, right, left];
    var start = 'start';
    var end = 'end';
    var clippingParents = 'clippingParents';
    var viewport = 'viewport';
    var popper = 'popper';
    var reference = 'reference';

    function getNodeName(element) {
      return element ? (element.nodeName || '').toLowerCase() : null;
    }

    function getWindow(node) {
      if (node == null) {
        return window;
      }

      if (node.toString() !== '[object Window]') {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
      }

      return node;
    }

    function isElement(node) {
      var OwnElement = getWindow(node).Element;
      return node instanceof OwnElement || node instanceof Element;
    }

    function isHTMLElement(node) {
      var OwnElement = getWindow(node).HTMLElement;
      return node instanceof OwnElement || node instanceof HTMLElement;
    }

    function isShadowRoot(node) {
      // IE 11 has no ShadowRoot
      if (typeof ShadowRoot === 'undefined') {
        return false;
      }

      var OwnElement = getWindow(node).ShadowRoot;
      return node instanceof OwnElement || node instanceof ShadowRoot;
    }

    function getBasePlacement(placement) {
      return placement.split('-')[0];
    }

    function getBoundingClientRect(element) {
      var rect = element.getBoundingClientRect();
      return {
        width: rect.width,
        height: rect.height,
        top: rect.top,
        right: rect.right,
        bottom: rect.bottom,
        left: rect.left,
        x: rect.left,
        y: rect.top
      };
    }

    function contains(parent, child) {
      var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

      if (parent.contains(child)) {
        return true;
      } // then fallback to custom implementation with Shadow DOM support
      else if (rootNode && isShadowRoot(rootNode)) {
          var next = child;

          do {
            if (next && parent.isSameNode(next)) {
              return true;
            } // $FlowFixMe[prop-missing]: need a better way to handle this...


            next = next.parentNode || next.host;
          } while (next);
        } // Give up, the result is false


      return false;
    }

    function getComputedStyle$1(element) {
      return getWindow(element).getComputedStyle(element);
    }

    function isTableElement(element) {
      return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
    }

    function getDocumentElement(element) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
      element.document) || window.document).documentElement;
    }

    function getParentNode(element) {
      if (getNodeName(element) === 'html') {
        return element;
      }

      return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
        // $FlowFixMe[incompatible-return]
        // $FlowFixMe[prop-missing]
        element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
        element.parentNode || ( // DOM Element detected
        isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
        // $FlowFixMe[incompatible-call]: HTMLElement is a Node
        getDocumentElement(element) // fallback

      );
    }

    function getTrueOffsetParent(element) {
      if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
      getComputedStyle$1(element).position === 'fixed') {
        return null;
      }

      return element.offsetParent;
    } // `.offsetParent` reports `null` for fixed elements, while absolute elements
    // return the containing block


    function getContainingBlock(element) {
      var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
      var isIE = navigator.userAgent.indexOf('Trident') !== -1;

      if (isIE && isHTMLElement(element)) {
        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
        var elementCss = getComputedStyle$1(element);

        if (elementCss.position === 'fixed') {
          return null;
        }
      }

      var currentNode = getParentNode(element);

      while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
        var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

        if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
          return currentNode;
        } else {
          currentNode = currentNode.parentNode;
        }
      }

      return null;
    } // Gets the closest ancestor positioned element. Handles some edge cases,
    // such as table ancestors and cross browser bugs.


    function getOffsetParent(element) {
      var window = getWindow(element);
      var offsetParent = getTrueOffsetParent(element);

      while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
        offsetParent = getTrueOffsetParent(offsetParent);
      }

      if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {
        return window;
      }

      return offsetParent || getContainingBlock(element) || window;
    }

    function getMainAxisFromPlacement(placement) {
      return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
    }

    var max = Math.max;
    var min = Math.min;

    function getFreshSideObject() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }

    function mergePaddingObject(paddingObject) {
      return Object.assign({}, getFreshSideObject(), paddingObject);
    }

    function expandToHashMap(value, keys) {
      return keys.reduce(function (hashMap, key) {
        hashMap[key] = value;
        return hashMap;
      }, {});
    }

    function getWindowScroll(node) {
      var win = getWindow(node);
      var scrollLeft = win.pageXOffset;
      var scrollTop = win.pageYOffset;
      return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
      };
    }

    function getWindowScrollBarX(element) {
      // If <html> has a CSS width greater than the viewport, then this will be
      // incorrect for RTL.
      // Popper 1 is broken in this case and never had a bug report so let's assume
      // it's not an issue. I don't think anyone ever specifies width on <html>
      // anyway.
      // Browsers where the left scrollbar doesn't cause an issue report `0` for
      // this (e.g. Edge 2019, IE11, Safari)
      return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
    }

    function getViewportRect(element) {
      var win = getWindow(element);
      var html = getDocumentElement(element);
      var visualViewport = win.visualViewport;
      var width = html.clientWidth;
      var height = html.clientHeight;
      var x = 0;
      var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
      // can be obscured underneath it.
      // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
      // if it isn't open, so if this isn't available, the popper will be detected
      // to overflow the bottom of the screen too early.

      if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
        // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
        // errors due to floating point numbers, so we need to check precision.
        // Safari returns a number <= 0, usually < -1 when pinch-zoomed
        // Feature detection fails in mobile emulation mode in Chrome.
        // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
        // 0.001
        // Fallback here: "Not Safari" userAgent

        if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
          x = visualViewport.offsetLeft;
          y = visualViewport.offsetTop;
        }
      }

      return {
        width: width,
        height: height,
        x: x + getWindowScrollBarX(element),
        y: y
      };
    }

    // of the `<html>` and `<body>` rect bounds if horizontally scrollable

    function getDocumentRect(element) {
      var _element$ownerDocumen;

      var html = getDocumentElement(element);
      var winScroll = getWindowScroll(element);
      var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
      var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
      var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
      var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
      var y = -winScroll.scrollTop;

      if (getComputedStyle$1(body || html).direction === 'rtl') {
        x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
      }

      return {
        width: width,
        height: height,
        x: x,
        y: y
      };
    }

    function isScrollParent(element) {
      // Firefox wants us to check `-x` and `-y` variations as well
      var _getComputedStyle = getComputedStyle$1(element),
          overflow = _getComputedStyle.overflow,
          overflowX = _getComputedStyle.overflowX,
          overflowY = _getComputedStyle.overflowY;

      return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
    }

    function getScrollParent(node) {
      if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
        // $FlowFixMe[incompatible-return]: assume body is always available
        return node.ownerDocument.body;
      }

      if (isHTMLElement(node) && isScrollParent(node)) {
        return node;
      }

      return getScrollParent(getParentNode(node));
    }

    /*
    given a DOM element, return the list of all scroll parents, up the list of ancesors
    until we get to the top window object. This list is what we attach scroll listeners
    to, because if any of these parent elements scroll, we'll need to re-calculate the
    reference element's position.
    */

    function listScrollParents(element, list) {
      var _element$ownerDocumen;

      if (list === void 0) {
        list = [];
      }

      var scrollParent = getScrollParent(element);
      var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
      var win = getWindow(scrollParent);
      var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
      var updatedList = list.concat(target);
      return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents(getParentNode(target)));
    }

    function rectToClientRect(rect) {
      return Object.assign({}, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
      });
    }

    function getInnerBoundingClientRect(element) {
      var rect = getBoundingClientRect(element);
      rect.top = rect.top + element.clientTop;
      rect.left = rect.left + element.clientLeft;
      rect.bottom = rect.top + element.clientHeight;
      rect.right = rect.left + element.clientWidth;
      rect.width = element.clientWidth;
      rect.height = element.clientHeight;
      rect.x = rect.left;
      rect.y = rect.top;
      return rect;
    }

    function getClientRectFromMixedType(element, clippingParent) {
      return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
    } // A "clipping parent" is an overflowable container with the characteristic of
    // clipping (or hiding) overflowing elements with a position different from
    // `initial`


    function getClippingParents(element) {
      var clippingParents = listScrollParents(getParentNode(element));
      var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;
      var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

      if (!isElement(clipperElement)) {
        return [];
      } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


      return clippingParents.filter(function (clippingParent) {
        return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
      });
    } // Gets the maximum area that the element is visible in due to any number of
    // clipping parents


    function getClippingRect(element, boundary, rootBoundary) {
      var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
      var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
      var firstClippingParent = clippingParents[0];
      var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent);
        accRect.top = max(rect.top, accRect.top);
        accRect.right = min(rect.right, accRect.right);
        accRect.bottom = min(rect.bottom, accRect.bottom);
        accRect.left = max(rect.left, accRect.left);
        return accRect;
      }, getClientRectFromMixedType(element, firstClippingParent));
      clippingRect.width = clippingRect.right - clippingRect.left;
      clippingRect.height = clippingRect.bottom - clippingRect.top;
      clippingRect.x = clippingRect.left;
      clippingRect.y = clippingRect.top;
      return clippingRect;
    }

    function getVariation(placement) {
      return placement.split('-')[1];
    }

    function computeOffsets(_ref) {
      var reference = _ref.reference,
          element = _ref.element,
          placement = _ref.placement;
      var basePlacement = placement ? getBasePlacement(placement) : null;
      var variation = placement ? getVariation(placement) : null;
      var commonX = reference.x + reference.width / 2 - element.width / 2;
      var commonY = reference.y + reference.height / 2 - element.height / 2;
      var offsets;

      switch (basePlacement) {
        case top:
          offsets = {
            x: commonX,
            y: reference.y - element.height
          };
          break;

        case bottom:
          offsets = {
            x: commonX,
            y: reference.y + reference.height
          };
          break;

        case right:
          offsets = {
            x: reference.x + reference.width,
            y: commonY
          };
          break;

        case left:
          offsets = {
            x: reference.x - element.width,
            y: commonY
          };
          break;

        default:
          offsets = {
            x: reference.x,
            y: reference.y
          };
      }

      var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

      if (mainAxis != null) {
        var len = mainAxis === 'y' ? 'height' : 'width';

        switch (variation) {
          case start:
            offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
            break;

          case end:
            offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
            break;
        }
      }

      return offsets;
    }

    function detectOverflow(state, options) {
      if (options === void 0) {
        options = {};
      }

      var _options = options,
          _options$placement = _options.placement,
          placement = _options$placement === void 0 ? state.placement : _options$placement,
          _options$boundary = _options.boundary,
          boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
          _options$rootBoundary = _options.rootBoundary,
          rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
          _options$elementConte = _options.elementContext,
          elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
          _options$altBoundary = _options.altBoundary,
          altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
          _options$padding = _options.padding,
          padding = _options$padding === void 0 ? 0 : _options$padding;
      var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
      var altContext = elementContext === popper ? reference : popper;
      var referenceElement = state.elements.reference;
      var popperRect = state.rects.popper;
      var element = state.elements[altBoundary ? altContext : elementContext];
      var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
      var referenceClientRect = getBoundingClientRect(referenceElement);
      var popperOffsets = computeOffsets({
        reference: referenceClientRect,
        element: popperRect,
        strategy: 'absolute',
        placement: placement
      });
      var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
      var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
      // 0 or negative = within the clipping rect

      var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
      };
      var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

      if (elementContext === popper && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function (key) {
          var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
          var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
          overflowOffsets[key] += offset[axis] * multiply;
        });
      }

      return overflowOffsets;
    }

    var maxSize = {
      name: 'maxSize',
      enabled: true,
      phase: 'main',
      requiresIfExists: ['offset', 'preventOverflow', 'flip'],
      fn: function fn(_ref) {
        var state = _ref.state,
            name = _ref.name,
            options = _ref.options;
        var overflow = detectOverflow(state, options);

        var _ref2 = state.modifiersData.preventOverflow || {
          x: 0,
          y: 0
        },
            x = _ref2.x,
            y = _ref2.y;

        var _state$rects$popper = state.rects.popper,
            width = _state$rects$popper.width,
            height = _state$rects$popper.height;

        var _state$placement$spli = state.placement.split('-'),
            basePlacement = _state$placement$spli[0];

        var widthProp = basePlacement === 'left' ? 'left' : 'right';
        var heightProp = basePlacement === 'top' ? 'top' : 'bottom';
        state.modifiersData[name] = {
          width: width - overflow[widthProp] - x,
          height: height - overflow[heightProp] - y
        };
      }
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const appliedSizeDefaults = new WeakMap();
    const applyMaxSize = {
        name: 'applyMaxSize',
        enabled: true,
        phase: 'beforeWrite',
        requires: ['maxSize'],
        fn({ state }) {
            const { height: maxHeight } = state.modifiersData.maxSize;
            if (!appliedSizeDefaults.has(state.elements.popper)) {
                appliedSizeDefaults.set(state.elements.popper, state.rects.popper.height);
            }
            const actualHeight = appliedSizeDefaults.get(state.elements.popper);
            const constrainHeight = maxHeight < actualHeight;
            const appliedHeight = constrainHeight ? `${maxHeight}px` : '';
            state.styles.popper.maxHeight = appliedHeight;
            state.styles.popper.height = appliedHeight;
        },
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const createPopper = popperGenerator({
        defaultModifiers: [
            ...defaultModifiers,
            flip$2,
            preventOverflow$1,
            arrow$1,
            offset$1,
        ],
    });

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const stateMachine = {
        initial: 'idle',
        states: {
            idle: {
                on: {
                    active: 'active',
                },
            },
            active: {
                on: {
                    visible: 'visible',
                    hiding: 'hiding',
                    idle: 'idle',
                },
            },
            visible: {
                on: {
                    hiding: 'hiding',
                    idle: 'idle',
                },
            },
            hiding: {
                on: {
                    dispose: 'dispose',
                },
            },
            dispose: {
                on: {
                    disposed: 'disposed',
                },
            },
            disposed: {
                on: {},
            },
        },
    };
    const stateTransition = (state, event) => {
        if (!state)
            return stateMachine.initial;
        /* c8 ignore next */
        if (!event)
            return state;
        return stateMachine.states[state].on[event] || state;
    };
    class ActiveOverlay extends SpectrumElement {
        constructor() {
            super();
            this._state = stateTransition();
            this.animating = false;
            this.tabbingAway = false;
            this.offset = 6;
            this.interaction = 'hover';
            this.positionAnimationFrame = 0;
            this.willNotifyClosed = false;
            this.handleInlineTriggerKeydown = (event) => {
                const { code, shiftKey } = event;
                /* c8 ignore next */
                if (code !== 'Tab')
                    return;
                if (shiftKey) {
                    this.tabbingAway = true;
                    this.dispatchEvent(new Event('close'));
                    return;
                }
                event.stopPropagation();
                event.preventDefault();
                this.focus();
            };
            this.stealOverlayContentPromise = Promise.resolve();
            this.stealOverlayContentPromise = new Promise((res) => (this.stealOverlayContentResolver = res));
        }
        get state() {
            return this._state;
        }
        set state(state) {
            const nextState = stateTransition(this.state, state);
            if (nextState === this.state) {
                return;
            }
            this._state = nextState;
            if (this.state === 'active' ||
                this.state === 'visible' ||
                this.state === 'hiding') {
                this.setAttribute('state', this.state);
            }
            else {
                this.removeAttribute('state');
            }
        }
        focus() {
            const firstFocusable = this.querySelector('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"]), [focusable]');
            if (firstFocusable) {
                firstFocusable.focus();
                this.removeAttribute('tabindex');
                /* c8 ignore next 3 */
            }
            else {
                super.focus();
            }
        }
        get hasTheme() {
            return !!this.color || !!this.scale;
        }
        static get styles() {
            return [styles$S];
        }
        get hasModalRoot() {
            return !!this._modalRoot;
        }
        feature() {
            this.tabIndex = 0;
            const parentOverlay = this.trigger.closest('active-overlay');
            const parentIsModal = parentOverlay && parentOverlay.slot === 'open';
            // If an overlay it triggered from within a "modal" overlay, it needs to continue
            // to act like one to get treated correctly in regards to tab trapping.
            if (this.interaction === 'modal' || parentIsModal || this._modalRoot) {
                this.slot = 'open';
                // If this isn't a modal root, walk up the overlays to the next modal root
                // and "feature" each on of the intervening overlays.
                if (this._modalRoot) {
                    parentOverlay === null || parentOverlay === void 0 ? void 0 : parentOverlay.feature();
                }
            }
        }
        obscure(nextOverlayInteraction) {
            if (this.slot && nextOverlayInteraction === 'modal') {
                this.removeAttribute('slot');
                // Obscure upto and including the next modal root.
                if (this.interaction !== 'modal') {
                    const parentOverlay = this.trigger.closest('active-overlay');
                    this._modalRoot = parentOverlay === null || parentOverlay === void 0 ? void 0 : parentOverlay.obscure(nextOverlayInteraction);
                    return this._modalRoot;
                }
                return this;
            }
            return undefined;
        }
        firstUpdated(changedProperties) {
            super.firstUpdated(changedProperties);
            /* c8 ignore next */
            if (!this.overlayContent)
                return;
            this.stealOverlayContent(this.overlayContent);
            /* c8 ignore next */
            if (!this.overlayContent || !this.trigger)
                return;
            if (this.placement && this.placement !== 'none') {
                this.popper = createPopper(this.trigger, this, {
                    placement: this.placement,
                    modifiers: [
                        maxSize,
                        applyMaxSize,
                        {
                            name: 'arrow',
                            options: {
                                element: this.overlayContentTip,
                            },
                        },
                        {
                            name: 'offset',
                            options: {
                                offset: [0, this.offset],
                            },
                        },
                    ],
                });
            }
            this.state = 'active';
            document.addEventListener('sp-update-overlays', () => {
                this.updateOverlayPosition();
                this.state = 'visible';
            });
            this.feature();
            this.updateOverlayPosition()
                .then(() => this.applyContentAnimation('spOverlayFadeIn'))
                .then(() => {
                if (this.receivesFocus) {
                    this.focus();
                }
            });
        }
        updateOverlayPopperPlacement() {
            /* c8 ignore next */
            if (!this.overlayContent)
                return;
            if (this.dataPopperPlacement) {
                // Copy this attribute to the actual overlay node so that it can use
                // the attribute for styling shadow DOM elements based on the side
                // that popper has chosen for it
                this.overlayContent.setAttribute('placement', this.dataPopperPlacement);
            }
            else if (this.originalPlacement) {
                this.overlayContent.setAttribute('placement', this.originalPlacement);
            }
            else {
                this.overlayContent.removeAttribute('placement');
            }
        }
        updated(changedProperties) {
            if (changedProperties.has('dataPopperPlacement')) {
                this.updateOverlayPopperPlacement();
            }
        }
        open(openDetail) {
            this.extractDetail(openDetail);
        }
        extractDetail(detail) {
            this.overlayContent = detail.content;
            this.overlayContentTip = detail.contentTip;
            this.trigger = detail.trigger;
            this.placement = detail.placement;
            this.offset = detail.offset;
            this.interaction = detail.interaction;
            this.color = detail.theme.color;
            this.scale = detail.theme.scale;
            this.receivesFocus = detail.receivesFocus;
        }
        dispose() {
            /* c8 ignore next */
            if (this.state !== 'dispose')
                return;
            /* c8 ignore next 4 */
            if (this.timeout) {
                clearTimeout(this.timeout);
                delete this.timeout;
            }
            if (this.popper) {
                this.popper.destroy();
                this.popper = undefined;
            }
            this.trigger.removeEventListener('keydown', this.handleInlineTriggerKeydown);
            this.returnOverlayContent();
            this.state = 'disposed';
            if (this.willNotifyClosed) {
                this.overlayContent.dispatchEvent(new Event('sp-overlay-closed'));
                this.willNotifyClosed = false;
            }
        }
        stealOverlayContent(element) {
            this.originalPlacement = element.getAttribute('placement');
            this.restoreContent = reparentChildren([element], this, (el) => {
                const slotName = el.slot;
                el.removeAttribute('slot');
                return (el) => {
                    el.slot = slotName;
                };
            });
            this.stealOverlayContentResolver();
        }
        returnOverlayContent() {
            /* c8 ignore next */
            if (!this.restoreContent)
                return;
            const [element] = this.restoreContent();
            this.restoreContent = undefined;
            this.willNotifyClosed = true;
            if (this.originalPlacement) {
                element.setAttribute('placement', this.originalPlacement);
                delete this.originalPlacement;
            }
        }
        async updateOverlayPosition() {
            if (this.popper) {
                await (document.fonts ? document.fonts.ready : Promise.resolve());
                await this.popper.update();
            }
        }
        async hide(animated = true) {
            this.state = 'hiding';
            if (animated) {
                await this.applyContentAnimation('spOverlayFadeOut');
            }
            this.state = 'dispose';
        }
        schedulePositionUpdate() {
            // Edge needs a little time to update the DOM before computing the layout
            cancelAnimationFrame(this.positionAnimationFrame);
            this.positionAnimationFrame = requestAnimationFrame(() => this.updateOverlayPosition());
        }
        onSlotChange() {
            this.schedulePositionUpdate();
        }
        connectedCallback() {
            super.connectedCallback();
            this.schedulePositionUpdate();
        }
        applyContentAnimation(animation) {
            return new Promise((resolve) => {
                const contents = this.shadowRoot.querySelector('#contents');
                const doneHandler = (event) => {
                    if (animation !== event.animationName)
                        return;
                    contents.removeEventListener('animationend', doneHandler);
                    contents.removeEventListener('animationcancel', doneHandler);
                    this.animating = false;
                    resolve(event.type === 'animationcancel');
                };
                contents.addEventListener('animationend', doneHandler);
                contents.addEventListener('animationcancel', doneHandler);
                contents.style.animationName = animation;
                this.animating = true;
            });
        }
        renderTheme(content) {
            const { color, scale } = this;
            return html `
            <sp-theme color=${ifDefined(color)} scale=${ifDefined(scale)}>
                ${content}
            </sp-theme>
        `;
        }
        render() {
            const content = html `
            <div id="contents">
                <slot @slotchange=${this.onSlotChange}></slot>
            </div>
        `;
            return this.hasTheme ? this.renderTheme(content) : content;
        }
        static create(details) {
            const overlay = new ActiveOverlay();
            if (details.content) {
                overlay.open(details);
            }
            return overlay;
        }
        async _getUpdateComplete() {
            await super._getUpdateComplete();
            await this.stealOverlayContentPromise;
        }
    }
    __decorate([
        property()
    ], ActiveOverlay.prototype, "_state", void 0);
    __decorate([
        property({ reflect: true, type: Boolean })
    ], ActiveOverlay.prototype, "animating", void 0);
    __decorate([
        property({ reflect: true })
    ], ActiveOverlay.prototype, "placement", void 0);
    __decorate([
        property({ attribute: false })
    ], ActiveOverlay.prototype, "color", void 0);
    __decorate([
        property({ attribute: false })
    ], ActiveOverlay.prototype, "receivesFocus", void 0);
    __decorate([
        property({ attribute: false })
    ], ActiveOverlay.prototype, "scale", void 0);
    __decorate([
        property({ attribute: 'data-popper-placement' })
    ], ActiveOverlay.prototype, "dataPopperPlacement", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const DEFAULT_WARMUP = 1000;
    const DEFAULT_COOLDOWN = 1000;
    /**
     * A timer to help with implementation of warnup/cooldown behavior as described here:
     * https://spectrum.adobe.com/page/tooltip/#Immediate-or-delayed-appearance
     */
    class OverlayTimer {
        constructor(options = {}) {
            this.warmUpDelay = DEFAULT_WARMUP;
            this.coolDownDelay = DEFAULT_COOLDOWN;
            this.isWarm = false;
            this.timeout = 0;
            Object.assign(this, options);
        }
        async openTimer(component) {
            this.cancelCooldownTimer();
            if (!this.component || component !== this.component) {
                if (this.component) {
                    this.close(this.component);
                    this.cancelCooldownTimer();
                }
                this.component = component;
                if (this.isWarm) {
                    return false;
                }
                this.promise = new Promise((resolve) => {
                    this.resolve = resolve;
                    this.timeout = window.setTimeout(() => {
                        if (this.resolve) {
                            this.resolve(false);
                            this.isWarm = true;
                        }
                    }, this.warmUpDelay);
                });
                return this.promise;
            }
            else if (this.promise) {
                return this.promise;
            }
            else {
                // This should never happen
                throw new Error('Inconsistent state');
            }
        }
        close(component) {
            if (this.component && this.component === component) {
                this.resetCooldownTimer();
                if (this.timeout > 0) {
                    clearTimeout(this.timeout);
                    this.timeout = 0;
                }
                if (this.resolve) {
                    this.resolve(true);
                    delete this.resolve;
                }
                delete this.promise;
                delete this.component;
            }
        }
        resetCooldownTimer() {
            if (this.isWarm) {
                if (this.cooldownTimeout) {
                    window.clearTimeout(this.cooldownTimeout);
                }
                this.cooldownTimeout = window.setTimeout(() => {
                    this.isWarm = false;
                    delete this.cooldownTimeout;
                }, this.coolDownDelay);
            }
        }
        cancelCooldownTimer() {
            if (this.cooldownTimeout) {
                window.clearTimeout(this.cooldownTimeout);
            }
            delete this.cooldownTimeout;
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('active-overlay', ActiveOverlay);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    function isLeftClick(event) {
        return event.button === 0;
    }
    function hasModifier(event) {
        return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
    }
    class OverlayStack {
        constructor() {
            this.overlays = [];
            this.preventMouseRootClose = false;
            this.root = document.body;
            this.handlingResize = false;
            this.overlayTimer = new OverlayTimer();
            this.canTabTrap = true;
            this.trappingInited = false;
            this.handleMouseCapture = (event) => {
                const topOverlay = this.topOverlay;
                if (!event.target ||
                    !topOverlay ||
                    !topOverlay.overlayContent ||
                    hasModifier(event) ||
                    !isLeftClick(event)) {
                    this.preventMouseRootClose = true;
                    return;
                }
                if (event.target instanceof Node) {
                    const path = event.composedPath();
                    if (path.indexOf(topOverlay.overlayContent) >= 0) {
                        this.preventMouseRootClose = true;
                        return;
                    }
                    this.preventMouseRootClose = false;
                }
            };
            /**
             * A "longpress" occurs before the "click" that creates it has occured.
             * In that way the first click will still be part of the "longpress" and
             * not part of closing the overlay.
             */
            this._doesNotCloseOnFirstClick = false;
            this.handleMouse = (event) => {
                if (this._doesNotCloseOnFirstClick) {
                    this._doesNotCloseOnFirstClick = false;
                    return;
                }
                if (this.preventMouseRootClose || event.defaultPrevented) {
                    return;
                }
                this.closeTopOverlay();
            };
            this.handleKeyUp = (event) => {
                if (event.code === 'Escape') {
                    const overlay = this.topOverlay;
                    this.closeTopOverlay();
                    overlay && overlay.trigger.focus();
                }
            };
            this.handleResize = () => {
                if (this.handlingResize)
                    return;
                this.handlingResize = true;
                requestAnimationFrame(async () => {
                    const promises = this.overlays.map((overlay) => overlay.updateOverlayPosition());
                    await Promise.all(promises);
                    this.handlingResize = false;
                });
            };
            this.addEventListeners();
        }
        initTabTrapping() {
            /* c8 ignore next 4 */
            if (this.document.body.shadowRoot) {
                this.canTabTrap = false;
                return;
            }
            this.document.body.attachShadow({ mode: 'open' });
            /* c8 ignore next 3 */
            if (!this.document.body.shadowRoot) {
                return;
            }
            const root = this.document.body.shadowRoot;
            root.innerHTML = `
            <div id="actual"><slot></slot></div>
            <style>
            #actual {
                position: relative;
                height: calc(100% - var(--swc-body-margins-block, 0px));
                z-index: 0;
                min-height: calc(100vh - var(--swc-body-margins-block, 0px));
            }
            #holder {
                display: flex;
                align-items: center;
                justify-content: center;
                flex-flow: column;
                height: 100%;
                width: 100%;
                top: 0;
                left: 0;
                position: fixed;
            }
            #holder[hidden] {
                display: none !important;
            }
            #actual[tabindex="-1"] {
                pointer-events: none;  /* just in case? */
            }
            </style>
            <div id="holder" hidden><slot name="open"></slot></div>
        `;
            this.tabTrapper = root.querySelector('#actual');
            this.overlayHolder = root.querySelector('#holder');
            this.tabTrapper.attachShadow({ mode: 'open' });
            if (this.tabTrapper.shadowRoot) {
                this.tabTrapper.shadowRoot.innerHTML = '<slot></slot>';
            }
        }
        startTabTrapping() {
            if (!this.trappingInited) {
                this.initTabTrapping();
                this.trappingInited = true;
            }
            /* c8 ignore next 3 */
            if (!this.canTabTrap) {
                return;
            }
            this.tabTrapper.tabIndex = -1;
            this.tabTrapper.setAttribute('aria-hidden', 'true');
            this.overlayHolder.hidden = false;
            requestAnimationFrame(() => {
                const bodyStyles = getComputedStyle(document.body);
                this.tabTrapper.style.setProperty('--swc-body-margins-inline', `calc(${bodyStyles.marginLeft} + ${bodyStyles.marginRight})`);
                this.tabTrapper.style.setProperty('--swc-body-margins-block', `calc(${bodyStyles.marginTop} + ${bodyStyles.marginBottom})`);
            });
        }
        stopTabTrapping() {
            /* c8 ignore next 3 */
            if (!this.canTabTrap || !this.trappingInited) {
                return;
            }
            this.tabTrapper.removeAttribute('tabindex');
            this.tabTrapper.removeAttribute('aria-hidden');
            this.overlayHolder.hidden = true;
        }
        get document() {
            return this.root.ownerDocument /* c8 ignore next */ || document;
        }
        get topOverlay() {
            return this.overlays.slice(-1)[0];
        }
        findOverlayForContent(overlayContent) {
            for (const item of this.overlays) {
                if (overlayContent === item.overlayContent) {
                    return item;
                }
            }
            return undefined;
        }
        addEventListeners() {
            this.document.addEventListener('click', this.handleMouseCapture, true);
            this.document.addEventListener('click', this.handleMouse);
            this.document.addEventListener('keyup', this.handleKeyUp);
            window.addEventListener('resize', this.handleResize);
        }
        isClickOverlayActiveForTrigger(trigger) {
            return this.overlays.some((item) => trigger === item.trigger &&
                item.interaction === 'click');
        }
        async openOverlay(details) {
            if (this.findOverlayForContent(details.content)) {
                return false;
            }
            if (details.notImmediatelyClosable) {
                this._doesNotCloseOnFirstClick = true;
            }
            if (details.interaction === 'modal') {
                this.startTabTrapping();
            }
            if (details.delayed) {
                const promise = this.overlayTimer.openTimer(details.content);
                const cancelled = await promise;
                if (cancelled) {
                    return promise;
                }
            }
            if (details.interaction === 'click') {
                this.closeAllHoverOverlays();
            }
            else if (details.interaction === 'hover' &&
                this.isClickOverlayActiveForTrigger(details.trigger)) {
                // Don't show a hover popover if the click popover is already active
                return true;
            }
            const activeOverlay = ActiveOverlay.create(details);
            if (this.overlays.length) {
                const topOverlay = this.overlays[this.overlays.length - 1];
                topOverlay.obscure(activeOverlay.interaction);
            }
            document.body.appendChild(activeOverlay);
            /**
             * The following work to make the new overlay the "top" of the stack
             * has to happen AFTER the current call stack completes in case there
             * is work there in to remove the previous "top" overlay.
             */
            return new Promise((res) => requestAnimationFrame(res)).then(async () => {
                this.overlays.push(activeOverlay);
                await activeOverlay.updateComplete;
                this.addOverlayEventListeners(activeOverlay);
                const contentWithOpen = activeOverlay.overlayContent;
                if (typeof contentWithOpen.open !== 'undefined') {
                    contentWithOpen.open = true;
                }
                if (details.receivesFocus === 'auto') {
                    activeOverlay.focus();
                }
                details.trigger.dispatchEvent(new CustomEvent('sp-opened', {
                    bubbles: true,
                    composed: true,
                    cancelable: true,
                    detail: {
                        interaction: details.interaction,
                    },
                }));
                return false;
            });
        }
        addOverlayEventListeners(activeOverlay) {
            activeOverlay.addEventListener('close', () => {
                this.hideAndCloseOverlay(activeOverlay);
            });
            switch (activeOverlay.interaction) {
                case 'replace':
                    this.addReplaceOverlayEventListeners(activeOverlay);
                    break;
                case 'inline':
                    this.addInlineOverlayEventListeners(activeOverlay);
                    break;
            }
        }
        addReplaceOverlayEventListeners(activeOverlay) {
            activeOverlay.addEventListener('keydown', (event) => {
                const { code } = event;
                /* c8 ignore next */
                if (code !== 'Tab')
                    return;
                event.stopPropagation();
                this.closeOverlay(activeOverlay.overlayContent);
                activeOverlay.tabbingAway = true;
                activeOverlay.trigger.focus();
                activeOverlay.trigger.dispatchEvent(new KeyboardEvent('keydown', event));
            });
        }
        addInlineOverlayEventListeners(activeOverlay) {
            activeOverlay.trigger.addEventListener('keydown', activeOverlay.handleInlineTriggerKeydown);
            activeOverlay.addEventListener('keydown', (event) => {
                const { code, shiftKey } = event;
                /* c8 ignore next */
                if (code !== 'Tab')
                    return;
                activeOverlay.tabbingAway = true;
                if (shiftKey) {
                    const returnFocusElement = document.createElement('span');
                    returnFocusElement.tabIndex = -1;
                    if (activeOverlay.trigger.hasAttribute('slot')) {
                        returnFocusElement.slot = activeOverlay.trigger.slot;
                    }
                    activeOverlay.trigger.insertAdjacentElement('afterend', returnFocusElement);
                    returnFocusElement.focus();
                    returnFocusElement.remove();
                    return;
                }
                event.stopPropagation();
                this.closeOverlay(activeOverlay.overlayContent);
                activeOverlay.trigger.focus();
            });
        }
        closeOverlay(content) {
            this.overlayTimer.close(content);
            requestAnimationFrame(() => {
                const overlay = this.findOverlayForContent(content);
                this.hideAndCloseOverlay(overlay);
            });
        }
        closeAllHoverOverlays() {
            for (const overlay of this.overlays) {
                if (overlay.interaction === 'hover') {
                    this.hideAndCloseOverlay(overlay, false);
                }
            }
        }
        async hideAndCloseOverlay(overlay, animated) {
            if (overlay) {
                await overlay.hide(animated);
                const contentWithOpen = overlay.overlayContent;
                if (typeof contentWithOpen.open !== 'undefined') {
                    contentWithOpen.open = false;
                }
                if (overlay.state != 'dispose')
                    return;
                const index = this.overlays.indexOf(overlay);
                if (index >= 0) {
                    this.overlays.splice(index, 1);
                }
                if (this.overlays.length) {
                    const topOverlay = this.overlays[this.overlays.length - 1];
                    topOverlay.feature();
                    if (topOverlay.interaction === 'modal' ||
                        topOverlay.hasModalRoot) {
                        topOverlay.focus();
                    }
                    else {
                        this.stopTabTrapping();
                    }
                }
                else {
                    this.stopTabTrapping();
                    if (overlay.interaction === 'modal' ||
                        ((overlay.interaction === 'replace' ||
                            overlay.interaction === 'inline') &&
                            !overlay.tabbingAway)) {
                        const overlayRoot = overlay.overlayContent.getRootNode();
                        const overlayContentActiveElement = overlayRoot.activeElement;
                        const triggerRoot = overlay.trigger.getRootNode();
                        const triggerActiveElement = triggerRoot.activeElement;
                        if (overlay.overlayContent.contains(overlayContentActiveElement) ||
                            overlay.trigger
                                .getRootNode()
                                .contains(triggerActiveElement) ||
                            (triggerRoot.host &&
                                triggerRoot.host === triggerActiveElement)) {
                            overlay.trigger.focus();
                        }
                    }
                    overlay.tabbingAway = false;
                }
                overlay.remove();
                overlay.dispose();
                overlay.trigger.dispatchEvent(new CustomEvent('sp-closed', {
                    bubbles: true,
                    composed: true,
                    cancelable: true,
                    detail: {
                        interaction: overlay.interaction,
                    },
                }));
            }
        }
        closeTopOverlay() {
            return this.hideAndCloseOverlay(this.topOverlay);
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * This class allows access to the overlay system which allows a client to
     * position an element in the overlay positioned relative to another node.
     */
    class Overlay {
        /**
         *
         * @param owner the parent element we will use to position the overlay element
         * @param interaction the type of interaction that caused this overlay to be shown
         * @param overlayElement the item to display as an overlay
         */
        constructor(owner, interaction, overlayElement) {
            this.isOpen = false;
            this.owner = owner;
            this.overlayElement = overlayElement;
            this.interaction = interaction;
        }
        /**
         * Open an overlay
         *
         * @param owner the parent element we will use to position the overlay element
         * @param interaction the type of interaction that caused this overlay to be shown
         * @param overlayElement the item to display as an overlay
         * @param options display parameters
         * @param options.delayed if true delay opening of the overlay based on the global warmup/cooldown timer
         * @param options.offset distance to offset the overlay
         * @param options.placement side on which to position the overlay
         * @returns an Overlay object which can be used to close the overlay
         */
        static async open(owner, interaction, overlayElement, options) {
            const overlay = new Overlay(owner, interaction, overlayElement);
            await overlay.open(options);
            return () => {
                overlay.close();
            };
        }
        static update() {
            const overlayUpdateEvent = new CustomEvent('sp-update-overlays', {
                bubbles: true,
                composed: true,
                cancelable: true,
            });
            document.dispatchEvent(overlayUpdateEvent);
        }
        /**
         * Open an overlay
         *
         * @param options display parameters
         * @param options.delayed delay before opening the overlay
         * @param options.offset distance to offset the overlay
         * @param options.placement side on which to position the overlay
         * @returns a Promise that resolves to true if this operation was cancelled
         */
        async open({ delayed, offset = 0, placement = 'top', receivesFocus, notImmediatelyClosable, }) {
            /* c8 ignore next */
            if (this.isOpen)
                return true;
            if (delayed === undefined) {
                delayed = this.overlayElement.hasAttribute('delayed');
            }
            const queryThemeDetail = {
                color: undefined,
                scale: undefined,
            };
            const queryThemeEvent = new CustomEvent('sp-query-theme', {
                bubbles: true,
                composed: true,
                detail: queryThemeDetail,
                cancelable: true,
            });
            this.owner.dispatchEvent(queryThemeEvent);
            const overlayDetailQuery = {};
            const queryOverlayDetailEvent = new CustomEvent('sp-overlay-query', {
                bubbles: true,
                composed: true,
                detail: overlayDetailQuery,
                cancelable: true,
            });
            this.overlayElement.dispatchEvent(queryOverlayDetailEvent);
            await Overlay.overlayStack.openOverlay(Object.assign({ content: this.overlayElement, contentTip: overlayDetailQuery.overlayContentTipElement, delayed, offset: offset, placement: placement, trigger: this.owner, interaction: this.interaction, theme: queryThemeDetail, receivesFocus,
                notImmediatelyClosable }, overlayDetailQuery));
            this.isOpen = true;
            return true;
        }
        /**
         * Close the overlay if it is open
         */
        close() {
            Overlay.overlayStack.closeOverlay(this.overlayElement);
        }
    }
    Overlay.overlayStack = new OverlayStack();
    /**
     * Announces that an overlay-based UI element has opened
     * @event sp-open
     * @type {object}
     * @property {TriggerInteractions} interaction type of interaction that triggered the opening
     */
    /**
     * Announces that an overlay-based UI element has opened
     * @event sp-close
     * @type {object}
     * @property {TriggerInteractions} interaction type of interaction that triggered the closing
     */

    var overlay = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Overlay: Overlay
    });

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const openOverlay = async (target, interaction, content, options) => {
        const { Overlay } = await Promise.resolve().then(function () { return overlay; });
        return await Overlay.open(target, interaction, content, options);
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$R = css `
#trigger{display:contents}:host([disabled]) #trigger{pointer-events:none}#overlay-content{display:none}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * A overlay trigger component for displaying overlays relative to other content.
     * @element overlay-trigger
     *
     * @slot trigger - The content that will trigger the various overlays
     * @slot hover-content - The content that will be displayed on hover
     * @slot click-content - The content that will be displayed on click
     * @slot longpress-content - The content that will be displayed on click
     *
     * @fires sp-opened - Announces that the overlay has been opened
     * @fires sp-closed - Announces that the overlay has been closed
     */
    class OverlayTrigger extends LitElement {
        constructor() {
            super(...arguments);
            /**
             * @type {"auto" | "auto-start" | "auto-end" | "top" | "bottom" | "right" | "left" | "top-start" | "top-end" | "bottom-start" | "bottom-end" | "right-start" | "right-end" | "left-start" | "left-end" | "none"}
             * @attr
             */
            this.placement = 'bottom';
            this.offset = 6;
            this.disabled = false;
            this.hoverOverlayReady = Promise.resolve();
        }
        static get styles() {
            return [styles$R];
        }
        handleClose(event) {
            if ((event === null || event === void 0 ? void 0 : event.detail.interaction) !== this.open &&
                (event === null || event === void 0 ? void 0 : event.detail.interaction) !== this.type) {
                return;
            }
            this.removeAttribute('open');
        }
        render() {
            // Keyboard event availability documented in README.md
            /* eslint-disable lit-a11y/click-events-have-key-events */
            return html `
            <div
                id="trigger"
                @click=${this.onTrigger}
                @longpress=${this.onTrigger}
                @mouseenter=${this.onTrigger}
                @mouseleave=${this.onTrigger}
                @focusin=${this.onTrigger}
                @focusout=${this.onTrigger}
                @sp-closed=${this.handleClose}
            >
                <slot
                    @slotchange=${this.onTargetSlotChange}
                    name="trigger"
                ></slot>
            </div>
            <div id="overlay-content">
                <slot
                    @slotchange=${this.onClickSlotChange}
                    name="click-content"
                ></slot>
                <slot
                    @slotchange=${this.onLongpressSlotChange}
                    name="longpress-content"
                ></slot>
                <slot
                    @slotchange=${this.onHoverSlotChange}
                    name="hover-content"
                ></slot>
            </div>
        `;
            /* eslint-enable lit-a11y/click-events-have-key-events */
        }
        updated(changes) {
            super.updated(changes);
            if (this.disabled &&
                this.closeClickOverlay &&
                changes.has('disabled')) {
                this.closeClickOverlay();
            }
            if (changes.has('open')) {
                this.manageOpen(changes.get('open'));
            }
        }
        manageOpen(previous) {
            switch (this.open) {
                case 'click':
                    if (!this.closeClickOverlay) {
                        this.onTriggerClick();
                    }
                    break;
                case 'hover':
                    if (!this.closeHoverOverlay) {
                        this.onTriggerMouseEnter();
                    }
                    break;
                case 'longpress':
                    if (!this.closeLongpressOverlay) {
                        this.onTriggerLongpress();
                        this.onTriggerMouseLeave();
                    }
                    break;
                default:
                    switch (previous) {
                        case 'click':
                            if (this.closeClickOverlay) {
                                this.closeClickOverlay();
                                delete this.closeClickOverlay;
                            }
                            break;
                        case 'longpress':
                            if (this.closeLongpressOverlay) {
                                this.closeLongpressOverlay();
                                delete this.closeLongpressOverlay;
                            }
                            break;
                        case 'hover':
                            this.onTriggerMouseLeave();
                            break;
                    }
                    break;
            }
        }
        get overlayOptions() {
            return {
                offset: this.offset,
                placement: this.placement,
                receivesFocus: this.type && this.type !== 'inline' ? 'auto' : undefined,
            };
        }
        onTrigger(event) {
            if (this.disabled) {
                return;
            }
            switch (event.type) {
                case 'mouseenter':
                case 'focusin':
                    if (!this.open && this.hoverContent) {
                        this.open = 'hover';
                    }
                    return;
                case 'mouseleave':
                case 'focusout':
                    if (this.open === 'hover') {
                        this.handleClose();
                    }
                    return;
                case 'click':
                    if (this.clickContent) {
                        this.open = event.type;
                    }
                    else if (this.closeHoverOverlay) {
                        event.preventDefault();
                    }
                    return;
                case 'longpress':
                    if (this.longpressContent) {
                        this._longpressEvent = event;
                        this.open = event.type;
                    }
                    return;
            }
        }
        prepareToFocusOverlayContent(overlayContent) {
            if (this.type !== 'modal') {
                return;
            }
            const firstFocusable = overlayContent.querySelector('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"]), [focusable]');
            if (!firstFocusable) {
                overlayContent.tabIndex = 0;
            }
        }
        async onTriggerClick() {
            if (!this.targetContent || !this.clickContent) {
                return;
            }
            const { targetContent, clickContent } = this;
            this.prepareToFocusOverlayContent(clickContent);
            this.closeClickOverlay = await OverlayTrigger.openOverlay(targetContent, this.type ? this.type : 'click', clickContent, this.overlayOptions);
        }
        async onTriggerLongpress() {
            var _a;
            if (!this.targetContent || !this.longpressContent) {
                return;
            }
            const { targetContent, longpressContent } = this;
            this.prepareToFocusOverlayContent(longpressContent);
            const notImmediatelyClosable = ((_a = this._longpressEvent) === null || _a === void 0 ? void 0 : _a.detail.source) !== 'keyboard';
            this.closeLongpressOverlay = await OverlayTrigger.openOverlay(targetContent, this.type ? this.type : 'longpress', longpressContent, Object.assign(Object.assign({}, this.overlayOptions), { receivesFocus: 'auto', notImmediatelyClosable }));
            this._longpressEvent = undefined;
        }
        async onTriggerMouseEnter() {
            if (!this.targetContent || !this.hoverContent) {
                return;
            }
            let overlayReady = () => {
                return;
            };
            this.hoverOverlayReady = new Promise((res) => {
                overlayReady = res;
            });
            const { targetContent, hoverContent } = this;
            this.closeHoverOverlay = await OverlayTrigger.openOverlay(targetContent, 'hover', hoverContent, this.overlayOptions);
            overlayReady();
        }
        async onTriggerMouseLeave() {
            await this.hoverOverlayReady;
            if (this.closeHoverOverlay) {
                this.closeHoverOverlay();
                delete this.closeHoverOverlay;
            }
        }
        onClickSlotChange(event) {
            this.clickContent = this.extractSlotContentFromEvent(event);
            this.manageOpen();
        }
        onLongpressSlotChange(event) {
            this.longpressContent = this.extractSlotContentFromEvent(event);
            this.manageOpen();
        }
        onHoverSlotChange(event) {
            this.hoverContent = this.extractSlotContentFromEvent(event);
            this.manageOpen();
        }
        onTargetSlotChange(event) {
            this.targetContent = this.extractSlotContentFromEvent(event);
        }
        extractSlotContentFromEvent(event) {
            const slot = event.target;
            const nodes = slot.assignedNodes({ flatten: true });
            return nodes.find((node) => node instanceof HTMLElement);
        }
        disconnectedCallback() {
            if (this.closeClickOverlay) {
                this.closeClickOverlay();
                delete this.closeClickOverlay;
            }
            if (this.closeHoverOverlay) {
                this.closeHoverOverlay();
                delete this.closeClickOverlay;
            }
            super.disconnectedCallback();
        }
    }
    OverlayTrigger.openOverlay = async (target, interaction, content, options) => {
        return await openOverlay(target, interaction, content, options);
    };
    __decorate([
        property({ reflect: true })
    ], OverlayTrigger.prototype, "placement", void 0);
    __decorate([
        property()
    ], OverlayTrigger.prototype, "type", void 0);
    __decorate([
        property({ type: Number, reflect: true })
    ], OverlayTrigger.prototype, "offset", void 0);
    __decorate([
        property({ reflect: true })
    ], OverlayTrigger.prototype, "open", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], OverlayTrigger.prototype, "disabled", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const chevronClass$1 = {
        s: 'spectrum-UIIcon-ChevronDown75',
        m: 'spectrum-UIIcon-ChevronDown100',
        l: 'spectrum-UIIcon-ChevronDown200',
        xl: 'spectrum-UIIcon-ChevronDown300',
    };
    /**
     * @element sp-picker
     * @slot label - The placeholder content for the picker
     *
     * @fires change - Announces that the `value` of the element has changed
     * @fires sp-opened - Announces that the overlay has been opened
     * @fires sp-closed - Announces that the overlay has been closed
     */
    class PickerBase extends SizedMixin(Focusable) {
        constructor() {
            super();
            this.disabled = false;
            this.focused = false;
            this.invalid = false;
            this.open = false;
            this.readonly = false;
            this.menuItems = [];
            /**
             * @type {"auto" | "auto-start" | "auto-end" | "top" | "bottom" | "right" | "left" | "top-start" | "top-end" | "bottom-start" | "bottom-end" | "right-start" | "right-end" | "left-start" | "left-end" | "none"}
             * @attr
             */
            this.placement = 'bottom-start';
            this.quiet = false;
            this.value = '';
            this.listRole = 'listbox';
            this.itemRole = 'option';
            this.onKeydown = (event) => {
                if (event.code !== 'ArrowDown' && event.code !== 'ArrowUp') {
                    return;
                }
                event.preventDefault();
                this.toggle(true);
            };
            this.menuStatePromise = Promise.resolve();
            this.onKeydown = this.onKeydown.bind(this);
            this.addEventListener('sp-menu-item-query-role', (event) => {
                event.stopPropagation();
                event.detail.role = this.itemRole;
            });
            this.addEventListener('sp-menu-query-role', (event) => {
                event.stopPropagation();
                event.detail.role = this.listRole;
            });
        }
        get target() {
            return this.button;
        }
        get focusElement() {
            if (this.open) {
                return this.optionsMenu;
            }
            return this.button;
        }
        forceFocusVisible() {
            this.focused = true;
        }
        onButtonBlur() {
            this.focused = false;
            this.target.removeEventListener('keydown', this.onKeydown);
        }
        onButtonClick() {
            this.toggle();
        }
        onButtonFocus() {
            this.target.addEventListener('keydown', this.onKeydown);
        }
        onClick(event) {
            const target = event.target;
            /* c8 ignore 6 */
            if (!target || target.disabled) {
                if (target) {
                    this.focus();
                }
                return;
            }
            if (target.value) {
                this.setValueFromItem(target);
            }
        }
        async setValueFromItem(item) {
            const oldSelectedItem = this.selectedItem;
            const oldValue = this.value;
            this.selectedItem = item;
            this.value = item.value;
            this.open = false;
            await this.updateComplete;
            const applyDefault = this.dispatchEvent(new Event('change', {
                cancelable: true,
            }));
            if (!applyDefault) {
                this.selectedItem = oldSelectedItem;
                this.value = oldValue;
                this.open = true;
                return;
            }
            if (oldSelectedItem) {
                oldSelectedItem.selected = false;
            }
            item.selected = true;
        }
        toggle(target) {
            if (this.readonly) {
                return;
            }
            this.open = typeof target !== 'undefined' ? target : !this.open;
        }
        close() {
            if (this.readonly) {
                return;
            }
            this.open = false;
        }
        onOverlayClosed() {
            this.close();
            if (this.restoreChildren) {
                this.restoreChildren();
                this.restoreChildren = undefined;
            }
            this.menuStateResolver();
        }
        async openMenu() {
            /* c8 ignore next 9 */
            let reparentableChildren = [];
            const deprecatedMenu = this.querySelector('sp-menu');
            if (deprecatedMenu) {
                reparentableChildren = Array.from(deprecatedMenu.children);
            }
            else {
                reparentableChildren = Array.from(this.children).filter((element) => {
                    return !element.hasAttribute('slot');
                });
            }
            if (reparentableChildren.length === 0) {
                this.menuStateResolver();
                return;
            }
            this.restoreChildren = reparentChildren(reparentableChildren, this.optionsMenu);
            this.optionsMenu.selectable = true;
            this.sizePopover(this.popover);
            const { popover } = this;
            this.closeOverlay = await Picker.openOverlay(this, 'inline', popover, {
                placement: this.placement,
                receivesFocus: 'auto',
            });
            this.manageSelection();
            this.menuStateResolver();
        }
        sizePopover(popover) {
            // only use `this.offsetWidth` when Standard variant
            const menuWidth = !this.quiet && `${this.offsetWidth}px`;
            if (menuWidth) {
                popover.style.setProperty('width', menuWidth);
            }
        }
        closeMenu() {
            if (this.closeOverlay) {
                this.closeOverlay();
                delete this.closeOverlay;
            }
        }
        get buttonContent() {
            return [
                html `
                <span
                    id="label"
                    class=${ifDefined(this.value ? undefined : 'placeholder')}
                >
                    ${this.value && this.selectedItem
                ? this.selectedItem.itemText
                : html `
                              <slot name="label">${this.label}</slot>
                          `}
                </span>
                ${this.invalid
                ? html `
                          <sp-icon-alert class="validationIcon"></sp-icon-alert>
                      `
                : nothing}
                <sp-icon-chevron100
                    class="icon picker ${chevronClass$1[this.size]}"
                ></sp-icon-chevron100>
            `,
            ];
        }
        get renderButton() {
            return html `
            <button
                aria-haspopup="true"
                aria-expanded=${this.open ? 'true' : 'false'}
                aria-labelledby="button label"
                id="button"
                class="button"
                @blur=${this.onButtonBlur}
                @click=${this.onButtonClick}
                @focus=${this.onButtonFocus}
                ?disabled=${this.disabled}
            >
                ${this.buttonContent}
            </button>
        `;
        }
        render() {
            return html `
            ${this.renderButton} ${this.renderPopover}
        `;
        }
        get renderPopover() {
            return html `
            <sp-popover
                open
                id="popover"
                @click=${this.onClick}
                @sp-overlay-closed=${this.onOverlayClosed}
            >
                <sp-menu id="menu" role="${this.listRole}"></sp-menu>
            </sp-popover>
        `;
        }
        updateMenuItems() {
            this.menuItems = [
                ...this.querySelectorAll('sp-menu-item'),
            ];
        }
        firstUpdated(changedProperties) {
            super.firstUpdated(changedProperties);
            // Since the sp-menu gets reparented by the popover, initialize it here
            this.optionsMenu = this.shadowRoot.querySelector('sp-menu');
            this.updateMenuItems();
            const deprecatedMenu = this.querySelector('sp-menu');
            if (deprecatedMenu) {
                console.warn(`Deprecation Notice: You no longer need to provide an sp-menu child to ${this.tagName.toLowerCase()}. Any styling or attributes on the sp-menu will be ignored.`);
            }
        }
        updated(changedProperties) {
            super.updated(changedProperties);
            if (changedProperties.has('value') &&
                !changedProperties.has('selectedItem')) {
                this.manageSelection();
            }
            if (changedProperties.has('disabled') && this.disabled) {
                this.open = false;
            }
            if (changedProperties.has('open') &&
                (this.open || typeof changedProperties.get('open') !== 'undefined')) {
                this.menuStatePromise = new Promise((res) => (this.menuStateResolver = res));
                if (this.open) {
                    this.openMenu();
                }
                else {
                    this.closeMenu();
                }
            }
        }
        manageSelection() {
            if (!this.open) {
                this.updateMenuItems();
            }
            /* c8 ignore next 3 */
            if (this.menuItems.length > 0) {
                let selectedItem;
                this.menuItems.forEach((item) => {
                    if (this.value === item.value && !item.disabled) {
                        selectedItem = item;
                    }
                    else {
                        item.selected = false;
                    }
                });
                if (selectedItem) {
                    selectedItem.selected = true;
                    this.selectedItem = selectedItem;
                }
                else {
                    this.value = '';
                    this.selectedItem = undefined;
                }
                if (this.open) {
                    this.optionsMenu.updateSelectedItemIndex();
                }
                return;
            }
        }
        async _getUpdateComplete() {
            await super._getUpdateComplete();
            await this.menuStatePromise;
        }
        connectedCallback() {
            if (!this.open) {
                this.updateMenuItems();
            }
            super.connectedCallback();
        }
        disconnectedCallback() {
            this.open = false;
            super.disconnectedCallback();
        }
    }
    /**
     * @private
     */
    PickerBase.openOverlay = async (target, interaction, content, options) => {
        return await openOverlay(target, interaction, content, options);
    };
    __decorate([
        query('#button')
    ], PickerBase.prototype, "button", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], PickerBase.prototype, "disabled", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], PickerBase.prototype, "focused", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], PickerBase.prototype, "invalid", void 0);
    __decorate([
        property()
    ], PickerBase.prototype, "label", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], PickerBase.prototype, "open", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], PickerBase.prototype, "readonly", void 0);
    __decorate([
        property()
    ], PickerBase.prototype, "placement", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], PickerBase.prototype, "quiet", void 0);
    __decorate([
        property({ type: String })
    ], PickerBase.prototype, "value", void 0);
    __decorate([
        property({ attribute: false })
    ], PickerBase.prototype, "selectedItem", void 0);
    __decorate([
        query('sp-popover')
    ], PickerBase.prototype, "popover", void 0);
    class Picker extends PickerBase {
        constructor() {
            super(...arguments);
            this.onKeydown = (event) => {
                const { code } = event;
                if (!code.startsWith('Arrow') || this.readonly) {
                    return;
                }
                event.preventDefault();
                if (code === 'ArrowUp' || code === 'ArrowDown') {
                    this.toggle(true);
                    return;
                }
                const selectedIndex = this.selectedItem
                    ? this.menuItems.indexOf(this.selectedItem)
                    : -1;
                // use a positive offset to find the first non-disabled item when no selection is available.
                const nextOffset = !this.value || code === 'ArrowRight' ? 1 : -1;
                let nextIndex = selectedIndex + nextOffset;
                while (this.menuItems[nextIndex] &&
                    this.menuItems[nextIndex].disabled) {
                    nextIndex += nextOffset;
                }
                if (!this.menuItems[nextIndex] || this.menuItems[nextIndex].disabled) {
                    return;
                }
                if (!this.value || nextIndex !== selectedIndex) {
                    this.setValueFromItem(this.menuItems[nextIndex]);
                }
            };
        }
        static get styles() {
            return [styles$V, styles$12];
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const MoreIcon = ({ width = 24, height = 24, hidden = false, title = 'More' } = {}) => {
        return tag `<svg
    xmlns="http://www.w3.org/2000/svg"
    width="${width}"
    height="${height}"
    viewBox="0 0 36 36"
    aria-hidden="${hidden ? 'true' : 'false'}"
    role="img"
    fill="currentColor"
    aria-label="${title}"
  >
    <circle cx="17.8" cy="18.2" r="3.8" />
    <circle cx="29.5" cy="18.2" r="3.8" />
    <circle cx="6.1" cy="18.2" r="3.68" />
  </svg>`;
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class IconMore extends IconBase {
        render() {
            setCustomTemplateLiteralTag(html);
            return MoreIcon({ hidden: !this.label, title: this.label });
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-icon-more', IconMore);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$Q = css `
:host{display:inline-flex}:host([quiet]){min-width:0}.icon,::slotted([slot=icon]){flex-shrink:0}#popover{width:auto;max-width:none;display:none}:host([dir=ltr]) .icon,:host([dir=ltr]) ::slotted([slot=icon]){margin-left:calc(-1*(var(--spectrum-actionbutton-textonly-padding-left-adjusted) - var(--spectrum-actionbutton-padding-left-adjusted)))}:host([dir=rtl]) .icon,:host([dir=rtl]) ::slotted([slot=icon]){margin-right:calc(-1*(var(--spectrum-actionbutton-textonly-padding-left-adjusted) - var(--spectrum-actionbutton-padding-left-adjusted)))}:host([dir]) slot[icon-only] .icon,:host([dir]) slot[icon-only]::slotted([slot=icon]){margin-left:calc(-1*(var(--spectrum-actionbutton-textonly-padding-left-adjusted) - var(--spectrum-actionbutton-icononly-padding-left-adjusted)));margin-right:calc(-1*(var(--spectrum-actionbutton-textonly-padding-right-adjusted) - var(--spectrum-actionbutton-icononly-padding-right-adjusted)))}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @element sp-action-menu
     * @slot icon - The icon to use for action button
     * @slot label - The label to use on for the action button
     */
    class ActionMenu extends ObserveSlotText(PickerBase, 'label') {
        constructor() {
            super(...arguments);
            this.listRole = 'menu';
            this.itemRole = 'menuitem';
        }
        static get styles() {
            return [styles$Q];
        }
        get hasLabel() {
            return this.slotHasContent;
        }
        get buttonContent() {
            return [
                html `
                <slot name="icon" slot="icon" ?icon-only=${!this.hasLabel}>
                    <sp-icon-more class="icon"></sp-icon-more>
                </slot>
                <slot name="label" ?hidden=${!this.hasLabel}></slot>
            `,
            ];
        }
        get renderButton() {
            return html `
            <sp-action-button
                quiet
                ?selected=${this.open}
                aria-haspopup="true"
                aria-controls="popover"
                aria-expanded=${this.open ? 'true' : 'false'}
                aria-label=${ifDefined(this.label || undefined)}
                id="button"
                class="button"
                @blur=${this.onButtonBlur}
                @click=${this.onButtonClick}
                @focus=${this.onButtonFocus}
                ?disabled=${this.disabled}
            >
                ${this.buttonContent}
            </sp-action-button>
        `;
        }
        updated(changedProperties) {
            super.updated(changedProperties);
            if (changedProperties.has('invalid')) {
                this.invalid = false;
            }
            this.quiet = true;
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-action-menu', ActionMenu);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$P = css `
:host{width:100%;height:100%;display:flex;align-items:center;justify-content:center}::slotted(*){max-width:100%;max-height:100%;object-fit:contain;transition:opacity var(--spectrum-global-animation-duration-100,.13s)}.file,.folder{width:100%;height:100%;min-width:var(--spectrum-asset-icon-min-width,var(--spectrum-global-dimension-size-600));max-width:var(--spectrum-asset-icon-max-width,var(--spectrum-global-dimension-static-size-1000));margin:var(--spectrum-asset-icon-margin,var(--spectrum-global-dimension-size-250))}.folderBackground{fill:var(--spectrum-asset-folder-background-color,var(--spectrum-global-color-gray-300))}.fileBackground{fill:var(--spectrum-asset-file-background-color,var(--spectrum-global-color-gray-50))}.fileOutline,.folderOutline{fill:var(--spectrum-asset-icon-outline-color,var(--spectrum-global-color-gray-500))}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const file$g = (label) => html `
    <svg
        class="file"
        role="img"
        viewBox="0 0 128 128"
        aria-label=${label || 'File'}
    >
        <path
            class="fileBackground"
            d="M24,126c-5.5,0-10-4.5-10-10V12c0-5.5,4.5-10,10-10h61.5c2.1,0,4.1,0.8,5.6,2.3l20.5,20.4c1.5,1.5,2.4,3.5,2.4,5.7V116c0,5.5-4.5,10-10,10H24z"
        ></path>
        <path
            class="fileOutline"
            d="M113.1,23.3L92.6,2.9C90.7,1,88.2,0,85.5,0H24c-6.6,0-12,5.4-12,12v104c0,6.6,5.4,12,12,12h80c6.6,0,12-5.4,12-12V30.4C116,27.8,114.9,25.2,113.1,23.3z M90,6l20.1,20H92c-1.1,0-2-0.9-2-2V6z M112,116c0,4.4-3.6,8-8,8H24c-4.4,0-8-3.6-8-8V12c0-4.4,3.6-8,8-8h61.5c0.2,0,0.3,0,0.5,0v20c0,3.3,2.7,6,6,6h20c0,0.1,0,0.3,0,0.4V116z"
        ></path>
    </svg>
`;
    const folder = (label) => html `
    <svg
        class="folder"
        role="img"
        viewBox="0 0 32 32"
        aria-label=${label || 'Folder'}
    >
        <path
            class="folderBackground"
            d="M3,29.5c-1.4,0-2.5-1.1-2.5-2.5V5c0-1.4,1.1-2.5,2.5-2.5h10.1c0.5,0,1,0.2,1.4,0.6l3.1,3.1c0.2,0.2,0.4,0.3,0.7,0.3H29c1.4,0,2.5,1.1,2.5,2.5v18c0,1.4-1.1,2.5-2.5,2.5H3z"
        ></path>
        <path
            class="folderOutline"
            d="M29,6H18.3c-0.1,0-0.2,0-0.4-0.2l-3.1-3.1C14.4,2.3,13.8,2,13.1,2H3C1.3,2,0,3.3,0,5v22c0,1.6,1.3,3,3,3h26c1.7,0,3-1.4,3-3V9C32,7.3,30.7,6,29,6z M31,27c0,1.1-0.9,2-2,2H3c-1.1,0-2-0.9-2-2V7h28c1.1,0,2,0.9,2,2V27z"
        ></path>
    </svg>
`;
    /**
     * @element sp-asset
     */
    class Asset extends SpectrumElement {
        constructor() {
            super(...arguments);
            this.label = '';
        }
        static get styles() {
            return [styles$P];
        }
        render() {
            if (this.variant === 'file') {
                return file$g(this.label);
            }
            else if (this.variant === 'folder') {
                return folder(this.label);
            }
            return html `
            <slot></slot>
        `;
        }
    }
    __decorate([
        property({ type: String, reflect: true })
    ], Asset.prototype, "variant", void 0);
    __decorate([
        property()
    ], Asset.prototype, "label", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-asset', Asset);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-button', Button);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-clear-button', ClearButton);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$O = css `
:host{--spectrum-buttongroup-button-gap-reset:0;display:flex}::slotted(*){flex-shrink:0}:host([dir=ltr]) ::slotted(:not(:first-of-type)){margin-left:var(--spectrum-buttongroup-button-gap-x,var(--spectrum-global-dimension-static-size-200))}:host([dir=rtl]) ::slotted(:not(:first-of-type)){margin-right:var(--spectrum-buttongroup-button-gap-x,var(--spectrum-global-dimension-static-size-200))}:host([vertical]){display:inline-flex;flex-direction:column}:host([dir=ltr][vertical]) ::slotted(:not(:first-of-type)){margin-left:var(--spectrum-buttongroup-button-gap-reset)}:host([dir=rtl][vertical]) ::slotted(:not(:first-of-type)){margin-right:var(--spectrum-buttongroup-button-gap-reset)}:host([vertical]) ::slotted(:not(:first-of-type)){margin-top:var(--spectrum-buttongroup-button-gap-y,var(--spectrum-global-dimension-static-size-200))}:host([vertical]) ::slotted(sp-action-button){--spectrum-actionbutton-label-flex-grow:1}:host([dir=ltr][vertical]) ::slotted(sp-action-button){--spectrum-actionbutton-label-text-align:left}:host([dir=rtl][vertical]) ::slotted(sp-action-button){--spectrum-actionbutton-label-text-align:right}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @element sp-button-group
     */
    class ButtonGroup extends SpectrumElement {
        constructor() {
            super(...arguments);
            this.vertical = false;
        }
        static get styles() {
            return [styles$O];
        }
        render() {
            return html `
            <slot></slot>
        `;
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ButtonGroup.prototype, "vertical", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-button-group', ButtonGroup);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class CheckboxBase extends Focusable {
        constructor() {
            super(...arguments);
            this.checked = false;
            this.readonly = false;
        }
        get focusElement() {
            return this.inputElement;
        }
        handleChange(event) {
            if (this.readonly) {
                this.inputElement.checked = this.checked;
                return;
            }
            this.checked = this.inputElement.checked;
            // Change events from the shadow DOM are not transmitted into
            // the parent light DOM
            const changeEvent = new CustomEvent('change', {
                detail: {
                    sourceEvent: event,
                },
                bubbles: event.bubbles,
                cancelable: event.cancelable,
            });
            this.dispatchEvent(changeEvent);
        }
        render() {
            return html `
            <input
                id="input"
                aria-labelledby="label"
                type="checkbox"
                .checked=${this.checked}
                @change=${this.handleChange}
            />
        `;
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], CheckboxBase.prototype, "checked", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], CheckboxBase.prototype, "readonly", void 0);
    __decorate([
        query('#input')
    ], CheckboxBase.prototype, "inputElement", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const Checkmark75Icon = () => {
        return tag$1 `<svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 10 10"
    aria-hidden="true"
    fill="currentColor"
  >
    <path
      d="M3.667 9.07a.96.96 0 01-.737-.344L.753 6.114a.96.96 0 111.474-1.23l1.418 1.701 4.112-5.233a.96.96 0 011.51 1.186L4.422 8.704a.962.962 0 01-.741.367z"
    />
  </svg>`;
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class IconCheckmark75 extends IconBase {
        render() {
            setCustomTemplateLiteralTag$1(html);
            return Checkmark75Icon();
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-icon-checkmark75', IconCheckmark75);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const Checkmark100Icon = () => {
        return tag$1 `<svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 10 10"
    aria-hidden="true"
    fill="currentColor"
  >
    <path
      d="M3.5 9.5a.999.999 0 01-.774-.368l-2.45-3a1 1 0 111.548-1.264l1.657 2.028 4.68-6.01A1 1 0 019.74 2.114l-5.45 7a1 1 0 01-.777.386z"
    />
  </svg>`;
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class IconCheckmark100 extends IconBase {
        render() {
            setCustomTemplateLiteralTag$1(html);
            return Checkmark100Icon();
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-icon-checkmark100', IconCheckmark100);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const Checkmark200Icon = () => {
        return tag$1 `<svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 12 12"
    aria-hidden="true"
    fill="currentColor"
  >
    <path
      d="M4.313 10.98a1.042 1.042 0 01-.8-.375L.647 7.165a1.042 1.042 0 011.6-1.333l2.042 2.45 5.443-6.928a1.042 1.042 0 011.64 1.287l-6.24 7.94a1.04 1.04 0 01-.804.399z"
    />
  </svg>`;
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class IconCheckmark200 extends IconBase {
        render() {
            setCustomTemplateLiteralTag$1(html);
            return Checkmark200Icon();
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-icon-checkmark200', IconCheckmark200);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const Checkmark300Icon = () => {
        return tag$1 `<svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 14 14"
    aria-hidden="true"
    fill="currentColor"
  >
    <path
      d="M5.102 12.514a1.087 1.087 0 01-.834-.39L.988 8.19a1.085 1.085 0 011.668-1.39l2.421 2.906 6.243-7.947a1.085 1.085 0 011.707 1.34L5.955 12.1a1.089 1.089 0 01-.838.415z"
    />
  </svg>`;
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class IconCheckmark300 extends IconBase {
        render() {
            setCustomTemplateLiteralTag$1(html);
            return Checkmark300Icon();
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-icon-checkmark300', IconCheckmark300);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const Dash75Icon = () => {
        return tag$1 `<svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 8 8"
    aria-hidden="true"
    fill="currentColor"
  >
    <path d="M6.99 4.96H1.01a.96.96 0 010-1.92h5.98a.96.96 0 010 1.92z" />
  </svg>`;
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class IconDash75 extends IconBase {
        render() {
            setCustomTemplateLiteralTag$1(html);
            return Dash75Icon();
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-icon-dash75', IconDash75);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const Dash100Icon = () => {
        return tag$1 `<svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 10 10"
    aria-hidden="true"
    fill="currentColor"
  >
    <path d="M8.5 6h-7a1 1 0 010-2h7a1 1 0 010 2z" />
  </svg>`;
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class IconDash100 extends IconBase {
        render() {
            setCustomTemplateLiteralTag$1(html);
            return Dash100Icon();
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-icon-dash100', IconDash100);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const Dash200Icon = () => {
        return tag$1 `<svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 12 12"
    aria-hidden="true"
    fill="currentColor"
  >
    <path d="M10.021 7.042H1.98a1.042 1.042 0 110-2.083h8.043a1.042 1.042 0 010 2.083z" />
  </svg>`;
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class IconDash200 extends IconBase {
        render() {
            setCustomTemplateLiteralTag$1(html);
            return Dash200Icon();
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-icon-dash200', IconDash200);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const Dash300Icon = () => {
        return tag$1 `<svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 12 12"
    aria-hidden="true"
    fill="currentColor"
  >
    <path d="M10.61 7.085H1.39a1.085 1.085 0 010-2.17h9.22a1.085 1.085 0 010 2.17z" />
  </svg>`;
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class IconDash300 extends IconBase {
        render() {
            setCustomTemplateLiteralTag$1(html);
            return Dash300Icon();
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-icon-dash300', IconDash300);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$N = css `
:host{align-items:flex-start;position:relative;min-height:var(--spectrum-checkbox-height);max-width:100%}#input{font-family:inherit;font-size:100%;line-height:1.15;margin:0;overflow:visible;box-sizing:border-box;padding:0;position:absolute;width:100%;height:100%;opacity:.0001;z-index:1;cursor:pointer}#input:disabled{cursor:default}#input:checked+#box:before{border-width:calc(var(--spectrum-checkbox-box-size)/2)}#input:checked+#box #checkmark{transform:scale(1);opacity:1}#input.focus-visible+#box:after,#input.focus-visible+#box:after{margin:calc(var(--spectrum-alias-focus-ring-gap,
var(--spectrum-global-dimension-static-size-25))*-1)}#input.focus-visible+#box:after,#input:focus-visible+#box:after{margin:calc(var(--spectrum-alias-focus-ring-gap,
var(--spectrum-global-dimension-static-size-25))*-1)}:host([size=s]){--spectrum-checkbox-text-font-style:var(--spectrum-checkbox-s-text-font-style,var(--spectrum-global-font-style-regular));--spectrum-checkbox-text-font-weight:var(--spectrum-checkbox-s-text-font-weight,var(--spectrum-alias-body-text-font-weight));--spectrum-checkbox-text-line-height:var(--spectrum-checkbox-s-text-line-height,var(--spectrum-alias-component-text-line-height));--spectrum-checkbox-box-border-radius:var(--spectrum-checkbox-s-box-border-radius,var(--spectrum-alias-border-radius-small));--spectrum-checkbox-box-border-size:var(--spectrum-checkbox-s-box-border-size,var(--spectrum-alias-border-size-thick));--spectrum-checkbox-text-size:var(--spectrum-checkbox-s-text-size,var(--spectrum-alias-item-text-size-s));--spectrum-checkbox-text-padding-top:var(--spectrum-checkbox-s-text-padding-top,var(--spectrum-alias-item-text-padding-top-s));--spectrum-checkbox-height:var(--spectrum-checkbox-s-height,var(--spectrum-alias-item-height-s));--spectrum-checkbox-checkmark-size:var(--spectrum-checkbox-s-checkmark-size,var(--spectrum-alias-ui-icon-checkmark-size-75));--spectrum-checkbox-box-size:var(--spectrum-checkbox-s-box-size,var(--spectrum-alias-item-control-2-size-s));--spectrum-checkbox-text-gap:var(--spectrum-checkbox-s-text-gap,var(--spectrum-alias-item-control-gap-s))}:host([size=m]){--spectrum-checkbox-text-font-style:var(--spectrum-checkbox-m-text-font-style,var(--spectrum-global-font-style-regular));--spectrum-checkbox-text-font-weight:var(--spectrum-checkbox-m-text-font-weight,var(--spectrum-alias-body-text-font-weight));--spectrum-checkbox-text-line-height:var(--spectrum-checkbox-m-text-line-height,var(--spectrum-alias-component-text-line-height));--spectrum-checkbox-box-border-radius:var(--spectrum-checkbox-m-box-border-radius,var(--spectrum-alias-border-radius-small));--spectrum-checkbox-box-border-size:var(--spectrum-checkbox-m-box-border-size,var(--spectrum-alias-border-size-thick));--spectrum-checkbox-text-size:var(--spectrum-checkbox-m-text-size,var(--spectrum-alias-item-text-size-m));--spectrum-checkbox-text-padding-top:var(--spectrum-checkbox-m-text-padding-top,var(--spectrum-alias-item-text-padding-top-m));--spectrum-checkbox-height:var(--spectrum-checkbox-m-height,var(--spectrum-alias-item-height-m));--spectrum-checkbox-checkmark-size:var(--spectrum-checkbox-m-checkmark-size,var(--spectrum-alias-ui-icon-checkmark-size-100));--spectrum-checkbox-box-size:var(--spectrum-checkbox-m-box-size,var(--spectrum-alias-item-control-2-size-m));--spectrum-checkbox-text-gap:var(--spectrum-checkbox-m-text-gap,var(--spectrum-alias-item-control-gap-m))}:host([size=l]){--spectrum-checkbox-text-font-style:var(--spectrum-checkbox-l-text-font-style,var(--spectrum-global-font-style-regular));--spectrum-checkbox-text-font-weight:var(--spectrum-checkbox-l-text-font-weight,var(--spectrum-alias-body-text-font-weight));--spectrum-checkbox-text-line-height:var(--spectrum-checkbox-l-text-line-height,var(--spectrum-alias-component-text-line-height));--spectrum-checkbox-box-border-radius:var(--spectrum-checkbox-l-box-border-radius,var(--spectrum-alias-border-radius-small));--spectrum-checkbox-box-border-size:var(--spectrum-checkbox-l-box-border-size,var(--spectrum-alias-border-size-thick));--spectrum-checkbox-text-size:var(--spectrum-checkbox-l-text-size,var(--spectrum-alias-item-text-size-l));--spectrum-checkbox-text-padding-top:var(--spectrum-checkbox-l-text-padding-top,var(--spectrum-alias-item-text-padding-top-l));--spectrum-checkbox-height:var(--spectrum-checkbox-l-height,var(--spectrum-alias-item-height-l));--spectrum-checkbox-checkmark-size:var(--spectrum-checkbox-l-checkmark-size,var(--spectrum-alias-ui-icon-checkmark-size-200));--spectrum-checkbox-box-size:var(--spectrum-checkbox-l-box-size,var(--spectrum-alias-item-control-2-size-l));--spectrum-checkbox-text-gap:var(--spectrum-checkbox-l-text-gap,var(--spectrum-alias-item-control-gap-l))}:host([size=xl]){--spectrum-checkbox-text-font-style:var(--spectrum-checkbox-xl-text-font-style,var(--spectrum-global-font-style-regular));--spectrum-checkbox-text-font-weight:var(--spectrum-checkbox-xl-text-font-weight,var(--spectrum-alias-body-text-font-weight));--spectrum-checkbox-text-line-height:var(--spectrum-checkbox-xl-text-line-height,var(--spectrum-alias-component-text-line-height));--spectrum-checkbox-box-border-radius:var(--spectrum-checkbox-xl-box-border-radius,var(--spectrum-alias-border-radius-small));--spectrum-checkbox-box-border-size:var(--spectrum-checkbox-xl-box-border-size,var(--spectrum-alias-border-size-thick));--spectrum-checkbox-text-size:var(--spectrum-checkbox-xl-text-size,var(--spectrum-alias-item-text-size-xl));--spectrum-checkbox-text-padding-top:var(--spectrum-checkbox-xl-text-padding-top,var(--spectrum-alias-item-text-padding-top-xl));--spectrum-checkbox-height:var(--spectrum-checkbox-xl-height,var(--spectrum-alias-item-height-xl));--spectrum-checkbox-checkmark-size:var(--spectrum-checkbox-xl-checkmark-size,var(--spectrum-alias-ui-icon-checkmark-size-300));--spectrum-checkbox-box-size:var(--spectrum-checkbox-xl-box-size,var(--spectrum-alias-item-control-2-size-xl));--spectrum-checkbox-text-gap:var(--spectrum-checkbox-xl-text-gap,var(--spectrum-alias-item-control-gap-xl))}:host([indeterminate]) #box:before,:host([indeterminate]) #input:checked+#box:before{border-width:calc(var(--spectrum-checkbox-box-size)/2)}:host([indeterminate]) #box #checkmark,:host([indeterminate]) #input:checked+#box #checkmark{display:none}:host([indeterminate]) #box #partialCheckmark,:host([indeterminate]) #input:checked+#box #partialCheckmark{display:block;transform:scale(1);opacity:1}:host([dir=ltr]) #label{text-align:left}:host([dir=rtl]) #label{text-align:right}:host([dir=ltr]) #label{margin-left:var(--spectrum-checkbox-text-gap)}:host([dir=rtl]) #label{margin-right:var(--spectrum-checkbox-text-gap)}#label{margin-top:var(--spectrum-checkbox-text-padding-top);font-size:var(--spectrum-checkbox-text-size);font-weight:var(--spectrum-checkbox-text-font-weight);font-style:var(--spectrum-checkbox-text-font-style);line-height:var(--spectrum-checkbox-text-line-height);transition:color var(--spectrum-global-animation-duration-100,.13s) ease-in-out}#box{position:relative;margin:calc((var(--spectrum-checkbox-height) - var(--spectrum-checkbox-box-size))/2) 0;flex-grow:0;flex-shrink:0}#box,#box:before{box-sizing:border-box;width:var(--spectrum-checkbox-box-size);height:var(--spectrum-checkbox-box-size)}#box:before{z-index:0;border-radius:var(--spectrum-checkbox-box-border-radius);border-width:var(--spectrum-checkbox-box-border-size);border-style:solid;transition:border var(--spectrum-global-animation-duration-100,.13s) ease-in-out,box-shadow var(--spectrum-global-animation-duration-100,.13s) ease-in-out}#box:after,#box:before{display:block;content:"";position:absolute}#box:after{border-radius:calc(var(--spectrum-checkbox-box-border-radius) + var(--spectrum-alias-focus-ring-gap,
var(--spectrum-global-dimension-static-size-25)));left:0;right:0;bottom:0;top:0;margin:var(--spectrum-alias-focus-ring-gap,var(--spectrum-global-dimension-static-size-25));transition:box-shadow var(--spectrum-global-animation-duration-100,.13s) ease-out,margin var(--spectrum-global-animation-duration-100,.13s) ease-out;transform:translate(0)}:host([dir=ltr]) #checkmark,:host([dir=ltr]) #partialCheckmark{left:50%}:host([dir=rtl]) #checkmark,:host([dir=rtl]) #partialCheckmark{right:50%}#checkmark,#partialCheckmark{position:absolute;top:50%;opacity:0;transform:scale(0);transition:opacity var(--spectrum-global-animation-duration-100,.13s) ease-in-out,transform var(--spectrum-global-animation-duration-100,.13s) ease-in-out}:host([dir=ltr]) #checkmark{margin-left:calc(var(--spectrum-checkbox-checkmark-size)/-2)}:host([dir=rtl]) #checkmark{margin-right:calc(var(--spectrum-checkbox-checkmark-size)/-2)}#checkmark{margin-top:calc(var(--spectrum-checkbox-checkmark-size)/-2)}:host([dir=ltr]) #partialCheckmark{margin-left:calc(var(--spectrum-checkbox-checkmark-size)/-2)}:host([dir=rtl]) #partialCheckmark{margin-right:calc(var(--spectrum-checkbox-checkmark-size)/-2)}#partialCheckmark{margin-top:calc(var(--spectrum-checkbox-checkmark-size)/-2);display:none}:host{color:var(--spectrum-checkbox-m-text-color,var(--spectrum-alias-text-color))}#checkmark,#partialCheckmark{color:var(--spectrum-checkbox-m-checkmark-color,var(--spectrum-global-color-gray-75))}#box:before{forced-color-adjust:none;border-color:var(--spectrum-checkbox-m-box-border-color,var(--spectrum-global-color-gray-600));background-color:var(--spectrum-checkbox-m-box-background-color,var(--spectrum-global-color-gray-75))}#label{color:var(--spectrum-checkbox-m-text-color,var(--spectrum-alias-text-color))}#input:checked+#box:before,:host([indeterminate]) #box:before{border-color:var(--spectrum-checkbox-m-box-border-color-selected,var(--spectrum-global-color-gray-700))}:host(:hover) #input:checked+#box:before,:host(:hover[indeterminate]) #box:before{border-color:var(--spectrum-checkbox-m-box-border-color-selected-hover,var(--spectrum-global-color-gray-800))}:host(:active) #input:checked+#box:before,:host(:active[indeterminate]) #box:before{border-color:var(--spectrum-checkbox-m-box-border-color-selected-down,var(--spectrum-global-color-gray-900))}:host{border-color:var(--spectrum-checkbox-m-box-border-color,var(--spectrum-global-color-gray-600))}:host(:hover) #box:before{border-color:var(--spectrum-checkbox-m-box-border-color-hover,var(--spectrum-global-color-gray-700))}:host(:hover) #label{color:var(--spectrum-checkbox-m-text-color-hover,var(--spectrum-alias-text-color-hover))}:host(:active) #box:before{border-color:var(--spectrum-checkbox-m-box-border-color-down,var(--spectrum-global-color-gray-800))}:host(:active) #label{color:var(--spectrum-checkbox-m-text-color-down,var(--spectrum-alias-text-color-down))}#input:disabled+#box:before,:host([dir]) #input:checked:disabled+#box:before{border-color:var(--spectrum-checkbox-m-box-border-color-disabled,var(--spectrum-global-color-gray-400));background-color:var(--spectrum-checkbox-m-box-background-color-disabled,var(--spectrum-global-color-gray-75))}#input:checked:disabled~#label,#input:disabled~#label{forced-color-adjust:none;color:var(--spectrum-checkbox-m-text-color-disabled,var(--spectrum-alias-text-color-disabled))}#input.focus-visible+#box:before,#input.focus-visible+#box:before{border-color:var(--spectrum-checkbox-m-box-border-color-key-focus,var(--spectrum-global-color-gray-700))}#input.focus-visible+#box:before,#input:focus-visible+#box:before{border-color:var(--spectrum-checkbox-m-box-border-color-key-focus,var(--spectrum-global-color-gray-700))}#input.focus-visible+#box:after,#input.focus-visible+#box:after{box-shadow:0 0 0 var(--spectrum-checkbox-m-focus-ring-size-key-focus,var(--spectrum-alias-focus-ring-size)) var(--spectrum-checkbox-m-focus-ring-color-key-focus,var(--spectrum-alias-focus-ring-color))}#input.focus-visible+#box:after,#input:focus-visible+#box:after{box-shadow:0 0 0 var(--spectrum-checkbox-m-focus-ring-size-key-focus,var(--spectrum-alias-focus-ring-size)) var(--spectrum-checkbox-m-focus-ring-color-key-focus,var(--spectrum-alias-focus-ring-color))}#input:checked.focus-visible+#box:before,#input:checked.focus-visible+#box:before,:host([indeterminate]) #input.focus-visible+#box:before,:host([indeterminate]) #input.focus-visible+#box:before{border-color:var(--spectrum-checkbox-m-box-border-color-selected-key-focus,var(--spectrum-global-color-gray-800))}#input:checked.focus-visible+#box:before,#input:checked:focus-visible+#box:before,:host([indeterminate]) #input.focus-visible+#box:before,:host([indeterminate]) #input:focus-visible+#box:before{border-color:var(--spectrum-checkbox-m-box-border-color-selected-key-focus,var(--spectrum-global-color-gray-800))}#input.focus-visible~#label,#input.focus-visible~#label{color:var(--spectrum-checkbox-m-text-color-key-focus,var(--spectrum-alias-text-color-hover))}#input.focus-visible~#label,#input:focus-visible~#label{color:var(--spectrum-checkbox-m-text-color-key-focus,var(--spectrum-alias-text-color-hover))}:host([emphasized]) #input:checked+#box:before,:host([emphasized][indeterminate]) #box:before,:host([emphasized][indeterminate]) #input.focus-visible+#box:before,:host([emphasized][indeterminate]) #input.focus-visible+#box:before{border-color:var(--spectrum-checkbox-m-emphasized-box-border-color-selected,var(--spectrum-global-color-blue-500))}:host([emphasized]) #input:checked+#box:before,:host([emphasized][indeterminate]) #box:before,:host([emphasized][indeterminate]) #input.focus-visible+#box:before,:host([emphasized][indeterminate]) #input:focus-visible+#box:before{border-color:var(--spectrum-checkbox-m-emphasized-box-border-color-selected,var(--spectrum-global-color-blue-500))}:host([emphasized]:hover) #input:checked+#box:before,:host([emphasized][indeterminate]:hover) #box:before{border-color:var(--spectrum-checkbox-m-emphasized-box-border-color-selected-hover,var(--spectrum-global-color-blue-600))}:host([emphasized]:active) #input:checked+#box:before,:host([emphasized][indeterminate]:active) #box:before{border-color:var(--spectrum-checkbox-m-emphasized-box-border-color-selected-down,var(--spectrum-global-color-blue-700))}:host([invalid][dir]) #box:before,:host([invalid][dir]) #input:checked+#box:before{border-color:var(--spectrum-checkbox-m-box-border-color-error,var(--spectrum-global-color-red-500))}:host([invalid]) #label{color:var(--spectrum-checkbox-m-text-color-error,var(--spectrum-global-color-red-600))}:host([invalid]) #input.focus-visible+#box:before,:host([invalid]) #input.focus-visible+#box:before,:host([invalid][indeterminate]) #input.focus-visible+#box:before,:host([invalid][indeterminate]) #input.focus-visible+#box:before{border-color:var(--spectrum-checkbox-m-box-border-color-error-hover,var(--spectrum-global-color-red-600))}:host([invalid]) #input.focus-visible+#box:before,:host([invalid]) #input:focus-visible+#box:before,:host([invalid][indeterminate]) #input.focus-visible+#box:before,:host([invalid][indeterminate]) #input:focus-visible+#box:before{border-color:var(--spectrum-checkbox-m-box-border-color-error-hover,var(--spectrum-global-color-red-600))}:host([invalid]) #input.focus-visible~#label,:host([invalid]) #input.focus-visible~#label,:host([invalid][indeterminate]) #input.focus-visible~#label,:host([invalid][indeterminate]) #input.focus-visible~#label{color:var(--spectrum-checkbox-m-text-color-error-hover,var(--spectrum-global-color-red-700))}:host([invalid]) #input.focus-visible~#label,:host([invalid]) #input:focus-visible~#label,:host([invalid][indeterminate]) #input.focus-visible~#label,:host([invalid][indeterminate]) #input:focus-visible~#label{color:var(--spectrum-checkbox-m-text-color-error-hover,var(--spectrum-global-color-red-700))}:host([invalid][dir]:hover) #box:before,:host([invalid][dir]:hover) #input:checked+#box:before{border-color:var(--spectrum-checkbox-m-box-border-color-error-hover,var(--spectrum-global-color-red-600))}:host([invalid]:hover) #label{color:var(--spectrum-checkbox-m-text-color-error-hover,var(--spectrum-global-color-red-700))}:host([invalid]:active) #box:before,:host([invalid]:active) #input:checked+#box:before{border-color:var(--spectrum-checkbox-m-box-border-color-error-down,var(--spectrum-global-color-red-700))}:host([invalid]:active) #label{color:var(--spectrum-checkbox-m-text-color-error-down,var(--spectrum-global-color-red-700))}@media (forced-colors:active){#input.focus-visible+#box,#input.focus-visible+#box{forced-color-adjust:none;outline-color:var(--spectrum-checkbox-m-focus-ring-color-key-focus,var(--spectrum-alias-focus-ring-color));outline-style:auto;outline-offset:var(--spectrum-checkbox-m-focus-ring-gap-key-focus,var(--spectrum-alias-focus-ring-gap));outline-width:var(--spectrum-checkbox-m-focus-ring-size-key-focus,var(--spectrum-alias-focus-ring-size))}#input.focus-visible+#box,#input:focus-visible+#box{forced-color-adjust:none;outline-color:var(--spectrum-checkbox-m-focus-ring-color-key-focus,var(--spectrum-alias-focus-ring-color));outline-style:auto;outline-offset:var(--spectrum-checkbox-m-focus-ring-gap-key-focus,var(--spectrum-alias-focus-ring-gap));outline-width:var(--spectrum-checkbox-m-focus-ring-size-key-focus,var(--spectrum-alias-focus-ring-size))}:host{--spectrum-checkbox-m-text-color-disabled:GrayText;--spectrum-checkbox-m-box-border-color-key-focus:FieldText;--spectrum-checkbox-m-box-border-color-selected-hover:Highlight;--spectrum-checkbox-m-emphasized-box-border-color-selected-hover:Highlight;--spectrum-checkbox-m-emphasized-box-border-color-selected:Highlight;--spectrum-checkbox-m-checkmark-color:HighlightText;--spectrum-checkbox-m-focus-ring-color-key-focus:Highlight;--spectrum-checkbox-m-focus-ring-gap-key-focus:var(--spectrum-global-dimension-static-size-25,2px);--spectrum-checkbox-m-focus-ring-size-key-focus:var(--spectrum-global-dimension-static-size-40,3px);--spectrum-checkbox-m-box-border-color-error:FieldText;--spectrum-checkbox-m-box-border-color-error-hover:FieldText;--spectrum-checkbox-m-text-color-error:FieldText}}:host{display:inline-flex;vertical-align:top}:host(:empty) label{display:none}:host([disabled]){pointer-events:none}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$M = css `
.spectrum-UIIcon-Checkmark50{width:var(--spectrum-alias-ui-icon-checkmark-size-50);height:var(--spectrum-alias-ui-icon-checkmark-size-50)}.spectrum-UIIcon-Checkmark75{width:var(--spectrum-alias-ui-icon-checkmark-size-75);height:var(--spectrum-alias-ui-icon-checkmark-size-75)}.spectrum-UIIcon-Checkmark100{width:var(--spectrum-alias-ui-icon-checkmark-size-100);height:var(--spectrum-alias-ui-icon-checkmark-size-100)}.spectrum-UIIcon-Checkmark200{width:var(--spectrum-alias-ui-icon-checkmark-size-200);height:var(--spectrum-alias-ui-icon-checkmark-size-200)}.spectrum-UIIcon-Checkmark300{width:var(--spectrum-alias-ui-icon-checkmark-size-300);height:var(--spectrum-alias-ui-icon-checkmark-size-300)}.spectrum-UIIcon-Checkmark400{width:var(--spectrum-alias-ui-icon-checkmark-size-400);height:var(--spectrum-alias-ui-icon-checkmark-size-400)}.spectrum-UIIcon-Checkmark500{width:var(--spectrum-alias-ui-icon-checkmark-size-500);height:var(--spectrum-alias-ui-icon-checkmark-size-500)}.spectrum-UIIcon-Checkmark600{width:var(--spectrum-alias-ui-icon-checkmark-size-600);height:var(--spectrum-alias-ui-icon-checkmark-size-600)}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$L = css `
.spectrum-UIIcon-Dash50{width:var(--spectrum-alias-ui-icon-dash-size-50);height:var(--spectrum-alias-ui-icon-dash-size-50)}.spectrum-UIIcon-Dash75{width:var(--spectrum-alias-ui-icon-dash-size-75);height:var(--spectrum-alias-ui-icon-dash-size-75)}.spectrum-UIIcon-Dash100{width:var(--spectrum-alias-ui-icon-dash-size-100);height:var(--spectrum-alias-ui-icon-dash-size-100)}.spectrum-UIIcon-Dash200{width:var(--spectrum-alias-ui-icon-dash-size-200);height:var(--spectrum-alias-ui-icon-dash-size-200)}.spectrum-UIIcon-Dash300{width:var(--spectrum-alias-ui-icon-dash-size-300);height:var(--spectrum-alias-ui-icon-dash-size-300)}.spectrum-UIIcon-Dash400{width:var(--spectrum-alias-ui-icon-dash-size-400);height:var(--spectrum-alias-ui-icon-dash-size-400)}.spectrum-UIIcon-Dash500{width:var(--spectrum-alias-ui-icon-dash-size-500);height:var(--spectrum-alias-ui-icon-dash-size-500)}.spectrum-UIIcon-Dash600{width:var(--spectrum-alias-ui-icon-dash-size-600);height:var(--spectrum-alias-ui-icon-dash-size-600)}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const checkmarkIcon = {
        s: html `
        <sp-icon-checkmark75
            id="checkmark"
            class="spectrum-UIIcon-Checkmark75"
        ></sp-icon-checkmark75>
    `,
        m: html `
        <sp-icon-checkmark100
            id="checkmark"
            class="spectrum-UIIcon-Checkmark100"
        ></sp-icon-checkmark100>
    `,
        l: html `
        <sp-icon-checkmark200
            id="checkmark"
            class="spectrum-UIIcon-Checkmark200"
        ></sp-icon-checkmark200>
    `,
        xl: html `
        <sp-icon-checkmark300
            id="checkmark"
            class="spectrum-UIIcon-Checkmark300"
        ></sp-icon-checkmark300>
    `,
    };
    const dashIcon = {
        s: html `
        <sp-icon-dash75
            id="partialCheckmark"
            class="spectrum-UIIcon-Dash75"
        ></sp-icon-dash75>
    `,
        m: html `
        <sp-icon-dash100
            id="partialCheckmark"
            class="spectrum-UIIcon-Dash100"
        ></sp-icon-dash100>
    `,
        l: html `
        <sp-icon-dash200
            id="partialCheckmark"
            class="spectrum-UIIcon-Dash200"
        ></sp-icon-dash200>
    `,
        xl: html `
        <sp-icon-dash300
            id="partialCheckmark"
            class="spectrum-UIIcon-Dash300"
        ></sp-icon-dash300>
    `,
    };
    class Checkbox extends SizedMixin(CheckboxBase) {
        constructor() {
            super(...arguments);
            this.indeterminate = false;
            this.invalid = false;
            this.emphasized = false;
        }
        static get styles() {
            return [styles$N, styles$M, styles$L];
        }
        render() {
            return html `
            ${super.render()}
            <span id="box">
                ${checkmarkIcon[this.size]}
                ${dashIcon[this.size]}
            </span>
            <label id="label"><slot></slot></label>
        `;
        }
        updated(changes) {
            super.updated(changes);
            if (changes.has('invalid')) {
                if (this.invalid) {
                    this.inputElement.setAttribute('aria-invalid', 'true');
                }
                else {
                    this.inputElement.removeAttribute('aria-invalid');
                }
            }
            if (changes.has('indeterminate')) {
                if (this.indeterminate) {
                    this.inputElement.setAttribute('aria-checked', 'mixed');
                }
                else {
                    this.inputElement.removeAttribute('aria-checked');
                }
            }
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Checkbox.prototype, "indeterminate", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Checkbox.prototype, "invalid", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Checkbox.prototype, "emphasized", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-checkbox', Checkbox);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$K = css `
:host{--spectrum-overlay-animation-distance:var(--spectrum-picker-m-popover-offset-y,var(--spectrum-global-dimension-size-75));visibility:hidden;opacity:0;transition:transform var(--spectrum-global-animation-duration-100,.13s) ease-in-out,opacity var(--spectrum-global-animation-duration-100,.13s) ease-in-out,visibility 0ms linear var(--spectrum-global-animation-duration-100,.13s);pointer-events:none}:host([opened]){visibility:visible;opacity:1;transition-delay:0ms;pointer-events:auto}:host([enter-from=left][opened]){transform:translateX(var(--spectrum-overlay-animation-distance))}:host([enter-from=right][opened]){transform:translateX(calc(-1*var(--spectrum-overlay-animation-distance)))}:host{box-sizing:border-box;display:inline-flex;align-items:center;justify-content:center;padding:var(--spectrum-quickactions-padding-y,var(--spectrum-global-dimension-size-50)) var(--spectrum-quickactions-padding-x,var(--spectrum-global-dimension-size-50));height:var(--spectrum-quickactions-height,var(--spectrum-global-dimension-size-500));border-radius:var(--spectrum-quickactions-border-radius,var(--spectrum-alias-border-radius-regular))}:host([dir=ltr]) slot[name=action]+::slotted([slot=action]){margin-left:var(--spectrum-quickactions-button-gap-x,var(--spectrum-global-dimension-size-100))}:host([dir=rtl]) slot[name=action]+::slotted([slot=action]){margin-right:var(--spectrum-quickactions-button-gap-x,var(--spectrum-global-dimension-size-100))}:host([dir=ltr][text-only]) slot[name=action]+::slotted([slot=action]){margin-left:var(--spectrum-quickactions-text-button-gap-x,var(--spectrum-global-dimension-size-50))}:host([dir=rtl][text-only]) slot[name=action]+::slotted([slot=action]){margin-right:var(--spectrum-quickactions-text-button-gap-x,var(--spectrum-global-dimension-size-50))}#overlay{background-color:var(--spectrum-quickactions-overlay-color,var(--spectrum-alias-background-color-quickactions-overlay))}:host{background-color:var(--spectrum-quickactions-background-color,var(--spectrum-alias-background-color-quickactions))}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @element sp-quick-actions
     */
    class QuickActions extends SpectrumElement {
        constructor() {
            super(...arguments);
            this.opened = false;
            this.textOnly = false;
        }
        static get styles() {
            return [styles$K];
        }
        render() {
            return html `
            <slot></slot>
        `;
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], QuickActions.prototype, "opened", void 0);
    __decorate([
        property({
            type: Boolean,
            attribute: 'text-only',
            hasChanged() {
                return false;
            },
        })
    ], QuickActions.prototype, "textOnly", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-quick-actions', QuickActions);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$J = css `
:host{position:relative;display:inline-flex;flex-direction:column;box-sizing:border-box;min-width:var(--spectrum-card-min-width,var(--spectrum-global-dimension-size-3000));border:var(--spectrum-card-border-size,var(--spectrum-alias-border-size-thin)) solid transparent;border-radius:var(--spectrum-card-border-radius,var(--spectrum-alias-border-radius-regular));text-decoration:none}:host(:focus){outline:none}:host(:focus) .actions,:host(:focus) .quickActions,:host(:hover) .actions,:host(:hover) .quickActions,:host([focused]) .actions,:host([focused]) .quickActions,:host([selected]) .actions,:host([selected]) .quickActions{visibility:visible;opacity:1;pointer-events:all}:host([dir=ltr]) .actions{right:var(--spectrum-card-actions-margin,var(--spectrum-global-dimension-size-125))}:host([dir=rtl]) .actions{left:var(--spectrum-card-actions-margin,var(--spectrum-global-dimension-size-125))}.actions{position:absolute;top:var(--spectrum-card-actions-margin,var(--spectrum-global-dimension-size-125));height:var(--spectrum-quickactions-height,var(--spectrum-global-dimension-size-500));visibility:hidden}:host([dir=ltr]) .quickActions{left:var(--spectrum-card-checkbox-margin,var(--spectrum-global-dimension-size-200))}:host([dir=rtl]) .quickActions{right:var(--spectrum-card-checkbox-margin,var(--spectrum-global-dimension-size-200))}.quickActions{position:absolute;top:var(--spectrum-card-checkbox-margin,var(--spectrum-global-dimension-size-200));width:var(--spectrum-quickactions-height,var(--spectrum-global-dimension-size-500));height:var(--spectrum-quickactions-height,var(--spectrum-global-dimension-size-500));visibility:hidden}:host([dir=ltr]) .quickActions .checkbox,:host([dir=rtl]) .quickActions .checkbox{margin:0}#cover-photo{height:var(--spectrum-card-coverphoto-height,var(--spectrum-global-dimension-size-1700));box-sizing:border-box;display:flex;align-items:center;justify-content:center;border-bottom:var(--spectrum-card-coverphoto-border-bottom-size,var(--spectrum-alias-border-size-thin)) solid transparent;border-top-left-radius:calc(var(--spectrum-card-border-radius,
var(--spectrum-alias-border-radius-regular)) - 1px);border-top-right-radius:calc(var(--spectrum-card-border-radius,
var(--spectrum-alias-border-radius-regular)) - 1px);border-bottom-right-radius:0;border-bottom-left-radius:0;background-size:cover;background-position:50%}:host([dir=ltr]) .body{padding-right:var(--spectrum-card-body-padding-right,var(--spectrum-global-dimension-size-300))}:host([dir=rtl]) .body{padding-left:var(--spectrum-card-body-padding-right,var(--spectrum-global-dimension-size-300))}:host([dir=ltr]) .body{padding-left:var(--spectrum-card-body-padding-left,var(--spectrum-global-dimension-size-300))}:host([dir=rtl]) .body{padding-right:var(--spectrum-card-body-padding-left,var(--spectrum-global-dimension-size-300))}.body{padding-top:var(--spectrum-card-body-padding-top,var(--spectrum-global-dimension-size-250));padding-bottom:var(--spectrum-card-body-padding-bottom,var(--spectrum-global-dimension-size-250))}.body:last-child{border-top-left-radius:0;border-top-right-radius:0;border-bottom-right-radius:var(--spectrum-card-border-radius,var(--spectrum-alias-border-radius-regular));border-bottom-left-radius:var(--spectrum-card-border-radius,var(--spectrum-alias-border-radius-regular))}#preview{overflow:hidden;border-top-left-radius:calc(var(--spectrum-card-border-radius,
var(--spectrum-alias-border-radius-regular)) - 1px);border-top-right-radius:calc(var(--spectrum-card-border-radius,
var(--spectrum-alias-border-radius-regular)) - 1px);border-bottom-right-radius:0;border-bottom-left-radius:0}.header{height:var(--spectrum-card-body-header-height,var(--spectrum-global-dimension-size-225))}.content{display:flex;height:var(--spectrum-card-body-content-height,var(--spectrum-global-dimension-size-175));margin-top:var(--spectrum-card-body-content-margin-top,var(--spectrum-global-dimension-size-75))}:host([dir=ltr]) .title{padding-right:var(--spectrum-card-title-padding-right,var(--spectrum-global-dimension-size-100))}:host([dir=rtl]) .title{padding-left:var(--spectrum-card-title-padding-right,var(--spectrum-global-dimension-size-100))}.title{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}:host([dir=ltr]) .subtitle{padding-right:var(--spectrum-card-subtitle-padding-right,var(--spectrum-global-dimension-size-100))}:host([dir=rtl]) .subtitle{padding-left:var(--spectrum-card-subtitle-padding-right,var(--spectrum-global-dimension-size-100))}::slotted([slot=description]){font-size:var(--spectrum-card-subtitle-text-size,var(--spectrum-global-dimension-font-size-50))}:host([dir=ltr]) .subtitle+::slotted([slot=description]):before{padding-right:var(--spectrum-card-subtitle-padding-right,var(--spectrum-global-dimension-size-100))}:host([dir=rtl]) .subtitle+::slotted([slot=description]):before{padding-left:var(--spectrum-card-subtitle-padding-right,var(--spectrum-global-dimension-size-100))}.subtitle+::slotted([slot=description]):before{content:"•"}:host([dir=ltr]) ::slotted([slot=footer]){margin-right:var(--spectrum-card-body-padding-right,var(--spectrum-global-dimension-size-300))}:host([dir=rtl]) ::slotted([slot=footer]){margin-left:var(--spectrum-card-body-padding-right,var(--spectrum-global-dimension-size-300))}:host([dir=ltr]) ::slotted([slot=footer]){margin-left:var(--spectrum-card-body-padding-left,var(--spectrum-global-dimension-size-300))}:host([dir=rtl]) ::slotted([slot=footer]){margin-right:var(--spectrum-card-body-padding-left,var(--spectrum-global-dimension-size-300))}::slotted([slot=footer]){padding-top:var(--spectrum-card-footer-padding-top,var(--spectrum-global-dimension-size-175));padding-bottom:var(--spectrum-card-body-padding-bottom,var(--spectrum-global-dimension-size-250));border-top:var(--spectrum-card-footer-border-top-size,var(--spectrum-global-dimension-size-10)) solid}.header{display:flex;align-items:baseline}.actionButton{flex:1;align-self:center;display:flex;justify-content:flex-end}:host([variant=quiet]) #preview{min-height:var(--spectrum-card-quiet-min-size,var(--spectrum-global-dimension-size-1700))}:host([variant=gallery]),:host([variant=quiet]){width:100%;height:100%;min-width:var(--spectrum-card-quiet-min-size,var(--spectrum-global-dimension-size-1700));border-width:0;border-radius:0;overflow:visible}:host([variant=gallery]) #preview,:host([variant=quiet]) #preview{width:100%;flex:1;padding:var(--spectrum-card-quiet-preview-padding,var(--spectrum-global-dimension-size-250));margin:0 auto;box-sizing:border-box;border-radius:var(--spectrum-card-quiet-border-radius,var(--spectrum-alias-border-radius-regular));position:relative;transition:background-color var(--spectrum-global-animation-duration-100,.13s);overflow:visible}:host([dir=ltr][variant=gallery]) #preview:before,:host([dir=ltr][variant=quiet]) #preview:before{left:0}:host([dir=rtl][variant=gallery]) #preview:before,:host([dir=rtl][variant=quiet]) #preview:before{right:0}:host([variant=gallery]) #preview:before,:host([variant=quiet]) #preview:before{content:"";position:absolute;top:0;width:100%;height:100%;box-sizing:border-box;border-radius:inherit;border:var(--spectrum-card-quiet-border-size,var(--spectrum-alias-border-size-thin)) solid transparent}:host([variant=gallery][drop-target]) #preview,:host([variant=quiet][drop-target]) #preview{transition:none}:host([variant=gallery]) .header,:host([variant=quiet]) .header{height:var(--spectrum-card-quiet-body-header-height,var(--spectrum-global-dimension-size-225));margin-top:var(--spectrum-card-quiet-body-header-margin-top,var(--spectrum-global-dimension-size-175))}:host([variant=gallery]) .body,:host([variant=quiet]) .body{padding:0}:host([small]){min-width:var(--spectrum-card-quiet-small-min-size,var(--spectrum-global-dimension-size-900))}:host([dir=ltr][small]) .quickActions{left:var(--spectrum-card-quiet-small-checkbox-margin,var(--spectrum-global-dimension-size-125))}:host([dir=rtl][small]) .quickActions{right:var(--spectrum-card-quiet-small-checkbox-margin,var(--spectrum-global-dimension-size-125))}:host([small]) .quickActions{top:var(--spectrum-card-quiet-small-checkbox-margin,var(--spectrum-global-dimension-size-125))}:host([small]) #preview{padding:var(--spectrum-card-quiet-small-preview-padding,var(--spectrum-global-dimension-size-150));min-height:var(--spectrum-card-quiet-small-min-size,var(--spectrum-global-dimension-size-900))}:host([small]) .header{margin-top:var(--spectrum-card-quiet-small-body-margin-top,var(--spectrum-global-dimension-size-100));height:var(--spectrum-card-quiet-small-body-header-height,var(--spectrum-global-dimension-size-150))}:host([small]) .title{font-size:var(--spectrum-card-quiet-small-title-text-size,var(--spectrum-global-dimension-font-size-100))}:host([horizontal]){flex-direction:row}:host([dir=ltr][horizontal]) #preview{border-top-left-radius:var(--spectrum-card-quiet-border-radius,var(--spectrum-alias-border-radius-regular))}:host([dir=rtl][horizontal]) #preview{border-top-right-radius:var(--spectrum-card-quiet-border-radius,var(--spectrum-alias-border-radius-regular))}:host([dir=ltr][horizontal]) #preview{border-top-right-radius:0}:host([dir=rtl][horizontal]) #preview{border-top-left-radius:0}:host([dir=ltr][horizontal]) #preview{border-bottom-left-radius:var(--spectrum-card-quiet-border-radius,var(--spectrum-alias-border-radius-regular))}:host([dir=rtl][horizontal]) #preview{border-bottom-right-radius:var(--spectrum-card-quiet-border-radius,var(--spectrum-alias-border-radius-regular))}:host([dir=ltr][horizontal]) #preview{border-bottom-right-radius:0}:host([dir=rtl][horizontal]) #preview{border-bottom-left-radius:0}:host([dir=ltr][horizontal]) #preview{border-right:var(--spectrum-card-border-size,var(--spectrum-alias-border-size-thin)) solid transparent}:host([dir=rtl][horizontal]) #preview{border-left:var(--spectrum-card-border-size,var(--spectrum-alias-border-size-thin)) solid transparent}:host([horizontal]) #preview{flex-shrink:0;min-height:0;display:flex;align-items:center;justify-content:center;padding:var(--spectrum-global-dimension-size-175)}:host([horizontal]) .content,:host([horizontal]) .header{margin-top:0;height:auto}:host([dir=ltr][horizontal]) .title{padding-right:0}:host([dir=rtl][horizontal]) .title{padding-left:0}:host([horizontal]) .body{flex-shrink:0;display:flex;justify-content:center;flex-direction:column;padding-top:0;padding-bottom:0;padding-left:var(--spectrum-global-dimension-size-200);padding-right:var(--spectrum-global-dimension-size-200)}:host([variant=gallery]){min-width:0}:host([variant=gallery]) #preview{padding:0;border-radius:0}:host{border-color:var(--spectrum-card-border-color,var(--spectrum-global-color-gray-200));background-color:var(--spectrum-card-background-color,var(--spectrum-global-color-gray-50))}:host(:hover){border-color:var(--spectrum-card-border-color-hover,var(--spectrum-global-color-gray-400))}:host(.focus-visible),:host(.focus-visible),:host([drop-target]),:host([selected]){border-color:var(--spectrum-card-border-color-key-focus,var(--spectrum-alias-border-color-focus));box-shadow:0 0 0 1px var(--spectrum-card-border-color-key-focus,var(--spectrum-alias-border-color-focus))}:host(.focus-visible),:host(:focus-visible),:host([drop-target]),:host([selected]){border-color:var(--spectrum-card-border-color-key-focus,var(--spectrum-alias-border-color-focus));box-shadow:0 0 0 1px var(--spectrum-card-border-color-key-focus,var(--spectrum-alias-border-color-focus))}:host([drop-target]){background-color:var(--spectrum-alias-highlight-selected)}.subtitle,::slotted([slot=description]){color:var(--spectrum-card-description-text-color,var(--spectrum-global-color-gray-700))}#cover-photo{background-color:var(--spectrum-card-coverphoto-background-color,var(--spectrum-global-color-gray-200));border-bottom-color:var(--spectrum-card-coverphoto-border-color,var(--spectrum-global-color-gray-200))}::slotted([slot=footer]){border-color:var(--spectrum-card-border-color,var(--spectrum-global-color-gray-200))}:host([variant=gallery]),:host([variant=quiet]){border-color:transparent;background-color:initial}:host([variant=gallery]) #preview,:host([variant=quiet]) #preview{background-color:var(--spectrum-card-quiet-preview-background-color,var(--spectrum-global-color-gray-200))}:host([variant=gallery]:hover),:host([variant=quiet]:hover){border-color:transparent}:host([variant=gallery]:hover) #preview,:host([variant=quiet]:hover) #preview{background-color:var(--spectrum-card-quiet-preview-background-color-hover,var(--spectrum-global-color-gray-300))}:host([variant=gallery].focus-visible),:host([variant=gallery].focus-visible),:host([variant=gallery][selected]),:host([variant=quiet].focus-visible),:host([variant=quiet].focus-visible),:host([variant=quiet][selected]){border-color:transparent;box-shadow:none}:host([variant=gallery].focus-visible),:host([variant=gallery]:focus-visible),:host([variant=gallery][selected]),:host([variant=quiet].focus-visible),:host([variant=quiet]:focus-visible),:host([variant=quiet][selected]){border-color:transparent;box-shadow:none}:host([variant=gallery].focus-visible) #preview,:host([variant=gallery].focus-visible) #preview,:host([variant=gallery][selected]) #preview,:host([variant=quiet].focus-visible) #preview,:host([variant=quiet].focus-visible) #preview,:host([variant=quiet][selected]) #preview{background-color:var(--spectrum-card-quiet-preview-background-color,var(--spectrum-global-color-gray-200))}:host([variant=gallery].focus-visible) #preview,:host([variant=gallery]:focus-visible) #preview,:host([variant=gallery][selected]) #preview,:host([variant=quiet].focus-visible) #preview,:host([variant=quiet]:focus-visible) #preview,:host([variant=quiet][selected]) #preview{background-color:var(--spectrum-card-quiet-preview-background-color,var(--spectrum-global-color-gray-200))}:host([variant=gallery].focus-visible) #preview:before,:host([variant=gallery].focus-visible) #preview:before,:host([variant=gallery][selected]) #preview:before,:host([variant=quiet].focus-visible) #preview:before,:host([variant=quiet].focus-visible) #preview:before,:host([variant=quiet][selected]) #preview:before{border-color:var(--spectrum-card-quiet-border-color-selected,var(--spectrum-global-color-blue-500));box-shadow:0 0 0 1px var(--spectrum-card-quiet-border-color-selected,var(--spectrum-global-color-blue-500))}:host([variant=gallery].focus-visible) #preview:before,:host([variant=gallery]:focus-visible) #preview:before,:host([variant=gallery][selected]) #preview:before,:host([variant=quiet].focus-visible) #preview:before,:host([variant=quiet]:focus-visible) #preview:before,:host([variant=quiet][selected]) #preview:before{border-color:var(--spectrum-card-quiet-border-color-selected,var(--spectrum-global-color-blue-500));box-shadow:0 0 0 1px var(--spectrum-card-quiet-border-color-selected,var(--spectrum-global-color-blue-500))}:host([variant=gallery][drop-target]),:host([variant=quiet][drop-target]){border-color:transparent;background-color:initial;box-shadow:none}:host([variant=gallery][drop-target]) #preview,:host([variant=quiet][drop-target]) #preview{background-color:var(--spectrum-alias-highlight-selected)}:host([variant=gallery][drop-target]) #preview:before,:host([variant=quiet][drop-target]) #preview:before{border-color:var(--spectrum-card-quiet-border-color-selected,var(--spectrum-global-color-blue-500));box-shadow:0 0 0 1px var(--spectrum-card-quiet-border-color-selected,var(--spectrum-global-color-blue-500))}:host([variant=gallery][drop-target]) .spectrum-Asset-fileBackground,:host([variant=gallery][drop-target]) .spectrum-Asset-folderBackground,:host([variant=quiet][drop-target]) .spectrum-Asset-fileBackground,:host([variant=quiet][drop-target]) .spectrum-Asset-folderBackground{fill:var(--spectrum-alias-highlight-selected)}:host([variant=gallery][drop-target]) .spectrum-Asset-fileOutline,:host([variant=gallery][drop-target]) .spectrum-Asset-folderOutline,:host([variant=quiet][drop-target]) .spectrum-Asset-fileOutline,:host([variant=quiet][drop-target]) .spectrum-Asset-folderOutline{fill:var(--spectrum-card-quiet-border-color-selected,var(--spectrum-global-color-blue-500))}:host([variant=gallery]) .title,:host([variant=quiet]) .title{color:var(--spectrum-card-quiet-title-text-color,var(--spectrum-global-color-gray-800))}:host([variant=gallery]) .subtitle,:host([variant=quiet]) .subtitle{color:var(--spectrum-card-quiet-subtitle-text-color,var(--spectrum-global-color-gray-700))}:host([horizontal]:hover) #preview{border-color:var(--spectrum-card-border-color-hover,var(--spectrum-global-color-gray-400))}:host([horizontal]) #preview{background-color:var(--spectrum-card-quiet-preview-background-color,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-card-border-color,var(--spectrum-global-color-gray-200))}slot[name=description]{font-size:var(--spectrum-card-subtitle-text-size,var(--spectrum-global-dimension-font-size-50))}#cover-photo,#preview{overflow:hidden}#preview+#cover-photo{display:none}#cover-photo ::slotted(*),#preview ::slotted(*){width:100%;display:block;object-fit:cover}:host(:not([variant=gallery])) #preview ::slotted(*){height:100%}:host([horizontal]) #preview{width:auto}sp-quick-actions{z-index:1}.title{width:var(--spectrum-card-title-width)}.subtitle{text-transform:none}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$I = css `
.spectrum{font-family:var(--spectrum-alias-body-text-font-family,var(--spectrum-global-font-family-base));font-size:var(--spectrum-alias-font-size-default,var(--spectrum-global-dimension-font-size-100));color:var(--spectrum-body-m-text-color,var(--spectrum-alias-text-color))}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$H = css `
.spectrum:lang(ar){font-family:var(--spectrum-alias-font-family-ar,myriad-arabic,adobe-clean,"Source Sans Pro",-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Ubuntu,"Trebuchet MS","Lucida Grande",sans-serif)}.spectrum:lang(he){font-family:var(--spectrum-alias-font-family-he,myriad-hebrew,adobe-clean,"Source Sans Pro",-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Ubuntu,"Trebuchet MS","Lucida Grande",sans-serif)}.spectrum:lang(zh-Hans){font-family:var(--spectrum-alias-font-family-zhhans,adobe-clean-han-simplified-c,source-han-simplified-c,"SimSun","Heiti SC Light","sans-serif")}.spectrum:lang(zh),.spectrum:lang(zh-Hant){font-family:var(--spectrum-alias-font-family-zh,adobe-clean-han-traditional,source-han-traditional,"MingLiu","Heiti TC Light","sans-serif")}.spectrum:lang(ko){font-family:var(--spectrum-alias-font-family-ko,adobe-clean-han-korean,source-han-korean,"Malgun Gothic","Apple Gothic","sans-serif")}.spectrum:lang(ja){font-family:var(--spectrum-alias-font-family-ja,adobe-clean-han-japanese,source-han-japanese,"Yu Gothic","\30E1 \30A4 \30EA \30AA","\30D2 \30E9 \30AE \30CE \89D2 \30B4  Pro W3","Hiragino Kaku Gothic Pro W3","Osaka","\FF2D \FF33 \FF30 \30B4 \30B7 \30C3 \30AF","MS PGothic","sans-serif")}.spectrum:lang(ja) .spectrum-Heading--sizeXXXL,.spectrum:lang(ko) .spectrum-Heading--sizeXXXL,.spectrum:lang(zh) .spectrum-Heading--sizeXXXL{font-size:var(--spectrum-heading-han-xxxl-text-size,var(--spectrum-alias-heading-xxxl-text-size));font-weight:var(--spectrum-heading-han-xxxl-text-font-weight,var(--spectrum-alias-han-heading-text-font-weight-regular));line-height:var(--spectrum-heading-han-xxxl-text-line-height,var(--spectrum-alias-han-heading-text-line-height));font-style:var(--spectrum-heading-han-xxxl-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-heading-han-xxxl-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-heading-han-xxxl-text-transform,none);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Heading--sizeXXL,.spectrum:lang(ko) .spectrum-Heading--sizeXXL,.spectrum:lang(zh) .spectrum-Heading--sizeXXL{font-size:var(--spectrum-heading-han-xxl-text-size,var(--spectrum-alias-heading-han-xxl-text-size));font-weight:var(--spectrum-heading-han-xxl-text-font-weight,var(--spectrum-alias-han-heading-text-font-weight-regular));line-height:var(--spectrum-heading-han-xxl-text-line-height,var(--spectrum-alias-han-heading-text-line-height));font-style:var(--spectrum-heading-han-xxl-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-heading-han-xxl-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-heading-han-xxl-text-transform,none);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Heading--sizeXL,.spectrum:lang(ko) .spectrum-Heading--sizeXL,.spectrum:lang(zh) .spectrum-Heading--sizeXL{font-size:var(--spectrum-heading-han-xl-text-size,var(--spectrum-alias-heading-han-xl-text-size));font-weight:var(--spectrum-heading-han-xl-text-font-weight,var(--spectrum-alias-han-heading-text-font-weight-regular));line-height:var(--spectrum-heading-han-xl-text-line-height,var(--spectrum-alias-han-heading-text-line-height));font-style:var(--spectrum-heading-han-xl-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-heading-han-xl-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-heading-han-xl-text-transform,none);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Heading--sizeL,.spectrum:lang(ko) .spectrum-Heading--sizeL,.spectrum:lang(zh) .spectrum-Heading--sizeL{font-size:var(--spectrum-heading-han-l-text-size,var(--spectrum-alias-heading-han-l-text-size));font-weight:var(--spectrum-heading-han-l-text-font-weight,var(--spectrum-alias-han-heading-text-font-weight-regular));line-height:var(--spectrum-heading-han-l-text-line-height,var(--spectrum-alias-han-heading-text-line-height));font-style:var(--spectrum-heading-han-l-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-heading-han-l-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-heading-han-l-text-transform,none);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Heading--sizeM,.spectrum:lang(ko) .spectrum-Heading--sizeM,.spectrum:lang(zh) .spectrum-Heading--sizeM{font-size:var(--spectrum-heading-han-m-text-size,var(--spectrum-alias-heading-han-m-text-size));font-weight:var(--spectrum-heading-han-m-text-font-weight,var(--spectrum-alias-han-heading-text-font-weight-regular));line-height:var(--spectrum-heading-han-m-text-line-height,var(--spectrum-alias-han-heading-text-line-height));font-style:var(--spectrum-heading-han-m-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-heading-han-m-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-heading-han-m-text-transform,none);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Heading--sizeS,.spectrum:lang(ko) .spectrum-Heading--sizeS,.spectrum:lang(zh) .spectrum-Heading--sizeS{font-size:var(--spectrum-heading-han-s-text-size,var(--spectrum-alias-heading-s-text-size));font-weight:var(--spectrum-heading-han-s-text-font-weight,var(--spectrum-alias-han-heading-text-font-weight-regular));line-height:var(--spectrum-heading-han-s-text-line-height,var(--spectrum-alias-han-heading-text-line-height));font-style:var(--spectrum-heading-han-s-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-heading-han-s-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-heading-han-s-text-transform,none);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Heading--sizeXS,.spectrum:lang(ko) .spectrum-Heading--sizeXS,.spectrum:lang(zh) .spectrum-Heading--sizeXS{font-size:var(--spectrum-heading-han-xs-text-size,var(--spectrum-alias-heading-xs-text-size));font-weight:var(--spectrum-heading-han-xs-text-font-weight,var(--spectrum-alias-han-heading-text-font-weight-regular));line-height:var(--spectrum-heading-han-xs-text-line-height,var(--spectrum-alias-han-heading-text-line-height));font-style:var(--spectrum-heading-han-xs-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-heading-han-xs-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-heading-han-xs-text-transform,none);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Heading--sizeXXS,.spectrum:lang(ko) .spectrum-Heading--sizeXXS,.spectrum:lang(zh) .spectrum-Heading--sizeXXS{font-size:var(--spectrum-heading-han-xxs-text-size,var(--spectrum-alias-heading-xxs-text-size));font-weight:var(--spectrum-heading-han-xxs-text-font-weight,var(--spectrum-alias-han-heading-text-font-weight-regular));line-height:var(--spectrum-heading-han-xxs-text-line-height,var(--spectrum-alias-han-heading-text-line-height));font-style:var(--spectrum-heading-han-xxs-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-heading-han-xxs-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-heading-han-xxs-text-transform,none);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Heading--heavy,.spectrum:lang(ko) .spectrum-Heading--heavy,.spectrum:lang(zh) .spectrum-Heading--heavy{font-weight:var(--spectrum-heading-han-m-text-font-weight,var(--spectrum-alias-han-heading-text-font-weight-regular))}.spectrum:lang(ja) .spectrum-Heading--heavy .spectrum-Heading--emphasis,.spectrum:lang(ja) .spectrum-Heading--heavy em,.spectrum:lang(ko) .spectrum-Heading--heavy .spectrum-Heading--emphasis,.spectrum:lang(ko) .spectrum-Heading--heavy em,.spectrum:lang(zh) .spectrum-Heading--heavy .spectrum-Heading--emphasis,.spectrum:lang(zh) .spectrum-Heading--heavy em{font-style:var(--spectrum-heading-han-heavy-m-emphasis-text-font-style,var(--spectrum-global-font-style-regular));font-weight:var(--spectrum-heading-han-heavy-m-emphasis-text-font-weight,var(--spectrum-alias-han-heading-text-font-weight-heavy-emphasis))}.spectrum:lang(ja) .spectrum-Heading--heavy .spectrum-Heading--strong,.spectrum:lang(ja) .spectrum-Heading--heavy strong,.spectrum:lang(ko) .spectrum-Heading--heavy .spectrum-Heading--strong,.spectrum:lang(ko) .spectrum-Heading--heavy strong,.spectrum:lang(zh) .spectrum-Heading--heavy .spectrum-Heading--strong,.spectrum:lang(zh) .spectrum-Heading--heavy strong{font-style:var(--spectrum-heading-heavy-m-strong-text-font-style,var(--spectrum-global-font-style-regular));font-weight:var(--spectrum-heading-heavy-m-strong-text-font-weight,var(--spectrum-global-font-weight-black))}.spectrum:lang(ja) .spectrum-Heading--light,.spectrum:lang(ko) .spectrum-Heading--light,.spectrum:lang(zh) .spectrum-Heading--light{font-weight:var(--spectrum-heading-han-m-text-font-weight,var(--spectrum-alias-han-heading-text-font-weight-regular))}.spectrum:lang(ja) .spectrum-Heading--light .spectrum-Heading--emphasis,.spectrum:lang(ja) .spectrum-Heading--light em,.spectrum:lang(ko) .spectrum-Heading--light .spectrum-Heading--emphasis,.spectrum:lang(ko) .spectrum-Heading--light em,.spectrum:lang(zh) .spectrum-Heading--light .spectrum-Heading--emphasis,.spectrum:lang(zh) .spectrum-Heading--light em{font-style:var(--spectrum-heading-han-light-m-emphasis-text-font-style,var(--spectrum-global-font-style-regular));font-weight:var(--spectrum-heading-han-light-m-emphasis-text-font-weight,var(--spectrum-alias-han-heading-text-font-weight-light-emphasis))}.spectrum:lang(ja) .spectrum-Heading--light .spectrum-Heading--strong,.spectrum:lang(ja) .spectrum-Heading--light strong,.spectrum:lang(ko) .spectrum-Heading--light .spectrum-Heading--strong,.spectrum:lang(ko) .spectrum-Heading--light strong,.spectrum:lang(zh) .spectrum-Heading--light .spectrum-Heading--strong,.spectrum:lang(zh) .spectrum-Heading--light strong{font-style:var(--spectrum-heading-han-light-m-strong-text-font-style,var(--spectrum-global-font-style-regular));font-weight:var(--spectrum-heading-han-light-m-strong-text-font-weight,var(--spectrum-global-font-weight-bold))}.spectrum:lang(ja) .spectrum-Body--sizeXXXL,.spectrum:lang(ko) .spectrum-Body--sizeXXXL,.spectrum:lang(zh) .spectrum-Body--sizeXXXL{font-size:var(--spectrum-body-han-xxxl-text-size,var(--spectrum-global-dimension-font-size-600));font-weight:var(--spectrum-body-han-xxxl-text-font-weight,var(--spectrum-alias-han-body-text-font-weight-regular));line-height:var(--spectrum-body-han-xxxl-text-line-height,var(--spectrum-alias-han-body-text-line-height));font-style:var(--spectrum-body-han-xxxl-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-body-han-xxxl-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-body-han-xxxl-text-transform,none);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Body--sizeXXL,.spectrum:lang(ko) .spectrum-Body--sizeXXL,.spectrum:lang(zh) .spectrum-Body--sizeXXL{font-size:var(--spectrum-body-han-xxl-text-size,var(--spectrum-global-dimension-font-size-500));font-weight:var(--spectrum-body-han-xxl-text-font-weight,var(--spectrum-alias-han-body-text-font-weight-regular));line-height:var(--spectrum-body-han-xxl-text-line-height,var(--spectrum-alias-han-body-text-line-height));font-style:var(--spectrum-body-han-xxl-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-body-han-xxl-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-body-han-xxl-text-transform,none);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Body--sizeXL,.spectrum:lang(ko) .spectrum-Body--sizeXL,.spectrum:lang(zh) .spectrum-Body--sizeXL{font-size:var(--spectrum-body-han-xl-text-size,var(--spectrum-global-dimension-font-size-400));font-weight:var(--spectrum-body-han-xl-text-font-weight,var(--spectrum-alias-han-body-text-font-weight-regular));line-height:var(--spectrum-body-han-xl-text-line-height,var(--spectrum-alias-han-body-text-line-height));font-style:var(--spectrum-body-han-xl-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-body-han-xl-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-body-han-xl-text-transform,none);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Body--sizeL,.spectrum:lang(ko) .spectrum-Body--sizeL,.spectrum:lang(zh) .spectrum-Body--sizeL{font-size:var(--spectrum-body-han-l-text-size,var(--spectrum-global-dimension-font-size-300));font-weight:var(--spectrum-body-han-l-text-font-weight,var(--spectrum-alias-han-body-text-font-weight-regular));line-height:var(--spectrum-body-han-l-text-line-height,var(--spectrum-alias-han-body-text-line-height));font-style:var(--spectrum-body-han-l-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-body-han-l-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-body-han-l-text-transform,none);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Body--sizeM,.spectrum:lang(ko) .spectrum-Body--sizeM,.spectrum:lang(zh) .spectrum-Body--sizeM{font-size:var(--spectrum-body-han-m-text-size,var(--spectrum-global-dimension-font-size-200));font-weight:var(--spectrum-body-han-m-text-font-weight,var(--spectrum-alias-han-body-text-font-weight-regular));line-height:var(--spectrum-body-han-m-text-line-height,var(--spectrum-alias-han-body-text-line-height));font-style:var(--spectrum-body-han-m-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-body-han-m-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-body-han-m-text-transform,none);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Body--sizeS,.spectrum:lang(ko) .spectrum-Body--sizeS,.spectrum:lang(zh) .spectrum-Body--sizeS{font-size:var(--spectrum-body-han-s-text-size,var(--spectrum-alias-font-size-default));font-weight:var(--spectrum-body-han-s-text-font-weight,var(--spectrum-alias-han-body-text-font-weight-regular));line-height:var(--spectrum-body-han-s-text-line-height,var(--spectrum-alias-han-body-text-line-height));font-style:var(--spectrum-body-han-s-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-body-han-s-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-body-han-s-text-transform,none);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Body--sizeXS,.spectrum:lang(ko) .spectrum-Body--sizeXS,.spectrum:lang(zh) .spectrum-Body--sizeXS{font-size:var(--spectrum-body-han-xs-text-size,var(--spectrum-global-dimension-font-size-75));font-weight:var(--spectrum-body-han-xs-text-font-weight,var(--spectrum-alias-han-body-text-font-weight-regular));line-height:var(--spectrum-body-han-xs-text-line-height,var(--spectrum-alias-han-body-text-line-height));font-style:var(--spectrum-body-han-xs-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-body-han-xs-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-body-han-xs-text-transform,none);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Detail--sizeXL,.spectrum:lang(ko) .spectrum-Detail--sizeXL,.spectrum:lang(zh) .spectrum-Detail--sizeXL{font-size:var(--spectrum-detail-han-xl-text-size,var(--spectrum-global-dimension-font-size-200));font-weight:var(--spectrum-detail-han-xl-text-font-weight,var(--spectrum-alias-detail-text-font-weight));line-height:var(--spectrum-detail-han-xl-text-line-height,var(--spectrum-alias-han-heading-text-line-height));font-style:var(--spectrum-detail-han-xl-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-detail-han-xl-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-detail-han-xl-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Detail--sizeXL em,.spectrum:lang(ko) .spectrum-Detail--sizeXL em,.spectrum:lang(zh) .spectrum-Detail--sizeXL em{font-size:var(--spectrum-detail-han-xl-emphasis-text-size,var(--spectrum-global-dimension-font-size-200));font-weight:var(--spectrum-detail-han-xl-emphasis-text-font-weight,var(--spectrum-alias-han-heading-text-font-weight-regular-emphasis));line-height:var(--spectrum-detail-han-xl-emphasis-text-line-height,var(--spectrum-alias-han-heading-text-line-height));font-style:var(--spectrum-detail-han-xl-emphasis-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-detail-han-xl-emphasis-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-detail-han-xl-emphasis-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Detail--sizeXL strong,.spectrum:lang(ko) .spectrum-Detail--sizeXL strong,.spectrum:lang(zh) .spectrum-Detail--sizeXL strong{font-size:var(--spectrum-detail-han-xl-strong-text-size,var(--spectrum-global-dimension-font-size-200));font-weight:var(--spectrum-detail-han-xl-strong-text-font-weight,var(--spectrum-global-font-weight-black));line-height:var(--spectrum-detail-han-xl-strong-text-line-height,var(--spectrum-alias-han-heading-text-line-height));font-style:var(--spectrum-detail-han-xl-strong-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-detail-han-xl-strong-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-detail-han-xl-strong-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Detail--sizeL,.spectrum:lang(ko) .spectrum-Detail--sizeL,.spectrum:lang(zh) .spectrum-Detail--sizeL{font-size:var(--spectrum-detail-han-l-text-size,var(--spectrum-global-dimension-font-size-100));font-weight:var(--spectrum-detail-han-l-text-font-weight,var(--spectrum-alias-detail-text-font-weight));line-height:var(--spectrum-detail-han-l-text-line-height,var(--spectrum-alias-han-heading-text-line-height));font-style:var(--spectrum-detail-han-l-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-detail-han-l-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-detail-han-l-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Detail--sizeL em,.spectrum:lang(ko) .spectrum-Detail--sizeL em,.spectrum:lang(zh) .spectrum-Detail--sizeL em{font-size:var(--spectrum-detail-han-l-emphasis-text-size,var(--spectrum-global-dimension-font-size-100));font-weight:var(--spectrum-detail-han-l-emphasis-text-font-weight,var(--spectrum-alias-han-heading-text-font-weight-regular-emphasis));line-height:var(--spectrum-detail-han-l-emphasis-text-line-height,var(--spectrum-alias-han-heading-text-line-height));font-style:var(--spectrum-detail-han-l-emphasis-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-detail-han-l-emphasis-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-detail-han-l-emphasis-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Detail--sizeL strong,.spectrum:lang(ko) .spectrum-Detail--sizeL strong,.spectrum:lang(zh) .spectrum-Detail--sizeL strong{font-size:var(--spectrum-detail-han-l-strong-text-size,var(--spectrum-global-dimension-font-size-100));font-weight:var(--spectrum-detail-han-l-strong-text-font-weight,var(--spectrum-global-font-weight-black));line-height:var(--spectrum-detail-han-l-strong-text-line-height,var(--spectrum-alias-han-heading-text-line-height));font-style:var(--spectrum-detail-han-l-strong-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-detail-han-l-strong-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-detail-han-l-strong-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Detail--sizeM,.spectrum:lang(ko) .spectrum-Detail--sizeM,.spectrum:lang(zh) .spectrum-Detail--sizeM{font-size:var(--spectrum-detail-han-m-text-size,var(--spectrum-global-dimension-font-size-75));font-weight:var(--spectrum-detail-han-m-text-font-weight,var(--spectrum-alias-detail-text-font-weight));line-height:var(--spectrum-detail-han-m-text-line-height,var(--spectrum-alias-han-heading-text-line-height));font-style:var(--spectrum-detail-han-m-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-detail-han-m-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-detail-han-m-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Detail--sizeM em,.spectrum:lang(ko) .spectrum-Detail--sizeM em,.spectrum:lang(zh) .spectrum-Detail--sizeM em{font-size:var(--spectrum-detail-han-m-emphasis-text-size,var(--spectrum-global-dimension-font-size-75));font-weight:var(--spectrum-detail-han-m-emphasis-text-font-weight,var(--spectrum-alias-han-heading-text-font-weight-regular-emphasis));line-height:var(--spectrum-detail-han-m-emphasis-text-line-height,var(--spectrum-alias-han-heading-text-line-height));font-style:var(--spectrum-detail-han-m-emphasis-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-detail-han-m-emphasis-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-detail-han-m-emphasis-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Detail--sizeM strong,.spectrum:lang(ko) .spectrum-Detail--sizeM strong,.spectrum:lang(zh) .spectrum-Detail--sizeM strong{font-size:var(--spectrum-detail-han-m-strong-text-size,var(--spectrum-global-dimension-font-size-75));font-weight:var(--spectrum-detail-han-m-strong-text-font-weight,var(--spectrum-global-font-weight-black));line-height:var(--spectrum-detail-han-m-strong-text-line-height,var(--spectrum-alias-han-heading-text-line-height));font-style:var(--spectrum-detail-han-m-strong-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-detail-han-m-strong-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-detail-han-m-strong-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Detail--sizeS,.spectrum:lang(ko) .spectrum-Detail--sizeS,.spectrum:lang(zh) .spectrum-Detail--sizeS{font-size:var(--spectrum-detail-han-s-text-size,var(--spectrum-global-dimension-font-size-50));font-weight:var(--spectrum-detail-han-s-text-font-weight,var(--spectrum-alias-detail-text-font-weight));line-height:var(--spectrum-detail-han-s-text-line-height,var(--spectrum-alias-han-heading-text-line-height));font-style:var(--spectrum-detail-han-s-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-detail-han-s-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-detail-han-s-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Detail--sizeS em,.spectrum:lang(ko) .spectrum-Detail--sizeS em,.spectrum:lang(zh) .spectrum-Detail--sizeS em{font-size:var(--spectrum-detail-han-s-emphasis-text-size,var(--spectrum-global-dimension-font-size-50));font-weight:var(--spectrum-detail-han-s-emphasis-text-font-weight,var(--spectrum-alias-han-heading-text-font-weight-regular-emphasis));line-height:var(--spectrum-detail-han-s-emphasis-text-line-height,var(--spectrum-alias-han-heading-text-line-height));font-style:var(--spectrum-detail-han-s-emphasis-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-detail-han-s-emphasis-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-detail-han-s-emphasis-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Detail--sizeS strong,.spectrum:lang(ko) .spectrum-Detail--sizeS strong,.spectrum:lang(zh) .spectrum-Detail--sizeS strong{font-size:var(--spectrum-detail-han-s-strong-text-size,var(--spectrum-global-dimension-font-size-50));font-weight:var(--spectrum-detail-han-s-strong-text-font-weight,var(--spectrum-global-font-weight-black));line-height:var(--spectrum-detail-han-s-strong-text-line-height,var(--spectrum-alias-han-heading-text-line-height));font-style:var(--spectrum-detail-han-s-strong-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-detail-han-s-strong-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));text-transform:var(--spectrum-detail-han-s-strong-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum:lang(ja) .spectrum-Detail--light,.spectrum:lang(ko) .spectrum-Detail--light,.spectrum:lang(zh) .spectrum-Detail--light{font-weight:var(--spectrum-detail-han-m-text-font-weight,var(--spectrum-alias-detail-text-font-weight))}.spectrum:lang(ja) .spectrum-Detail--light .spectrum-Detail--emphasis,.spectrum:lang(ja) .spectrum-Detail--light em,.spectrum:lang(ko) .spectrum-Detail--light .spectrum-Detail--emphasis,.spectrum:lang(ko) .spectrum-Detail--light em,.spectrum:lang(zh) .spectrum-Detail--light .spectrum-Detail--emphasis,.spectrum:lang(zh) .spectrum-Detail--light em{font-style:var(--spectrum-detail-han-light-m-emphasis-text-font-style,var(--spectrum-global-font-style-regular));font-weight:var(--spectrum-detail-han-light-m-emphasis-text-font-weight,var(--spectrum-alias-han-heading-text-font-weight-light-emphasis))}.spectrum:lang(ja) .spectrum-Detail--light .spectrum-Detail--strong,.spectrum:lang(ja) .spectrum-Detail--light strong,.spectrum:lang(ko) .spectrum-Detail--light .spectrum-Detail--strong,.spectrum:lang(ko) .spectrum-Detail--light strong,.spectrum:lang(zh) .spectrum-Detail--light .spectrum-Detail--strong,.spectrum:lang(zh) .spectrum-Detail--light strong{font-style:var(--spectrum-detail-han-light-m-strong-text-font-style,var(--spectrum-global-font-style-regular));font-weight:var(--spectrum-detail-han-light-m-strong-text-font-weight,var(--spectrum-alias-heading-text-font-weight-regular))}.spectrum:lang(ja) .spectrum-Code--sizeXL,.spectrum:lang(ko) .spectrum-Code--sizeXL,.spectrum:lang(zh) .spectrum-Code--sizeXL{font-size:var(--spectrum-code-han-xl-text-size,var(--spectrum-global-dimension-font-size-400));font-weight:var(--spectrum-code-han-xl-text-font-weight,var(--spectrum-alias-han-body-text-font-weight-regular));line-height:var(--spectrum-code-han-xl-text-line-height,var(--spectrum-alias-han-body-text-line-height));font-style:var(--spectrum-code-han-xl-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-code-han-xl-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));margin-top:0;margin-bottom:0;font-family:var(--spectrum-code-han-xl-text-font-family,var(--spectrum-alias-font-family-zh))}.spectrum:lang(ja) .spectrum-Code--sizeL,.spectrum:lang(ko) .spectrum-Code--sizeL,.spectrum:lang(zh) .spectrum-Code--sizeL{font-size:var(--spectrum-code-han-l-text-size,var(--spectrum-global-dimension-font-size-300));font-weight:var(--spectrum-code-han-l-text-font-weight,var(--spectrum-alias-han-body-text-font-weight-regular));line-height:var(--spectrum-code-han-l-text-line-height,var(--spectrum-alias-han-body-text-line-height));font-style:var(--spectrum-code-han-l-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-code-han-l-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));margin-top:0;margin-bottom:0;font-family:var(--spectrum-code-han-l-text-font-family,var(--spectrum-alias-font-family-zh))}.spectrum:lang(ja) .spectrum-Code--sizeM,.spectrum:lang(ko) .spectrum-Code--sizeM,.spectrum:lang(zh) .spectrum-Code--sizeM{font-size:var(--spectrum-code-han-m-text-size,var(--spectrum-global-dimension-font-size-200));font-weight:var(--spectrum-code-han-m-text-font-weight,var(--spectrum-alias-han-body-text-font-weight-regular));line-height:var(--spectrum-code-han-m-text-line-height,var(--spectrum-alias-han-body-text-line-height));font-style:var(--spectrum-code-han-m-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-code-han-m-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));margin-top:0;margin-bottom:0;font-family:var(--spectrum-code-han-m-text-font-family,var(--spectrum-alias-font-family-zh))}.spectrum:lang(ja) .spectrum-Code--sizeS,.spectrum:lang(ko) .spectrum-Code--sizeS,.spectrum:lang(zh) .spectrum-Code--sizeS{font-size:var(--spectrum-code-han-s-text-size,var(--spectrum-alias-font-size-default));font-weight:var(--spectrum-code-han-s-text-font-weight,var(--spectrum-alias-han-body-text-font-weight-regular));line-height:var(--spectrum-code-han-s-text-line-height,var(--spectrum-alias-han-body-text-line-height));font-style:var(--spectrum-code-han-s-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-code-han-s-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));margin-top:0;margin-bottom:0;font-family:var(--spectrum-code-han-s-text-font-family,var(--spectrum-alias-font-family-zh))}.spectrum:lang(ja) .spectrum-Code--sizeXS,.spectrum:lang(ko) .spectrum-Code--sizeXS,.spectrum:lang(zh) .spectrum-Code--sizeXS{font-size:var(--spectrum-code-han-xs-text-size,var(--spectrum-global-dimension-font-size-75));font-weight:var(--spectrum-code-han-xs-text-font-weight,var(--spectrum-alias-han-body-text-font-weight-regular));line-height:var(--spectrum-code-han-xs-text-line-height,var(--spectrum-alias-han-body-text-line-height));font-style:var(--spectrum-code-han-xs-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-code-han-xs-text-letter-spacing,var(--spectrum-global-font-letter-spacing-han));margin-top:0;margin-bottom:0;font-family:var(--spectrum-code-han-xs-text-font-family,var(--spectrum-alias-font-family-zh))}.spectrum:lang(ja) .spectrum-Body--sizeXXXL,.spectrum:lang(ko) .spectrum-Body--sizeXXXL,.spectrum:lang(zh) .spectrum-Body--sizeXXXL{color:var(--spectrum-body-han-xxxl-text-color,var(--spectrum-alias-text-color))}.spectrum:lang(ja) .spectrum-Body--sizeXXL,.spectrum:lang(ko) .spectrum-Body--sizeXXL,.spectrum:lang(zh) .spectrum-Body--sizeXXL{color:var(--spectrum-body-han-xxl-text-color,var(--spectrum-alias-text-color))}.spectrum:lang(ja) .spectrum-Body--sizeXL,.spectrum:lang(ko) .spectrum-Body--sizeXL,.spectrum:lang(zh) .spectrum-Body--sizeXL{color:var(--spectrum-body-han-xl-text-color,var(--spectrum-alias-text-color))}.spectrum:lang(ja) .spectrum-Body--sizeL,.spectrum:lang(ko) .spectrum-Body--sizeL,.spectrum:lang(zh) .spectrum-Body--sizeL{color:var(--spectrum-body-han-l-text-color,var(--spectrum-alias-text-color))}.spectrum:lang(ja) .spectrum-Body--sizeM,.spectrum:lang(ko) .spectrum-Body--sizeM,.spectrum:lang(zh) .spectrum-Body--sizeM{color:var(--spectrum-body-han-m-text-color,var(--spectrum-alias-text-color))}.spectrum:lang(ja) .spectrum-Body--sizeS,.spectrum:lang(ko) .spectrum-Body--sizeS,.spectrum:lang(zh) .spectrum-Body--sizeS{color:var(--spectrum-body-han-s-text-color,var(--spectrum-alias-text-color))}.spectrum:lang(ja) .spectrum-Body--sizeXS,.spectrum:lang(ko) .spectrum-Body--sizeXS,.spectrum:lang(zh) .spectrum-Body--sizeXS{color:var(--spectrum-body-han-xs-text-color,var(--spectrum-alias-text-color))}.spectrum:lang(ja) .spectrum-Heading--sizeXXXL,.spectrum:lang(ko) .spectrum-Heading--sizeXXXL,.spectrum:lang(zh) .spectrum-Heading--sizeXXXL{color:var(--spectrum-heading-xxxl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Heading--sizeXXL,.spectrum:lang(ko) .spectrum-Heading--sizeXXL,.spectrum:lang(zh) .spectrum-Heading--sizeXXL{color:var(--spectrum-heading-xxl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Heading--sizeXL,.spectrum:lang(ko) .spectrum-Heading--sizeXL,.spectrum:lang(zh) .spectrum-Heading--sizeXL{color:var(--spectrum-heading-xl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Heading--sizeL,.spectrum:lang(ko) .spectrum-Heading--sizeL,.spectrum:lang(zh) .spectrum-Heading--sizeL{color:var(--spectrum-heading-l-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Heading--sizeM,.spectrum:lang(ko) .spectrum-Heading--sizeM,.spectrum:lang(zh) .spectrum-Heading--sizeM{color:var(--spectrum-heading-m-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Heading--sizeS,.spectrum:lang(ko) .spectrum-Heading--sizeS,.spectrum:lang(zh) .spectrum-Heading--sizeS{color:var(--spectrum-heading-s-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Heading--sizeXS,.spectrum:lang(ko) .spectrum-Heading--sizeXS,.spectrum:lang(zh) .spectrum-Heading--sizeXS{color:var(--spectrum-heading-xs-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Heading--sizeXXS,.spectrum:lang(ko) .spectrum-Heading--sizeXXS,.spectrum:lang(zh) .spectrum-Heading--sizeXXS{color:var(--spectrum-heading-xxs-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Heading-sizeXXXL--light,.spectrum:lang(ko) .spectrum-Heading-sizeXXXL--light,.spectrum:lang(zh) .spectrum-Heading-sizeXXXL--light{color:var(--spectrum-heading-light-xxxl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Heading-sizeXXL--light,.spectrum:lang(ko) .spectrum-Heading-sizeXXL--light,.spectrum:lang(zh) .spectrum-Heading-sizeXXL--light{color:var(--spectrum-heading-light-xxl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Heading-sizeXL--light,.spectrum:lang(ko) .spectrum-Heading-sizeXL--light,.spectrum:lang(zh) .spectrum-Heading-sizeXL--light{color:var(--spectrum-heading-light-xl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Heading-sizeL--light,.spectrum:lang(ko) .spectrum-Heading-sizeL--light,.spectrum:lang(zh) .spectrum-Heading-sizeL--light{color:var(--spectrum-heading-light-l-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Heading-sizeXXXL--heavy,.spectrum:lang(ko) .spectrum-Heading-sizeXXXL--heavy,.spectrum:lang(zh) .spectrum-Heading-sizeXXXL--heavy{color:var(--spectrum-heading-heavy-xxxl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Heading-sizeXXL--heavy,.spectrum:lang(ko) .spectrum-Heading-sizeXXL--heavy,.spectrum:lang(zh) .spectrum-Heading-sizeXXL--heavy{color:var(--spectrum-heading-heavy-xxl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Heading-sizeXL--heavy,.spectrum:lang(ko) .spectrum-Heading-sizeXL--heavy,.spectrum:lang(zh) .spectrum-Heading-sizeXL--heavy{color:var(--spectrum-heading-heavy-xl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Heading-sizeL--heavy,.spectrum:lang(ko) .spectrum-Heading-sizeL--heavy,.spectrum:lang(zh) .spectrum-Heading-sizeL--heavy{color:var(--spectrum-heading-heavy-l-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Heading-sizeXXXL--heading,.spectrum:lang(ko) .spectrum-Heading-sizeXXXL--heading,.spectrum:lang(zh) .spectrum-Heading-sizeXXXL--heading{color:var(--spectrum-heading-xxxl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Heading-sizeXXL--heading,.spectrum:lang(ko) .spectrum-Heading-sizeXXL--heading,.spectrum:lang(zh) .spectrum-Heading-sizeXXL--heading{color:var(--spectrum-heading-xxl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Heading-sizeXL--heading,.spectrum:lang(ko) .spectrum-Heading-sizeXL--heading,.spectrum:lang(zh) .spectrum-Heading-sizeXL--heading{color:var(--spectrum-heading-xl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Heading-sizeL--heading,.spectrum:lang(ko) .spectrum-Heading-sizeL--heading,.spectrum:lang(zh) .spectrum-Heading-sizeL--heading{color:var(--spectrum-heading-l-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Detail--sizeXL,.spectrum:lang(ko) .spectrum-Detail--sizeXL,.spectrum:lang(zh) .spectrum-Detail--sizeXL{color:var(--spectrum-detail-xl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Detail--sizeL,.spectrum:lang(ko) .spectrum-Detail--sizeL,.spectrum:lang(zh) .spectrum-Detail--sizeL{color:var(--spectrum-detail-l-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Detail--sizeM,.spectrum:lang(ko) .spectrum-Detail--sizeM,.spectrum:lang(zh) .spectrum-Detail--sizeM{color:var(--spectrum-detail-m-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Detail--sizeS,.spectrum:lang(ko) .spectrum-Detail--sizeS,.spectrum:lang(zh) .spectrum-Detail--sizeS{color:var(--spectrum-detail-s-text-color,var(--spectrum-alias-heading-text-color))}.spectrum:lang(ja) .spectrum-Code--sizeXL,.spectrum:lang(ko) .spectrum-Code--sizeXL,.spectrum:lang(zh) .spectrum-Code--sizeXL{color:var(--spectrum-code-xl-text-color,var(--spectrum-alias-text-color))}.spectrum:lang(ja) .spectrum-Code--sizeL,.spectrum:lang(ko) .spectrum-Code--sizeL,.spectrum:lang(zh) .spectrum-Code--sizeL{color:var(--spectrum-code-l-text-color,var(--spectrum-alias-text-color))}.spectrum:lang(ja) .spectrum-Code--sizeM,.spectrum:lang(ko) .spectrum-Code--sizeM,.spectrum:lang(zh) .spectrum-Code--sizeM{color:var(--spectrum-code-m-text-color,var(--spectrum-alias-text-color))}.spectrum:lang(ja) .spectrum-Code--sizeS,.spectrum:lang(ko) .spectrum-Code--sizeS,.spectrum:lang(zh) .spectrum-Code--sizeS{color:var(--spectrum-code-s-text-color,var(--spectrum-alias-text-color))}.spectrum:lang(ja) .spectrum-Code--sizeXS,.spectrum:lang(ko) .spectrum-Code--sizeXS,.spectrum:lang(zh) .spectrum-Code--sizeXS{color:var(--spectrum-code-xs-text-color,var(--spectrum-alias-text-color))}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$G = css `
.spectrum-Heading--sizeXXXL{font-size:var(--spectrum-heading-xxxl-text-size,var(--spectrum-alias-heading-xxxl-text-size));font-weight:var(--spectrum-heading-xxxl-text-font-weight,var(--spectrum-alias-heading-text-font-weight-regular));line-height:var(--spectrum-heading-xxxl-text-line-height,var(--spectrum-alias-heading-text-line-height));font-style:var(--spectrum-heading-xxxl-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-heading-xxxl-text-letter-spacing,var(--spectrum-global-font-letter-spacing-none));text-transform:var(--spectrum-heading-xxxl-text-transform,none);margin-top:0;margin-bottom:0}.spectrum-Heading--sizeXXL{font-size:var(--spectrum-heading-xxl-text-size,var(--spectrum-alias-heading-xxl-text-size));font-weight:var(--spectrum-heading-xxl-text-font-weight,var(--spectrum-alias-heading-text-font-weight-regular));line-height:var(--spectrum-heading-xxl-text-line-height,var(--spectrum-alias-heading-text-line-height));font-style:var(--spectrum-heading-xxl-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-heading-xxl-text-letter-spacing,var(--spectrum-global-font-letter-spacing-none));text-transform:var(--spectrum-heading-xxl-text-transform,none);margin-top:0;margin-bottom:0}.spectrum-Heading--sizeXL{font-size:var(--spectrum-heading-xl-text-size,var(--spectrum-alias-heading-xl-text-size));font-weight:var(--spectrum-heading-xl-text-font-weight,var(--spectrum-alias-heading-text-font-weight-regular));line-height:var(--spectrum-heading-xl-text-line-height,var(--spectrum-alias-heading-text-line-height));font-style:var(--spectrum-heading-xl-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-heading-xl-text-letter-spacing,var(--spectrum-global-font-letter-spacing-none));text-transform:var(--spectrum-heading-xl-text-transform,none);margin-top:0;margin-bottom:0}.spectrum-Heading--sizeL{font-size:var(--spectrum-heading-l-text-size,var(--spectrum-alias-heading-l-text-size));font-weight:var(--spectrum-heading-l-text-font-weight,var(--spectrum-alias-heading-text-font-weight-regular));line-height:var(--spectrum-heading-l-text-line-height,var(--spectrum-alias-heading-text-line-height));font-style:var(--spectrum-heading-l-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-heading-l-text-letter-spacing,var(--spectrum-global-font-letter-spacing-none));text-transform:var(--spectrum-heading-l-text-transform,none);margin-top:0;margin-bottom:0}.spectrum-Heading--sizeM{font-size:var(--spectrum-heading-m-text-size,var(--spectrum-alias-heading-m-text-size));font-weight:var(--spectrum-heading-m-text-font-weight,var(--spectrum-alias-heading-text-font-weight-regular));line-height:var(--spectrum-heading-m-text-line-height,var(--spectrum-alias-heading-text-line-height));font-style:var(--spectrum-heading-m-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-heading-m-text-letter-spacing,var(--spectrum-global-font-letter-spacing-none));text-transform:var(--spectrum-heading-m-text-transform,none);margin-top:0;margin-bottom:0}.spectrum-Heading--sizeS{font-size:var(--spectrum-heading-s-text-size,var(--spectrum-alias-heading-s-text-size));font-weight:var(--spectrum-heading-s-text-font-weight,var(--spectrum-alias-heading-text-font-weight-regular));line-height:var(--spectrum-heading-s-text-line-height,var(--spectrum-alias-heading-text-line-height));font-style:var(--spectrum-heading-s-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-heading-s-text-letter-spacing,var(--spectrum-global-font-letter-spacing-none));text-transform:var(--spectrum-heading-s-text-transform,none);margin-top:0;margin-bottom:0}.spectrum-Heading--sizeXS{font-size:var(--spectrum-heading-xs-text-size,var(--spectrum-alias-heading-xs-text-size));font-weight:var(--spectrum-heading-xs-text-font-weight,var(--spectrum-alias-heading-text-font-weight-regular));line-height:var(--spectrum-heading-xs-text-line-height,var(--spectrum-alias-heading-text-line-height));font-style:var(--spectrum-heading-xs-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-heading-xs-text-letter-spacing,var(--spectrum-global-font-letter-spacing-none));text-transform:var(--spectrum-heading-xs-text-transform,none);margin-top:0;margin-bottom:0}.spectrum-Heading--sizeXXS{font-size:var(--spectrum-heading-xxs-text-size,var(--spectrum-alias-heading-xxs-text-size));font-weight:var(--spectrum-heading-xxs-text-font-weight,var(--spectrum-alias-heading-text-font-weight-regular));line-height:var(--spectrum-heading-xxs-text-line-height,var(--spectrum-alias-heading-text-line-height));font-style:var(--spectrum-heading-xxs-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-heading-xxs-text-letter-spacing,var(--spectrum-global-font-letter-spacing-none));text-transform:var(--spectrum-heading-xxs-text-transform,none);margin-top:0;margin-bottom:0}.spectrum-Heading{font-family:var(--spectrum-heading-m-text-font-family,var(--spectrum-alias-body-text-font-family));font-weight:var(--spectrum-heading-m-text-font-weight,var(--spectrum-alias-heading-text-font-weight-regular))}.spectrum-Heading-emphasis,em{font-style:var(--spectrum-heading-m-emphasis-text-font-style,var(--spectrum-global-font-style-italic))}.spectrum-Heading-strong,strong{font-weight:var(--spectrum-heading-m-strong-text-font-weight,var(--spectrum-global-font-weight-black))}.spectrum-Heading--serif{font-family:var(--spectrum-body-serif-m-text-font-family,var(--spectrum-alias-serif-text-font-family))}.spectrum-Heading--heavy{font-weight:var(--spectrum-heading-heavy-m-text-font-weight,var(--spectrum-global-font-weight-black))}.spectrum-Heading--heavy .spectrum-Heading-emphasis,.spectrum-Heading--heavy em{font-style:var(--spectrum-heading-heavy-m-emphasis-text-font-style,var(--spectrum-global-font-style-italic))}.spectrum-Heading--heavy .spectrum-Heading-strong,.spectrum-Heading--heavy strong{font-weight:var(--spectrum-heading-heavy-m-strong-text-font-weight,var(--spectrum-global-font-weight-black))}.spectrum-Heading--light{font-weight:var(--spectrum-heading-light-m-emphasis-text-font-weight,var(--spectrum-global-font-weight-light))}.spectrum-Heading--light .spectrum-Heading-emphasis,.spectrum-Heading--light em{font-style:var(--spectrum-heading-light-m-emphasis-text-font-style,var(--spectrum-global-font-style-italic))}.spectrum-Heading--light .spectrum-Heading-strong,.spectrum-Heading--light strong{font-weight:var(--spectrum-heading-light-m-strong-text-font-weight,var(--spectrum-global-font-weight-bold))}.spectrum-Heading--sizeXXXL{color:var(--spectrum-heading-xxxl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum-Heading--sizeXXL{color:var(--spectrum-heading-xxl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum-Heading--sizeXL{color:var(--spectrum-heading-xl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum-Heading--sizeL{color:var(--spectrum-heading-l-text-color,var(--spectrum-alias-heading-text-color))}.spectrum-Heading--sizeM{color:var(--spectrum-heading-m-text-color,var(--spectrum-alias-heading-text-color))}.spectrum-Heading--sizeS{color:var(--spectrum-heading-s-text-color,var(--spectrum-alias-heading-text-color))}.spectrum-Heading--sizeXS{color:var(--spectrum-heading-xs-text-color,var(--spectrum-alias-heading-text-color))}.spectrum-Heading--sizeXXS{color:var(--spectrum-heading-xxs-text-color,var(--spectrum-alias-heading-text-color))}.spectrum-Heading-sizeXXXL--light{color:var(--spectrum-heading-light-xxxl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum-Heading-sizeXXL--light{color:var(--spectrum-heading-light-xxl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum-Heading-sizeXL--light{color:var(--spectrum-heading-light-xl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum-Heading-sizeL--light{color:var(--spectrum-heading-light-l-text-color,var(--spectrum-alias-heading-text-color))}.spectrum-Heading-sizeXXXL--heavy{color:var(--spectrum-heading-heavy-xxxl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum-Heading-sizeXXL--heavy{color:var(--spectrum-heading-heavy-xxl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum-Heading-sizeXL--heavy{color:var(--spectrum-heading-heavy-xl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum-Heading-sizeL--heavy{color:var(--spectrum-heading-heavy-l-text-color,var(--spectrum-alias-heading-text-color))}.spectrum-Heading-sizeXXXL--heading{color:var(--spectrum-heading-xxxl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum-Heading-sizeXXL--heading{color:var(--spectrum-heading-xxl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum-Heading-sizeXL--heading{color:var(--spectrum-heading-xl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum-Heading-sizeL--heading{color:var(--spectrum-heading-l-text-color,var(--spectrum-alias-heading-text-color))}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    var headingStyles = [styles$I, styles$H, styles$G];

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$F = css `
.spectrum-Detail{font-family:var(--spectrum-heading-m-text-font-family,var(--spectrum-alias-body-text-font-family))}.spectrum-Detail-strong,strong{font-weight:var(--spectrum-detail-m-strong-text-font-weight,var(--spectrum-global-font-weight-black))}.spectrum-Detail-emphasis,em{font-style:var(--spectrum-detail-m-emphasis-text-font-style,var(--spectrum-global-font-style-italic))}.spectrum-Detail--light{font-style:var(--spectrum-detail-light-m-text-font-style,var(--spectrum-global-font-style-regular));font-weight:var(--spectrum-detail-light-m-text-font-weight,var(--spectrum-alias-detail-text-font-weight-light))}.spectrum-Detail--serif{font-family:var(--spectrum-body-serif-m-text-font-family,var(--spectrum-alias-serif-text-font-family))}.spectrum-Detail--sizeXL{font-size:var(--spectrum-detail-xl-text-size,var(--spectrum-global-dimension-font-size-200));font-weight:var(--spectrum-detail-xl-text-font-weight,var(--spectrum-alias-detail-text-font-weight));line-height:var(--spectrum-detail-xl-text-line-height,var(--spectrum-alias-body-text-line-height));font-style:var(--spectrum-detail-xl-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-detail-xl-text-letter-spacing,var(--spectrum-global-font-letter-spacing-medium));text-transform:var(--spectrum-detail-xl-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum-Detail--sizeXL em{font-size:var(--spectrum-detail-xl-emphasis-text-size,var(--spectrum-global-dimension-font-size-200));font-weight:var(--spectrum-detail-xl-emphasis-text-font-weight,var(--spectrum-alias-detail-text-font-weight));line-height:var(--spectrum-detail-xl-emphasis-text-line-height,var(--spectrum-alias-body-text-line-height));font-style:var(--spectrum-detail-xl-emphasis-text-font-style,var(--spectrum-global-font-style-italic));letter-spacing:var(--spectrum-detail-xl-emphasis-text-letter-spacing,var(--spectrum-global-font-letter-spacing-medium));text-transform:var(--spectrum-detail-xl-emphasis-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum-Detail--sizeXL strong{font-size:var(--spectrum-detail-xl-strong-text-size,var(--spectrum-global-dimension-font-size-200));font-weight:var(--spectrum-detail-xl-strong-text-font-weight,var(--spectrum-global-font-weight-black));line-height:var(--spectrum-detail-xl-strong-text-line-height,var(--spectrum-alias-body-text-line-height));font-style:var(--spectrum-detail-xl-strong-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-detail-xl-strong-text-letter-spacing,var(--spectrum-global-font-letter-spacing-medium));text-transform:var(--spectrum-detail-xl-strong-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum-Detail--sizeL{font-size:var(--spectrum-detail-l-text-size,var(--spectrum-global-dimension-font-size-100));font-weight:var(--spectrum-detail-l-text-font-weight,var(--spectrum-alias-detail-text-font-weight));line-height:var(--spectrum-detail-l-text-line-height,var(--spectrum-alias-body-text-line-height));font-style:var(--spectrum-detail-l-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-detail-l-text-letter-spacing,var(--spectrum-global-font-letter-spacing-medium));text-transform:var(--spectrum-detail-l-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum-Detail--sizeL em{font-size:var(--spectrum-detail-l-emphasis-text-size,var(--spectrum-global-dimension-font-size-100));font-weight:var(--spectrum-detail-l-emphasis-text-font-weight,var(--spectrum-alias-detail-text-font-weight));line-height:var(--spectrum-detail-l-emphasis-text-line-height,var(--spectrum-alias-body-text-line-height));font-style:var(--spectrum-detail-l-emphasis-text-font-style,var(--spectrum-global-font-style-italic));letter-spacing:var(--spectrum-detail-l-emphasis-text-letter-spacing,var(--spectrum-global-font-letter-spacing-medium));text-transform:var(--spectrum-detail-l-emphasis-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum-Detail--sizeL strong{font-size:var(--spectrum-detail-l-strong-text-size,var(--spectrum-global-dimension-font-size-100));font-weight:var(--spectrum-detail-l-strong-text-font-weight,var(--spectrum-global-font-weight-black));line-height:var(--spectrum-detail-l-strong-text-line-height,var(--spectrum-alias-body-text-line-height));font-style:var(--spectrum-detail-l-strong-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-detail-l-strong-text-letter-spacing,var(--spectrum-global-font-letter-spacing-medium));text-transform:var(--spectrum-detail-l-strong-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum-Detail--sizeM{font-size:var(--spectrum-detail-m-text-size,var(--spectrum-global-dimension-font-size-75));font-weight:var(--spectrum-detail-m-text-font-weight,var(--spectrum-alias-detail-text-font-weight));line-height:var(--spectrum-detail-m-text-line-height,var(--spectrum-alias-body-text-line-height));font-style:var(--spectrum-detail-m-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-detail-m-text-letter-spacing,var(--spectrum-global-font-letter-spacing-medium));text-transform:var(--spectrum-detail-m-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum-Detail--sizeM em{font-size:var(--spectrum-detail-m-emphasis-text-size,var(--spectrum-global-dimension-font-size-75));font-weight:var(--spectrum-detail-m-emphasis-text-font-weight,var(--spectrum-alias-detail-text-font-weight));line-height:var(--spectrum-detail-m-emphasis-text-line-height,var(--spectrum-alias-body-text-line-height));font-style:var(--spectrum-detail-m-emphasis-text-font-style,var(--spectrum-global-font-style-italic));letter-spacing:var(--spectrum-detail-m-emphasis-text-letter-spacing,var(--spectrum-global-font-letter-spacing-medium));text-transform:var(--spectrum-detail-m-emphasis-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum-Detail--sizeM strong{font-size:var(--spectrum-detail-m-strong-text-size,var(--spectrum-global-dimension-font-size-75));font-weight:var(--spectrum-detail-m-strong-text-font-weight,var(--spectrum-global-font-weight-black));line-height:var(--spectrum-detail-m-strong-text-line-height,var(--spectrum-alias-body-text-line-height));font-style:var(--spectrum-detail-m-strong-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-detail-m-strong-text-letter-spacing,var(--spectrum-global-font-letter-spacing-medium));text-transform:var(--spectrum-detail-m-strong-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum-Detail--sizeS{font-size:var(--spectrum-detail-s-text-size,var(--spectrum-global-dimension-font-size-50));font-weight:var(--spectrum-detail-s-text-font-weight,var(--spectrum-alias-detail-text-font-weight));line-height:var(--spectrum-detail-s-text-line-height,var(--spectrum-alias-body-text-line-height));font-style:var(--spectrum-detail-s-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-detail-s-text-letter-spacing,var(--spectrum-global-font-letter-spacing-medium));text-transform:var(--spectrum-detail-s-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum-Detail--sizeS em{font-size:var(--spectrum-detail-s-emphasis-text-size,var(--spectrum-global-dimension-font-size-50));font-weight:var(--spectrum-detail-s-emphasis-text-font-weight,var(--spectrum-alias-detail-text-font-weight));line-height:var(--spectrum-detail-s-emphasis-text-line-height,var(--spectrum-alias-body-text-line-height));font-style:var(--spectrum-detail-s-emphasis-text-font-style,var(--spectrum-global-font-style-italic));letter-spacing:var(--spectrum-detail-s-emphasis-text-letter-spacing,var(--spectrum-global-font-letter-spacing-medium));text-transform:var(--spectrum-detail-s-emphasis-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum-Detail--sizeS strong{font-size:var(--spectrum-detail-s-strong-text-size,var(--spectrum-global-dimension-font-size-50));font-weight:var(--spectrum-detail-s-strong-text-font-weight,var(--spectrum-global-font-weight-black));line-height:var(--spectrum-detail-s-strong-text-line-height,var(--spectrum-alias-body-text-line-height));font-style:var(--spectrum-detail-s-strong-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-detail-s-strong-text-letter-spacing,var(--spectrum-global-font-letter-spacing-medium));text-transform:var(--spectrum-detail-s-strong-text-transform,uppercase);margin-top:0;margin-bottom:0}.spectrum-Detail--sizeXL{color:var(--spectrum-detail-xl-text-color,var(--spectrum-alias-heading-text-color))}.spectrum-Detail--sizeL{color:var(--spectrum-detail-l-text-color,var(--spectrum-alias-heading-text-color))}.spectrum-Detail--sizeM{color:var(--spectrum-detail-m-text-color,var(--spectrum-alias-heading-text-color))}.spectrum-Detail--sizeS{color:var(--spectrum-detail-s-text-color,var(--spectrum-alias-heading-text-color))}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    var detailStyles = [styles$I, styles$H, styles$F];

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @element sp-card
     *
     * @fires change - Announces a change in the `selected` property of a card
     * @slot preview - This is the preview image for Gallery Cards
     * @slot cover-photo - This is the cover photo for Default and Quiet Cards
     * @slot heading - HTML content to be listed as the heading
     * @slot subheading - HTML content to be listed as the subheading
     * @slot description - A description of the card
     * @slot actions - an `sp-action-menu` element outlining actions to take on the represened object
     * @slot footer - Footer text
     */
    class Card extends ObserveSlotPresence(FocusVisiblePolyfillMixin(SpectrumElement), ['[slot="cover-photo"]', '[slot="preview"]']) {
        constructor() {
            super();
            this.variant = 'standard';
            this.selected = false;
            this.heading = '';
            this.horizontal = false;
            this.small = false;
            this.focused = false;
            this.toggles = false;
            this.subheading = '';
            this.handleFocusin = (event) => {
                this.focused = true;
                const target = event.composedPath()[0];
                if (target !== this) {
                    this.removeEventListener('keydown', this.handleKeydown);
                    return;
                }
                this.addEventListener('keydown', this.handleKeydown);
            };
            this.addEventListener('focusin', this.handleFocusin);
            this.shadowRoot.addEventListener('focusin', this.handleFocusin);
            this.addEventListener('focusout', this.handleFocusout);
        }
        static get styles() {
            return [headingStyles, detailStyles, styles$J];
        }
        get hasCoverPhoto() {
            return this.getSlotContentPresence('[slot="cover-photo"]');
        }
        get hasPreview() {
            return this.getSlotContentPresence('[slot="preview"]');
        }
        handleFocusout(event) {
            this.focused = false;
            const target = event.composedPath()[0];
            if (target === this) {
                this.removeEventListener('keydown', this.handleKeydown);
            }
        }
        handleKeydown(event) {
            const { code } = event;
            if (code === 'Space') {
                this.toggleSelected();
            }
        }
        handleSelectedChange({ target: { checked }, }) {
            this.selected = checked;
            this.announceChange();
        }
        toggleSelected() {
            if (!this.toggles) {
                this.dispatchEvent(new Event('click', {
                    bubbles: true,
                    composed: true,
                }));
                return;
            }
            this.selected = !this.selected;
            this.announceChange();
        }
        announceChange() {
            const applyDefault = this.dispatchEvent(new Event('change', {
                cancelable: true,
            }));
            if (!applyDefault) {
                this.selected = !this.selected;
            }
        }
        get renderHeading() {
            return html `
            <div class="title spectrum-Heading spectrum-Heading--sizeXS">
                <slot name="heading">
                    ${this.heading}
                </slot>
            </div>
        `;
        }
        get renderPreviewImage() {
            return html `
            <sp-asset id="preview" variant=${ifDefined(this.asset)}>
                <slot name="preview"></slot>
            </sp-asset>
        `;
        }
        get renderCoverImage() {
            return html `
            <sp-asset id="cover-photo" variant=${ifDefined(this.asset)}>
                <slot name="cover-photo"></slot>
            </sp-asset>
        `;
        }
        get images() {
            const images = [];
            if (this.hasPreview)
                images.push(this.renderPreviewImage);
            if (this.hasCoverPhoto)
                images.push(this.renderCoverImage);
            return images;
        }
        renderImage() {
            if (this.horizontal) {
                return this.images;
            }
            if (this.variant !== 'standard') {
                return [this.renderPreviewImage];
            }
            return this.images;
        }
        get renderSubtitleAndDescription() {
            return html `
            <div class="subtitle spectrum-Detail spectrum-Detail--sizeS">
                <slot name="subheading">
                    ${this.subheading}
                </slot>
            </div>
            <slot name="description"></slot>
        `;
        }
        render() {
            return html `
            ${this.toggles
            ? html `
                      <sp-quick-actions class="quickActions">
                          <sp-checkbox
                              tabindex="-1"
                              class="checkbox"
                              @change=${this.handleSelectedChange}
                              ?checked=${this.selected}
                          ></sp-checkbox>
                      </sp-quick-actions>
                  `
            : html ``}
            ${this.variant === 'quiet' && this.small
            ? html `
                      <sp-quick-actions class="spectrum-QuickActions actions">
                          <slot name="actions"></slot>
                      </sp-quick-actions>
                  `
            : html ``}
            ${this.renderImage()}
            <div class="body">
                <div class="header">
                    ${this.renderHeading}
                    ${this.variant === 'gallery'
            ? this.renderSubtitleAndDescription
            : html ``}
                    ${this.variant !== 'quiet' || !this.small
            ? html `
                              <div class="actionButton">
                                  <slot name="actions"></slot>
                              </div>
                          `
            : html ``}
                </div>
                ${this.variant !== 'gallery'
            ? html `
                          <div class="content">
                              ${this.renderSubtitleAndDescription}
                          </div>
                      `
            : html ``}
            </div>
            ${this.variant === 'standard'
            ? html `
                      <slot name="footer"></slot>
                  `
            : html ``}
        `;
        }
        firstUpdated(changes) {
            super.firstUpdated(changes);
            this.setAttribute('role', 'figure');
            this.tabIndex = 0;
        }
    }
    __decorate([
        property()
    ], Card.prototype, "asset", void 0);
    __decorate([
        property({ reflect: true })
    ], Card.prototype, "variant", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Card.prototype, "selected", void 0);
    __decorate([
        property()
    ], Card.prototype, "heading", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Card.prototype, "horizontal", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Card.prototype, "small", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Card.prototype, "focused", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Card.prototype, "toggles", void 0);
    __decorate([
        property()
    ], Card.prototype, "subheading", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-card', Card);

    /* eslint-disable @typescript-eslint/no-explicit-any */
    const previousValues = new WeakMap();
    const stateMap = new WeakMap();
    const addListener = (el, type, fn) => {
        if (Array.isArray(type)) {
            type.map((eventName) => {
                el.addEventListener(eventName, fn);
            });
        }
        else {
            el.addEventListener(type, fn);
        }
    };
    const removeListener = (el, type, fn) => {
        if (Array.isArray(type)) {
            type.map((eventName) => {
                el.removeEventListener(eventName, fn);
            });
        }
        else {
            el.removeEventListener(type, fn);
        }
    };
    const addEventListeners = (part, start, stream, end) => {
        const { element, eventContext } = part;
        const isStreaming = stateMap.get(part);
        let handledStream = false;
        const handleStream = (event) => {
            if (!handledStream) {
                handledStream = true;
                stream.fn.call(eventContext || element, event);
                requestAnimationFrame(() => {
                    handledStream = false;
                });
            }
        };
        const handleEnd = (event) => {
            addListener(element, start.type, handleStart);
            removeListener(element, stream.type, handleStream);
            removeListener(element, end.type, handleEnd);
            stateMap.set(part, false);
            end.fn.call(eventContext || element, event);
        };
        const handleStart = (event) => {
            start.fn.call(eventContext || element, event);
            if (event.defaultPrevented) {
                return;
            }
            removeListener(element, start.type, handleStart);
            addListener(element, stream.type, handleStream);
            addListener(element, end.type, handleEnd);
            stateMap.set(part, true);
        };
        if (!isStreaming) {
            addListener(element, start.type, handleStart);
        }
        else {
            addListener(element, stream.type, handleStream);
            addListener(element, end.type, handleEnd);
        }
        return () => {
            removeListener(element, start.type, handleStart);
            removeListener(element, stream.type, handleStream);
            removeListener(element, end.type, handleEnd);
        };
    };
    /**
     * For AttributeParts, sets the attribute if the value is defined and removes
     * the attribute if the value is undefined.
     *
     * For other part types, this directive is a no-op.
     */
    const streamingListener = directive((start, stream, end) => (part) => {
        if (!(part instanceof EventPart)) {
            return;
        }
        if (previousValues.has(part)) {
            const previous = previousValues.get(part);
            if (start.type === previous.start.type &&
                stream.type === previous.stream.type &&
                end.type === previous.end.type &&
                start.fn === previous.start.fn &&
                stream.fn === previous.stream.fn &&
                end.fn === previous.end.fn) {
                return;
            }
            previous.removeEventListeners();
        }
        else {
            stateMap.set(part, false);
        }
        previousValues.set(part, {
            start,
            stream,
            end,
            removeEventListeners: addEventListeners(part, start, stream, end),
        });
    });

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$E = css `
:host{--spectrum-colorloupe-width-adjusted:calc(var(--spectrum-colorloupe-width,
var(--spectrum-global-dimension-static-size-600)) + var(--spectrum-colorhandle-inner-border-size,
var(--spectrum-global-dimension-static-size-25))*2);--spectrum-colorloupe-height-adjusted:calc(var(--spectrum-colorloupe-height,
var(--spectrum-global-dimension-static-size-800)) + var(--spectrum-colorhandle-inner-border-size,
var(--spectrum-global-dimension-static-size-25))*2);--spectrum-colorloupe-offset:var(--spectrum-global-dimension-static-size-200,16px);--spectrum-colorloupe-animation-distance:var(--spectrum-global-dimension-static-size-100,8px);width:var(--spectrum-colorloupe-width-adjusted);height:var(--spectrum-colorloupe-height-adjusted);position:absolute;transform:translateY(var(--spectrum-colorloupe-animation-distance));opacity:0;transform-origin:bottom center;bottom:calc(50% + var(--spectrum-colorloupe-offset));left:calc(50% - var(--spectrum-colorloupe-width-adjusted)/2);transition:transform .1s ease-in-out,opacity 125ms ease-in-out;pointer-events:none}:host([open]){transform:translate(0);opacity:1}.outer{stroke-width:var(--spectrum-colorloupe-outer-border-size,var(--spectrum-global-dimension-static-size-10));fill:var(--spectrum-colorloupe-inner-border-color,var(--spectrum-global-color-static-white));stroke:var(--spectrum-colorloupe-outer-border-color,rgba(50,50,50,.1))}@media (forced-colors:active){:host{--spectrum-colorloupe-outer-border-color:CanvasText}}svg{width:inherit;height:inherit}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @element sp-color-loupe
     */
    class ColorLoupe extends SpectrumElement {
        constructor() {
            super(...arguments);
            this.open = false;
            this.color = 'rgba(255, 0, 0, 0.5)';
        }
        static get styles() {
            return [styles$E];
        }
        render() {
            return html `
            <svg>
                <g transform="translate(1 1)">
                    <path
                        class="inner"
                        d="M24,0A24,24,0,0,1,48,24c0,16.255-24,40-24,40S0,40.255,0,24A24,24,0,0,1,24,0Z"
                        fill=${this.color}
                    />
                    <path
                        class="outer"
                        d="M24,2A21.98,21.98,0,0,0,2,24c0,6.2,4,14.794,11.568,24.853A144.233,144.233,0,0,0,24,61.132,144.085,144.085,0,0,0,34.4,48.893C41.99,38.816,46,30.209,46,24A21.98,21.98,0,0,0,24,2m0-2A24,24,0,0,1,48,24c0,16.255-24,40-24,40S0,40.255,0,24A24,24,0,0,1,24,0Z"
                    />
                </g>
            </svg>
        `;
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ColorLoupe.prototype, "open", void 0);
    __decorate([
        property({ type: String })
    ], ColorLoupe.prototype, "color", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-color-loupe', ColorLoupe);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$D = css `
:host{--spectrum-colorhandle-animation-duration:var(--spectrum-global-animation-duration-100,130ms);--spectrum-colorhandle-animation-easing:ease-in-out;--spectrum-colorhandle-hitarea-size:var(--spectrum-global-dimension-size-300)}:host(.focus-visible),:host(.focus-visible),:host([focus]){width:calc(var(--spectrum-colorhandle-size,
var(--spectrum-global-dimension-size-200))*2);height:calc(var(--spectrum-colorhandle-size,
var(--spectrum-global-dimension-size-200))*2);margin-left:calc(-1*var(--spectrum-colorhandle-size, var(--spectrum-global-dimension-size-200)));margin-top:calc(-1*var(--spectrum-colorhandle-size, var(--spectrum-global-dimension-size-200)))}:host(.focus-visible),:host(:focus-visible),:host([focus]){width:calc(var(--spectrum-colorhandle-size,
var(--spectrum-global-dimension-size-200))*2);height:calc(var(--spectrum-colorhandle-size,
var(--spectrum-global-dimension-size-200))*2);margin-left:calc(-1*var(--spectrum-colorhandle-size, var(--spectrum-global-dimension-size-200)));margin-top:calc(-1*var(--spectrum-colorhandle-size, var(--spectrum-global-dimension-size-200)))}:host{display:block;position:absolute;z-index:1;box-sizing:border-box;width:var(--spectrum-colorhandle-size,var(--spectrum-global-dimension-size-200));height:var(--spectrum-colorhandle-size,var(--spectrum-global-dimension-size-200));margin-left:calc(-1*var(--spectrum-colorhandle-size,
var(--spectrum-global-dimension-size-200))/2);margin-top:calc(-1*var(--spectrum-colorhandle-size,
var(--spectrum-global-dimension-size-200))/2);border-width:var(--spectrum-colorhandle-inner-border-size,var(--spectrum-global-dimension-static-size-25));border-style:solid;background-size:var(--spectrum-global-dimension-static-size-200,16px) var(--spectrum-global-dimension-static-size-200,16px);background-position:var(--spectrum-colorhandle-background-offset) var(--spectrum-colorhandle-background-offset),var(--spectrum-colorhandle-background-offset) calc(var(--spectrum-colorhandle-checkerboard-size) + var(--spectrum-colorhandle-background-offset)),calc(var(--spectrum-colorhandle-checkerboard-size) + var(--spectrum-colorhandle-background-offset)) calc(-1*var(--spectrum-colorhandle-checkerboard-size) + var(--spectrum-colorhandle-background-offset)),calc(-1*var(--spectrum-colorhandle-checkerboard-size) + var(--spectrum-colorhandle-background-offset)) var(--spectrum-colorhandle-background-offset);transition:width var(--spectrum-colorhandle-animation-duration) var(--spectrum-colorhandle-animation-easing),height var(--spectrum-colorhandle-animation-duration) var(--spectrum-colorhandle-animation-easing),border-width var(--spectrum-colorhandle-animation-duration) var(--spectrum-colorhandle-animation-easing),margin-left var(--spectrum-colorhandle-animation-duration) var(--spectrum-colorhandle-animation-easing),margin-top var(--spectrum-colorhandle-animation-duration) var(--spectrum-colorhandle-animation-easing)}:host,:host:after{border-radius:100%}:host:after{content:"";left:calc(50% - var(--spectrum-colorhandle-hitarea-size)/2);top:calc(50% - var(--spectrum-colorhandle-hitarea-size)/2);position:absolute;display:block;width:var(--spectrum-colorhandle-hitarea-size);height:var(--spectrum-colorhandle-hitarea-size)}:host([disabled]){pointer-events:none}.color{border-radius:100%;width:100%;height:100%}:host{--spectrum-colorhandle-background-offset:calc(-1*var(--spectrum-global-dimension-static-size-25, 2px));--spectrum-colorhandle-checkerboard-size:var(--spectrum-global-dimension-static-size-100,8px);--spectrum-colorhandle-outer-border-color:rgba(0,0,0,0.42);border-color:var(--spectrum-colorhandle-inner-border-color,var(--spectrum-global-color-static-white));box-shadow:0 0 0 var(--spectrum-colorhandle-outer-border-size,var(--spectrum-global-dimension-static-size-10)) var(--spectrum-colorhandle-outer-border-color,var(--spectrum-alias-colorhandle-outer-border-color));background-color:var(--spectrum-global-color-static-white,#fff);background-image:linear-gradient(-45deg,transparent 75.5%,var(--spectrum-global-color-static-gray-500,#bcbcbc) 0),linear-gradient(45deg,transparent 75.5%,var(--spectrum-global-color-static-gray-500,#bcbcbc) 0),linear-gradient(-45deg,var(--spectrum-global-color-static-gray-500,#bcbcbc) 25.5%,transparent 0),linear-gradient(45deg,var(--spectrum-global-color-static-gray-500,#bcbcbc) 25.5%,transparent 0)}:host([disabled]){border-color:var(--spectrum-colorhandle-inner-border-color-disabled,var(--spectrum-global-color-gray-400));background:var(--spectrum-colorhandle-fill-color-disabled,var(--spectrum-global-color-gray-300));box-shadow:none}:host([disabled]) .color{display:none}.color{box-shadow:inset 0 0 0 var(--spectrum-colorhandle-outer-border-size,var(--spectrum-global-dimension-static-size-10)) var(--spectrum-colorhandle-outer-border-color,var(--spectrum-alias-colorhandle-outer-border-color))}@media (forced-colors:active){:host{--spectrum-colorhandle-inner-border-color-disabled:GrayText;--spectrum-colorhandle-fill-color-disabled:Canvas;--spectrum-colorhandle-inner-border-color:CanvasText}:host([disabled]){forced-color-adjust:none}}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @element sp-color-handle
     */
    class ColorHandle extends SpectrumElement {
        constructor() {
            super(...arguments);
            this.disabled = false;
            this.open = false;
            this.color = 'rgba(255, 0, 0, 0.5)';
        }
        static get styles() {
            return [styles$D];
        }
        handlePointerdown(event) {
            if (event.pointerType === 'touch') {
                this.open = true;
            }
            this.setPointerCapture(event.pointerId);
        }
        handlePointerup(event) {
            this.open = false;
            this.releasePointerCapture(event.pointerId);
        }
        render() {
            return html `
            <div class="color" style="background-color: ${this.color}"></div>
            <sp-color-loupe
                color=${this.color}
                ?open=${this.open && !this.disabled}
            ></sp-color-loupe>
        `;
        }
        firstUpdated(changed) {
            super.firstUpdated(changed);
            this.addEventListener('pointerdown', this.handlePointerdown);
            this.addEventListener('pointerup', this.handlePointerup);
            this.addEventListener('pointercancel', this.handlePointerup);
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ColorHandle.prototype, "disabled", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ColorHandle.prototype, "open", void 0);
    __decorate([
        property({ type: String })
    ], ColorHandle.prototype, "color", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-color-handle', ColorHandle);

    /**
     * Take input from [0, n] and return it as [0, 1]
     * @hidden
     */
    function bound01$1(n, max) {
        if (isOnePointZero$1(n)) {
            n = '100%';
        }
        var isPercent = isPercentage$1(n);
        n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));
        // Automatically convert percentage into number
        if (isPercent) {
            n = parseInt(String(n * max), 10) / 100;
        }
        // Handle floating point rounding errors
        if (Math.abs(n - max) < 0.000001) {
            return 1;
        }
        // Convert into [0, 1] range if it isn't already
        if (max === 360) {
            // If n is a hue given in degrees,
            // wrap around out-of-range values into [0, 360] range
            // then convert into [0, 1].
            n = (n < 0 ? (n % max) + max : n % max) / parseFloat(String(max));
        }
        else {
            // If n not a hue given in degrees
            // Convert into [0, 1] range if it isn't already.
            n = (n % max) / parseFloat(String(max));
        }
        return n;
    }
    /**
     * Force a number between 0 and 1
     * @hidden
     */
    function clamp01$1(val) {
        return Math.min(1, Math.max(0, val));
    }
    /**
     * Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
     * <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
     * @hidden
     */
    function isOnePointZero$1(n) {
        return typeof n === 'string' && n.indexOf('.') !== -1 && parseFloat(n) === 1;
    }
    /**
     * Check to see if string passed in is a percentage
     * @hidden
     */
    function isPercentage$1(n) {
        return typeof n === 'string' && n.indexOf('%') !== -1;
    }
    /**
     * Return a valid alpha value [0,1] with all invalid values being set to 1
     * @hidden
     */
    function boundAlpha$1(a) {
        a = parseFloat(a);
        if (isNaN(a) || a < 0 || a > 1) {
            a = 1;
        }
        return a;
    }
    /**
     * Replace a decimal with it's percentage value
     * @hidden
     */
    function convertToPercentage$1(n) {
        if (n <= 1) {
            return Number(n) * 100 + "%";
        }
        return n;
    }
    /**
     * Force a hex value to have 2 characters
     * @hidden
     */
    function pad2$1(c) {
        return c.length === 1 ? '0' + c : String(c);
    }

    // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
    // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>
    /**
     * Handle bounds / percentage checking to conform to CSS color spec
     * <http://www.w3.org/TR/css3-color/>
     * *Assumes:* r, g, b in [0, 255] or [0, 1]
     * *Returns:* { r, g, b } in [0, 255]
     */
    function rgbToRgb$1(r, g, b) {
        return {
            r: bound01$1(r, 255) * 255,
            g: bound01$1(g, 255) * 255,
            b: bound01$1(b, 255) * 255,
        };
    }
    /**
     * Converts an RGB color value to HSL.
     * *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
     * *Returns:* { h, s, l } in [0,1]
     */
    function rgbToHsl$1(r, g, b) {
        r = bound01$1(r, 255);
        g = bound01$1(g, 255);
        b = bound01$1(b, 255);
        var max = Math.max(r, g, b);
        var min = Math.min(r, g, b);
        var h = 0;
        var s = 0;
        var l = (max + min) / 2;
        if (max === min) {
            s = 0;
            h = 0; // achromatic
        }
        else {
            var d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            switch (max) {
                case r:
                    h = (g - b) / d + (g < b ? 6 : 0);
                    break;
                case g:
                    h = (b - r) / d + 2;
                    break;
                case b:
                    h = (r - g) / d + 4;
                    break;
            }
            h /= 6;
        }
        return { h: h, s: s, l: l };
    }
    function hue2rgb(p, q, t) {
        if (t < 0) {
            t += 1;
        }
        if (t > 1) {
            t -= 1;
        }
        if (t < 1 / 6) {
            return p + (q - p) * (6 * t);
        }
        if (t < 1 / 2) {
            return q;
        }
        if (t < 2 / 3) {
            return p + (q - p) * (2 / 3 - t) * 6;
        }
        return p;
    }
    /**
     * Converts an HSL color value to RGB.
     *
     * *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
     * *Returns:* { r, g, b } in the set [0, 255]
     */
    function hslToRgb$1(h, s, l) {
        var r;
        var g;
        var b;
        h = bound01$1(h, 360);
        s = bound01$1(s, 100);
        l = bound01$1(l, 100);
        if (s === 0) {
            // achromatic
            g = l;
            b = l;
            r = l;
        }
        else {
            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            var p = 2 * l - q;
            r = hue2rgb(p, q, h + 1 / 3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1 / 3);
        }
        return { r: r * 255, g: g * 255, b: b * 255 };
    }
    /**
     * Converts an RGB color value to HSV
     *
     * *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
     * *Returns:* { h, s, v } in [0,1]
     */
    function rgbToHsv$1(r, g, b) {
        r = bound01$1(r, 255);
        g = bound01$1(g, 255);
        b = bound01$1(b, 255);
        var max = Math.max(r, g, b);
        var min = Math.min(r, g, b);
        var h = 0;
        var v = max;
        var d = max - min;
        var s = max === 0 ? 0 : d / max;
        if (max === min) {
            h = 0; // achromatic
        }
        else {
            switch (max) {
                case r:
                    h = (g - b) / d + (g < b ? 6 : 0);
                    break;
                case g:
                    h = (b - r) / d + 2;
                    break;
                case b:
                    h = (r - g) / d + 4;
                    break;
            }
            h /= 6;
        }
        return { h: h, s: s, v: v };
    }
    /**
     * Converts an HSV color value to RGB.
     *
     * *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
     * *Returns:* { r, g, b } in the set [0, 255]
     */
    function hsvToRgb$1(h, s, v) {
        h = bound01$1(h, 360) * 6;
        s = bound01$1(s, 100);
        v = bound01$1(v, 100);
        var i = Math.floor(h);
        var f = h - i;
        var p = v * (1 - s);
        var q = v * (1 - f * s);
        var t = v * (1 - (1 - f) * s);
        var mod = i % 6;
        var r = [v, q, p, p, t, v][mod];
        var g = [t, v, v, q, p, p][mod];
        var b = [p, p, t, v, v, q][mod];
        return { r: r * 255, g: g * 255, b: b * 255 };
    }
    /**
     * Converts an RGB color to hex
     *
     * Assumes r, g, and b are contained in the set [0, 255]
     * Returns a 3 or 6 character hex
     */
    function rgbToHex$1(r, g, b, allow3Char) {
        var hex = [
            pad2$1(Math.round(r).toString(16)),
            pad2$1(Math.round(g).toString(16)),
            pad2$1(Math.round(b).toString(16)),
        ];
        // Return a 3 character hex if possible
        if (allow3Char &&
            hex[0].startsWith(hex[0].charAt(1)) &&
            hex[1].startsWith(hex[1].charAt(1)) &&
            hex[2].startsWith(hex[2].charAt(1))) {
            return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
        }
        return hex.join('');
    }
    /**
     * Converts an RGBA color plus alpha transparency to hex
     *
     * Assumes r, g, b are contained in the set [0, 255] and
     * a in [0, 1]. Returns a 4 or 8 character rgba hex
     */
    // eslint-disable-next-line max-params
    function rgbaToHex$1(r, g, b, a, allow4Char) {
        var hex = [
            pad2$1(Math.round(r).toString(16)),
            pad2$1(Math.round(g).toString(16)),
            pad2$1(Math.round(b).toString(16)),
            pad2$1(convertDecimalToHex$1(a)),
        ];
        // Return a 4 character hex if possible
        if (allow4Char &&
            hex[0].startsWith(hex[0].charAt(1)) &&
            hex[1].startsWith(hex[1].charAt(1)) &&
            hex[2].startsWith(hex[2].charAt(1)) &&
            hex[3].startsWith(hex[3].charAt(1))) {
            return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
        }
        return hex.join('');
    }
    /** Converts a decimal to a hex value */
    function convertDecimalToHex$1(d) {
        return Math.round(parseFloat(d) * 255).toString(16);
    }
    /** Converts a hex value to a decimal */
    function convertHexToDecimal$1(h) {
        return parseIntFromHex$1(h) / 255;
    }
    /** Parse a base-16 hex value into a base-10 integer */
    function parseIntFromHex$1(val) {
        return parseInt(val, 16);
    }
    function numberInputToObject(color) {
        return {
            r: color >> 16,
            g: (color & 0xff00) >> 8,
            b: color & 0xff,
        };
    }

    // https://github.com/bahamas10/css-color-names/blob/master/css-color-names.json
    /**
     * @hidden
     */
    var names$1 = {
        aliceblue: '#f0f8ff',
        antiquewhite: '#faebd7',
        aqua: '#00ffff',
        aquamarine: '#7fffd4',
        azure: '#f0ffff',
        beige: '#f5f5dc',
        bisque: '#ffe4c4',
        black: '#000000',
        blanchedalmond: '#ffebcd',
        blue: '#0000ff',
        blueviolet: '#8a2be2',
        brown: '#a52a2a',
        burlywood: '#deb887',
        cadetblue: '#5f9ea0',
        chartreuse: '#7fff00',
        chocolate: '#d2691e',
        coral: '#ff7f50',
        cornflowerblue: '#6495ed',
        cornsilk: '#fff8dc',
        crimson: '#dc143c',
        cyan: '#00ffff',
        darkblue: '#00008b',
        darkcyan: '#008b8b',
        darkgoldenrod: '#b8860b',
        darkgray: '#a9a9a9',
        darkgreen: '#006400',
        darkgrey: '#a9a9a9',
        darkkhaki: '#bdb76b',
        darkmagenta: '#8b008b',
        darkolivegreen: '#556b2f',
        darkorange: '#ff8c00',
        darkorchid: '#9932cc',
        darkred: '#8b0000',
        darksalmon: '#e9967a',
        darkseagreen: '#8fbc8f',
        darkslateblue: '#483d8b',
        darkslategray: '#2f4f4f',
        darkslategrey: '#2f4f4f',
        darkturquoise: '#00ced1',
        darkviolet: '#9400d3',
        deeppink: '#ff1493',
        deepskyblue: '#00bfff',
        dimgray: '#696969',
        dimgrey: '#696969',
        dodgerblue: '#1e90ff',
        firebrick: '#b22222',
        floralwhite: '#fffaf0',
        forestgreen: '#228b22',
        fuchsia: '#ff00ff',
        gainsboro: '#dcdcdc',
        ghostwhite: '#f8f8ff',
        goldenrod: '#daa520',
        gold: '#ffd700',
        gray: '#808080',
        green: '#008000',
        greenyellow: '#adff2f',
        grey: '#808080',
        honeydew: '#f0fff0',
        hotpink: '#ff69b4',
        indianred: '#cd5c5c',
        indigo: '#4b0082',
        ivory: '#fffff0',
        khaki: '#f0e68c',
        lavenderblush: '#fff0f5',
        lavender: '#e6e6fa',
        lawngreen: '#7cfc00',
        lemonchiffon: '#fffacd',
        lightblue: '#add8e6',
        lightcoral: '#f08080',
        lightcyan: '#e0ffff',
        lightgoldenrodyellow: '#fafad2',
        lightgray: '#d3d3d3',
        lightgreen: '#90ee90',
        lightgrey: '#d3d3d3',
        lightpink: '#ffb6c1',
        lightsalmon: '#ffa07a',
        lightseagreen: '#20b2aa',
        lightskyblue: '#87cefa',
        lightslategray: '#778899',
        lightslategrey: '#778899',
        lightsteelblue: '#b0c4de',
        lightyellow: '#ffffe0',
        lime: '#00ff00',
        limegreen: '#32cd32',
        linen: '#faf0e6',
        magenta: '#ff00ff',
        maroon: '#800000',
        mediumaquamarine: '#66cdaa',
        mediumblue: '#0000cd',
        mediumorchid: '#ba55d3',
        mediumpurple: '#9370db',
        mediumseagreen: '#3cb371',
        mediumslateblue: '#7b68ee',
        mediumspringgreen: '#00fa9a',
        mediumturquoise: '#48d1cc',
        mediumvioletred: '#c71585',
        midnightblue: '#191970',
        mintcream: '#f5fffa',
        mistyrose: '#ffe4e1',
        moccasin: '#ffe4b5',
        navajowhite: '#ffdead',
        navy: '#000080',
        oldlace: '#fdf5e6',
        olive: '#808000',
        olivedrab: '#6b8e23',
        orange: '#ffa500',
        orangered: '#ff4500',
        orchid: '#da70d6',
        palegoldenrod: '#eee8aa',
        palegreen: '#98fb98',
        paleturquoise: '#afeeee',
        palevioletred: '#db7093',
        papayawhip: '#ffefd5',
        peachpuff: '#ffdab9',
        peru: '#cd853f',
        pink: '#ffc0cb',
        plum: '#dda0dd',
        powderblue: '#b0e0e6',
        purple: '#800080',
        rebeccapurple: '#663399',
        red: '#ff0000',
        rosybrown: '#bc8f8f',
        royalblue: '#4169e1',
        saddlebrown: '#8b4513',
        salmon: '#fa8072',
        sandybrown: '#f4a460',
        seagreen: '#2e8b57',
        seashell: '#fff5ee',
        sienna: '#a0522d',
        silver: '#c0c0c0',
        skyblue: '#87ceeb',
        slateblue: '#6a5acd',
        slategray: '#708090',
        slategrey: '#708090',
        snow: '#fffafa',
        springgreen: '#00ff7f',
        steelblue: '#4682b4',
        tan: '#d2b48c',
        teal: '#008080',
        thistle: '#d8bfd8',
        tomato: '#ff6347',
        turquoise: '#40e0d0',
        violet: '#ee82ee',
        wheat: '#f5deb3',
        white: '#ffffff',
        whitesmoke: '#f5f5f5',
        yellow: '#ffff00',
        yellowgreen: '#9acd32',
    };

    /**
     * Given a string or object, convert that input to RGB
     *
     * Possible string inputs:
     * ```
     * "red"
     * "#f00" or "f00"
     * "#ff0000" or "ff0000"
     * "#ff000000" or "ff000000"
     * "rgb 255 0 0" or "rgb (255, 0, 0)"
     * "rgb 1.0 0 0" or "rgb (1, 0, 0)"
     * "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
     * "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
     * "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
     * "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
     * "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
     * ```
     */
    function inputToRGB$1(color) {
        var rgb = { r: 0, g: 0, b: 0 };
        var a = 1;
        var s = null;
        var v = null;
        var l = null;
        var ok = false;
        var format = false;
        if (typeof color === 'string') {
            color = stringInputToObject$1(color);
        }
        if (typeof color === 'object') {
            if (isValidCSSUnit$1(color.r) && isValidCSSUnit$1(color.g) && isValidCSSUnit$1(color.b)) {
                rgb = rgbToRgb$1(color.r, color.g, color.b);
                ok = true;
                format = String(color.r).substr(-1) === '%' ? 'prgb' : 'rgb';
            }
            else if (isValidCSSUnit$1(color.h) && isValidCSSUnit$1(color.s) && isValidCSSUnit$1(color.v)) {
                s = convertToPercentage$1(color.s);
                v = convertToPercentage$1(color.v);
                rgb = hsvToRgb$1(color.h, s, v);
                ok = true;
                format = 'hsv';
            }
            else if (isValidCSSUnit$1(color.h) && isValidCSSUnit$1(color.s) && isValidCSSUnit$1(color.l)) {
                s = convertToPercentage$1(color.s);
                l = convertToPercentage$1(color.l);
                rgb = hslToRgb$1(color.h, s, l);
                ok = true;
                format = 'hsl';
            }
            if (Object.prototype.hasOwnProperty.call(color, 'a')) {
                a = color.a;
            }
        }
        a = boundAlpha$1(a);
        return {
            ok: ok,
            format: color.format || format,
            r: Math.min(255, Math.max(rgb.r, 0)),
            g: Math.min(255, Math.max(rgb.g, 0)),
            b: Math.min(255, Math.max(rgb.b, 0)),
            a: a,
        };
    }
    // <http://www.w3.org/TR/css3-values/#integers>
    var CSS_INTEGER = '[-\\+]?\\d+%?';
    // <http://www.w3.org/TR/css3-values/#number-value>
    var CSS_NUMBER = '[-\\+]?\\d*\\.\\d+%?';
    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
    // Actual matching.
    // Parentheses and commas are optional, but not required.
    // Whitespace can take the place of commas or opening paren
    var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    var matchers$1 = {
        CSS_UNIT: new RegExp(CSS_UNIT),
        rgb: new RegExp('rgb' + PERMISSIVE_MATCH3),
        rgba: new RegExp('rgba' + PERMISSIVE_MATCH4),
        hsl: new RegExp('hsl' + PERMISSIVE_MATCH3),
        hsla: new RegExp('hsla' + PERMISSIVE_MATCH4),
        hsv: new RegExp('hsv' + PERMISSIVE_MATCH3),
        hsva: new RegExp('hsva' + PERMISSIVE_MATCH4),
        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
    };
    /**
     * Permissive string parsing.  Take in a number of formats, and output an object
     * based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
     */
    function stringInputToObject$1(color) {
        color = color.trim().toLowerCase();
        if (color.length === 0) {
            return false;
        }
        var named = false;
        if (names$1[color]) {
            color = names$1[color];
            named = true;
        }
        else if (color === 'transparent') {
            return { r: 0, g: 0, b: 0, a: 0, format: 'name' };
        }
        // Try to match string input using regular expressions.
        // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
        // Just return an object and let the conversion functions handle that.
        // This way the result will be the same whether the tinycolor is initialized with string or object.
        var match = matchers$1.rgb.exec(color);
        if (match) {
            return { r: match[1], g: match[2], b: match[3] };
        }
        match = matchers$1.rgba.exec(color);
        if (match) {
            return { r: match[1], g: match[2], b: match[3], a: match[4] };
        }
        match = matchers$1.hsl.exec(color);
        if (match) {
            return { h: match[1], s: match[2], l: match[3] };
        }
        match = matchers$1.hsla.exec(color);
        if (match) {
            return { h: match[1], s: match[2], l: match[3], a: match[4] };
        }
        match = matchers$1.hsv.exec(color);
        if (match) {
            return { h: match[1], s: match[2], v: match[3] };
        }
        match = matchers$1.hsva.exec(color);
        if (match) {
            return { h: match[1], s: match[2], v: match[3], a: match[4] };
        }
        match = matchers$1.hex8.exec(color);
        if (match) {
            return {
                r: parseIntFromHex$1(match[1]),
                g: parseIntFromHex$1(match[2]),
                b: parseIntFromHex$1(match[3]),
                a: convertHexToDecimal$1(match[4]),
                format: named ? 'name' : 'hex8',
            };
        }
        match = matchers$1.hex6.exec(color);
        if (match) {
            return {
                r: parseIntFromHex$1(match[1]),
                g: parseIntFromHex$1(match[2]),
                b: parseIntFromHex$1(match[3]),
                format: named ? 'name' : 'hex',
            };
        }
        match = matchers$1.hex4.exec(color);
        if (match) {
            return {
                r: parseIntFromHex$1(match[1] + match[1]),
                g: parseIntFromHex$1(match[2] + match[2]),
                b: parseIntFromHex$1(match[3] + match[3]),
                a: convertHexToDecimal$1(match[4] + match[4]),
                format: named ? 'name' : 'hex8',
            };
        }
        match = matchers$1.hex3.exec(color);
        if (match) {
            return {
                r: parseIntFromHex$1(match[1] + match[1]),
                g: parseIntFromHex$1(match[2] + match[2]),
                b: parseIntFromHex$1(match[3] + match[3]),
                format: named ? 'name' : 'hex',
            };
        }
        return false;
    }
    /**
     * Check to see if it looks like a CSS unit
     * (see `matchers` above for definition).
     */
    function isValidCSSUnit$1(color) {
        return Boolean(matchers$1.CSS_UNIT.exec(String(color)));
    }

    var TinyColor = /** @class */ (function () {
        function TinyColor(color, opts) {
            if (color === void 0) { color = ''; }
            if (opts === void 0) { opts = {}; }
            var _a;
            // If input is already a tinycolor, return itself
            if (color instanceof TinyColor) {
                // eslint-disable-next-line no-constructor-return
                return color;
            }
            if (typeof color === 'number') {
                color = numberInputToObject(color);
            }
            this.originalInput = color;
            var rgb = inputToRGB$1(color);
            this.originalInput = color;
            this.r = rgb.r;
            this.g = rgb.g;
            this.b = rgb.b;
            this.a = rgb.a;
            this.roundA = Math.round(100 * this.a) / 100;
            this.format = (_a = opts.format) !== null && _a !== void 0 ? _a : rgb.format;
            this.gradientType = opts.gradientType;
            // Don't let the range of [0,255] come back in [0,1].
            // Potentially lose a little bit of precision here, but will fix issues where
            // .5 gets interpreted as half of the total, instead of half of 1
            // If it was supposed to be 128, this was already taken care of by `inputToRgb`
            if (this.r < 1) {
                this.r = Math.round(this.r);
            }
            if (this.g < 1) {
                this.g = Math.round(this.g);
            }
            if (this.b < 1) {
                this.b = Math.round(this.b);
            }
            this.isValid = rgb.ok;
        }
        TinyColor.prototype.isDark = function () {
            return this.getBrightness() < 128;
        };
        TinyColor.prototype.isLight = function () {
            return !this.isDark();
        };
        /**
         * Returns the perceived brightness of the color, from 0-255.
         */
        TinyColor.prototype.getBrightness = function () {
            // http://www.w3.org/TR/AERT#color-contrast
            var rgb = this.toRgb();
            return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
        };
        /**
         * Returns the perceived luminance of a color, from 0-1.
         */
        TinyColor.prototype.getLuminance = function () {
            // http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
            var rgb = this.toRgb();
            var R;
            var G;
            var B;
            var RsRGB = rgb.r / 255;
            var GsRGB = rgb.g / 255;
            var BsRGB = rgb.b / 255;
            if (RsRGB <= 0.03928) {
                R = RsRGB / 12.92;
            }
            else {
                // eslint-disable-next-line prefer-exponentiation-operator
                R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
            }
            if (GsRGB <= 0.03928) {
                G = GsRGB / 12.92;
            }
            else {
                // eslint-disable-next-line prefer-exponentiation-operator
                G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
            }
            if (BsRGB <= 0.03928) {
                B = BsRGB / 12.92;
            }
            else {
                // eslint-disable-next-line prefer-exponentiation-operator
                B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
            }
            return 0.2126 * R + 0.7152 * G + 0.0722 * B;
        };
        /**
         * Returns the alpha value of a color, from 0-1.
         */
        TinyColor.prototype.getAlpha = function () {
            return this.a;
        };
        /**
         * Sets the alpha value on the current color.
         *
         * @param alpha - The new alpha value. The accepted range is 0-1.
         */
        TinyColor.prototype.setAlpha = function (alpha) {
            this.a = boundAlpha$1(alpha);
            this.roundA = Math.round(100 * this.a) / 100;
            return this;
        };
        /**
         * Returns the object as a HSVA object.
         */
        TinyColor.prototype.toHsv = function () {
            var hsv = rgbToHsv$1(this.r, this.g, this.b);
            return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };
        };
        /**
         * Returns the hsva values interpolated into a string with the following format:
         * "hsva(xxx, xxx, xxx, xx)".
         */
        TinyColor.prototype.toHsvString = function () {
            var hsv = rgbToHsv$1(this.r, this.g, this.b);
            var h = Math.round(hsv.h * 360);
            var s = Math.round(hsv.s * 100);
            var v = Math.round(hsv.v * 100);
            return this.a === 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this.roundA + ")";
        };
        /**
         * Returns the object as a HSLA object.
         */
        TinyColor.prototype.toHsl = function () {
            var hsl = rgbToHsl$1(this.r, this.g, this.b);
            return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };
        };
        /**
         * Returns the hsla values interpolated into a string with the following format:
         * "hsla(xxx, xxx, xxx, xx)".
         */
        TinyColor.prototype.toHslString = function () {
            var hsl = rgbToHsl$1(this.r, this.g, this.b);
            var h = Math.round(hsl.h * 360);
            var s = Math.round(hsl.s * 100);
            var l = Math.round(hsl.l * 100);
            return this.a === 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this.roundA + ")";
        };
        /**
         * Returns the hex value of the color.
         * @param allow3Char will shorten hex value to 3 char if possible
         */
        TinyColor.prototype.toHex = function (allow3Char) {
            if (allow3Char === void 0) { allow3Char = false; }
            return rgbToHex$1(this.r, this.g, this.b, allow3Char);
        };
        /**
         * Returns the hex value of the color -with a # appened.
         * @param allow3Char will shorten hex value to 3 char if possible
         */
        TinyColor.prototype.toHexString = function (allow3Char) {
            if (allow3Char === void 0) { allow3Char = false; }
            return '#' + this.toHex(allow3Char);
        };
        /**
         * Returns the hex 8 value of the color.
         * @param allow4Char will shorten hex value to 4 char if possible
         */
        TinyColor.prototype.toHex8 = function (allow4Char) {
            if (allow4Char === void 0) { allow4Char = false; }
            return rgbaToHex$1(this.r, this.g, this.b, this.a, allow4Char);
        };
        /**
         * Returns the hex 8 value of the color -with a # appened.
         * @param allow4Char will shorten hex value to 4 char if possible
         */
        TinyColor.prototype.toHex8String = function (allow4Char) {
            if (allow4Char === void 0) { allow4Char = false; }
            return '#' + this.toHex8(allow4Char);
        };
        /**
         * Returns the object as a RGBA object.
         */
        TinyColor.prototype.toRgb = function () {
            return {
                r: Math.round(this.r),
                g: Math.round(this.g),
                b: Math.round(this.b),
                a: this.a,
            };
        };
        /**
         * Returns the RGBA values interpolated into a string with the following format:
         * "RGBA(xxx, xxx, xxx, xx)".
         */
        TinyColor.prototype.toRgbString = function () {
            var r = Math.round(this.r);
            var g = Math.round(this.g);
            var b = Math.round(this.b);
            return this.a === 1 ? "rgb(" + r + ", " + g + ", " + b + ")" : "rgba(" + r + ", " + g + ", " + b + ", " + this.roundA + ")";
        };
        /**
         * Returns the object as a RGBA object.
         */
        TinyColor.prototype.toPercentageRgb = function () {
            var fmt = function (x) { return Math.round(bound01$1(x, 255) * 100) + "%"; };
            return {
                r: fmt(this.r),
                g: fmt(this.g),
                b: fmt(this.b),
                a: this.a,
            };
        };
        /**
         * Returns the RGBA relative values interpolated into a string
         */
        TinyColor.prototype.toPercentageRgbString = function () {
            var rnd = function (x) { return Math.round(bound01$1(x, 255) * 100); };
            return this.a === 1
                ? "rgb(" + rnd(this.r) + "%, " + rnd(this.g) + "%, " + rnd(this.b) + "%)"
                : "rgba(" + rnd(this.r) + "%, " + rnd(this.g) + "%, " + rnd(this.b) + "%, " + this.roundA + ")";
        };
        /**
         * The 'real' name of the color -if there is one.
         */
        TinyColor.prototype.toName = function () {
            if (this.a === 0) {
                return 'transparent';
            }
            if (this.a < 1) {
                return false;
            }
            var hex = '#' + rgbToHex$1(this.r, this.g, this.b, false);
            for (var _i = 0, _a = Object.entries(names$1); _i < _a.length; _i++) {
                var _b = _a[_i], key = _b[0], value = _b[1];
                if (hex === value) {
                    return key;
                }
            }
            return false;
        };
        TinyColor.prototype.toString = function (format) {
            var formatSet = Boolean(format);
            format = format !== null && format !== void 0 ? format : this.format;
            var formattedString = false;
            var hasAlpha = this.a < 1 && this.a >= 0;
            var needsAlphaFormat = !formatSet && hasAlpha && (format.startsWith('hex') || format === 'name');
            if (needsAlphaFormat) {
                // Special case for "transparent", all other non-alpha formats
                // will return rgba when there is transparency.
                if (format === 'name' && this.a === 0) {
                    return this.toName();
                }
                return this.toRgbString();
            }
            if (format === 'rgb') {
                formattedString = this.toRgbString();
            }
            if (format === 'prgb') {
                formattedString = this.toPercentageRgbString();
            }
            if (format === 'hex' || format === 'hex6') {
                formattedString = this.toHexString();
            }
            if (format === 'hex3') {
                formattedString = this.toHexString(true);
            }
            if (format === 'hex4') {
                formattedString = this.toHex8String(true);
            }
            if (format === 'hex8') {
                formattedString = this.toHex8String();
            }
            if (format === 'name') {
                formattedString = this.toName();
            }
            if (format === 'hsl') {
                formattedString = this.toHslString();
            }
            if (format === 'hsv') {
                formattedString = this.toHsvString();
            }
            return formattedString || this.toHexString();
        };
        TinyColor.prototype.toNumber = function () {
            return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
        };
        TinyColor.prototype.clone = function () {
            return new TinyColor(this.toString());
        };
        /**
         * Lighten the color a given amount. Providing 100 will always return white.
         * @param amount - valid between 1-100
         */
        TinyColor.prototype.lighten = function (amount) {
            if (amount === void 0) { amount = 10; }
            var hsl = this.toHsl();
            hsl.l += amount / 100;
            hsl.l = clamp01$1(hsl.l);
            return new TinyColor(hsl);
        };
        /**
         * Brighten the color a given amount, from 0 to 100.
         * @param amount - valid between 1-100
         */
        TinyColor.prototype.brighten = function (amount) {
            if (amount === void 0) { amount = 10; }
            var rgb = this.toRgb();
            rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
            rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
            rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
            return new TinyColor(rgb);
        };
        /**
         * Darken the color a given amount, from 0 to 100.
         * Providing 100 will always return black.
         * @param amount - valid between 1-100
         */
        TinyColor.prototype.darken = function (amount) {
            if (amount === void 0) { amount = 10; }
            var hsl = this.toHsl();
            hsl.l -= amount / 100;
            hsl.l = clamp01$1(hsl.l);
            return new TinyColor(hsl);
        };
        /**
         * Mix the color with pure white, from 0 to 100.
         * Providing 0 will do nothing, providing 100 will always return white.
         * @param amount - valid between 1-100
         */
        TinyColor.prototype.tint = function (amount) {
            if (amount === void 0) { amount = 10; }
            return this.mix('white', amount);
        };
        /**
         * Mix the color with pure black, from 0 to 100.
         * Providing 0 will do nothing, providing 100 will always return black.
         * @param amount - valid between 1-100
         */
        TinyColor.prototype.shade = function (amount) {
            if (amount === void 0) { amount = 10; }
            return this.mix('black', amount);
        };
        /**
         * Desaturate the color a given amount, from 0 to 100.
         * Providing 100 will is the same as calling greyscale
         * @param amount - valid between 1-100
         */
        TinyColor.prototype.desaturate = function (amount) {
            if (amount === void 0) { amount = 10; }
            var hsl = this.toHsl();
            hsl.s -= amount / 100;
            hsl.s = clamp01$1(hsl.s);
            return new TinyColor(hsl);
        };
        /**
         * Saturate the color a given amount, from 0 to 100.
         * @param amount - valid between 1-100
         */
        TinyColor.prototype.saturate = function (amount) {
            if (amount === void 0) { amount = 10; }
            var hsl = this.toHsl();
            hsl.s += amount / 100;
            hsl.s = clamp01$1(hsl.s);
            return new TinyColor(hsl);
        };
        /**
         * Completely desaturates a color into greyscale.
         * Same as calling `desaturate(100)`
         */
        TinyColor.prototype.greyscale = function () {
            return this.desaturate(100);
        };
        /**
         * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
         * Values outside of this range will be wrapped into this range.
         */
        TinyColor.prototype.spin = function (amount) {
            var hsl = this.toHsl();
            var hue = (hsl.h + amount) % 360;
            hsl.h = hue < 0 ? 360 + hue : hue;
            return new TinyColor(hsl);
        };
        /**
         * Mix the current color a given amount with another color, from 0 to 100.
         * 0 means no mixing (return current color).
         */
        TinyColor.prototype.mix = function (color, amount) {
            if (amount === void 0) { amount = 50; }
            var rgb1 = this.toRgb();
            var rgb2 = new TinyColor(color).toRgb();
            var p = amount / 100;
            var rgba = {
                r: (rgb2.r - rgb1.r) * p + rgb1.r,
                g: (rgb2.g - rgb1.g) * p + rgb1.g,
                b: (rgb2.b - rgb1.b) * p + rgb1.b,
                a: (rgb2.a - rgb1.a) * p + rgb1.a,
            };
            return new TinyColor(rgba);
        };
        TinyColor.prototype.analogous = function (results, slices) {
            if (results === void 0) { results = 6; }
            if (slices === void 0) { slices = 30; }
            var hsl = this.toHsl();
            var part = 360 / slices;
            var ret = [this];
            for (hsl.h = (hsl.h - ((part * results) >> 1) + 720) % 360; --results;) {
                hsl.h = (hsl.h + part) % 360;
                ret.push(new TinyColor(hsl));
            }
            return ret;
        };
        /**
         * taken from https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js
         */
        TinyColor.prototype.complement = function () {
            var hsl = this.toHsl();
            hsl.h = (hsl.h + 180) % 360;
            return new TinyColor(hsl);
        };
        TinyColor.prototype.monochromatic = function (results) {
            if (results === void 0) { results = 6; }
            var hsv = this.toHsv();
            var h = hsv.h;
            var s = hsv.s;
            var v = hsv.v;
            var res = [];
            var modification = 1 / results;
            while (results--) {
                res.push(new TinyColor({ h: h, s: s, v: v }));
                v = (v + modification) % 1;
            }
            return res;
        };
        TinyColor.prototype.splitcomplement = function () {
            var hsl = this.toHsl();
            var h = hsl.h;
            return [
                this,
                new TinyColor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),
                new TinyColor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l }),
            ];
        };
        /**
         * Compute how the color would appear on a background
         */
        TinyColor.prototype.onBackground = function (background) {
            var fg = this.toRgb();
            var bg = new TinyColor(background).toRgb();
            return new TinyColor({
                r: bg.r + (fg.r - bg.r) * fg.a,
                g: bg.g + (fg.g - bg.g) * fg.a,
                b: bg.b + (fg.b - bg.b) * fg.a,
            });
        };
        /**
         * Alias for `polyad(3)`
         */
        TinyColor.prototype.triad = function () {
            return this.polyad(3);
        };
        /**
         * Alias for `polyad(4)`
         */
        TinyColor.prototype.tetrad = function () {
            return this.polyad(4);
        };
        /**
         * Get polyad colors, like (for 1, 2, 3, 4, 5, 6, 7, 8, etc...)
         * monad, dyad, triad, tetrad, pentad, hexad, heptad, octad, etc...
         */
        TinyColor.prototype.polyad = function (n) {
            var hsl = this.toHsl();
            var h = hsl.h;
            var result = [this];
            var increment = 360 / n;
            for (var i = 1; i < n; i++) {
                result.push(new TinyColor({ h: (h + i * increment) % 360, s: hsl.s, l: hsl.l }));
            }
            return result;
        };
        /**
         * compare color vs current color
         */
        TinyColor.prototype.equals = function (color) {
            return this.toRgbString() === new TinyColor(color).toRgbString();
        };
        return TinyColor;
    }());

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$C = css `
.slider{opacity:.0001;position:absolute;top:0;left:0;width:100%;height:100%;z-index:0;margin:0;pointer-events:none}:host([focused]) .handle{width:calc(var(--spectrum-colorhandle-size,
var(--spectrum-global-dimension-size-200))*2);height:calc(var(--spectrum-colorhandle-size,
var(--spectrum-global-dimension-size-200))*2);margin-left:calc(-1*var(--spectrum-colorhandle-size, var(--spectrum-global-dimension-size-200)));margin-top:calc(-1*var(--spectrum-colorhandle-size, var(--spectrum-global-dimension-size-200)))}:host{position:relative;display:inline-block;width:var(--spectrum-colorarea-default-width,var(--spectrum-global-dimension-size-2400));height:var(--spectrum-colorarea-default-height,var(--spectrum-global-dimension-size-2400));border-radius:var(--spectrum-colorarea-border-radius,var(--spectrum-alias-border-radius-regular));cursor:default;-webkit-user-select:none;user-select:none}:host([focused]){z-index:2}:host([disabled]){pointer-events:none}:host:before{content:"";z-index:1;position:absolute;top:0;left:0;bottom:0;right:0;border-radius:var(--spectrum-colorarea-border-radius,var(--spectrum-alias-border-radius-regular))}.handle{left:0;top:0}.gradient{width:100%;height:100%;border-radius:var(--spectrum-colorarea-border-radius,var(--spectrum-alias-border-radius-regular))}:host:before{box-shadow:inset 0 0 0 var(--spectrum-colorarea-border-size,var(--spectrum-alias-border-size-thin)) var(--spectrum-colorarea-border-color)}.gradient{forced-color-adjust:none}:host([disabled]){background:var(--spectrum-colorarea-fill-color-disabled,var(--spectrum-global-color-gray-300))}:host([disabled]):before{box-shadow:inset 0 0 0 var(--spectrum-colorarea-border-size,var(--spectrum-alias-border-size-thin)) var(--spectrum-colorarea-border-color-disabled,var(--spectrum-global-color-gray-300))}:host([disabled]) .gradient{display:none}@media (forced-colors:active){:host{--spectrum-colorarea-fill-color-disabled:GrayText}:host([disabled]){forced-color-adjust:none}}:host:before{pointer-events:none}.gradient{overflow:hidden}.handle{transform:translate(var(--spectrum-colorarea-default-width))}::slotted(*){width:100%;height:100%}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const preventDefault = (event) => event.preventDefault();
    /**
     * @element sp-color-area
     */
    class ColorArea extends SpectrumElement {
        constructor() {
            super(...arguments);
            this.disabled = false;
            this.focused = false;
            this.label = 'saturation and luminosity';
            this._hue = 0;
            this._color = new TinyColor({ h: 0, s: 1, v: 1 });
            this._previousColor = new TinyColor({ h: 0, s: 1, v: 1 });
            this._format = {
                format: '',
                isString: false,
            };
            this.x = 1;
            this.y = 0;
            this.step = 0.01;
            this._altered = 0;
            this.altKeys = new Set();
            this.activeKeys = new Set();
        }
        static get styles() {
            return [styles$C];
        }
        get hue() {
            return this._hue;
        }
        set hue(value) {
            const hue = Math.min(360, Math.max(0, value));
            if (hue === this.hue) {
                return;
            }
            const oldValue = this.hue;
            const { s, v } = this._color.toHsv();
            this._color = new TinyColor({ h: hue, s, v });
            this._hue = hue;
            this.requestUpdate('hue', oldValue);
        }
        get value() {
            return this.color;
        }
        get color() {
            switch (this._format.format) {
                case 'rgb':
                    return this._format.isString
                        ? this._color.toRgbString()
                        : this._color.toRgb();
                case 'prgb':
                    return this._format.isString
                        ? this._color.toPercentageRgbString()
                        : this._color.toPercentageRgb();
                case 'hex8':
                    return this._format.isString
                        ? this._color.toHex8String()
                        : this._color.toHex8();
                case 'name':
                    return this._color.toName() || this._color.toRgbString();
                case 'hsl':
                    return this._format.isString
                        ? this._color.toHslString()
                        : this._color.toHsl();
                case 'hsv':
                    return this._format.isString
                        ? this._color.toHsvString()
                        : this._color.toHsv();
                case 'hex':
                case 'hex3':
                case 'hex4':
                case 'hex6':
                default:
                    return this._format.isString
                        ? this._color.toHexString()
                        : this._color.toHex();
            }
        }
        set color(color) {
            if (color === this.color) {
                return;
            }
            const oldValue = this._color;
            this._color = new TinyColor(color);
            const format = this._color.format;
            let isString = typeof color === 'string' || color instanceof String;
            if (format.startsWith('hex')) {
                isString = color.startsWith('#');
            }
            this._format = {
                format,
                isString,
            };
            const { h, s, v } = this._color.toHsv();
            this.hue = h;
            this.x = s;
            this.y = 1 - v;
            this.requestUpdate('color', oldValue);
        }
        get altered() {
            return this._altered;
        }
        set altered(altered) {
            this._altered = altered;
            this.step = Math.max(0.01, this.altered * 5 * 0.01);
        }
        handleFocusin() {
            this.focused = true;
        }
        handleFocusout() {
            this.focused = false;
        }
        handleKeydown(event) {
            const { key, code } = event;
            if (['Shift', 'Meta', 'Control', 'Alt'].includes(key)) {
                this.altKeys.add(key);
                this.altered = this.altKeys.size;
            }
            if (code.search('Arrow') === 0) {
                this.activeKeys.add(code);
            }
            this.handleKeypress();
        }
        handleKeypress() {
            let deltaX = 0;
            let deltaY = 0;
            this.activeKeys.forEach((code) => {
                switch (code) {
                    case 'ArrowUp':
                    case 'Up':
                        deltaY = this.step * -1;
                        break;
                    case 'ArrowDown':
                    case 'Down':
                        deltaY = this.step * 1;
                        break;
                    case 'ArrowLeft':
                    case 'Left':
                        deltaX = this.step * -1;
                        break;
                    case 'ArrowRight':
                    case 'Right':
                        deltaX = this.step * 1;
                        break;
                }
            });
            if (deltaX) {
                this.inputX.focus();
            }
            else if (deltaY) {
                this.inputY.focus();
            }
            this.x = Math.min(1, Math.max(this.x + deltaX, 0));
            this.y = Math.min(1, Math.max(this.y + deltaY, 0));
            this._previousColor = this._color.clone();
            this._color = new TinyColor({ h: this.hue, s: this.x, v: 1 - this.y });
            const applyDefault = this.dispatchEvent(new Event('change', {
                bubbles: true,
                composed: true,
                cancelable: true,
            }));
            if (!applyDefault) {
                this._color = this._previousColor;
            }
        }
        handleKeyup(event) {
            const { key, code } = event;
            if (['Shift', 'Meta', 'Control', 'Alt'].includes(key)) {
                this.altKeys.delete(key);
                this.altered = this.altKeys.size;
            }
            if (code.search('Arrow') === 0) {
                this.activeKeys.delete(code);
            }
        }
        handleInput(event) {
            const { valueAsNumber, name } = event.target;
            this[name] = valueAsNumber;
            this._color = new TinyColor({ h: this.hue, s: this.x, v: 1 - this.y });
        }
        handlePointerdown(event) {
            if (event.button !== 0) {
                event.preventDefault();
                return;
            }
            this._previousColor = this._color.clone();
            this.boundingClientRect = this.getBoundingClientRect();
            event.target.setPointerCapture(event.pointerId);
            if (event.pointerType === 'mouse') {
                this.handleFocusin();
            }
        }
        handlePointermove(event) {
            const [x, y] = this.calculateHandlePosition(event);
            this._color = new TinyColor({ h: this.hue, s: x, v: 1 - y });
            this.x = x;
            this.y = y;
            this.dispatchEvent(new Event('input', {
                bubbles: true,
                composed: true,
                cancelable: true,
            }));
        }
        handlePointerup(event) {
            event.preventDefault();
            event.target.releasePointerCapture(event.pointerId);
            if (event.pointerType === 'mouse') {
                this.handleFocusout();
            }
            const applyDefault = this.dispatchEvent(new Event('change', {
                bubbles: true,
                composed: true,
                cancelable: true,
            }));
            if (!applyDefault) {
                this._color = this._previousColor;
            }
        }
        /**
         * Returns the value under the cursor
         * @param: PointerEvent on slider
         * @return: Slider value that correlates to the position under the pointer
         */
        calculateHandlePosition(event) {
            /* c8 ignore next 3 */
            if (!this.boundingClientRect) {
                return [this.x, this.y];
            }
            const rect = this.boundingClientRect;
            const minOffsetX = rect.left;
            const minOffsetY = rect.top;
            const offsetX = event.clientX;
            const offsetY = event.clientY;
            const width = rect.width;
            const height = rect.height;
            const percentX = Math.max(0, Math.min(1, (offsetX - minOffsetX) / width));
            const percentY = Math.max(0, Math.min(1, (offsetY - minOffsetY) / height));
            return [percentX, percentY];
        }
        handleAreaPointerdown(event) {
            if (event.button !== 0) {
                return;
            }
            event.stopPropagation();
            event.preventDefault();
            this.handle.dispatchEvent(new PointerEvent('pointerdown', event));
            this.handlePointermove(event);
        }
        render() {
            const { width = 0, height = 0 } = this.boundingClientRect || {};
            return html `
            <div
                @pointerdown=${this.handleAreaPointerdown}
                class="gradient"
                style="background:
                    linear-gradient(to top, black 0%, hsla(${this
            .hue}, 100%, 0%, 0) 100%),
                    linear-gradient(to right, white 0%, hsla(${this
            .hue}, 100%, 0%, 0) 100%), hsl(${this.hue}, 100%, 50%);"
            >
                <slot name="gradient"></slot>
            </div>

            <sp-color-handle
                class="handle"
                color=${this._color.toHslString()}
                ?disabled=${this.disabled}
                style="transform: translate(${this.x * width}px, ${this.y *
            height}px);"
                @manage=${streamingListener({ type: 'pointerdown', fn: this.handlePointerdown }, { type: 'pointermove', fn: this.handlePointermove }, {
            type: ['pointerup', 'pointercancel'],
            fn: this.handlePointerup,
        })}
            ></sp-color-handle>

            <input
                type="range"
                class="slider"
                name="x"
                aria-label=${this.label}
                min="0"
                max="1"
                step=${this.step}
                .value=${String(this.x)}
                @input=${this.handleInput}
                @keydown=${preventDefault}
            />
            <input
                type="range"
                class="slider"
                name="y"
                aria-label=${this.label}
                min="0"
                max="1"
                step=${this.step}
                .value=${String(this.y)}
                @input=${this.handleInput}
                @keydown=${preventDefault}
            />
        `;
        }
        firstUpdated(changed) {
            super.firstUpdated(changed);
            this.boundingClientRect = this.getBoundingClientRect();
            this.addEventListener('focusin', this.handleFocusin);
            this.addEventListener('focusout', this.handleFocusout);
            this.addEventListener('keyup', this.handleKeyup);
            this.addEventListener('keydown', this.handleKeydown);
        }
        connectedCallback() {
            var _a;
            super.connectedCallback();
            if (!this.observer &&
                window.ResizeObserver) {
                this.observer = new window.ResizeObserver((entries) => {
                    for (const entry of entries) {
                        this.boundingClientRect = entry.contentRect;
                    }
                    this.requestUpdate();
                });
            }
            (_a = this.observer) === null || _a === void 0 ? void 0 : _a.observe(this);
        }
        disconnectedCallback() {
            var _a;
            (_a = this.observer) === null || _a === void 0 ? void 0 : _a.unobserve(this);
            super.disconnectedCallback();
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ColorArea.prototype, "disabled", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ColorArea.prototype, "focused", void 0);
    __decorate([
        property({ type: String })
    ], ColorArea.prototype, "label", void 0);
    __decorate([
        query('.handle')
    ], ColorArea.prototype, "handle", void 0);
    __decorate([
        property({ type: Number })
    ], ColorArea.prototype, "hue", null);
    __decorate([
        property({ type: String })
    ], ColorArea.prototype, "value", null);
    __decorate([
        property({ type: String })
    ], ColorArea.prototype, "color", null);
    __decorate([
        property({ type: Number })
    ], ColorArea.prototype, "x", void 0);
    __decorate([
        property({ type: Number })
    ], ColorArea.prototype, "y", void 0);
    __decorate([
        property({ type: Number })
    ], ColorArea.prototype, "step", void 0);
    __decorate([
        query('[name="x"]')
    ], ColorArea.prototype, "inputX", void 0);
    __decorate([
        query('[name="y"]')
    ], ColorArea.prototype, "inputY", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-color-area', ColorArea);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$B = css `
:host{--spectrum-colorslider-handle-hitarea-border-radius:0%;--spectrum-colorslider-handle-hitarea-width:var(--spectrum-global-dimension-size-300);--spectrum-colorslider-handle-hitarea-height:var(--spectrum-global-dimension-size-300)}:host([focused]) .handle{width:calc(var(--spectrum-colorhandle-size,
var(--spectrum-global-dimension-size-200))*2);height:calc(var(--spectrum-colorhandle-size,
var(--spectrum-global-dimension-size-200))*2);margin-left:calc(-1*var(--spectrum-colorhandle-size, var(--spectrum-global-dimension-size-200)));margin-top:calc(-1*var(--spectrum-colorhandle-size, var(--spectrum-global-dimension-size-200)))}.slider{opacity:.0001;position:absolute;top:0;left:0;width:100%;height:100%;z-index:0;margin:0;pointer-events:none}:host{position:relative;display:block;width:var(--spectrum-colorslider-default-length,var(--spectrum-global-dimension-size-2400));height:var(--spectrum-colorslider-height,var(--spectrum-global-dimension-size-300));-webkit-user-select:none;user-select:none;cursor:default}:host([focused]){z-index:2}:host([disabled]){pointer-events:none}:host([vertical]){display:inline-block;width:var(--spectrum-colorslider-vertical-width,var(--spectrum-global-dimension-size-300));height:var(--spectrum-colorslider-vertical-default-length,var(--spectrum-global-dimension-size-2400))}:host([vertical]) .handle{left:50%;top:0}.handle{left:0;top:50%}.handle:after{border-radius:var(--spectrum-colorslider-handle-hitarea-border-radius);width:var(--spectrum-colorslider-handle-hitarea-width);height:var(--spectrum-colorslider-handle-hitarea-height)}.checkerboard{background-size:var(--spectrum-global-dimension-static-size-200,16px) var(--spectrum-global-dimension-static-size-200,16px);background-position:0 0,0 var(--spectrum-global-dimension-static-size-100,8px),var(--spectrum-global-dimension-static-size-100,8px) calc(-1*var(--spectrum-global-dimension-static-size-100, 8px)),calc(-1*var(--spectrum-global-dimension-static-size-100, 8px)) 0}.checkerboard:before{content:"";z-index:1;position:absolute;top:0;left:0;bottom:0;right:0}.checkerboard,.checkerboard:before,.gradient{border-radius:var(--spectrum-colorslider-border-radius,var(--spectrum-alias-border-radius-regular))}.checkerboard,.gradient{width:100%;height:100%}:host{--spectrum-colorslider-border-color:var(--spectrum-colorarea-border-color)}.checkerboard{background-color:var(--spectrum-global-color-static-white,#fff);background-image:linear-gradient(-45deg,transparent 75.5%,var(--spectrum-global-color-static-gray-500,#bcbcbc) 0),linear-gradient(45deg,transparent 75.5%,var(--spectrum-global-color-static-gray-500,#bcbcbc) 0),linear-gradient(-45deg,var(--spectrum-global-color-static-gray-500,#bcbcbc) 25.5%,transparent 0),linear-gradient(45deg,var(--spectrum-global-color-static-gray-500,#bcbcbc) 25.5%,transparent 0)}.checkerboard:before{box-shadow:inset 0 0 0 var(--spectrum-colorslider-border-size,var(--spectrum-alias-border-size-thin)) var(--spectrum-colorslider-border-color)}:host([disabled]) .checkerboard{background:var(--spectrum-colorslider-fill-color-disabled,var(--spectrum-global-color-gray-300))}:host([disabled]) .checkerboard:before{box-shadow:0 0 0 var(--spectrum-colorslider-border-size,var(--spectrum-alias-border-size-thin)) var(--spectrum-colorslider-border-color-disabled,var(--spectrum-global-color-gray-300))}:host([disabled]) .gradient{display:none}@media (forced-colors:active){:host{--spectrum-colorslider-border-color-disabled:GrayText;--spectrum-colorslider-fill-color-disabled:Canvas;forced-color-adjust:none}}:host{--sp-color-slider-gradient-fallback:red 0%,#ff0 17%,#0f0 33%,#0ff 50%,#00f 67%,#f0f 83%,red 100%}.gradient{overflow:hidden}::slotted(*){width:100%;height:100%}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @element sp-color-slider
     */
    class ColorSlider extends Focusable {
        constructor() {
            super(...arguments);
            this.disabled = false;
            this.focused = false;
            this.label = 'hue';
            this.vertical = false;
            this._value = 0;
            this.sliderHandlePosition = 0;
            this._color = new TinyColor({ h: 0, s: 1, v: 1 });
            this._previousColor = new TinyColor({ h: 0, s: 1, v: 1 });
            this._format = {
                format: '',
                isString: false,
            };
            this.step = 1;
            this._altered = 0;
            this.altKeys = new Set();
        }
        static get styles() {
            return [styles$B];
        }
        get value() {
            return this._value;
        }
        set value(hue) {
            const value = Math.min(360, Math.max(0, hue));
            if (value === this.value) {
                return;
            }
            const oldValue = this.value;
            const { s, v } = this._color.toHsv();
            this._color = new TinyColor({ h: value, s, v });
            this._value = value;
            if (value !== this.sliderHandlePosition) {
                this.sliderHandlePosition = 100 * (value / 360);
            }
            this.requestUpdate('value', oldValue);
        }
        get color() {
            switch (this._format.format) {
                case 'rgb':
                    return this._format.isString
                        ? this._color.toRgbString()
                        : this._color.toRgb();
                case 'prgb':
                    return this._format.isString
                        ? this._color.toPercentageRgbString()
                        : this._color.toPercentageRgb();
                case 'hex':
                case 'hex3':
                case 'hex4':
                case 'hex6':
                    return this._format.isString
                        ? this._color.toHexString()
                        : this._color.toHex();
                case 'hex8':
                    return this._format.isString
                        ? this._color.toHex8String()
                        : this._color.toHex8();
                case 'name':
                    return this._color.toName() || this._color.toRgbString();
                case 'hsl':
                    return this._format.isString
                        ? this._color.toHslString()
                        : this._color.toHsl();
                case 'hsv':
                    return this._format.isString
                        ? this._color.toHsvString()
                        : this._color.toHsv();
                default:
                    return 'No color format applied.';
            }
        }
        set color(color) {
            if (color === this.color) {
                return;
            }
            const oldValue = this._color;
            this._color = new TinyColor(color);
            const format = this._color.format;
            let isString = typeof color === 'string' || color instanceof String;
            if (format.startsWith('hex')) {
                isString = color.startsWith('#');
            }
            this._format = {
                format,
                isString,
            };
            if (isString && format.startsWith('hs')) {
                const hueExp = /^hs[v|va|l|la]\((\d{1,3})/;
                const values = hueExp.exec(color);
                if (values !== null) {
                    const [, h] = values;
                    this.value = Number(h);
                }
            }
            else if (!isString && format.startsWith('hs')) {
                const colorInput = this._color.originalInput;
                const colorValues = Object.values(colorInput);
                this.value = colorValues[0];
                // The below code line causes some tests to fail
                //this.value = parseFloat((color as HSV).h.toString());
            }
            else {
                const { h } = this._color.toHsv();
                this.value = h;
            }
            this._previousColor = oldValue;
            this.requestUpdate('color', oldValue);
        }
        get altered() {
            return this._altered;
        }
        set altered(altered) {
            this._altered = altered;
            this.step = Math.max(1, this.altered * 10);
        }
        get focusElement() {
            return this.input;
        }
        handleKeydown(event) {
            event.preventDefault();
            const { key } = event;
            if (['Shift', 'Meta', 'Control', 'Alt'].includes(key)) {
                this.altKeys.add(key);
                this.altered = this.altKeys.size;
            }
            let delta = 0;
            switch (key) {
                case 'ArrowUp':
                    delta = this.step;
                    break;
                case 'ArrowDown':
                    delta = -this.step;
                    break;
                case 'ArrowLeft':
                    delta = this.step * (this.isLTR ? -1 : 1);
                    break;
                case 'ArrowRight':
                    delta = this.step * (this.isLTR ? 1 : -1);
                    break;
            }
            this.sliderHandlePosition = Math.min(100, Math.max(0, this.sliderHandlePosition + delta));
            this.value = 360 * (this.sliderHandlePosition / 100);
            this._color = new TinyColor(Object.assign(Object.assign({}, this._color.toHsl()), { h: this.value }));
        }
        handleKeyup(event) {
            event.preventDefault();
            const { key } = event;
            if (['Shift', 'Meta', 'Control', 'Alt'].includes(key)) {
                this.altKeys.delete(key);
                this.altered = this.altKeys.size;
            }
        }
        handleInput(event) {
            const { valueAsNumber } = event.target;
            this.value = valueAsNumber;
            this.sliderHandlePosition = 100 * (this.value / 360);
            this._color = new TinyColor(Object.assign(Object.assign({}, this._color.toHsl()), { h: this.value }));
        }
        handleFocus() {
            this.focused = true;
        }
        handleBlur() {
            this.focused = false;
        }
        handlePointerdown(event) {
            if (event.button !== 0) {
                event.preventDefault();
                return;
            }
            this._previousColor = this._color.clone();
            this.boundingClientRect = this.getBoundingClientRect();
            event.target.setPointerCapture(event.pointerId);
            if (event.pointerType === 'mouse') {
                this.handleFocus();
            }
        }
        handlePointermove(event) {
            this.sliderHandlePosition = this.calculateHandlePosition(event);
            this.value = 360 * (this.sliderHandlePosition / 100);
            this._color = new TinyColor(Object.assign(Object.assign({}, this._color.toHsl()), { h: this.value }));
            this.dispatchEvent(new Event('input', {
                bubbles: true,
                composed: true,
                cancelable: true,
            }));
        }
        handlePointerup(event) {
            // Retain focus on input element after mouse up to enable keyboard interactions
            event.target.releasePointerCapture(event.pointerId);
            const applyDefault = this.dispatchEvent(new Event('change', {
                bubbles: true,
                composed: true,
                cancelable: true,
            }));
            if (!applyDefault) {
                this._color = this._previousColor;
            }
            if (event.pointerType === 'mouse') {
                this.handleBlur();
            }
        }
        /**
         * Returns the value under the cursor
         * @param: PointerEvent on slider
         * @return: Slider value that correlates to the position under the pointer
         */
        calculateHandlePosition(event) {
            /* c8 ignore next 3 */
            if (!this.boundingClientRect) {
                return this.sliderHandlePosition;
            }
            const rect = this.boundingClientRect;
            const minOffset = this.vertical ? rect.top : rect.left;
            const offset = this.vertical ? event.clientY : event.clientX;
            const size = this.vertical ? rect.height : rect.width;
            const percent = Math.max(0, Math.min(1, (offset - minOffset) / size));
            const sliderHandlePosition = 100 * percent;
            return sliderHandlePosition;
        }
        handleGradientPointerdown(event) {
            if (event.button !== 0) {
                return;
            }
            event.stopPropagation();
            event.preventDefault();
            this.handle.dispatchEvent(new PointerEvent('pointerdown', event));
            this.handlePointermove(event);
        }
        render() {
            return html `
            <div
                class="checkerboard"
                role="presentation"
                @pointerdown=${this.handleGradientPointerdown}
            >
                <div
                    class="gradient"
                    role="presentation"
                    style="background: linear-gradient(to ${this.vertical
            ? 'bottom'
            : 'right'}, var(--sp-color-slider-gradient, var(--sp-color-slider-gradient-fallback)));"
                >
                    <slot name="gradient"></slot>
                </div>
            </div>
            <sp-color-handle
                class="handle"
                color="hsl(${this._color.toHsl().h}, 100%, 50%)"
                ?disabled=${this.disabled}
                style="${this.vertical ? 'top' : 'left'}: ${this
            .sliderHandlePosition}%"
                @manage=${streamingListener({ type: 'pointerdown', fn: this.handlePointerdown }, { type: 'pointermove', fn: this.handlePointermove }, {
            type: ['pointerup', 'pointercancel'],
            fn: this.handlePointerup,
        })}
            ></sp-color-handle>
            <input
                type="range"
                class="slider"
                min="0"
                max="360"
                step=${this.step}
                aria-label=${this.label}
                .value=${String(this.value)}
                @input=${this.handleInput}
                @keydown=${this.handleKeydown}
                @keyup=${this.handleKeyup}
                @focus=${this.handleFocus}
                @blur=${this.handleBlur}
            />
        `;
        }
        firstUpdated(changed) {
            super.firstUpdated(changed);
            this.boundingClientRect = this.getBoundingClientRect();
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ColorSlider.prototype, "disabled", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ColorSlider.prototype, "focused", void 0);
    __decorate([
        query('.handle')
    ], ColorSlider.prototype, "handle", void 0);
    __decorate([
        property({ type: String })
    ], ColorSlider.prototype, "label", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ColorSlider.prototype, "vertical", void 0);
    __decorate([
        property({ type: Number })
    ], ColorSlider.prototype, "value", null);
    __decorate([
        property({ type: Number, reflect: true })
    ], ColorSlider.prototype, "sliderHandlePosition", void 0);
    __decorate([
        property({ type: String })
    ], ColorSlider.prototype, "color", null);
    __decorate([
        property({ type: Number })
    ], ColorSlider.prototype, "step", void 0);
    __decorate([
        query('input')
    ], ColorSlider.prototype, "input", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-color-slider', ColorSlider);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$A = css `
:host{--spectrum-colorwheel-border-radius:100%;--spectrum-colorwheel-width:calc(var(--spectrum-global-dimension-size-125)*16);--spectrum-colorwheel-height:var(--spectrum-colorwheel-width)}:host([focused]) .handle{width:calc(var(--spectrum-colorhandle-size,
var(--spectrum-global-dimension-size-200))*2);height:calc(var(--spectrum-colorhandle-size,
var(--spectrum-global-dimension-size-200))*2);margin-left:calc(-1*var(--spectrum-colorhandle-size, var(--spectrum-global-dimension-size-200)));margin-top:calc(-1*var(--spectrum-colorhandle-size, var(--spectrum-global-dimension-size-200)))}.slider{opacity:.0001;position:absolute;top:0;left:0;width:100%;height:100%;z-index:0;margin:0;pointer-events:none}:host{position:relative;display:block;width:var(--spectrum-colorwheel-width);height:var(--spectrum-colorwheel-height);border-radius:var(--spectrum-colorwheel-border-radius);-webkit-user-select:none;user-select:none;cursor:default}:host([focused]){z-index:2}:host([disabled]){pointer-events:none}:host([dragged]){z-index:2}::slotted([slot=gradient]){position:relative;z-index:0;width:var(--spectrum-colorwheel-width);height:var(--spectrum-colorwheel-height);border-radius:100%;box-sizing:border-box;border-width:var(--spectrum-colorwheel-border-size,var(--spectrum-alias-border-size-thin));border-style:solid}.wheel{position:relative;z-index:1}.innerCircle,.outerCircle{fill:transparent;stroke-width:var(--spectrum-colorwheel-border-size,var(--spectrum-alias-border-size-thin))}.handle{left:50%;top:50%}:host{--spectrum-colorwheel-border-color:var(--spectrum-colorarea-border-color)}:host([disabled]) .innerCircle,:host([disabled]) .outerCircle{stroke:var(--spectrum-colorwheel-border-color-disabled,var(--spectrum-global-color-gray-300))}:host([disabled]) .outerCircle{fill:var(--spectrum-colorwheel-fill-color-disabled,var(--spectrum-global-color-gray-300))}:host([disabled]) .segment{display:none}::slotted([slot=gradient]){border-color:var(--spectrum-colorwheel-border-color)}.innerCircle,.outerCircle{stroke:var(--spectrum-colorwheel-border-color)}@media (forced-colors:active){:host{--spectrum-colorwheel-border-color-disabled:GrayText;--spectrum-colorwheel-fill-color-disabled:Canvas;forced-color-adjust:none}}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const hues = [...Array(360).keys()];
    const wheel = (appliedRadius = 80) => {
        const radius = Math.max(appliedRadius, 25);
        return svg `
        <svg class="wheel" viewBox="0 0 ${radius * 2} ${radius * 2}" aria-hidden="true">
            <defs>
                <mask id="mask">
                    <circle cx=${radius} cy=${radius} r=${radius} fill="white" />
                    <circle cx=${radius} cy=${radius} r=${radius - 24} fill="black" />
                </mask>
            </defs>
            <g class="segment" mask="url(#mask)">
                ${hues.map((hue) => svg `
                    <rect
                        width=${radius}
                        height=${radius / 40}
                        x=${radius}
                        y=${radius - 1}
                        fill="hsl(${hue}, 100%, 50%)"
                        transform="rotate(${hue} ${radius} ${radius})"
                    ></rect>
                `)}
            </g>
            <circle
                cx=${radius}
                cy=${radius}
                r=${radius - 0.5}
                class="outerCircle"
                mask="url(#mask)"
            />
            <circle cx=${radius} cy=${radius} r=${radius - 24} class="innerCircle" />
        </svg>
    `;
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @element sp-color-wheel
     */
    class ColorWheel extends Focusable {
        constructor() {
            super(...arguments);
            this.disabled = false;
            this.focused = false;
            this.label = 'hue';
            this.step = 1;
            this._value = 0;
            this._color = new TinyColor({ h: 0, s: 1, v: 1 });
            this._previousColor = new TinyColor({ h: 0, s: 1, v: 1 });
            this._format = {
                format: '',
                isString: false,
            };
            this._altered = 0;
            this.altKeys = new Set();
        }
        static get styles() {
            return [styles$A];
        }
        get value() {
            return this._value;
        }
        set value(hue) {
            const value = Math.min(360, Math.max(0, hue));
            if (value === this.value) {
                return;
            }
            const oldValue = this.value;
            const { s, v } = this._color.toHsv();
            this._color = new TinyColor({ h: value, s, v });
            this._value = value;
            this.requestUpdate('value', oldValue);
        }
        get color() {
            switch (this._format.format) {
                case 'rgb':
                    return this._format.isString
                        ? this._color.toRgbString()
                        : this._color.toRgb();
                case 'prgb':
                    return this._format.isString
                        ? this._color.toPercentageRgbString()
                        : this._color.toPercentageRgb();
                case 'hex':
                case 'hex3':
                case 'hex4':
                case 'hex6':
                    return this._format.isString
                        ? this._color.toHexString()
                        : this._color.toHex();
                case 'hex8':
                    return this._format.isString
                        ? this._color.toHex8String()
                        : this._color.toHex8();
                case 'name':
                    return this._color.toName() || this._color.toRgbString();
                case 'hsl':
                    return this._format.isString
                        ? this._color.toHslString()
                        : this._color.toHsl();
                case 'hsv':
                    return this._format.isString
                        ? this._color.toHsvString()
                        : this._color.toHsv();
                default:
                    return 'No color format applied.';
            }
        }
        set color(color) {
            if (color === this.color) {
                return;
            }
            const oldValue = this._color;
            this._color = new TinyColor(color);
            const format = this._color.format;
            let isString = typeof color === 'string' || color instanceof String;
            if (format.startsWith('hex')) {
                isString = color.startsWith('#');
            }
            this._format = {
                format,
                isString,
            };
            if (isString && format.startsWith('hs')) {
                const hueExp = /^hs[v|va|l|la]\((\d{1,3})/;
                const values = hueExp.exec(color);
                if (values !== null) {
                    const [, h] = values;
                    this.value = Number(h);
                }
            }
            else if (!isString && format.startsWith('hs')) {
                const colorInput = this._color.originalInput;
                const colorValues = Object.values(colorInput);
                this.value = colorValues[0];
            }
            else {
                const { h } = this._color.toHsv();
                this.value = h;
            }
            this.requestUpdate('color', oldValue);
        }
        get altered() {
            return this._altered;
        }
        set altered(altered) {
            this._altered = altered;
            this.step = Math.max(1, this.altered * 10);
        }
        get focusElement() {
            return this.input;
        }
        handleKeydown(event) {
            const { key } = event;
            if (['Shift', 'Meta', 'Control', 'Alt'].includes(key)) {
                this.altKeys.add(key);
                this.altered = this.altKeys.size;
            }
            let delta = 0;
            switch (key) {
                case 'ArrowUp':
                    delta = this.step;
                    break;
                case 'ArrowDown':
                    delta = -this.step;
                    break;
                case 'ArrowLeft':
                    delta = this.step * (this.isLTR ? -1 : 1);
                    break;
                case 'ArrowRight':
                    delta = this.step * (this.isLTR ? 1 : -1);
                    break;
            }
            this.value = (360 + this.value + delta) % 360;
            this._color = new TinyColor(Object.assign(Object.assign({}, this._color.toHsl()), { h: this.value }));
        }
        handleKeyup(event) {
            event.preventDefault();
            const { key } = event;
            if (['Shift', 'Meta', 'Control', 'Alt'].includes(key)) {
                this.altKeys.delete(key);
                this.altered = this.altKeys.size;
            }
        }
        handleInput(event) {
            const { valueAsNumber } = event.target;
            this.value = valueAsNumber;
            this._color = new TinyColor(Object.assign(Object.assign({}, this._color.toHsl()), { h: this.value }));
        }
        handleFocus() {
            this.focused = true;
        }
        handleBlur() {
            this.focused = false;
        }
        handlePointerdown(event) {
            if (event.button !== 0) {
                event.preventDefault();
                return;
            }
            this._previousColor = this._color.clone();
            this.boundingClientRect = this.getBoundingClientRect();
            event.target.setPointerCapture(event.pointerId);
            if (event.pointerType === 'mouse') {
                this.handleFocus();
            }
        }
        handlePointermove(event) {
            this.value = this.calculateHandlePosition(event);
            this._color = new TinyColor(Object.assign(Object.assign({}, this._color.toHsl()), { h: this.value }));
            this.dispatchEvent(new Event('input', {
                bubbles: true,
                composed: true,
                cancelable: true,
            }));
        }
        handlePointerup(event) {
            // Retain focus on input element after mouse up to enable keyboard interactions
            event.target.releasePointerCapture(event.pointerId);
            const applyDefault = this.dispatchEvent(new Event('change', {
                bubbles: true,
                composed: true,
                cancelable: true,
            }));
            if (!applyDefault) {
                this._color = this._previousColor;
            }
            if (event.pointerType === 'mouse') {
                this.handleBlur();
            }
        }
        /**
         * Returns the value under the cursor
         * @param: PointerEvent on slider
         * @return: Slider value that correlates to the position under the pointer
         */
        calculateHandlePosition(event) {
            /* c8 ignore next 3 */
            if (!this.boundingClientRect) {
                return this.value;
            }
            const rect = this.boundingClientRect;
            const { width, height, left, top } = rect;
            const centerX = left + width / 2;
            const centerY = top + height / 2;
            const pointX = event.clientX - centerX;
            const pointY = event.clientY - centerY;
            const value = (Math.atan2(pointY, pointX) * 180) / Math.PI;
            return (360 + (360 + value)) % 360;
        }
        handleGradientPointerdown(event) {
            if (event.button !== 0 ||
                event.target.classList.contains('innerCircle')) {
                return;
            }
            event.stopPropagation();
            event.preventDefault();
            this.handle.dispatchEvent(new PointerEvent('pointerdown', event));
            this.handlePointermove(event);
        }
        render() {
            const { width = 0 } = this.boundingClientRect || {};
            const radius = width / 2;
            const handleLocationStyles = `transform: translate(${(radius - 12.5) * Math.cos((this.value * Math.PI) / 180)}px, ${(radius - 12.5) * Math.sin((this.value * Math.PI) / 180)}px);`;
            return html `
            <slot
                name="gradient"
                @pointerdown=${this.handleGradientPointerdown}
            >
                ${wheel(radius)}
            </slot>

            <sp-color-handle
                class="handle"
                color="hsl(${this._color.toHsl().h}, 100%, 50%)"
                ?disabled=${this.disabled}
                style=${handleLocationStyles}
                @manage=${streamingListener({ type: 'pointerdown', fn: this.handlePointerdown }, { type: 'pointermove', fn: this.handlePointermove }, {
            type: ['pointerup', 'pointercancel'],
            fn: this.handlePointerup,
        })}
            ></sp-color-handle>

            <input
                type="range"
                class="slider"
                aria-label=${this.label}
                min="0"
                max="360"
                step=${this.step}
                .value=${String(this.value)}
                @input=${this.handleInput}
                @keydown=${this.handleKeydown}
                @keyup=${this.handleKeyup}
                @focus=${this.handleFocus}
                @blur=${this.handleBlur}
            />
        `;
        }
        firstUpdated(changed) {
            super.firstUpdated(changed);
            this.boundingClientRect = this.getBoundingClientRect();
        }
        connectedCallback() {
            var _a;
            super.connectedCallback();
            if (!this.observer &&
                window.ResizeObserver) {
                this.observer = new window.ResizeObserver((entries) => {
                    for (const entry of entries) {
                        this.boundingClientRect = entry.contentRect;
                    }
                    this.requestUpdate();
                });
            }
            (_a = this.observer) === null || _a === void 0 ? void 0 : _a.observe(this);
        }
        disconnectedCallback() {
            var _a;
            (_a = this.observer) === null || _a === void 0 ? void 0 : _a.unobserve(this);
            super.disconnectedCallback();
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ColorWheel.prototype, "disabled", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ColorWheel.prototype, "focused", void 0);
    __decorate([
        query('.handle')
    ], ColorWheel.prototype, "handle", void 0);
    __decorate([
        property({ type: String })
    ], ColorWheel.prototype, "label", void 0);
    __decorate([
        property({ type: Number })
    ], ColorWheel.prototype, "step", void 0);
    __decorate([
        property({ type: Number })
    ], ColorWheel.prototype, "value", null);
    __decorate([
        property({ type: String })
    ], ColorWheel.prototype, "color", null);
    __decorate([
        query('input')
    ], ColorWheel.prototype, "input", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-color-wheel', ColorWheel);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$z = css `
:host([size=s]){--spectrum-divider-height:var(--spectrum-divider-s-height,var(--spectrum-global-dimension-size-10));--spectrum-divider-vertical-width:var(--spectrum-divider-s-vertical-width,var(--spectrum-global-dimension-size-10))}:host([size=m]){--spectrum-divider-height:var(--spectrum-divider-m-height,var(--spectrum-global-dimension-size-25));--spectrum-divider-vertical-width:var(--spectrum-divider-m-vertical-width,var(--spectrum-global-dimension-size-25))}:host([size=l]){--spectrum-divider-height:var(--spectrum-divider-l-height,var(--spectrum-global-dimension-size-50));--spectrum-divider-vertical-width:var(--spectrum-divider-l-vertical-width,var(--spectrum-global-dimension-size-50))}:host{--spectrum-divider-vertical-height:100%;width:100%;height:var(--spectrum-divider-height);overflow:visible;border:none;border-width:var(--spectrum-divider-height);border-radius:var(--spectrum-divider-height)}:host([vertical]){height:var(--spectrum-divider-vertical-height);width:var(--spectrum-divider-vertical-width)}:host{--spectrum-divider-l-background-color:var(--spectrum-global-color-gray-800);--spectrum-divider-m-background-color:var(--spectrum-global-color-gray-300);--spectrum-divider-s-background-color:var(--spectrum-global-color-gray-300)}:host([size=l]){background-color:var(--spectrum-divider-l-background-color,var(--spectrum-global-color-gray-800))}:host([size=m]){background-color:var(--spectrum-divider-m-background-color,var(--spectrum-global-color-gray-300))}:host([size=s]){background-color:var(--spectrum-divider-s-background-color,var(--spectrum-global-color-gray-300))}:host{display:block}hr{border:none;margin:0}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @element sp-divider
     */
    class Divider extends SizedMixin(SpectrumElement, {
        validSizes: ['s', 'm', 'l'],
    }) {
        constructor() {
            super(...arguments);
            this.vertical = false;
        }
        render() {
            return html ``;
        }
        firstUpdated(changed) {
            super.firstUpdated(changed);
            this.setAttribute('role', 'separator');
        }
        updated(changed) {
            super.updated(changed);
            if (changed.has('vertical')) {
                if (this.vertical) {
                    this.setAttribute('aria-orientation', 'vertical');
                }
                else {
                    this.removeAttribute('aria-orientation');
                }
            }
        }
    }
    Divider.styles = [styles$z];
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Divider.prototype, "vertical", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-divider', Divider);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const Cross500Icon = () => {
        return tag$1 `<svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 14 14"
    aria-hidden="true"
    fill="currentColor"
  >
    <path
      d="M8.457 7l4.54-4.54a1.03 1.03 0 00-1.458-1.456L7 5.543l-4.54-4.54a1.03 1.03 0 00-1.457 1.458L5.543 7l-4.54 4.54a1.03 1.03 0 101.457 1.456L7 8.457l4.54 4.54a1.03 1.03 0 001.456-1.458z"
    />
  </svg>`;
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class IconCross500 extends IconBase {
        render() {
            setCustomTemplateLiteralTag$1(html);
            return Cross500Icon();
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-icon-cross500', IconCross500);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$y = css `
:host{--spectrum-dialog-fullscreen-header-text-size:28px;--spectrum-dialog-confirm-small-width:400px;--spectrum-dialog-confirm-medium-width:480px;--spectrum-dialog-confirm-large-width:640px;--spectrum-dialog-error-width:var(--spectrum-dialog-confirm-medium-width);--spectrum-dialog-confirm-hero-height:var(--spectrum-global-dimension-size-1600);--spectrum-dialog-confirm-description-padding:var(--spectrum-global-dimension-size-25);--spectrum-dialog-confirm-description-margin:calc(var(--spectrum-global-dimension-size-25)*-1);--spectrum-dialog-confirm-footer-padding-top:var(--spectrum-global-dimension-static-size-500,40px);--spectrum-dialog-confirm-gap-size:var(--spectrum-global-dimension-size-200);--spectrum-dialog-confirm-buttongroup-padding-top:var(--spectrum-global-dimension-static-size-500,40px);--spectrum-dialog-confirm-close-button-size:var(--spectrum-global-dimension-size-400);--spectrum-dialog-confirm-close-button-padding:calc(26px - var(--spectrum-global-dimension-size-175));--spectrum-dialog-confirm-divider-height:var(--spectrum-global-dimension-static-size-25,2px);display:flex;box-sizing:border-box;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;min-width:var(--spectrum-dialog-confirm-min-width,var(--spectrum-global-dimension-static-size-3600));max-width:100%;max-height:inherit;outline:none}:host([size=small]){width:var(--spectrum-dialog-confirm-small-width)}:host([size=medium]){width:var(--spectrum-dialog-confirm-medium-width)}:host([size=large]){width:var(--spectrum-dialog-confirm-large-width)}::slotted([slot=hero]){grid-area:hero;height:var(--spectrum-dialog-confirm-hero-height);border-top-left-radius:var(--spectrum-dialog-confirm-border-radius,var(--spectrum-global-dimension-size-50));border-top-right-radius:var(--spectrum-dialog-confirm-border-radius,var(--spectrum-global-dimension-size-50));background-size:cover;background-position:50%;overflow:hidden}.grid{display:grid;grid-template-columns:var(--spectrum-dialog-confirm-padding) auto 1fr auto minmax(0,auto) var(--spectrum-dialog-confirm-padding);grid-template-rows:auto var(--spectrum-dialog-confirm-padding) auto auto 1fr auto var(--spectrum-dialog-confirm-padding);grid-template-areas:"hero hero    hero    hero        hero        hero" ".    .       .       .           .           ." ".    heading header  header      typeIcon    ." ".    divider divider divider     divider     ." ".    content content content     content     ." ".    footer  footer  buttonGroup buttonGroup ." ".    .       .       .           .           .";width:100%}:host([dir=ltr]) ::slotted([slot=heading]){padding-right:var(--spectrum-dialog-confirm-gap-size)}:host([dir=rtl]) ::slotted([slot=heading]){padding-left:var(--spectrum-dialog-confirm-gap-size)}::slotted([slot=heading]){grid-area:heading;margin:0;font-size:var(--spectrum-dialog-confirm-title-text-size);font-weight:var(--spectrum-dialog-confirm-title-text-font-weight,var(--spectrum-global-font-weight-bold));line-height:var(--spectrum-dialog-confirm-title-text-line-height,var(--spectrum-alias-heading-text-line-height));outline:none}:host([dir=ltr]) .no-header::slotted([slot=heading]){padding-right:0}:host([dir=rtl]) .no-header::slotted([slot=heading]){padding-left:0}.no-header::slotted([slot=heading]){grid-area:heading-start/heading-start/header-end/header-end}.header{grid-area:header;display:flex;align-items:center;justify-content:flex-end;box-sizing:border-box;outline:none}.type-icon{grid-area:typeIcon}.divider{grid-area:divider;width:100%;margin-top:var(--spectrum-dialog-confirm-divider-margin-top,var(--spectrum-global-dimension-static-size-150));margin-bottom:var(--spectrum-dialog-confirm-divider-margin-bottom,var(--spectrum-global-dimension-static-size-200))}:host([no-divider]) .divider{display:none}:host([no-divider]) ::slotted([slot=heading]){padding-bottom:calc(var(--spectrum-dialog-confirm-divider-margin-top,
var(--spectrum-global-dimension-static-size-150)) + var(--spectrum-dialog-confirm-divider-margin-bottom,
var(--spectrum-global-dimension-static-size-200)) + var(--spectrum-dialog-confirm-divider-height))}.content{grid-area:content;box-sizing:border-box;overflow-y:auto;-webkit-overflow-scrolling:touch;outline:none;font-size:var(--spectrum-dialog-confirm-description-text-size);font-weight:var(--spectrum-dialog-confirm-description-text-font-weight,var(--spectrum-global-font-weight-regular));line-height:var(--spectrum-dialog-confirm-description-text-line-height,var(--spectrum-alias-component-text-line-height));padding:0 var(--spectrum-dialog-confirm-description-padding);margin:0 var(--spectrum-dialog-confirm-description-margin)}.footer{grid-area:footer;padding-top:var(--spectrum-dialog-confirm-footer-padding-top);display:flex;flex-wrap:wrap;outline:none}.footer>.button+.button,.footer>::slotted(*){margin-bottom:0}:host([dir=ltr]) .buttonGroup{padding-left:var(--spectrum-dialog-confirm-gap-size)}:host([dir=rtl]) .buttonGroup{padding-right:var(--spectrum-dialog-confirm-gap-size)}.buttonGroup{grid-area:buttonGroup;padding-top:var(--spectrum-dialog-confirm-buttongroup-padding-top);display:flex;justify-content:flex-end}.buttonGroup.buttonGroup--noFooter{grid-area:footer-start/footer-start/buttonGroup-end/buttonGroup-end}:host([dismissable]) .grid{grid-template-columns:var(--spectrum-dialog-confirm-padding) auto 1fr auto minmax(0,auto) minmax(0,var(--spectrum-dialog-confirm-close-button-size)) var(--spectrum-dialog-confirm-padding);grid-template-rows:auto var(--spectrum-dialog-confirm-padding) auto auto 1fr auto var(--spectrum-dialog-confirm-padding);grid-template-areas:"hero hero    hero    hero        hero        hero        hero" ".    .       .       .           .           closeButton closeButton" ".    heading header  header      typeIcon    closeButton closeButton" ".    divider divider divider     divider     divider     ." ".    content content content     content     content     ." ".    footer  footer  buttonGroup buttonGroup buttonGroup ." ".    .       .       .           .           .           ."}:host([dismissable]) .grid .buttonGroup{display:none}:host([dismissable]) .grid .footer{grid-area:footer/footer/buttonGroup/buttonGroup}:host([dir=ltr]) .close-button{margin-right:var(--spectrum-dialog-confirm-close-button-padding)}:host([dir=rtl]) .close-button{margin-left:var(--spectrum-dialog-confirm-close-button-padding)}.close-button{grid-area:closeButton;align-self:start;justify-self:end;margin-top:var(--spectrum-dialog-confirm-close-button-padding)}:host([error]){width:var(--spectrum-dialog-error-width,90%)}:host([mode=fullscreen]){width:100%;height:100%}:host([mode=fullscreenTakeover]){width:100%;height:100%;border-radius:0}:host([mode=fullscreen]) ::slotted([slot=heading]),:host([mode=fullscreenTakeover]) ::slotted([slot=heading]){font-size:var(--spectrum-dialog-fullscreen-header-text-size)}@media screen and (max-inline-size:700px){.grid{grid-template-columns:var(--spectrum-dialog-confirm-padding) auto 1fr auto minmax(0,auto) var(--spectrum-dialog-confirm-padding);grid-template-areas:"hero hero    hero    hero        hero        hero" ".    .       .       .           .           ." ".    heading heading heading     typeIcon    ." ".    header  header  header      header      ." ".    divider divider divider     divider     ." ".    content content content     content     ." ".    footer  footer  buttonGroup buttonGroup ." ".    .       .       .           .           ."}.grid,:host([dismissable]) .grid{grid-template-rows:auto var(--spectrum-dialog-confirm-padding) auto auto auto 1fr auto var(--spectrum-dialog-confirm-padding)}:host([dismissable]) .grid{grid-template-columns:var(--spectrum-dialog-confirm-padding) auto 1fr auto minmax(0,auto) minmax(0,var(--spectrum-dialog-confirm-close-button-size)) var(--spectrum-dialog-confirm-padding);grid-template-areas:"hero hero    hero    hero        hero        hero        hero" ".    .       .       .           .           closeButton closeButton" ".    heading heading heading     typeIcon    closeButton closeButton" ".    header  header  header      header      header      ." ".    divider divider divider     divider     divider     ." ".    content content content     content     content     ." ".    footer  footer  buttonGroup buttonGroup buttonGroup ." ".    .       .       .           .           .           ."}.header{justify-content:flex-start}:host([mode=fullscreen]) .grid,:host([mode=fullscreenTakeover]) .grid{display:grid;grid-template-columns:var(--spectrum-dialog-confirm-padding) 1fr var(--spectrum-dialog-confirm-padding);grid-template-rows:var(--spectrum-dialog-confirm-padding) auto auto auto 1fr auto var(--spectrum-dialog-confirm-padding);grid-template-areas:".    .            ." ".    heading      ." ".    header       ." ".    divider      ." ".    content      ." ".    buttonGroup  ." ".    .            ."}:host([mode=fullscreen]) .buttonGroup,:host([mode=fullscreenTakeover]) .buttonGroup{padding-top:var(--spectrum-dialog-confirm-buttongroup-padding-top)}:host([mode=fullscreen]) ::slotted([slot=heading]),:host([mode=fullscreenTakeover]) ::slotted([slot=heading]){font-size:var(--spectrum-dialog-confirm-title-text-size)}}@media (forced-colors:active){:host{border:solid}}::slotted([slot=heading]){color:var(--spectrum-dialog-confirm-title-text-color,var(--spectrum-global-color-gray-900))}.content{color:var(--spectrum-dialog-confirm-description-text-color,var(--spectrum-global-color-gray-800))}.type-icon{color:var(--spectrum-dialog-confirm-icon-color,var(--spectrum-global-color-gray-900))}:host([error]) .type-icon{color:var(--spectrum-dialog-error-icon-color,var(--spectrum-semantic-negative-color-icon))}.content{overflow:hidden}.content[tabindex]{overflow:auto}::slotted(img[slot=hero]){width:100%;height:auto}:host([mode=fullscreen]),:host([mode=fullscreenTakeover]){max-height:none;max-width:none}:host([mode=fullscreen]) .grid,:host([mode=fullscreenTakeover]) .grid{display:grid;grid-template-columns:var(--spectrum-dialog-confirm-padding) 1fr auto auto var(--spectrum-dialog-confirm-padding);grid-template-rows:var(--spectrum-dialog-confirm-padding) auto auto 1fr var(--spectrum-dialog-confirm-padding);grid-template-areas:".    .       .       .            ." ".    heading header  buttonGroup  ." ".    divider divider divider      ." ".    content content content      ." ".    .       .       .            ."}:host([mode=fullscreen]) ::slotted([slot=heading]),:host([mode=fullscreenTakeover]) ::slotted([slot=heading]){font-size:28px}:host([mode=fullscreen]) .content,:host([mode=fullscreenTakeover]) .content{max-height:none}:host([mode=fullscreen]) .buttonGroup,:host([mode=fullscreen]) .footer,:host([mode=fullscreenTakeover]) .buttonGroup,:host([mode=fullscreenTakeover]) .footer{padding-top:0}:host([mode=fullscreen]) .footer,:host([mode=fullscreenTakeover]) .footer{display:none}:host([mode=fullscreen]) .buttonGroup,:host([mode=fullscreenTakeover]) .buttonGroup{grid-area:buttonGroup;align-self:start}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @element sp-dialog
     *
     * @slot hero - Accepts a hero image to display at the top of the dialog
     * @slot heading - Acts as the heading of the dialog. This should be an actual heading tag `<h1-6 />`
     * @slot - Content not addressed to a specific slot will be interpreted as the main content of the dialog
     * @slot footer - Content addressed to the `footer` will be placed below the main content and to the side of any `[slot='button']` content
     * @slot button - Button elements addressed to this slot may be placed below the content when not delivered in a fullscreen mode
     * @fires close - Announces that the dialog has been closed.
     */
    class Dialog extends FocusVisiblePolyfillMixin(ObserveSlotPresence(SpectrumElement, [
        '[slot="hero"]',
        '[slot="footer"]',
        '[slot="button"]',
    ])) {
        constructor() {
            super(...arguments);
            this.error = false;
            this.dismissable = false;
            this.noDivider = false;
            this.shouldManageTabOrderForScrolling = () => {
                const { offsetHeight, scrollHeight } = this.contentElement;
                if (offsetHeight < scrollHeight) {
                    this.contentElement.tabIndex = 0;
                }
                else {
                    this.contentElement.removeAttribute('tabindex');
                }
            };
        }
        static get styles() {
            return [styles$y, styles$Z];
        }
        get hasFooter() {
            return this.getSlotContentPresence('[slot="footer"]');
        }
        get hasButtons() {
            return this.getSlotContentPresence('[slot="button"]');
        }
        get hasHero() {
            return this.getSlotContentPresence('[slot="hero"]');
        }
        focus() {
            if (this.shadowRoot) {
                const firstFocusable = this.shadowRoot.querySelector('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"]), [focusable]');
                if (firstFocusable) {
                    if (firstFocusable.updateComplete) {
                        firstFocusable.updateComplete.then(() => firstFocusable.focus());
                        /* c8 ignore next 3 */
                    }
                    else {
                        firstFocusable.focus();
                    }
                    this.removeAttribute('tabindex');
                }
                /* c8 ignore next 3 */
            }
            else {
                super.focus();
            }
        }
        close() {
            this.dispatchEvent(new Event('close', {
                bubbles: true,
            }));
        }
        render() {
            return html `
            <div class="grid">
                <slot name="hero"></slot>
                <slot
                    name="heading"
                    class=${ifDefined(this.hasHero ? this.hasHero : undefined)}
                ></slot>
                ${this.error
            ? html `
                          <sp-icon-alert class="type-icon"></sp-icon-alert>
                      `
            : html ``}
                ${this.noDivider
            ? html ``
            : html `
                          <sp-divider size="m" class="divider"></sp-divider>
                      `}
                <div class="content">
                    <slot @slotchange=${this.onContentSlotChange}></slot>
                </div>
                ${this.hasFooter
            ? html `
                          <div class="footer">
                              <slot name="footer"></slot>
                          </div>
                      `
            : html ``}
                ${this.hasButtons
            ? html `
                          <sp-button-group
                              class="buttonGroup ${this.hasFooter
                ? ''
                : 'buttonGroup--noFooter'}"
                          >
                              <slot name="button"></slot>
                          </sp-button-group>
                      `
            : html ``}
                ${this.dismissable
            ? html `
                          <sp-action-button
                              class="close-button"
                              label="Close"
                              quiet
                              size="m"
                              @click=${this.close}
                          >
                              <sp-icon-cross500
                                  class="spectrum-UIIcon-Cross500"
                                  slot="icon"
                              ></sp-icon-cross500>
                          </sp-action-button>
                      `
            : html ``}
            </div>
        `;
        }
        shouldUpdate(changes) {
            if (changes.has('mode') && !!this.mode) {
                this.dismissable = false;
            }
            if (changes.has('dismissable') && this.dismissable) {
                this.dismissable = !this.mode;
            }
            return super.shouldUpdate(changes);
        }
        onContentSlotChange() {
            this.shouldManageTabOrderForScrolling();
        }
        connectedCallback() {
            super.connectedCallback();
            window.addEventListener('resize', this.shouldManageTabOrderForScrolling);
        }
        disconnectedCallback() {
            window.removeEventListener('resize', this.shouldManageTabOrderForScrolling);
            super.disconnectedCallback();
        }
    }
    __decorate([
        query('.content')
    ], Dialog.prototype, "contentElement", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Dialog.prototype, "error", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Dialog.prototype, "dismissable", void 0);
    __decorate([
        property({ type: Boolean, reflect: true, attribute: 'no-divider' })
    ], Dialog.prototype, "noDivider", void 0);
    __decorate([
        property({ type: String, reflect: true })
    ], Dialog.prototype, "mode", void 0);
    __decorate([
        property({ type: String, reflect: true })
    ], Dialog.prototype, "size", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-dialog', Dialog);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$x = css `
:host{visibility:hidden;opacity:0;transition:transform var(--spectrum-global-animation-duration-100,.13s) ease-in-out,opacity var(--spectrum-global-animation-duration-100,.13s) ease-in-out,visibility 0ms linear var(--spectrum-global-animation-duration-100,.13s);pointer-events:none}:host([open]){visibility:visible;opacity:1;transition-delay:0ms;pointer-events:auto}:host{--spectrum-dialog-confirm-background-entry-animation-delay:0ms;--spectrum-dialog-confirm-background-exit-animation-ease:cubic-bezier(0.5,0,1,1);--spectrum-dialog-confirm-background-entry-animation-ease:cubic-bezier(0,0,0.4,1);position:fixed;top:0;right:0;bottom:0;left:0;z-index:1;overflow:hidden;transition:opacity var(--spectrum-dialog-confirm-background-exit-animation-duration,var(--spectrum-global-animation-duration-300)) var(--spectrum-dialog-confirm-background-exit-animation-ease,var(--spectrum-global-animation-linear)) var(--spectrum-dialog-confirm-background-exit-animation-delay,var(--spectrum-global-animation-duration-200)),visibility 0ms linear calc(var(--spectrum-dialog-confirm-background-exit-animation-delay,
var(--spectrum-global-animation-duration-200)) + var(--spectrum-dialog-confirm-background-exit-animation-duration,
var(--spectrum-global-animation-duration-300)))}:host([open]){transition:opacity var(--spectrum-dialog-confirm-background-entry-animation-duration,var(--spectrum-global-animation-duration-600)) var(--spectrum-dialog-confirm-background-entry-animation-ease,var(--spectrum-global-animation-linear)) var(--spectrum-dialog-confirm-background-entry-animation-delay,0ms)}:host{background:var(--spectrum-dialog-confirm-overlay-background-color,var(--spectrum-alias-background-color-modal-overlay))}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @element sp-underlay
     */
    class Underlay extends SpectrumElement {
        constructor() {
            super(...arguments);
            this.open = false;
        }
        static get styles() {
            return [styles$x];
        }
        render() {
            return html ``;
        }
    }
    __decorate([
        property({ type: Boolean })
    ], Underlay.prototype, "open", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-underlay', Underlay);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$w = css `
:host{position:fixed;left:0;top:0;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:100vw;height:100vh;height:-webkit-fill-available;height:fill-available;visibility:hidden;pointer-events:none;z-index:2;transition:visibility 0ms linear var(--spectrum-global-animation-duration-100,.13s)}:host([open]){visibility:visible}@media only screen and (max-device-height:350px),only screen and (max-device-width:400px){:host([responsive]){width:100%;height:100%;max-width:100%;max-height:100%;border-radius:0;margin-top:0}}.modal{visibility:hidden;opacity:0;transition:transform var(--spectrum-global-animation-duration-100,.13s) ease-in-out,opacity var(--spectrum-global-animation-duration-100,.13s) ease-in-out,visibility 0ms linear var(--spectrum-global-animation-duration-100,.13s);pointer-events:none}:host([open]) .modal{visibility:visible;opacity:1;transition-delay:0ms;pointer-events:auto}:host{--spectrum-dialog-confirm-exit-animation-delay:0ms;--spectrum-dialog-fullscreen-margin:32px;--spectrum-dialog-max-height:90vh}.modal{transform:translateY(var(--spectrum-dialog-confirm-entry-animation-distance,var(--spectrum-global-dimension-size-250)));z-index:2;max-height:var(--spectrum-dialog-max-height);border-radius:var(--spectrum-dialog-confirm-border-radius,var(--spectrum-global-dimension-size-50));overflow:hidden;outline:none;pointer-events:auto;transition:opacity var(--spectrum-dialog-confirm-exit-animation-duration,var(--spectrum-global-animation-duration-100)) cubic-bezier(.5,0,1,1) var(--spectrum-dialog-confirm-exit-animation-delay,0ms),visibility 0ms linear calc(var(--spectrum-dialog-confirm-exit-animation-delay, 0ms) + var(--spectrum-dialog-confirm-exit-animation-duration,
var(--spectrum-global-animation-duration-100))),transform 0ms linear calc(var(--spectrum-dialog-confirm-exit-animation-delay, 0ms) + var(--spectrum-dialog-confirm-exit-animation-duration,
var(--spectrum-global-animation-duration-100)))}:host([open]) .modal{transition:transform var(--spectrum-dialog-confirm-entry-animation-duration,var(--spectrum-global-animation-duration-500)) cubic-bezier(0,0,.4,1) var(--spectrum-dialog-confirm-entry-animation-delay,var(--spectrum-global-animation-duration-200)),opacity var(--spectrum-dialog-confirm-entry-animation-duration,var(--spectrum-global-animation-duration-500)) cubic-bezier(0,0,.4,1) var(--spectrum-dialog-confirm-entry-animation-delay,var(--spectrum-global-animation-duration-200));transform:translateY(0)}@media only screen and (max-device-height:350px),only screen and (max-device-width:400px){:host([responsive]) .modal{width:100%;height:100%;max-width:100%;max-height:100%;border-radius:0}}.fullscreen{left:var(--spectrum-dialog-fullscreen-margin);top:var(--spectrum-dialog-fullscreen-margin);right:var(--spectrum-dialog-fullscreen-margin);bottom:var(--spectrum-dialog-fullscreen-margin)}.fullscreen,.fullscreenTakeover{position:fixed;max-width:none;max-height:none}.fullscreenTakeover{left:0;right:0;top:0;bottom:0;box-sizing:border-box;border:none;border-radius:0}.fullscreenTakeover,:host([open]) .fullscreenTakeover{transform:none}.modal{background:var(--spectrum-dialog-confirm-background-color,var(--spectrum-alias-background-color-default))}:host{width:calc(100vw - var(--swc-body-margins-inline, 0 * 1px));height:calc(100vh - var(--swc-body-margins-block, 0 * 1px))}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @element sp-dialog-wrapper
     *
     * @fires secondary - Announces that the "secondary" button has been clicked.
     * @fires cancel - Announces that the "cancel" button has been clicked.
     * @fires confirm - Announces that the "confirm" button has been clicked.
     * @fires close - Announces that the dialog has been closed.
     */
    class DialogWrapper extends FocusVisiblePolyfillMixin(SpectrumElement) {
        constructor() {
            super(...arguments);
            this.error = false;
            this.cancelLabel = '';
            this.confirmLabel = '';
            this.dismissable = false;
            this.footer = '';
            this.hero = '';
            this.heroLabel = '';
            this.noDivider = false;
            this.open = false;
            this.secondaryLabel = '';
            this.headline = '';
            this.responsive = false;
            this.underlay = false;
        }
        static get styles() {
            return [styles$w];
        }
        focus() {
            if (this.shadowRoot) {
                const firstFocusable = this.shadowRoot.querySelector('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"]), [focusable]');
                if (firstFocusable) {
                    if (firstFocusable.updateComplete) {
                        firstFocusable.updateComplete.then(() => firstFocusable.focus());
                        /* c8 ignore next 3 */
                    }
                    else {
                        firstFocusable.focus();
                    }
                    this.removeAttribute('tabindex');
                }
                else {
                    this.dialog.focus();
                }
                /* c8 ignore next 3 */
            }
            else {
                super.focus();
            }
        }
        dismiss() {
            if (!this.dismissable) {
                return;
            }
            this.close();
        }
        clickSecondary() {
            this.dispatchEvent(new Event('secondary', {
                bubbles: true,
            }));
        }
        clickCancel() {
            this.dispatchEvent(new Event('cancel', {
                bubbles: true,
            }));
        }
        clickConfirm() {
            this.dispatchEvent(new Event('confirm', {
                bubbles: true,
            }));
        }
        close() {
            this.open = false;
            this.dispatchEvent(new Event('close', {
                bubbles: true,
            }));
        }
        render() {
            return html `
            ${this.underlay
            ? html `
                      <sp-underlay
                          ?open=${this.open}
                          @click=${this.dismiss}
                      ></sp-underlay>
                  `
            : html ``}
            <div class="modal ${this.mode}">
                <sp-dialog
                    ?dismissable=${this.dismissable}
                    ?no-divider=${this.noDivider}
                    ?error=${this.error}
                    mode=${ifDefined(this.mode ? this.mode : undefined)}
                    size=${ifDefined(this.size ? this.size : undefined)}
                    @close=${this.close}
                >
                    ${this.hero
            ? html `
                              <img
                                  src="${this.hero}"
                                  slot="hero"
                                  aria-hidden=${ifDefined(this.heroLabel ? undefined : 'true')}
                                  alt=${ifDefined(this.heroLabel
                ? this.heroLabel
                : undefined)}
                              />
                          `
            : html ``}
                    ${this.headline
            ? html `
                              <h2 slot="heading">${this.headline}</h2>
                          `
            : html ``}
                    <slot></slot>
                    ${this.footer
            ? html `
                              <div slot="footer">${this.footer}</div>
                          `
            : html ``}
                    ${this.secondaryLabel
            ? html `
                              <sp-button
                                  variant="primary"
                                  slot="button"
                                  @click=${this.clickSecondary}
                              >
                                  ${this.secondaryLabel}
                              </sp-button>
                          `
            : html ``}
                    ${this.cancelLabel
            ? html `
                              <sp-button
                                  variant="secondary"
                                  slot="button"
                                  @click=${this.clickCancel}
                              >
                                  ${this.cancelLabel}
                              </sp-button>
                          `
            : html ``}
                    ${this.confirmLabel
            ? html `
                              <sp-button
                                  variant="cta"
                                  slot="button"
                                  @click=${this.clickConfirm}
                              >
                                  ${this.confirmLabel}
                              </sp-button>
                          `
            : html ``}
                </sp-dialog>
            </div>
        `;
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], DialogWrapper.prototype, "error", void 0);
    __decorate([
        property({ attribute: 'cancel-label' })
    ], DialogWrapper.prototype, "cancelLabel", void 0);
    __decorate([
        property({ attribute: 'confirm-label' })
    ], DialogWrapper.prototype, "confirmLabel", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], DialogWrapper.prototype, "dismissable", void 0);
    __decorate([
        property()
    ], DialogWrapper.prototype, "footer", void 0);
    __decorate([
        property()
    ], DialogWrapper.prototype, "hero", void 0);
    __decorate([
        property({ attribute: 'hero-label' })
    ], DialogWrapper.prototype, "heroLabel", void 0);
    __decorate([
        property({ type: Boolean, reflect: true, attribute: 'no-divider' })
    ], DialogWrapper.prototype, "noDivider", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], DialogWrapper.prototype, "open", void 0);
    __decorate([
        property({ type: String, reflect: true })
    ], DialogWrapper.prototype, "mode", void 0);
    __decorate([
        property({ type: String, reflect: true })
    ], DialogWrapper.prototype, "size", void 0);
    __decorate([
        property({ attribute: 'secondary-label' })
    ], DialogWrapper.prototype, "secondaryLabel", void 0);
    __decorate([
        property()
    ], DialogWrapper.prototype, "headline", void 0);
    __decorate([
        property({ type: Boolean })
    ], DialogWrapper.prototype, "responsive", void 0);
    __decorate([
        property({ type: Boolean })
    ], DialogWrapper.prototype, "underlay", void 0);
    __decorate([
        query('sp-dialog')
    ], DialogWrapper.prototype, "dialog", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-dialog-wrapper', DialogWrapper);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$v = css `
:host{text-align:center;border-width:var(--spectrum-dropzone-border-width,var(--spectrum-alias-border-size-thick));border-radius:var(--spectrum-dropzone-border-radius,var(--spectrum-alias-border-radius-regular));padding:var(--spectrum-dropzone-padding,var(--spectrum-global-dimension-size-900));border-style:dashed}:host([dragged]){border-style:solid}:host(:focus){outline:0;border-style:dashed}:host(:focus.focus-visible),:host(:focus.focus-visible){border-style:solid}:host(:focus.focus-visible),:host(:focus:focus-visible){border-style:solid}:host{border-color:var(--spectrum-dropzone-border-color,var(--spectrum-global-color-gray-300))}:host([dragged]){border-color:var(--spectrum-dropzone-border-color-selected-hover,var(--spectrum-global-color-blue-400));background-color:var(--spectrum-dropzone-background-color-selected-hover,var(--spectrum-alias-highlight-selected))}:host([dragged]) ::slotted(*){color:var(--spectrum-global-color-blue-400)}:host(:focus){border-color:var(--spectrum-dropzone-border-color,var(--spectrum-global-color-gray-300))}:host(:focus) ::slotted(*){color:var(--spectrum-global-color-static-gray-500,#bcbcbc)}:host(:focus.focus-visible),:host(:focus.focus-visible){border-color:var(--spectrum-dropzone-border-color-selected-hover,var(--spectrum-global-color-blue-400))}:host(:focus.focus-visible),:host(:focus:focus-visible){border-color:var(--spectrum-dropzone-border-color-selected-hover,var(--spectrum-global-color-blue-400))}:host(:focus[dragged].focus-visible) ::slotted(*),:host(:focus[dragged].focus-visible) ::slotted(*){color:var(--spectrum-global-color-blue-400)}:host(:focus[dragged].focus-visible) ::slotted(*),:host(:focus[dragged]:focus-visible) ::slotted(*){color:var(--spectrum-global-color-blue-400)}:host{display:block;--spectrum-dropzone-illustration-color:var(--spectrum-global-color-static-blue-400)}::slotted(*){font-family:var(--spectrum-body-m-text-font-family,var(--spectrum-alias-body-text-font-family));font-size:var(--spectrum-body-s-text-size,var(--spectrum-alias-font-size-default));font-weight:var(--spectrum-body-s-text-font-weight,var(--spectrum-alias-body-text-font-weight));line-height:var(--spectrum-body-s-text-line-height,var(--spectrum-alias-body-text-line-height));font-style:var(--spectrum-body-s-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-body-s-text-letter-spacing,var(--spectrum-global-font-letter-spacing-none));text-transform:var(--spectrum-body-s-text-transform,none);margin-top:0;margin-bottom:0}:host([dragged]) ::slotted(*){--spectrum-global-color-gray-500:var(--spectrum-dropzone-illustration-color)}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @slot - The default slot on an `sp-dropzone` is a great place to place upload instructions
     * built with an `sp-illustrated-message` or other information, possibly even built from data
     * provided by the upload, to support users successfully interacting with the drag and drop
     * based features of your application
     *
     * @fires sp-dropzone-should-accept - A cancellable event that confirms whether or not
     * a file dropped on the UI should be accepted.
     * @fires sp-dropzone-dragover - Announces when files have been dragged over the UI, but not yet dropped.
     * @fires sp-dropzone-dragleave - Announces when dragged files have been moved out of the UI without having been dropped.
     * @fires sp-dropzone-drop - Announces when dragged files have been dropped on the UI.
     */
    class Dropzone extends SpectrumElement {
        constructor() {
            super(...arguments);
            this._dropEffect = 'copy';
            this.isDragged = false;
            this.debouncedDragLeave = null;
        }
        static get styles() {
            return [styles$v];
        }
        /**
         * Controls the feedback (typically visual) the user is given during a drag and drop operation
         * @attr
         * @type {'copy' | 'move' | 'link' | 'none'}
         */
        get dropEffect() {
            return this._dropEffect;
        }
        set dropEffect(value) {
            if (['copy', 'move', 'link', 'none'].includes(value)) {
                this._dropEffect = value;
            }
        }
        connectedCallback() {
            super.connectedCallback();
            this.addEventListener('drop', this.onDrop);
            this.addEventListener('dragover', this.onDragOver);
            this.addEventListener('dragleave', this.onDragLeave);
        }
        disconnectedCallback() {
            super.disconnectedCallback();
            this.removeEventListener('drop', this.onDrop);
            this.removeEventListener('dragover', this.onDragOver);
            this.removeEventListener('dragleave', this.onDragLeave);
        }
        onDragOver(event) {
            const shouldAcceptEvent = new CustomEvent('sp-dropzone-should-accept', {
                bubbles: true,
                cancelable: true,
                composed: true,
                detail: event,
            });
            const shouldAccept = this.dispatchEvent(shouldAcceptEvent);
            if (!event.dataTransfer) {
                return;
            }
            if (!shouldAccept) {
                event.dataTransfer.dropEffect = 'none';
                return;
            }
            event.preventDefault();
            this.clearDebouncedDragLeave();
            this.isDragged = true;
            event.dataTransfer.dropEffect = this.dropEffect;
            const dragOverEvent = new CustomEvent('sp-dropzone-dragover', {
                bubbles: true,
                composed: true,
                detail: event,
            });
            this.dispatchEvent(dragOverEvent);
        }
        onDragLeave(event) {
            this.clearDebouncedDragLeave();
            this.debouncedDragLeave = window.setTimeout(() => {
                this.isDragged = false;
                const dragLeave = new CustomEvent('sp-dropzone-dragleave', {
                    bubbles: true,
                    composed: true,
                    detail: event,
                });
                this.dispatchEvent(dragLeave);
            }, 100);
        }
        onDrop(event) {
            event.preventDefault();
            this.clearDebouncedDragLeave();
            this.isDragged = false;
            const dropEvent = new CustomEvent('sp-dropzone-drop', {
                bubbles: true,
                composed: true,
                detail: event,
            });
            this.dispatchEvent(dropEvent);
        }
        render() {
            return html `
            <slot></slot>
        `;
        }
        clearDebouncedDragLeave() {
            if (this.debouncedDragLeave) {
                clearTimeout(this.debouncedDragLeave);
                this.debouncedDragLeave = null;
            }
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true, attribute: 'dragged' })
    ], Dropzone.prototype, "isDragged", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-dropzone', Dropzone);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$u = css `
:host{--spectrum-fieldgroup-margin:var(--spectrum-global-dimension-size-200);display:flex;vertical-align:top;flex-wrap:wrap}:host([dir=ltr][horizontal]) .spectrum-FieldGroup-item:not(:last-child){margin-right:var(--spectrum-fieldgroup-margin)}:host([dir=rtl][horizontal]) .spectrum-FieldGroup-item:not(:last-child){margin-left:var(--spectrum-fieldgroup-margin)}:host([vertical]){display:inline-flex;flex-direction:column}:host([dir=rtl]:not([vertical])) ::slotted(:not(:last-child)),:host([horizontal][dir=rtl]) ::slotted(:not(:last-child)){margin:0 0 0 var(--spectrum-global-dimension-size-200)}:host([dir=ltr]:not([vertical])) ::slotted(:not(:last-child)),:host([horizontal][dir=ltr]) ::slotted(:not(:last-child)){margin:0 var(--spectrum-global-dimension-size-200) 0 0}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @element sp-field-group
     */
    class FieldGroup extends SpectrumElement {
        constructor() {
            super(...arguments);
            this.horizontal = false;
            this.vertical = false;
        }
        static get styles() {
            return [styles$u];
        }
        render() {
            return html `
            <slot></slot>
        `;
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], FieldGroup.prototype, "horizontal", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], FieldGroup.prototype, "vertical", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-field-group', FieldGroup);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const Asterisk100Icon = () => {
        return tag$1 `<svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 8 8"
    aria-hidden="true"
    fill="currentColor"
  >
    <path
      d="M6.575 6.555c.055.056.092.13 0 .2l-1.149.741c-.092.056-.129.019-.166-.074L3.834 4.94 1.963 7c-.019.036-.074.073-.129 0l-.889-.927c-.093-.055-.074-.111 0-.166l2.111-1.76L.648 3.24c-.037 0-.092-.074-.056-.167l.63-1.259a.097.097 0 01.167-.036L3.5 3.148l.13-2.7a.1.1 0 01.081-.111.15.15 0 01.03 0l1.537.2c.093 0 .111.037.093.13l-.723 2.647 2.445-.741c.055-.037.111-.037.148.074l.241 1.37c.018.093 0 .13-.074.13l-2.556.2z"
    />
  </svg>`;
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class IconAsterisk100 extends IconBase {
        render() {
            setCustomTemplateLiteralTag$1(html);
            return Asterisk100Icon();
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-icon-asterisk100', IconAsterisk100);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$t = css `
.spectrum-UIIcon-Asterisk75{width:var(--spectrum-alias-ui-icon-asterisk-size-75,var(--spectrum-global-dimension-static-size-100));height:var(--spectrum-alias-ui-icon-asterisk-size-300)}.spectrum-UIIcon-Asterisk100{width:var(--spectrum-alias-ui-icon-asterisk-size-100,var(--spectrum-global-dimension-size-100));height:var(--spectrum-alias-ui-icon-asterisk-size-100,var(--spectrum-global-dimension-size-100))}.spectrum-UIIcon-Asterisk200{width:var(--spectrum-alias-ui-icon-asterisk-size-200);height:var(--spectrum-alias-ui-icon-asterisk-size-200)}.spectrum-UIIcon-Asterisk300{width:var(--spectrum-alias-ui-icon-asterisk-size-300);height:var(--spectrum-alias-ui-icon-asterisk-size-300)}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$s = css `
:host([size=s]){--spectrum-fieldlabel-text-font-weight:var(--spectrum-fieldlabel-s-text-font-weight,var(--spectrum-alias-body-text-font-weight));--spectrum-fieldlabel-text-line-height:var(--spectrum-fieldlabel-s-text-line-height,var(--spectrum-alias-component-text-line-height));--spectrum-fieldlabel-text-size:var(--spectrum-fieldlabel-s-text-size,var(--spectrum-global-dimension-font-size-75));--spectrum-fieldlabel-asterisk-gap:var(--spectrum-fieldlabel-s-asterisk-gap,var(--spectrum-global-dimension-size-25));--spectrum-fieldlabel-asterisk-margin-y:var(--spectrum-fieldlabel-s-asterisk-margin-y,var(--spectrum-global-dimension-size-50));--spectrum-fieldlabel-padding-top:var(--spectrum-fieldlabel-s-padding-top,var(--spectrum-global-dimension-size-50));--spectrum-fieldlabel-padding-bottom:var(--spectrum-fieldlabel-s-padding-bottom,var(--spectrum-global-dimension-size-65))}:host([size=m]){--spectrum-fieldlabel-text-font-weight:var(--spectrum-fieldlabel-m-text-font-weight,var(--spectrum-alias-body-text-font-weight));--spectrum-fieldlabel-text-line-height:var(--spectrum-fieldlabel-m-text-line-height,var(--spectrum-alias-component-text-line-height));--spectrum-fieldlabel-text-size:var(--spectrum-fieldlabel-m-text-size,var(--spectrum-global-dimension-font-size-75));--spectrum-fieldlabel-asterisk-gap:var(--spectrum-fieldlabel-m-asterisk-gap,var(--spectrum-global-dimension-size-25));--spectrum-fieldlabel-asterisk-margin-y:var(--spectrum-fieldlabel-m-asterisk-margin-y,var(--spectrum-global-dimension-size-50));--spectrum-fieldlabel-padding-top:var(--spectrum-fieldlabel-m-padding-top,var(--spectrum-global-dimension-size-50));--spectrum-fieldlabel-padding-bottom:var(--spectrum-fieldlabel-m-padding-bottom,var(--spectrum-global-dimension-size-65))}:host([size=l]){--spectrum-fieldlabel-text-font-weight:var(--spectrum-fieldlabel-l-text-font-weight,var(--spectrum-alias-body-text-font-weight));--spectrum-fieldlabel-text-line-height:var(--spectrum-fieldlabel-l-text-line-height,var(--spectrum-alias-component-text-line-height));--spectrum-fieldlabel-text-size:var(--spectrum-fieldlabel-l-text-size,var(--spectrum-global-dimension-font-size-100));--spectrum-fieldlabel-asterisk-gap:var(--spectrum-fieldlabel-l-asterisk-gap,var(--spectrum-global-dimension-size-25));--spectrum-fieldlabel-asterisk-margin-y:var(--spectrum-fieldlabel-l-asterisk-margin-y,var(--spectrum-global-dimension-size-50));--spectrum-fieldlabel-padding-top:var(--spectrum-fieldlabel-l-padding-top,var(--spectrum-global-dimension-size-75));--spectrum-fieldlabel-padding-bottom:var(--spectrum-fieldlabel-l-padding-bottom,var(--spectrum-global-dimension-size-115))}:host([size=xl]){--spectrum-fieldlabel-text-font-weight:var(--spectrum-fieldlabel-xl-text-font-weight,var(--spectrum-alias-body-text-font-weight));--spectrum-fieldlabel-text-line-height:var(--spectrum-fieldlabel-xl-text-line-height,var(--spectrum-alias-component-text-line-height));--spectrum-fieldlabel-text-size:var(--spectrum-fieldlabel-xl-text-size,var(--spectrum-global-dimension-font-size-200));--spectrum-fieldlabel-asterisk-gap:var(--spectrum-fieldlabel-xl-asterisk-gap,var(--spectrum-global-dimension-size-25));--spectrum-fieldlabel-asterisk-margin-y:var(--spectrum-fieldlabel-xl-asterisk-margin-y,var(--spectrum-global-dimension-size-50));--spectrum-fieldlabel-padding-top:var(--spectrum-fieldlabel-xl-padding-top,var(--spectrum-global-dimension-size-115));--spectrum-fieldlabel-padding-bottom:var(--spectrum-fieldlabel-xl-padding-bottom,var(--spectrum-global-dimension-size-130))}:host{display:block;box-sizing:border-box;padding-top:var(--spectrum-fieldlabel-padding-top);padding-bottom:var(--spectrum-fieldlabel-padding-bottom);padding-left:0;padding-right:0;font-size:var(--spectrum-fieldlabel-text-size);font-weight:var(--spectrum-fieldlabel-text-font-weight);line-height:var(--spectrum-fieldlabel-text-line-height);vertical-align:top;-webkit-font-smoothing:subpixel-antialiased;-moz-osx-font-smoothing:auto;font-smoothing:subpixel-antialiased}:host([dir=ltr]) .requiredIcon{margin-left:var(--spectrum-fieldlabel-asterisk-gap);margin-right:0}:host([dir=rtl]) .requiredIcon{margin-right:var(--spectrum-fieldlabel-asterisk-gap);margin-left:0}.requiredIcon{margin-top:var(--spectrum-fieldlabel-asterisk-margin-y);margin-bottom:0}:host([dir=ltr][side-aligned=start]){padding-left:0;padding-right:var(--spectrum-fieldlabel-side-m-padding-right,var(--spectrum-global-dimension-size-100))}:host([dir=rtl][side-aligned=start]){padding-right:0;padding-left:var(--spectrum-fieldlabel-side-m-padding-right,var(--spectrum-global-dimension-size-100))}:host([side-aligned=start]){display:inline-block;padding-top:var(--spectrum-fieldlabel-side-m-padding-top,var(--spectrum-global-dimension-size-100));padding-bottom:0}:host([dir=ltr][side-aligned=start]) .requiredIcon{margin-left:var(--spectrum-fieldlabel-asterisk-gap);margin-right:0}:host([dir=rtl][side-aligned=start]) .requiredIcon{margin-right:var(--spectrum-fieldlabel-asterisk-gap);margin-left:0}:host([side-aligned=start]) .requiredIcon{margin-top:var(--spectrum-fieldlabel-side-m-asterisk-margin-y,var(--spectrum-global-dimension-size-50));margin-bottom:0}:host([dir=ltr][side-aligned=end]){text-align:right}:host([dir=rtl][side-aligned=end]){text-align:left}:host([dir=ltr][side-aligned=end]){padding-left:0;padding-right:var(--spectrum-fieldlabel-side-m-padding-right,var(--spectrum-global-dimension-size-100))}:host([dir=rtl][side-aligned=end]){padding-right:0;padding-left:var(--spectrum-fieldlabel-side-m-padding-right,var(--spectrum-global-dimension-size-100))}:host([side-aligned=end]){display:inline-block;padding-top:var(--spectrum-fieldlabel-side-m-padding-top,var(--spectrum-global-dimension-size-100));padding-bottom:0}:host{color:var(--spectrum-fieldlabel-m-text-color,var(--spectrum-alias-label-text-color))}:host([disabled]){color:var(--spectrum-fieldlabel-m-text-color-disabled,var(--spectrum-alias-text-color-disabled))}:host([disabled]) .requiredIcon{color:var(--spectrum-fieldlabel-m-asterisk-color-disabled,var(--spectrum-alias-text-color-disabled))}.requiredIcon{color:var(--spectrum-fieldlabel-m-asterisk-color,var(--spectrum-global-color-gray-600))}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @element sp-field-label
     */
    class FieldLabel extends SizedMixin(SpectrumElement) {
        constructor() {
            super(...arguments);
            this.disabled = false;
            this.id = '';
            this.for = '';
            this.required = false;
        }
        static get styles() {
            return [styles$s, styles$t];
        }
        handleClick() {
            if (!this.target || this.disabled)
                return;
            this.target.focus();
            const parent = this.getRootNode();
            const target = this.target;
            const targetParent = target.getRootNode();
            const targetHost = targetParent.host;
            if (targetParent === parent && target.forceFocusVisible) {
                target.forceFocusVisible();
            }
            else if (targetHost && targetHost.forceFocusVisible) {
                targetHost.forceFocusVisible();
            }
        }
        async manageFor() {
            if (!this.for) {
                return;
            }
            const parent = this.getRootNode();
            const target = parent.querySelector(`#${this.for}`);
            if (!target) {
                return;
            }
            if (typeof target.updateComplete !== 'undefined') {
                await target.updateComplete;
            }
            this.target = target.focusElement || target;
            if (this.target) {
                const targetParent = this.target.getRootNode();
                if (targetParent === parent) {
                    this.target.setAttribute('aria-labelledby', this.id);
                }
                else {
                    this.target.setAttribute('aria-label', (this.textContent || /* c8 ignore next */ '').trim());
                }
            }
            return Promise.resolve();
        }
        render() {
            return html `
            <label>
                <slot></slot>
                ${this.required
            ? html `
                          <sp-icon-asterisk100
                              class="requiredIcon spectrum-UIIcon-Asterisk100"
                          ></sp-icon-asterisk100>
                      `
            : html ``}
            </label>
        `;
        }
        firstUpdated(changes) {
            super.firstUpdated(changes);
            if (!this.hasAttribute('id')) {
                this.setAttribute('id', `${this.tagName.toLowerCase()}-${FieldLabel.instanceCount++}`);
            }
            this.addEventListener('click', this.handleClick);
        }
        updated(changes) {
            super.updated(changes);
            if (changes.has('for') || changes.has('id')) {
                this.manageFor();
            }
        }
    }
    /**
     * @private
     */
    FieldLabel.instanceCount = 0;
    __decorate([
        property({ type: Boolean, reflect: true })
    ], FieldLabel.prototype, "disabled", void 0);
    __decorate([
        property({ type: String })
    ], FieldLabel.prototype, "id", void 0);
    __decorate([
        property({ type: String })
    ], FieldLabel.prototype, "for", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], FieldLabel.prototype, "required", void 0);
    __decorate([
        property({ type: String, reflect: true, attribute: 'side-aligned' })
    ], FieldLabel.prototype, "sideAligned", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-field-label', FieldLabel);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-icon', Icon);

    class Iconset extends LitElement {
        constructor() {
            super(...arguments);
            this.registered = false;
            this.handleRemoved = ({ detail, }) => {
                if (detail.name === this.name) {
                    this.registered = false;
                    this.addIconset();
                }
            };
        }
        firstUpdated() {
            // force no display for all iconsets
            this.style.display = 'none';
        }
        /**
         * Name of the iconset, used by the IconsetRegistry to serve this icon set
         * to consuming icons.
         */
        set name(value) {
            // if we're already registered in the iconset registry
            // we'll need to update our registration
            if (this.registered) {
                if (this._name) {
                    // remove from the iconset map using the old name
                    IconsetRegistry.getInstance().removeIconset(this._name);
                }
                if (value) {
                    // set in the map using the new name
                    IconsetRegistry.getInstance().addIconset(value, this);
                }
            }
            this._name = value;
        }
        get name() {
            return this._name;
        }
        /**
         * On updated we register the iconset if we're not already registered
         */
        connectedCallback() {
            super.connectedCallback();
            this.addIconset();
            window.addEventListener('sp-iconset-removed', this.handleRemoved);
        }
        /**
         * On disconnected we remove the iconset
         */
        disconnectedCallback() {
            super.disconnectedCallback();
            window.removeEventListener('sp-iconset-removed', this.handleRemoved);
            this.removeIconset();
        }
        addIconset() {
            if (!this.name || this.registered) {
                return;
            }
            IconsetRegistry.getInstance().addIconset(this.name, this);
            this.registered = true;
        }
        removeIconset() {
            if (!this.name) {
                return;
            }
            IconsetRegistry.getInstance().removeIconset(this.name);
            this.registered = false;
        }
    }
    __decorate([
        property()
    ], Iconset.prototype, "name", null);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class IconsetSVG extends Iconset {
        constructor() {
            super(...arguments);
            this.iconMap = new Map();
        }
        /**
         * First updated handler just ensures we've processed any slotted symbols
         */
        updated(changedProperties) {
            if (!this.slotContainer) {
                return;
            }
            const currentSVGNodes = this.getSVGNodes(this.slotContainer);
            this.updateSVG(currentSVGNodes);
            super.updated(changedProperties);
        }
        /**
         * Applies the requested icon from this iconset instance to the given element.
         *
         * @param el - the element to apply the icon to
         * @param icon - the name of the icon within this set to apply.
         */
        async applyIconToElement(el, icon, _size, label) {
            await this.updateComplete;
            const iconSymbol = this.iconMap.get(icon);
            if (!iconSymbol) {
                throw new Error(`Unable to find icon ${icon}`);
            }
            // we cannot share a single SVG globally across shadowroot boundaries
            // so copy the template node so we can inject it where we need it
            const clonedNode = this.prepareSvgClone(iconSymbol);
            clonedNode.setAttribute('role', 'img');
            if (label) {
                clonedNode.setAttribute('aria-label', label);
            }
            else {
                clonedNode.setAttribute('aria-hidden', 'true');
            }
            // append the svg to the node either in its shadowroot or directly into its dom
            if (el.shadowRoot) {
                el.shadowRoot.appendChild(clonedNode);
            }
            else {
                el.appendChild(clonedNode);
            }
        }
        /**
         * Returns a list of all icons in this iconset.
         */
        getIconList() {
            return [...this.iconMap.keys()];
        }
        prepareSvgClone(sourceSvg) {
            const content = sourceSvg.cloneNode(true);
            // we're going to create a new svg element that will have our symbol geometry inside
            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            const viewBox = content.getAttribute('viewBox') || '';
            // inline style isn't ideal but will work in all cases and means our icons don't need to know
            // if they are svg or spritesheet provided
            const cssText = 'pointer-events: none; display: block; width: 100%; height: 100%;';
            svg.style.cssText = cssText;
            // copy the viewbox and other properties into the svg
            svg.setAttribute('viewBox', viewBox);
            svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
            svg.setAttribute('focusable', 'false');
            // move all the child nodes over to the svg
            while (content.childNodes.length > 0) {
                svg.appendChild(content.childNodes[0]);
            }
            return svg;
        }
        getSVGIconName(icon) {
            return icon;
        }
        getSanitizedIconName(icon) {
            return icon;
        }
        renderDefaultContent() {
            return html ``;
        }
        render() {
            return html `
            <slot @slotchange=${this.onSlotChange}>
                ${this.renderDefaultContent()}
            </slot>
        `;
        }
        updateSVG(nodes) {
            // iterate over the nodes that were passed in, and find all the top level symbols
            const symbols = nodes.reduce((prev, svgNode) => {
                const containedSymbols = svgNode.querySelectorAll('symbol');
                prev.push(...containedSymbols);
                return prev;
            }, []);
            symbols.forEach((symbol) => {
                this.iconMap.set(this.getSanitizedIconName(symbol.id), symbol);
            });
        }
        getSVGNodes(slotTarget) {
            const nodes = slotTarget.assignedNodes({ flatten: true });
            // find all the svg nodes
            const svgNodes = nodes.filter((node) => {
                return node.nodeName === 'svg';
            });
            return svgNodes;
        }
        onSlotChange(event) {
            const slotTarget = event.target;
            const svgNodes = this.getSVGNodes(slotTarget);
            this.updateSVG(svgNodes);
        }
    }
    __decorate([
        query('slot')
    ], IconsetSVG.prototype, "slotContainer", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    var iconsSVG = svg `<svg xmlns="http://www.w3.org/2000/svg"><symbol id="spectrum-icon-Arrow100" viewBox="0 0 10 10"><path d="M9.7 4.387L6.623 1.262a.875.875 0 10-1.247 1.226l1.61 1.637H.925a.875.875 0 000 1.75h6.062l-1.61 1.637a.875.875 0 101.247 1.226l3.075-3.125a.874.874 0 000-1.226z"/></symbol><symbol id="spectrum-icon-Arrow200" viewBox="0 0 12 12"><path d="M11.284 5.356L7.718 1.788a.911.911 0 10-1.29 1.29l2.012 2.01H1.286a.911.911 0 100 1.823H8.44L6.429 8.923a.911.911 0 001.289 1.289l3.566-3.567a.912.912 0 000-1.29z"/></symbol><symbol id="spectrum-icon-Arrow300" viewBox="0 0 14 14"><path d="M12.893 6.33L8.826 2.261a.95.95 0 10-1.344 1.341L9.93 6.051H1.621a.95.95 0 100 1.898H9.93l-2.447 2.447a.95.95 0 001.344 1.342l4.067-4.067a.95.95 0 000-1.342z"/></symbol><symbol id="spectrum-icon-Arrow400" viewBox="0 0 16 16"><path d="M14.572 7.3l-4.63-4.63a.989.989 0 00-1.399 1.398l2.942 2.943H1.87a.99.99 0 000 1.978h9.615l-2.942 2.943a.989.989 0 101.398 1.398l4.631-4.63a.988.988 0 000-1.4z"/></symbol><symbol id="spectrum-icon-Arrow500" viewBox="0 0 18 18"><path d="M16.336 8.271l-5.269-5.267A1.03 1.03 0 109.61 4.46l3.51 3.509H2.021a1.03 1.03 0 000 2.06H13.12l-3.51 3.51a1.03 1.03 0 101.457 1.456l5.269-5.268a1.03 1.03 0 000-1.456z"/></symbol><symbol id="spectrum-icon-Arrow600" viewBox="0 0 20 20"><path d="M18.191 9.241l-5.986-5.987a1.073 1.073 0 00-1.518 1.517l4.155 4.156H2.063a1.073 1.073 0 100 2.146h12.779l-4.154 4.155a1.073 1.073 0 101.517 1.518l5.986-5.987a1.073 1.073 0 000-1.518z"/></symbol><symbol id="spectrum-icon-Arrow75" viewBox="0 0 10 10"><path d="M9.26 4.406L6.528 1.672A.84.84 0 005.34 2.859L6.64 4.16H1.396a.84.84 0 000 1.68H6.64l-1.301 1.3a.84.84 0 001.188 1.188l2.734-2.734a.84.84 0 000-1.188z"/></symbol><symbol id="spectrum-icon-Asterisk100" viewBox="0 0 8 8"><path d="M6.575 6.555c.055.056.092.13 0 .2l-1.149.741c-.092.056-.129.019-.166-.074L3.834 4.94 1.963 7c-.019.036-.074.073-.129 0l-.889-.927c-.093-.055-.074-.111 0-.166l2.111-1.76L.648 3.24c-.037 0-.092-.074-.056-.167l.63-1.259a.097.097 0 01.167-.036L3.5 3.148l.13-2.7a.1.1 0 01.081-.111.15.15 0 01.03 0l1.537.2c.093 0 .111.037.093.13l-.723 2.647 2.445-.741c.055-.037.111-.037.148.074l.241 1.37c.018.093 0 .13-.074.13l-2.556.2z"/></symbol><symbol id="spectrum-icon-Asterisk200" viewBox="0 0 10 10"><path d="M7.861 7.953c.062.063.1.146 0 .23l-1.293.834c-.1.063-.145.021-.187-.083l-1.6-2.793-2.105 2.314c-.021.04-.083.082-.145 0l-1-1.043c-.1-.062-.083-.125 0-.187l2.375-1.981-2.715-1.026c-.042 0-.1-.083-.063-.188l.707-1.412a.111.111 0 01.136-.074.116.116 0 01.052.034l2.378 1.54.146-3.043A.11.11 0 014.638.95a.161.161 0 01.034 0l1.73.23c.1 0 .125.042.1.146l-.814 2.979 2.751-.834c.062-.042.125-.042.167.083l.271 1.542c.02.1 0 .146-.083.146l-2.876.23z"/></symbol><symbol id="spectrum-icon-Asterisk300" viewBox="0 0 10 10"><path d="M8.266 8.324c.07.071.116.164 0 .258l-1.454.938c-.116.071-.163.024-.21-.094l-1.8-3.141-2.367 2.6c-.024.045-.094.092-.163 0l-1.13-1.167c-.118-.07-.094-.141 0-.21l2.671-2.227L.766 4.13c-.047 0-.116-.094-.071-.211l.8-1.593a.124.124 0 01.153-.084.13.13 0 01.058.038l2.669 1.738.164-3.422a.124.124 0 01.1-.14.186.186 0 01.038 0l1.945.258c.118 0 .14.047.118.164l-.915 3.349 3.094-.938c.07-.047.14-.047.187.094l.3 1.734c.023.118 0 .164-.094.164l-3.234.258z"/></symbol><symbol id="spectrum-icon-Asterisk75" viewBox="0 0 8 8"><path d="M6.26 6.463c.049.05.082.116 0 .181l-1.022.659c-.082.05-.115.017-.148-.066L3.822 5.03 2.16 6.859c-.017.032-.066.065-.115 0l-.79-.824c-.083-.049-.066-.1 0-.148l1.877-1.565L.99 3.516c-.033 0-.082-.066-.05-.148l.56-1.119a.087.087 0 01.108-.059.09.09 0 01.04.027l1.878 1.218.116-2.4a.087.087 0 01.072-.1h.027l1.367.181c.083 0 .1.033.083.116L4.55 3.581l2.174-.659c.049-.033.1-.033.132.066l.214 1.218c.016.083 0 .115-.066.115l-2.273.181z"/></symbol><symbol id="spectrum-icon-Checkmark100" viewBox="0 0 10 10"><path d="M3.5 9.5a.999.999 0 01-.774-.368l-2.45-3a1 1 0 111.548-1.264l1.657 2.028 4.68-6.01A1 1 0 019.74 2.114l-5.45 7a1 1 0 01-.777.386z"/></symbol><symbol id="spectrum-icon-Checkmark200" viewBox="0 0 12 12"><path d="M4.313 10.98a1.042 1.042 0 01-.8-.375L.647 7.165a1.042 1.042 0 011.6-1.333l2.042 2.45 5.443-6.928a1.042 1.042 0 011.64 1.287l-6.24 7.94a1.04 1.04 0 01-.804.399z"/></symbol><symbol id="spectrum-icon-Checkmark300" viewBox="0 0 14 14"><path d="M5.102 12.514a1.087 1.087 0 01-.834-.39L.988 8.19a1.085 1.085 0 011.668-1.39l2.421 2.906 6.243-7.947a1.085 1.085 0 011.707 1.34L5.955 12.1a1.089 1.089 0 01-.838.415z"/></symbol><symbol id="spectrum-icon-Checkmark400" viewBox="0 0 16 16"><path d="M5.864 14.114a1.13 1.13 0 01-.868-.407L1.25 9.21a1.13 1.13 0 111.736-1.448l2.854 3.425 7.148-9.1a1.13 1.13 0 111.778 1.397L6.753 13.682a1.13 1.13 0 01-.872.432z"/></symbol><symbol id="spectrum-icon-Checkmark50" viewBox="0 0 10 10"><path d="M3.815 8.687a.921.921 0 01-.708-.332l-1.891-2.27a.921.921 0 011.416-1.18L3.794 6.3l3.56-4.531a.921.921 0 111.45 1.138L4.54 8.335a.921.921 0 01-.712.351z"/></symbol><symbol id="spectrum-icon-Checkmark500" viewBox="0 0 16 16"><path d="M5.597 14.784a1.177 1.177 0 01-.905-.424L.417 9.229a1.177 1.177 0 111.809-1.508l3.343 4.013 8.174-10.402a1.177 1.177 0 011.852 1.456L6.523 14.334a1.178 1.178 0 01-.91.45z"/></symbol><symbol id="spectrum-icon-Checkmark600" viewBox="0 0 18 18"><path d="M6.297 16.534a1.228 1.228 0 01-.942-.442L.48 10.244a1.227 1.227 0 011.885-1.57l3.904 4.684L15.6 1.482a1.227 1.227 0 011.93 1.516L7.262 16.065a1.229 1.229 0 01-.947.469z"/></symbol><symbol id="spectrum-icon-Checkmark75" viewBox="0 0 10 10"><path d="M3.667 9.07a.96.96 0 01-.737-.344L.753 6.114a.96.96 0 111.474-1.23l1.418 1.701 4.112-5.233a.96.96 0 011.51 1.186L4.422 8.704a.962.962 0 01-.741.367z"/></symbol><symbol id="spectrum-icon-Chevron100" viewBox="0 0 10 10"><path d="M3 9.95a.875.875 0 01-.615-1.498L5.88 5 2.385 1.547A.875.875 0 013.615.302L7.74 4.377a.876.876 0 010 1.246L3.615 9.698A.872.872 0 013 9.95z"/></symbol><symbol id="spectrum-icon-Chevron200" viewBox="0 0 12 12"><path d="M9.034 5.356L4.343.663a.911.911 0 00-1.29 1.289L7.102 6l-4.047 4.047a.911.911 0 101.289 1.29l4.691-4.692a.912.912 0 000-1.29z"/></symbol><symbol id="spectrum-icon-Chevron300" viewBox="0 0 14 14"><path d="M10.639 7a.947.947 0 00-.278-.671l-.003-.002-5.33-5.33a.95.95 0 00-1.342 1.342L8.346 7l-4.661 4.66a.95.95 0 101.342 1.343l5.33-5.33.003-.001A.947.947 0 0010.64 7z"/></symbol><symbol id="spectrum-icon-Chevron400" viewBox="0 0 16 16"><path d="M4.97 15.044a.989.989 0 01-.698-1.688L9.627 8 4.27 2.644A.989.989 0 015.67 1.246L11.726 7.3a.988.988 0 010 1.398L5.67 14.754a.985.985 0 01-.7.29z"/></symbol><symbol id="spectrum-icon-Chevron500" viewBox="0 0 16 16"><path d="M12.133 7.271L5.263.401a1.03 1.03 0 00-1.457 1.457L9.947 8l-6.141 6.142a1.03 1.03 0 001.457 1.457l6.87-6.87a1.03 1.03 0 000-1.457z"/></symbol><symbol id="spectrum-icon-Chevron600" viewBox="0 0 18 18"><path d="M5.04 17.863a1.073 1.073 0 01-.759-1.832L11.313 9 4.28 1.969A1.073 1.073 0 015.8.45l7.79 7.79a1.073 1.073 0 010 1.518l-7.79 7.79a1.07 1.07 0 01-.759.314z"/></symbol><symbol id="spectrum-icon-Chevron75" viewBox="0 0 10 10"><path d="M7.482 4.406l-.001-.001L3.86.783a.84.84 0 00-1.188 1.188L5.702 5l-3.03 3.03A.84.84 0 003.86 9.216l3.621-3.622h.001a.84.84 0 000-1.19z"/></symbol><symbol id="spectrum-icon-CornerTriangle100" viewBox="0 0 5 5"><path d="M4.763 0a.248.248 0 00-.177.073l-4.5 4.5A.25.25 0 00.263 5h4.5a.25.25 0 00.25-.25V.25a.25.25 0 00-.25-.25z"/></symbol><symbol id="spectrum-icon-CornerTriangle200" viewBox="0 0 6 6"><path d="M5.719.37a.281.281 0 00-.2.082L.452 5.519a.281.281 0 00.2.481h5.067A.281.281 0 006 5.719V.652A.281.281 0 005.72.37z"/></symbol><symbol id="spectrum-icon-CornerTriangle300" viewBox="0 0 7 7"><path d="M6.683.67a.315.315 0 00-.223.093l-5.7 5.7a.316.316 0 00.224.54h5.7A.316.316 0 007 6.687V.986A.316.316 0 006.684.67z"/></symbol><symbol id="spectrum-icon-CornerTriangle75" viewBox="0 0 5 5"><path d="M4.78.558a.222.222 0 00-.157.065l-4 4a.222.222 0 00.157.379h4a.222.222 0 00.222-.222v-4A.222.222 0 004.78.558z"/></symbol><symbol id="spectrum-icon-Cross100" viewBox="0 0 8 8"><path d="M5.238 4l2.456-2.457A.875.875 0 106.456.306L4 2.763 1.543.306A.875.875 0 00.306 1.544L2.763 4 .306 6.457a.875.875 0 101.238 1.237L4 5.237l2.456 2.457a.875.875 0 101.238-1.237z"/></symbol><symbol id="spectrum-icon-Cross200" viewBox="0 0 10 10"><path d="M6.29 5l2.922-2.922a.911.911 0 00-1.29-1.29L5 3.712 2.078.789a.911.911 0 00-1.29 1.289L3.712 5 .79 7.922a.911.911 0 101.289 1.29L5 6.288l2.923 2.922a.911.911 0 001.289-1.289z"/></symbol><symbol id="spectrum-icon-Cross300" viewBox="0 0 12 12"><path d="M7.344 6l3.395-3.396a.95.95 0 00-1.344-1.342L6 4.657 2.604 1.262a.95.95 0 00-1.342 1.342L4.657 6 1.262 9.396a.95.95 0 001.343 1.343L6 7.344l3.395 3.395a.95.95 0 001.344-1.344z"/></symbol><symbol id="spectrum-icon-Cross400" viewBox="0 0 12 12"><path d="M7.398 6l3.932-3.932A.989.989 0 009.932.67L6 4.602 2.068.67A.989.989 0 00.67 2.068L4.602 6 .67 9.932a.989.989 0 101.398 1.398L6 7.398l3.932 3.932a.989.989 0 001.398-1.398z"/></symbol><symbol id="spectrum-icon-Cross500" viewBox="0 0 14 14"><path d="M8.457 7l4.54-4.54a1.03 1.03 0 00-1.458-1.456L7 5.543l-4.54-4.54a1.03 1.03 0 00-1.457 1.458L5.543 7l-4.54 4.54a1.03 1.03 0 101.457 1.456L7 8.457l4.54 4.54a1.03 1.03 0 001.456-1.458z"/></symbol><symbol id="spectrum-icon-Cross600" viewBox="0 0 16 16"><path d="M9.518 8l5.23-5.228a1.073 1.073 0 00-1.518-1.518L8.001 6.483l-5.229-5.23a1.073 1.073 0 00-1.518 1.519L6.483 8l-5.23 5.229a1.073 1.073 0 101.518 1.518l5.23-5.23 5.228 5.23a1.073 1.073 0 001.518-1.518z"/></symbol><symbol id="spectrum-icon-Cross75" viewBox="0 0 8 8"><path d="M5.188 4l2.14-2.14A.84.84 0 106.141.672L4 2.812 1.86.672A.84.84 0 00.672 1.86L2.812 4 .672 6.14A.84.84 0 101.86 7.328L4 5.188l2.14 2.14A.84.84 0 107.328 6.14z"/></symbol><symbol id="spectrum-icon-Dash100" viewBox="0 0 10 10"><path d="M8.5 6h-7a1 1 0 010-2h7a1 1 0 010 2z"/></symbol><symbol id="spectrum-icon-Dash200" viewBox="0 0 12 12"><path d="M10.021 7.042H1.98a1.042 1.042 0 110-2.083h8.043a1.042 1.042 0 010 2.083z"/></symbol><symbol id="spectrum-icon-Dash300" viewBox="0 0 12 12"><path d="M10.61 7.085H1.39a1.085 1.085 0 010-2.17h9.22a1.085 1.085 0 010 2.17z"/></symbol><symbol id="spectrum-icon-Dash400" viewBox="0 0 14 14"><path d="M12.277 8.13H1.723a1.13 1.13 0 110-2.26h10.554a1.13 1.13 0 110 2.26z"/></symbol><symbol id="spectrum-icon-Dash50" viewBox="0 0 8 8"><path d="M6.634 4.921H1.366a.921.921 0 010-1.842h5.268a.921.921 0 110 1.842z"/></symbol><symbol id="spectrum-icon-Dash500" viewBox="0 0 16 16"><path d="M14.03 9.178H1.969a1.178 1.178 0 110-2.356H14.03a1.178 1.178 0 010 2.356z"/></symbol><symbol id="spectrum-icon-Dash600" viewBox="0 0 18 18"><path d="M15.882 10.227H2.117a1.227 1.227 0 010-2.454h13.765a1.227 1.227 0 010 2.454z"/></symbol><symbol id="spectrum-icon-Dash75" viewBox="0 0 8 8"><path d="M6.99 4.96H1.01a.96.96 0 010-1.92h5.98a.96.96 0 010 1.92z"/></symbol><symbol id="spectrum-icon-DoubleGripper" viewBox="0 0 16 4"><path d="M15.45 1.05H.55a.5.5 0 010-1h14.9a.5.5 0 010 1zm.5 2.4a.5.5 0 00-.5-.5H.55a.5.5 0 000 1h14.9a.5.5 0 00.5-.5z"/></symbol><symbol id="spectrum-icon-SingleGripper" viewBox="0 0 24 2"><path d="M23 2H1a1 1 0 010-2h22a1 1 0 010 2z"/></symbol><symbol id="spectrum-icon-TripleGripper" viewBox="0 0 10 8"><path d="M9.45 1.05H.55a.5.5 0 010-1h8.9a.5.5 0 010 1zm.5 2.45a.5.5 0 00-.5-.5H.55a.5.5 0 000 1h8.9a.5.5 0 00.5-.5zm0 3a.5.5 0 00-.5-.5H.55a.5.5 0 000 1h8.9a.5.5 0 00.5-.5z"/></symbol></svg>`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class IconsMedium extends IconsetSVG {
        constructor() {
            super();
            this.name = 'ui'; // default iconset name for these icons
        }
        renderDefaultContent() {
            return iconsSVG;
        }
        /**
         * Overrides createIconName to make icon strings compatible with spectrum-icon id format
         * @param icon
         * @param size
         */
        getSVGIconName(icon) {
            return `spectrum-icon-${icon}`;
        }
        getSanitizedIconName(icon) {
            return icon.replace('spectrum-icon-', '');
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-icons-medium', IconsMedium);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$r = css `
:host{--spectrum-illustrated-message-description-max-width:500px;--spectrum-illustrated-message-heading-max-width:500px;--spectrum-illustrated-message-illustration-margin-bottom:24px;--spectrum-illustrated-message-heading-margin:0;--spectrum-illustrated-message-description-margin:4px 0 0 0;height:100%;display:flex;flex-direction:column;align-items:center;justify-content:center;text-align:center}#illustration{margin-bottom:var(--spectrum-illustrated-message-illustration-margin-bottom)}#heading{max-width:var(--spectrum-illustrated-message-heading-max-width);margin:var(--spectrum-illustrated-message-heading-margin)}#description{max-width:var(--spectrum-illustrated-message-description-max-width);margin:var(--spectrum-illustrated-message-description-margin);font-style:italic}:host([cta]) #description{font-style:normal}#illustration{color:var(--spectrum-global-color-gray-500);fill:currentColor;stroke:currentColor}::slotted(svg[viewBox]){width:100%}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$q = css `
.spectrum-Body--sizeXXXL{font-size:var(--spectrum-body-xxxl-text-size,var(--spectrum-global-dimension-font-size-600));font-weight:var(--spectrum-body-xxxl-text-font-weight,var(--spectrum-alias-body-text-font-weight));line-height:var(--spectrum-body-xxxl-text-line-height,var(--spectrum-alias-body-text-line-height));font-style:var(--spectrum-body-xxxl-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-body-xxxl-text-letter-spacing,var(--spectrum-global-font-letter-spacing-none));text-transform:var(--spectrum-body-xxxl-text-transform,none);margin-top:0;margin-bottom:0}.spectrum-Body--sizeXXL{font-size:var(--spectrum-body-xxl-text-size,var(--spectrum-global-dimension-font-size-500));font-weight:var(--spectrum-body-xxl-text-font-weight,var(--spectrum-alias-body-text-font-weight));line-height:var(--spectrum-body-xxl-text-line-height,var(--spectrum-alias-body-text-line-height));font-style:var(--spectrum-body-xxl-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-body-xxl-text-letter-spacing,var(--spectrum-global-font-letter-spacing-none));text-transform:var(--spectrum-body-xxl-text-transform,none);margin-top:0;margin-bottom:0}.spectrum-Body--sizeXL{font-size:var(--spectrum-body-xl-text-size,var(--spectrum-global-dimension-font-size-400));font-weight:var(--spectrum-body-xl-text-font-weight,var(--spectrum-alias-body-text-font-weight));line-height:var(--spectrum-body-xl-text-line-height,var(--spectrum-alias-body-text-line-height));font-style:var(--spectrum-body-xl-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-body-xl-text-letter-spacing,var(--spectrum-global-font-letter-spacing-none));text-transform:var(--spectrum-body-xl-text-transform,none);margin-top:0;margin-bottom:0}.spectrum-Body--sizeL{font-size:var(--spectrum-body-l-text-size,var(--spectrum-global-dimension-font-size-300));font-weight:var(--spectrum-body-l-text-font-weight,var(--spectrum-alias-body-text-font-weight));line-height:var(--spectrum-body-l-text-line-height,var(--spectrum-alias-body-text-line-height));font-style:var(--spectrum-body-l-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-body-l-text-letter-spacing,var(--spectrum-global-font-letter-spacing-none));text-transform:var(--spectrum-body-l-text-transform,none);margin-top:0;margin-bottom:0}.spectrum-Body--sizeM{font-size:var(--spectrum-body-m-text-size,var(--spectrum-global-dimension-font-size-200));font-weight:var(--spectrum-body-m-text-font-weight,var(--spectrum-alias-body-text-font-weight));line-height:var(--spectrum-body-m-text-line-height,var(--spectrum-alias-body-text-line-height));font-style:var(--spectrum-body-m-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-body-m-text-letter-spacing,var(--spectrum-global-font-letter-spacing-none));text-transform:var(--spectrum-body-m-text-transform,none);margin-top:0;margin-bottom:0}.spectrum-Body--sizeS{font-size:var(--spectrum-body-s-text-size,var(--spectrum-alias-font-size-default));font-weight:var(--spectrum-body-s-text-font-weight,var(--spectrum-alias-body-text-font-weight));line-height:var(--spectrum-body-s-text-line-height,var(--spectrum-alias-body-text-line-height));font-style:var(--spectrum-body-s-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-body-s-text-letter-spacing,var(--spectrum-global-font-letter-spacing-none));text-transform:var(--spectrum-body-s-text-transform,none);margin-top:0;margin-bottom:0}.spectrum-Body--sizeXS{font-size:var(--spectrum-body-xs-text-size,var(--spectrum-global-dimension-font-size-75));font-weight:var(--spectrum-body-xs-text-font-weight,var(--spectrum-alias-body-text-font-weight));line-height:var(--spectrum-body-xs-text-line-height,var(--spectrum-alias-body-text-line-height));font-style:var(--spectrum-body-xs-text-font-style,var(--spectrum-global-font-style-regular));letter-spacing:var(--spectrum-body-xs-text-letter-spacing,var(--spectrum-global-font-letter-spacing-none));text-transform:var(--spectrum-body-xs-text-transform,none);margin-top:0;margin-bottom:0}.spectrum-Body{font-family:var(--spectrum-body-m-text-font-family,var(--spectrum-alias-body-text-font-family))}.spectrum-Body-strong,strong{font-weight:var(--spectrum-body-m-strong-text-font-weight,var(--spectrum-global-font-weight-bold))}.spectrum-Body-emphasis,em{font-style:var(--spectrum-body-m-emphasis-text-font-style,var(--spectrum-global-font-style-italic))}.spectrum-Body--serif{font-family:var(--spectrum-body-serif-m-text-font-family,var(--spectrum-alias-serif-text-font-family))}.spectrum-Body--sizeXXXL{color:var(--spectrum-body-xxxl-text-color,var(--spectrum-alias-text-color))}.spectrum-Body--sizeXXL{color:var(--spectrum-body-xxl-text-color,var(--spectrum-alias-text-color))}.spectrum-Body--sizeXL{color:var(--spectrum-body-xl-text-color,var(--spectrum-alias-text-color))}.spectrum-Body--sizeL{color:var(--spectrum-body-l-text-color,var(--spectrum-alias-text-color))}.spectrum-Body--sizeM{color:var(--spectrum-body-m-text-color,var(--spectrum-alias-text-color))}.spectrum-Body--sizeS{color:var(--spectrum-body-s-text-color,var(--spectrum-alias-text-color))}.spectrum-Body--sizeXS{color:var(--spectrum-body-xs-text-color,var(--spectrum-alias-text-color))}.spectrum-Body{color:var(--spectrum-body-m-text-color,var(--spectrum-alias-text-color))}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    var bodyStyles = [styles$I, styles$H, styles$q];

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @slot - The SVG that represents the illustration
     */
    class IllustratedMessage extends SpectrumElement {
        constructor() {
            super(...arguments);
            this.heading = '';
            this.description = '';
        }
        static get styles() {
            return [headingStyles, bodyStyles, styles$r];
        }
        render() {
            return html `
            <div id="illustration"><slot></slot></div>
            <h2
                id="heading"
                class="spectrum-Heading spectrum-Heading--sizeL spectrum-Heading--light"
            >
                <slot name="heading">${this.heading}</slot>
            </h2>
            <div id="description" class="spectrum-Body spectrum-Body--sizeS">
                <slot name="description">${this.description}</slot>
            </div>
        `;
        }
    }
    IllustratedMessage.is = 'sp-illustrated-message';
    __decorate([
        property()
    ], IllustratedMessage.prototype, "heading", void 0);
    __decorate([
        property()
    ], IllustratedMessage.prototype, "description", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-illustrated-message', IllustratedMessage);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$p = css `
:host([size=s]){--spectrum-link-primary-text-size:var(--spectrum-link-primary-s-text-size,var(--spectrum-alias-item-text-size-s))}:host([size=m]){--spectrum-link-primary-text-size:var(--spectrum-link-primary-m-text-size,var(--spectrum-alias-item-text-size-m))}:host([size=l]){--spectrum-link-primary-text-size:var(--spectrum-link-primary-l-text-size,var(--spectrum-alias-item-text-size-l))}:host([size=xl]){--spectrum-link-primary-text-size:var(--spectrum-link-primary-xl-text-size,var(--spectrum-alias-item-text-size-xl))}:host([size=l]),:host([size=m]),:host([size=s]),:host([size=xl]){font-size:var(--spectrum-link-primary-text-size)}a{background-color:initial;-webkit-text-decoration-skip:objects;text-decoration:underline;transition:color var(--spectrum-global-animation-duration-100,.13s) ease-in-out;outline:none;cursor:pointer}:host([over-background]) a.focus-visible,:host([over-background]) a.focus-visible,:host([quiet]) a.focus-visible,:host([quiet]) a.focus-visible,a.focus-visible,a.focus-visible{text-decoration:underline;-webkit-text-decoration-style:double;text-decoration-style:double}:host([over-background]) a.focus-visible,:host([over-background]) a:focus-visible,:host([quiet]) a.focus-visible,:host([quiet]) a:focus-visible,a.focus-visible,a:focus-visible{text-decoration:underline;-webkit-text-decoration-style:double;text-decoration-style:double}:host([quiet]) a{text-decoration:none}:host([quiet]) a:hover{text-decoration:underline}a{color:var(--spectrum-link-primary-m-text-color,var(--spectrum-global-color-blue-600))}a:hover{color:var(--spectrum-link-primary-m-text-color-hover,var(--spectrum-global-color-blue-600))}a:active{color:var(--spectrum-link-primary-m-text-color-down,var(--spectrum-global-color-blue-700))}:host([over-background]) a.focus-visible,:host([over-background]) a.focus-visible,:host([quiet]) a.focus-visible,:host([quiet]) a.focus-visible,a.focus-visible,a.focus-visible{color:var(--spectrum-link-primary-m-text-color-key-focus,var(--spectrum-alias-text-color-key-focus))}:host([over-background]) a.focus-visible,:host([over-background]) a:focus-visible,:host([quiet]) a.focus-visible,:host([quiet]) a:focus-visible,a.focus-visible,a:focus-visible{color:var(--spectrum-link-primary-m-text-color-key-focus,var(--spectrum-alias-text-color-key-focus))}.spectrum-Link--secondary,.spectrum-Link--secondary:active,.spectrum-Link--secondary:focus,.spectrum-Link--secondary:hover{color:inherit}:host([over-background]) a{color:var(--spectrum-link-over-background-m-text-color,var(--spectrum-alias-text-color-over-background))}:host([over-background]) a:hover{color:var(--spectrum-link-over-background-m-text-color-hover,var(--spectrum-alias-text-color-over-background))}:host([over-background]) a:active{color:var(--spectrum-link-over-background-m-text-color-down,var(--spectrum-alias-text-color-over-background))}:host([over-background]) a:focus{color:var(--spectrum-link-over-background-m-text-color-key-focus,var(--spectrum-alias-text-color-over-background))}:host{display:inline}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * Spectrum Link Component
     *
     * @attr quiet - uses quiet styles or not
     * @attr over-background - uses over background styles or not
     */
    class Link extends SizedMixin(LikeAnchor(Focusable), {
        noDefaultSize: true,
    }) {
        static get styles() {
            return [styles$p];
        }
        get focusElement() {
            return this.anchorElement;
        }
        render() {
            return this.renderAnchor({ id: 'anchor' });
        }
    }
    __decorate([
        query('#anchor')
    ], Link.prototype, "anchorElement", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-link', Link);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$o = css `
:host{box-sizing:initial;overflow:visible;height:var(--spectrum-listitem-divider-size);margin:calc(var(--spectrum-listitem-divider-padding)/2) var(--spectrum-listitem-padding-y);padding:0;border:none;background-color:var(--spectrum-listitem-m-divider-color,var(--spectrum-alias-border-color-extralight));display:block}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * Spectrum Menu Divider Component
     * @element sp-menu-divider
     *
     */
    class MenuDivider extends SpectrumElement {
        static get styles() {
            return [styles$o];
        }
        firstUpdated() {
            this.setAttribute('role', 'separator');
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-menu-divider', MenuDivider);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$n = css `
.header{display:block;margin:var(--spectrum-listitem-heading-margin);padding:var(--spectrum-listitem-heading-padding);font-size:var(--spectrum-listitem-heading-text-size);font-weight:var(--spectrum-listitem-heading-text-font-weight);line-height:var(--spectrum-listitem-heading-line-height);text-transform:var(--spectrum-listitem-heading-text-transform);letter-spacing:var(--spectrum-listitem-heading-letter-spacing);color:var(--spectrum-listheading-text-color)}:host([dir=ltr]) .header{padding:0 var(--spectrum-global-dimension-size-450) 0 var(--spectrum-global-dimension-size-150)}:host([dir=rtl]) .header{padding:0 var(--spectrum-global-dimension-size-150) 0 var(--spectrum-global-dimension-size-450)}sp-menu{display:block}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * Spectrum Menu Group Component
     * @element sp-menu-group
     *
     * @slot header - headline of the menu group
     * @slot - menu items to be listed in the group
     */
    class MenuGroup extends SpectrumElement {
        constructor() {
            super();
            this.instanceCount = MenuGroup.instances;
            MenuGroup.instances += 1;
        }
        static get styles() {
            return [styles$n];
        }
        render() {
            const labelledby = `menu-heading-category-${this.instanceCount}`;
            return html `
            <span class="header" id=${labelledby} aria-hidden="true">
                <slot name="header"></slot>
            </span>
            <sp-menu role="presentation">
                <slot></slot>
            </sp-menu>
        `;
        }
        firstUpdated() {
            this.setAttribute('role', 'none');
        }
    }
    MenuGroup.instances = 0;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-menu-group', MenuGroup);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$m = css `
#selected{transform:scale(1);opacity:1}:host([dir=ltr]){border-left:var(--spectrum-listitem-focus-indicator-size) solid transparent}:host([dir=rtl]){border-right:var(--spectrum-listitem-focus-indicator-size) solid transparent}:host{cursor:pointer;position:relative;display:flex;align-items:center;box-sizing:border-box;padding:var(--spectrum-listitem-padding-y) var(--spectrum-listitem-padding-right) var(--spectrum-listitem-padding-y) var(--spectrum-listitem-padding-left);margin:0;min-height:var(--spectrum-listitem-height);font-size:var(--spectrum-listitem-text-size);font-weight:var(--spectrum-listitem-text-font-weight);font-style:normal;text-decoration:none}:host(:focus){outline:none}:host([dir=ltr][selected]){padding-right:calc(var(--spectrum-listitem-padding-right) - var(--spectrum-popover-border-size,
var(--spectrum-alias-border-size-thin)))}:host([dir=rtl][selected]){padding-left:calc(var(--spectrum-listitem-padding-right) - var(--spectrum-popover-border-size,
var(--spectrum-alias-border-size-thin)))}:host([selected]) #selected{display:block}.icon,::slotted([slot=icon]){flex-shrink:0;align-self:flex-start}:host([dir=ltr]) .icon+#label,:host([dir=ltr]) slot[name=icon]+#label{margin-left:var(--spectrum-listitem-icon-gap)}:host([dir=rtl]) .icon+#label,:host([dir=rtl]) slot[name=icon]+#label{margin-right:var(--spectrum-listitem-icon-gap)}.icon+#label,slot[name=icon]+#label{width:calc(100% - var(--spectrum-icon-checkmark-medium-width) - var(--spectrum-listitem-icon-gap) - var(--spectrum-listitem-thumbnail-padding-left) - var(--spectrum-alias-workflow-icon-size-m,
var(--spectrum-global-dimension-size-225)))}#label{flex:1 1 auto;line-height:var(--spectrum-listitem-label-line-height);-webkit-hyphens:auto;hyphens:auto;overflow-wrap:break-word;width:calc(100% - var(--spectrum-icon-checkmark-medium-width) - var(--spectrum-listitem-icon-gap))}:host([no-wrap]) #label{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}#selected{display:none;align-self:flex-start}:host([dir=ltr]) #selected,:host([dir=ltr]) .chevron{margin-left:var(--spectrum-listitem-icon-gap)}:host([dir=rtl]) #selected,:host([dir=rtl]) .chevron{margin-right:var(--spectrum-listitem-icon-gap)}#selected{flex-grow:0;margin-top:var(--spectrum-listitem-icon-margin-top)}:host([dir=rtl]) .chevron{transform:matrix(-1,0,0,1,0,0)}:host{background-color:var(--spectrum-listitem-m-background-color,var(--spectrum-alias-background-color-transparent));color:var(--spectrum-listitem-m-text-color,var(--spectrum-alias-text-color))}:host([dir=ltr].focus-visible),:host([dir=ltr].focus-visible),:host([dir=ltr][focused]){border-left-color:var(--spectrum-listitem-m-focus-indicator-color,var(--spectrum-alias-border-color-focus))}:host([dir=ltr].focus-visible),:host([dir=ltr]:focus-visible),:host([dir=ltr][focused]){border-left-color:var(--spectrum-listitem-m-focus-indicator-color,var(--spectrum-alias-border-color-focus))}:host([dir=rtl].focus-visible),:host([dir=rtl].focus-visible),:host([dir=rtl][focused]){border-right-color:var(--spectrum-listitem-m-focus-indicator-color,var(--spectrum-alias-border-color-focus))}:host([dir=rtl].focus-visible),:host([dir=rtl]:focus-visible),:host([dir=rtl][focused]){border-right-color:var(--spectrum-listitem-m-focus-indicator-color,var(--spectrum-alias-border-color-focus))}:host(.focus-visible),:host(.focus-visible),:host([focused]){background-color:var(--spectrum-listitem-m-background-color-key-focus,var(--spectrum-alias-background-color-hover-overlay));color:var(--spectrum-listitem-m-text-color-key-focus,var(--spectrum-alias-text-color))}:host(.focus-visible),:host(:focus-visible),:host([focused]){background-color:var(--spectrum-listitem-m-background-color-key-focus,var(--spectrum-alias-background-color-hover-overlay));color:var(--spectrum-listitem-m-text-color-key-focus,var(--spectrum-alias-text-color))}:host(.is-highlighted),:host(.is-open),:host(:focus),:host(:hover){background-color:var(--spectrum-listitem-m-background-color-hover,var(--spectrum-alias-background-color-hover-overlay));color:var(--spectrum-listitem-m-text-color-hover,var(--spectrum-alias-text-color))}:host([selected]){color:var(--spectrum-listitem-m-text-color-selected,var(--spectrum-alias-text-color))}:host([selected]) #selected{color:var(--spectrum-listitem-m-icon-color-selected,var(--spectrum-alias-icon-color-selected))}.is-active,:host(:active){background-color:var(--spectrum-listitem-m-background-color-down,var(--spectrum-alias-background-color-hover-overlay))}:host([disabled]){background-color:var(--spectrum-listitem-m-background-color-disabled,var(--spectrum-alias-background-color-transparent));background-image:none;color:var(--spectrum-listitem-m-text-color-disabled,var(--spectrum-alias-text-color-disabled));cursor:default}#button{position:absolute;top:0;right:0;bottom:0;left:0}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * Spectrum Menu Item Component
     * @element sp-menu-item
     */
    class MenuItem extends ActionButton {
        constructor() {
            super(...arguments);
            this.focused = false;
            this.noWrap = false;
        }
        static get styles() {
            return [styles$m, styles$M];
        }
        /**
         * Hide this getter from web-component-analyzer until
         * https://github.com/runem/web-component-analyzer/issues/131
         * has been addressed.
         *
         * @private
         */
        get itemText() {
            return (this.textContent || /* c8 ignore next */ '').trim();
        }
        get buttonContent() {
            const content = super.buttonContent;
            if (this.selected) {
                content.push(html `
                <sp-icon-checkmark100
                    id="selected"
                    class="spectrum-UIIcon-Checkmark100 icon"
                ></sp-icon-checkmark100>
            `);
            }
            return content;
        }
        renderButton() {
            return html `
            ${this.buttonContent}
        `;
        }
        firstUpdated(changes) {
            this.setAttribute('tabindex', '-1');
            super.firstUpdated(changes);
            if (!this.hasAttribute('id')) {
                this.id = `sp-menu-item-${MenuItem.instanceCount++}`;
            }
        }
        updated(changes) {
            super.updated(changes);
            if (this.getAttribute('role') === 'option' && changes.has('selected')) {
                this.setAttribute('aria-selected', this.selected ? 'true' : 'false');
            }
        }
        connectedCallback() {
            super.connectedCallback();
            if (!this.hasAttribute('role')) {
                const queryRoleEvent = new CustomEvent('sp-menu-item-query-role', {
                    bubbles: true,
                    composed: true,
                    detail: {
                        role: '',
                    },
                });
                this.dispatchEvent(queryRoleEvent);
                this.setAttribute('role', queryRoleEvent.detail.role || 'menuitem');
            }
        }
    }
    MenuItem.instanceCount = 0;
    __decorate([
        property({ type: Boolean, reflect: true })
    ], MenuItem.prototype, "focused", void 0);
    __decorate([
        property({
            type: Boolean,
            reflect: true,
            attribute: 'no-wrap',
            hasChanged() {
                return false;
            },
        })
    ], MenuItem.prototype, "noWrap", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-menu-item', MenuItem);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$l = css `
:host([size=s]){--spectrum-progressbar-border-radius:var(--spectrum-progressbar-s-border-radius);--spectrum-progressbar-label-gap-y:var(--spectrum-progressbar-s-label-gap-y,var(--spectrum-global-dimension-size-50));--spectrum-progressbar-height:var(--spectrum-progressbar-s-height,var(--spectrum-global-dimension-size-50));--spectrum-progressbar-width:var(--spectrum-progressbar-s-width,var(--spectrum-global-dimension-static-size-2400));--spectrum-progressbar-indeterminate-fill-width:var(--spectrum-progressbar-s-indeterminate-fill-width,var(--spectrum-global-dimension-size-1700));--spectrum-progressbar-indeterminate-duration:var(--spectrum-progressbar-s-indeterminate-duration,var(--spectrum-global-animation-duration-2000));--spectrum-fieldlabel-side-padding-right:var(--spectrum-fieldlabel-side-s-padding-right,var(--spectrum-global-dimension-size-75))}:host([size=m]){--spectrum-progressbar-border-radius:var(--spectrum-progressbar-m-border-radius);--spectrum-progressbar-label-gap-y:var(--spectrum-progressbar-m-label-gap-y,var(--spectrum-global-dimension-size-50));--spectrum-progressbar-height:var(--spectrum-progressbar-m-height,var(--spectrum-global-dimension-size-75));--spectrum-progressbar-width:var(--spectrum-progressbar-m-width,var(--spectrum-global-dimension-static-size-2400));--spectrum-progressbar-indeterminate-fill-width:var(--spectrum-progressbar-m-indeterminate-fill-width,var(--spectrum-global-dimension-size-1700));--spectrum-progressbar-indeterminate-duration:var(--spectrum-progressbar-m-indeterminate-duration,var(--spectrum-global-animation-duration-2000));--spectrum-fieldlabel-side-padding-right:var(--spectrum-fieldlabel-side-m-padding-right,var(--spectrum-global-dimension-size-100))}:host([size=l]){--spectrum-progressbar-label-gap-y:var(--spectrum-progressbar-l-label-gap-y,var(--spectrum-global-dimension-size-50));--spectrum-progressbar-height:var(--spectrum-progressbar-l-height,var(--spectrum-global-dimension-size-100));--spectrum-progressbar-border-radius:var(--spectrum-progressbar-l-border-radius,var(--spectrum-global-dimension-size-50));--spectrum-progressbar-width:var(--spectrum-progressbar-l-width,var(--spectrum-global-dimension-static-size-2500));--spectrum-progressbar-indeterminate-fill-width:var(--spectrum-progressbar-l-indeterminate-fill-width,var(--spectrum-global-dimension-size-1800));--spectrum-progressbar-indeterminate-duration:var(--spectrum-progressbar-l-indeterminate-duration,var(--spectrum-global-animation-duration-2000));--spectrum-fieldlabel-side-padding-right:var(--spectrum-fieldlabel-side-l-padding-right,var(--spectrum-global-dimension-size-150))}:host([size=xl]){--spectrum-progressbar-border-radius:var(--spectrum-progressbar-xl-border-radius);--spectrum-progressbar-label-gap-y:var(--spectrum-progressbar-xl-label-gap-y,var(--spectrum-global-dimension-size-50));--spectrum-progressbar-height:var(--spectrum-progressbar-xl-height,var(--spectrum-global-dimension-size-125));--spectrum-progressbar-width:var(--spectrum-progressbar-xl-width,var(--spectrum-global-dimension-static-size-2800));--spectrum-progressbar-indeterminate-fill-width:var(--spectrum-progressbar-xl-indeterminate-fill-width,var(--spectrum-global-dimension-size-2000));--spectrum-progressbar-indeterminate-duration:var(--spectrum-progressbar-xl-indeterminate-duration,var(--spectrum-global-animation-duration-2000));--spectrum-fieldlabel-side-padding-right:var(--spectrum-fieldlabel-side-xl-padding-right,var(--spectrum-global-dimension-size-200))}:host{position:relative;display:inline-flex;flex-flow:row wrap;justify-content:space-between;align-items:center;width:var(--spectrum-progressbar-width);vertical-align:top}.track{overflow:hidden;width:100%;border-radius:var(--spectrum-progressbar-border-radius);z-index:1}.fill,.track{height:var(--spectrum-progressbar-height)}.fill{border:none;transition:width 1s}:host([dir=ltr]) .label,:host([dir=ltr]) .percentage{text-align:left}:host([dir=rtl]) .label,:host([dir=rtl]) .percentage{text-align:right}.label,.percentage{margin-bottom:var(--spectrum-progressbar-label-gap-y)}.label{flex:1 1 0%}:host([dir=ltr]) .percentage{margin-left:var(--spectrum-fieldlabel-side-padding-right)}:host([dir=rtl]) .percentage{margin-right:var(--spectrum-fieldlabel-side-padding-right)}.percentage{align-self:flex-start}:host([side-label]){display:inline-flex;flex-flow:row;justify-content:space-between;width:auto}:host([side-label]) .track{min-width:var(--spectrum-progressbar-width);flex:1 1 var(--spectrum-progressbar-width)}:host([dir=ltr][side-label]) .label{margin-right:var(--spectrum-fieldlabel-side-padding-right)}:host([dir=rtl][side-label]) .label{margin-left:var(--spectrum-fieldlabel-side-padding-right)}:host([side-label]) .label{flex-grow:0;margin-bottom:0}:host([dir=ltr][side-label]) .percentage{text-align:right}:host([dir=rtl][side-label]) .percentage{text-align:left}:host([dir=ltr][side-label]) .percentage{margin-left:var(--spectrum-fieldlabel-side-padding-right)}:host([dir=rtl][side-label]) .percentage{margin-right:var(--spectrum-fieldlabel-side-padding-right)}:host([side-label]) .percentage{order:3;margin-bottom:0}:host([indeterminate]) .fill{width:var(--spectrum-progressbar-indeterminate-fill-width);position:relative;animation-timing-function:var(--spectrum-progressbar-indeterminate-animation-ease);will-change:transform}:host([dir=ltr][indeterminate]) .fill{animation:indeterminate-loop-ltr var(--spectrum-progressbar-indeterminate-duration) infinite}:host([dir=rtl][indeterminate]) .fill{animation:indeterminate-loop-rtl var(--spectrum-progressbar-indeterminate-duration) infinite}@keyframes indeterminate-loop-ltr{0%{transform:translate(calc(-1*var(--spectrum-progressbar-indeterminate-fill-width)))}to{transform:translate(var(--spectrum-progressbar-width))}}@keyframes indeterminate-loop-rtl{0%{transform:translate(var(--spectrum-progressbar-width))}to{transform:translate(calc(-1*var(--spectrum-progressbar-width)))}}.fill{background:var(--spectrum-progressbar-m-track-fill-color,var(--spectrum-global-color-blue-500))}.track{background-color:var(--spectrum-progressbar-m-track-color,var(--spectrum-alias-track-color-default))}:host([over-background]) .fill{background:var(--spectrum-progressbar-m-over-background-track-fill-color,var(--spectrum-global-color-static-white))}:host([over-background]) .label,:host([over-background]) .percentage{color:var(--spectrum-progressbar-m-over-background-track-fill-color,var(--spectrum-global-color-static-white))}:host([over-background]) .track{background-color:var(--spectrum-progressbar-m-over-background-track-color,var(--spectrum-alias-track-color-over-background))}:host([positive]) .fill{background:var(--spectrum-meter-positive-m-track-fill-color,var(--spectrum-semantic-positive-color-status))}:host(.is-notice) .fill{background:var(--spectrum-meter-notice-m-track-fill-color,var(--spectrum-semantic-notice-color-status))}:host(.is-negative) .fill{background:var(--spectrum-meter-negative-m-track-fill-color,var(--spectrum-semantic-negative-color-status))}.label,.percentage{color:var(--spectrum-fieldlabel-m-text-color,var(--spectrum-alias-label-text-color))}.fill{transform-origin:left}:host([dir=rtl]) .fill{transform-origin:right}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @element sp-meter
     */
    class Meter extends SizedMixin(SpectrumElement) {
        constructor() {
            super(...arguments);
            this.progress = 0;
            this.overBackground = false;
            this.warning = false;
            this.critical = false;
            this.positive = false;
            this.label = '';
            this.sideLabel = false;
        }
        static get styles() {
            return [styles$l];
        }
        render() {
            return html `
            <sp-field-label size=${this.size} class="label">
                <slot>${this.label}</slot>
            </sp-field-label>
            <sp-field-label size=${this.size} class="percentage">
                ${this.progress}%
            </sp-field-label>
            <div class="track">
                <div
                    class="fill"
                    style="transform: scaleX(calc(${this.progress} / 100));"
                ></div>
            </div>
        `;
        }
        firstUpdated(changes) {
            super.firstUpdated(changes);
            this.setAttribute('role', 'progressbar');
        }
        updated(changes) {
            super.updated(changes);
            if (changes.has('progress')) {
                this.setAttribute('aria-valuenow', '' + this.progress);
            }
            if (this.label && changes.has('label')) {
                this.setAttribute('aria-label', this.label);
            }
        }
    }
    __decorate([
        property({ type: Number })
    ], Meter.prototype, "progress", void 0);
    __decorate([
        property({ type: Boolean, reflect: true, attribute: 'over-background' })
    ], Meter.prototype, "overBackground", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Meter.prototype, "warning", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Meter.prototype, "critical", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Meter.prototype, "positive", void 0);
    __decorate([
        property({ type: String, reflect: true })
    ], Meter.prototype, "label", void 0);
    __decorate([
        property({ type: Boolean, reflect: true, attribute: 'side-label' })
    ], Meter.prototype, "sideLabel", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-meter', Meter);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('overlay-trigger', OverlayTrigger);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-picker', Picker);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$k = css `
:host([size=s]){--spectrum-progressbar-border-radius:var(--spectrum-progressbar-s-border-radius);--spectrum-progressbar-label-gap-y:var(--spectrum-progressbar-s-label-gap-y,var(--spectrum-global-dimension-size-50));--spectrum-progressbar-height:var(--spectrum-progressbar-s-height,var(--spectrum-global-dimension-size-50));--spectrum-progressbar-width:var(--spectrum-progressbar-s-width,var(--spectrum-global-dimension-static-size-2400));--spectrum-progressbar-indeterminate-fill-width:var(--spectrum-progressbar-s-indeterminate-fill-width,var(--spectrum-global-dimension-size-1700));--spectrum-progressbar-indeterminate-duration:var(--spectrum-progressbar-s-indeterminate-duration,var(--spectrum-global-animation-duration-2000));--spectrum-fieldlabel-side-padding-right:var(--spectrum-fieldlabel-side-s-padding-right,var(--spectrum-global-dimension-size-75))}:host([size=m]){--spectrum-progressbar-border-radius:var(--spectrum-progressbar-m-border-radius);--spectrum-progressbar-label-gap-y:var(--spectrum-progressbar-m-label-gap-y,var(--spectrum-global-dimension-size-50));--spectrum-progressbar-height:var(--spectrum-progressbar-m-height,var(--spectrum-global-dimension-size-75));--spectrum-progressbar-width:var(--spectrum-progressbar-m-width,var(--spectrum-global-dimension-static-size-2400));--spectrum-progressbar-indeterminate-fill-width:var(--spectrum-progressbar-m-indeterminate-fill-width,var(--spectrum-global-dimension-size-1700));--spectrum-progressbar-indeterminate-duration:var(--spectrum-progressbar-m-indeterminate-duration,var(--spectrum-global-animation-duration-2000));--spectrum-fieldlabel-side-padding-right:var(--spectrum-fieldlabel-side-m-padding-right,var(--spectrum-global-dimension-size-100))}:host([size=l]){--spectrum-progressbar-label-gap-y:var(--spectrum-progressbar-l-label-gap-y,var(--spectrum-global-dimension-size-50));--spectrum-progressbar-height:var(--spectrum-progressbar-l-height,var(--spectrum-global-dimension-size-100));--spectrum-progressbar-border-radius:var(--spectrum-progressbar-l-border-radius,var(--spectrum-global-dimension-size-50));--spectrum-progressbar-width:var(--spectrum-progressbar-l-width,var(--spectrum-global-dimension-static-size-2500));--spectrum-progressbar-indeterminate-fill-width:var(--spectrum-progressbar-l-indeterminate-fill-width,var(--spectrum-global-dimension-size-1800));--spectrum-progressbar-indeterminate-duration:var(--spectrum-progressbar-l-indeterminate-duration,var(--spectrum-global-animation-duration-2000));--spectrum-fieldlabel-side-padding-right:var(--spectrum-fieldlabel-side-l-padding-right,var(--spectrum-global-dimension-size-150))}:host([size=xl]){--spectrum-progressbar-border-radius:var(--spectrum-progressbar-xl-border-radius);--spectrum-progressbar-label-gap-y:var(--spectrum-progressbar-xl-label-gap-y,var(--spectrum-global-dimension-size-50));--spectrum-progressbar-height:var(--spectrum-progressbar-xl-height,var(--spectrum-global-dimension-size-125));--spectrum-progressbar-width:var(--spectrum-progressbar-xl-width,var(--spectrum-global-dimension-static-size-2800));--spectrum-progressbar-indeterminate-fill-width:var(--spectrum-progressbar-xl-indeterminate-fill-width,var(--spectrum-global-dimension-size-2000));--spectrum-progressbar-indeterminate-duration:var(--spectrum-progressbar-xl-indeterminate-duration,var(--spectrum-global-animation-duration-2000));--spectrum-fieldlabel-side-padding-right:var(--spectrum-fieldlabel-side-xl-padding-right,var(--spectrum-global-dimension-size-200))}:host{position:relative;display:inline-flex;flex-flow:row wrap;justify-content:space-between;align-items:center;width:var(--spectrum-progressbar-width);vertical-align:top}.track{overflow:hidden;width:100%;border-radius:var(--spectrum-progressbar-border-radius);z-index:1}.fill,.track{height:var(--spectrum-progressbar-height)}.fill{border:none;transition:width 1s}:host([dir=ltr]) .label,:host([dir=ltr]) .percentage{text-align:left}:host([dir=rtl]) .label,:host([dir=rtl]) .percentage{text-align:right}.label,.percentage{margin-bottom:var(--spectrum-progressbar-label-gap-y)}.label{flex:1 1 0%}:host([dir=ltr]) .percentage{margin-left:var(--spectrum-fieldlabel-side-padding-right)}:host([dir=rtl]) .percentage{margin-right:var(--spectrum-fieldlabel-side-padding-right)}.percentage{align-self:flex-start}:host([side-label]){display:inline-flex;flex-flow:row;justify-content:space-between;width:auto}:host([side-label]) .track{min-width:var(--spectrum-progressbar-width);flex:1 1 var(--spectrum-progressbar-width)}:host([dir=ltr][side-label]) .label{margin-right:var(--spectrum-fieldlabel-side-padding-right)}:host([dir=rtl][side-label]) .label{margin-left:var(--spectrum-fieldlabel-side-padding-right)}:host([side-label]) .label{flex-grow:0;margin-bottom:0}:host([dir=ltr][side-label]) .percentage{text-align:right}:host([dir=rtl][side-label]) .percentage{text-align:left}:host([dir=ltr][side-label]) .percentage{margin-left:var(--spectrum-fieldlabel-side-padding-right)}:host([dir=rtl][side-label]) .percentage{margin-right:var(--spectrum-fieldlabel-side-padding-right)}:host([side-label]) .percentage{order:3;margin-bottom:0}:host([indeterminate]) .fill{width:var(--spectrum-progressbar-indeterminate-fill-width);position:relative;animation-timing-function:var(--spectrum-progressbar-indeterminate-animation-ease);will-change:transform}:host([dir=ltr][indeterminate]) .fill{animation:indeterminate-loop-ltr var(--spectrum-progressbar-indeterminate-duration) infinite}:host([dir=rtl][indeterminate]) .fill{animation:indeterminate-loop-rtl var(--spectrum-progressbar-indeterminate-duration) infinite}@keyframes indeterminate-loop-ltr{0%{transform:translate(calc(-1*var(--spectrum-progressbar-indeterminate-fill-width)))}to{transform:translate(var(--spectrum-progressbar-width))}}@keyframes indeterminate-loop-rtl{0%{transform:translate(var(--spectrum-progressbar-width))}to{transform:translate(calc(-1*var(--spectrum-progressbar-width)))}}.fill{background:var(--spectrum-progressbar-m-track-fill-color,var(--spectrum-global-color-blue-500))}.track{background-color:var(--spectrum-progressbar-m-track-color,var(--spectrum-alias-track-color-default))}:host([over-background]) .fill{background:var(--spectrum-progressbar-m-over-background-track-fill-color,var(--spectrum-global-color-static-white))}:host([over-background]) .label,:host([over-background]) .percentage{color:var(--spectrum-progressbar-m-over-background-track-fill-color,var(--spectrum-global-color-static-white))}:host([over-background]) .track{background-color:var(--spectrum-progressbar-m-over-background-track-color,var(--spectrum-alias-track-color-over-background))}:host([positive]) .fill{background:var(--spectrum-meter-positive-m-track-fill-color,var(--spectrum-semantic-positive-color-status))}:host(.is-notice) .fill{background:var(--spectrum-meter-notice-m-track-fill-color,var(--spectrum-semantic-notice-color-status))}:host(.is-negative) .fill{background:var(--spectrum-meter-negative-m-track-fill-color,var(--spectrum-semantic-negative-color-status))}.label,.percentage{color:var(--spectrum-fieldlabel-m-text-color,var(--spectrum-alias-label-text-color))}.fill{width:100%;transform-origin:left}:host([dir=rtl]) .fill{transform-origin:right}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @element sp-progress-bar
     */
    class ProgressBar extends SizedMixin(SpectrumElement) {
        constructor() {
            super(...arguments);
            this.indeterminate = false;
            this.label = '';
            this.overBackground = false;
            this.sideLabel = false;
            this.progress = 0;
        }
        static get styles() {
            return [styles$k];
        }
        render() {
            return html `
            ${this.label
            ? html `
                      <sp-field-label size=${this.size} class="label">
                          ${this.label}
                      </sp-field-label>
                      ${this.indeterminate
                ? html ``
                : html `
                                <sp-field-label
                                    size=${this.size}
                                    class="percentage"
                                >
                                    ${this.progress}%
                                </sp-field-label>
                            `}
                  `
            : html ``}
            <div class="track">
                <div
                    class="fill"
                    style="transform: scaleX(calc(${this.progress} / 100));"
                ></div>
            </div>
        `;
        }
        firstUpdated(changes) {
            super.firstUpdated(changes);
            if (!this.hasAttribute('role')) {
                this.setAttribute('role', 'progressbar');
            }
        }
        updated(changes) {
            super.updated(changes);
            if (changes.has('indeterminate')) {
                if (this.indeterminate) {
                    this.removeAttribute('aria-valuemin');
                    this.removeAttribute('aria-valuemax');
                }
                else {
                    this.setAttribute('aria-valuemin', '0');
                    this.setAttribute('aria-valuemax', '100');
                }
            }
            if (!this.indeterminate && changes.has('progress')) {
                this.setAttribute('aria-valuenow', '' + this.progress);
            }
            else if (this.hasAttribute('aria-valuenow')) {
                this.removeAttribute('aria-valuenow');
            }
            if (this.label && changes.has('label')) {
                this.setAttribute('aria-label', this.label);
            }
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ProgressBar.prototype, "indeterminate", void 0);
    __decorate([
        property({ type: String })
    ], ProgressBar.prototype, "label", void 0);
    __decorate([
        property({ type: Boolean, reflect: true, attribute: 'over-background' })
    ], ProgressBar.prototype, "overBackground", void 0);
    __decorate([
        property({ type: Boolean, reflect: true, attribute: 'side-label' })
    ], ProgressBar.prototype, "sideLabel", void 0);
    __decorate([
        property({ type: Number })
    ], ProgressBar.prototype, "progress", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-progress-bar', ProgressBar);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$j = css `
.fill-submask-2{animation:spectrum-fill-mask-2 1s linear infinite}@keyframes spectrum-fill-mask-1{0%{transform:rotate(90deg)}1.69%{transform:rotate(72.3deg)}3.39%{transform:rotate(55.5deg)}5.08%{transform:rotate(40.3deg)}6.78%{transform:rotate(25deg)}8.47%{transform:rotate(10.6deg)}10.17%{transform:rotate(0deg)}11.86%{transform:rotate(0deg)}13.56%{transform:rotate(0deg)}15.25%{transform:rotate(0deg)}16.95%{transform:rotate(0deg)}18.64%{transform:rotate(0deg)}20.34%{transform:rotate(0deg)}22.03%{transform:rotate(0deg)}23.73%{transform:rotate(0deg)}25.42%{transform:rotate(0deg)}27.12%{transform:rotate(0deg)}28.81%{transform:rotate(0deg)}30.51%{transform:rotate(0deg)}32.2%{transform:rotate(0deg)}33.9%{transform:rotate(0deg)}35.59%{transform:rotate(0deg)}37.29%{transform:rotate(0deg)}38.98%{transform:rotate(0deg)}40.68%{transform:rotate(0deg)}42.37%{transform:rotate(5.3deg)}44.07%{transform:rotate(13.4deg)}45.76%{transform:rotate(20.6deg)}47.46%{transform:rotate(29deg)}49.15%{transform:rotate(36.5deg)}50.85%{transform:rotate(42.6deg)}52.54%{transform:rotate(48.8deg)}54.24%{transform:rotate(54.2deg)}55.93%{transform:rotate(59.4deg)}57.63%{transform:rotate(63.2deg)}59.32%{transform:rotate(67.2deg)}61.02%{transform:rotate(70.8deg)}62.71%{transform:rotate(73.8deg)}64.41%{transform:rotate(76.2deg)}66.1%{transform:rotate(78.7deg)}67.8%{transform:rotate(80.6deg)}69.49%{transform:rotate(82.6deg)}71.19%{transform:rotate(83.7deg)}72.88%{transform:rotate(85deg)}74.58%{transform:rotate(86.3deg)}76.27%{transform:rotate(87deg)}77.97%{transform:rotate(87.7deg)}79.66%{transform:rotate(88.3deg)}81.36%{transform:rotate(88.6deg)}83.05%{transform:rotate(89.2deg)}84.75%{transform:rotate(89.2deg)}86.44%{transform:rotate(89.5deg)}88.14%{transform:rotate(89.9deg)}89.83%{transform:rotate(89.7deg)}91.53%{transform:rotate(90.1deg)}93.22%{transform:rotate(90.2deg)}94.92%{transform:rotate(90.1deg)}96.61%{transform:rotate(90deg)}98.31%{transform:rotate(89.8deg)}to{transform:rotate(90deg)}}@keyframes spectrum-fill-mask-2{0%{transform:rotate(180deg)}1.69%{transform:rotate(180deg)}3.39%{transform:rotate(180deg)}5.08%{transform:rotate(180deg)}6.78%{transform:rotate(180deg)}8.47%{transform:rotate(180deg)}10.17%{transform:rotate(179.2deg)}11.86%{transform:rotate(164deg)}13.56%{transform:rotate(151.8deg)}15.25%{transform:rotate(140.8deg)}16.95%{transform:rotate(130.3deg)}18.64%{transform:rotate(120.4deg)}20.34%{transform:rotate(110.8deg)}22.03%{transform:rotate(101.6deg)}23.73%{transform:rotate(93.5deg)}25.42%{transform:rotate(85.4deg)}27.12%{transform:rotate(78.1deg)}28.81%{transform:rotate(71.2deg)}30.51%{transform:rotate(89.1deg)}32.2%{transform:rotate(105.5deg)}33.9%{transform:rotate(121.3deg)}35.59%{transform:rotate(135.5deg)}37.29%{transform:rotate(148.4deg)}38.98%{transform:rotate(161deg)}40.68%{transform:rotate(173.5deg)}42.37%{transform:rotate(180deg)}44.07%{transform:rotate(180deg)}45.76%{transform:rotate(180deg)}47.46%{transform:rotate(180deg)}49.15%{transform:rotate(180deg)}50.85%{transform:rotate(180deg)}52.54%{transform:rotate(180deg)}54.24%{transform:rotate(180deg)}55.93%{transform:rotate(180deg)}57.63%{transform:rotate(180deg)}59.32%{transform:rotate(180deg)}61.02%{transform:rotate(180deg)}62.71%{transform:rotate(180deg)}64.41%{transform:rotate(180deg)}66.1%{transform:rotate(180deg)}67.8%{transform:rotate(180deg)}69.49%{transform:rotate(180deg)}71.19%{transform:rotate(180deg)}72.88%{transform:rotate(180deg)}74.58%{transform:rotate(180deg)}76.27%{transform:rotate(180deg)}77.97%{transform:rotate(180deg)}79.66%{transform:rotate(180deg)}81.36%{transform:rotate(180deg)}83.05%{transform:rotate(180deg)}84.75%{transform:rotate(180deg)}86.44%{transform:rotate(180deg)}88.14%{transform:rotate(180deg)}89.83%{transform:rotate(180deg)}91.53%{transform:rotate(180deg)}93.22%{transform:rotate(180deg)}94.92%{transform:rotate(180deg)}96.61%{transform:rotate(180deg)}98.31%{transform:rotate(180deg)}to{transform:rotate(180deg)}}@keyframes spectrum-fills-rotate{0%{transform:rotate(-90deg)}to{transform:rotate(270deg)}}:host{display:inline-block;position:relative;direction:ltr}.track,:host{width:var(--spectrum-progresscircle-medium-width,var(--spectrum-global-dimension-size-400));height:var(--spectrum-progresscircle-medium-height,var(--spectrum-global-dimension-size-400))}.track{box-sizing:border-box;border-style:solid;border-width:var(--spectrum-progresscircle-medium-border-size);border-radius:var(--spectrum-progresscircle-medium-width,var(--spectrum-global-dimension-size-400))}:host([dir=ltr]) .fills{left:0}:host([dir=rtl]) .fills{right:0}.fills{position:absolute;top:0;width:100%;height:100%}.fill{box-sizing:border-box;width:var(--spectrum-progresscircle-medium-width,var(--spectrum-global-dimension-size-400));height:var(--spectrum-progresscircle-medium-height,var(--spectrum-global-dimension-size-400));border-style:solid;border-width:var(--spectrum-progresscircle-medium-border-size);border-radius:var(--spectrum-progresscircle-medium-width,var(--spectrum-global-dimension-size-400))}.fillMask1,.fillMask2{width:50%;height:100%;transform-origin:100% center;transform:rotate(180deg);overflow:hidden;position:absolute}.fillSubMask1,.fillSubMask2{width:100%;height:100%;transform-origin:100% center;overflow:hidden;transform:rotate(-180deg)}.fillMask2{transform:rotate(0deg)}:host([size=small]),:host([size=small]) .fill,:host([size=small]) .track{width:var(--spectrum-progresscircle-small-width,var(--spectrum-global-dimension-size-200));height:var(--spectrum-progresscircle-small-height,var(--spectrum-global-dimension-size-200))}:host([size=small]) .fill,:host([size=small]) .track{border-style:solid;border-width:var(--spectrum-progresscircle-small-border-size);border-radius:var(--spectrum-progresscircle-small-width,var(--spectrum-global-dimension-size-200))}:host([size=large]),:host([size=large]) .fill,:host([size=large]) .track{width:var(--spectrum-progresscircle-large-width,var(--spectrum-global-dimension-size-800));height:var(--spectrum-progresscircle-large-height,var(--spectrum-global-dimension-size-800))}:host([size=large]) .fill,:host([size=large]) .track{border-style:solid;border-width:var(--spectrum-progresscircle-large-border-size,var(--spectrum-global-dimension-size-50));border-radius:var(--spectrum-progresscircle-large-width,var(--spectrum-global-dimension-size-800))}:host([indeterminate]) .fills{will-change:transform;transform:translateZ(0);animation:spectrum-fills-rotate 1s cubic-bezier(.25,.78,.48,.89) infinite;transform-origin:center}:host([indeterminate]) .fillSubMask1{will-change:transform;transform:translateZ(0);animation:spectrum-fill-mask-1 1s linear infinite}:host([indeterminate]) .fillSubMask2{will-change:transform;transform:translateZ(0);animation:spectrum-fill-mask-2 1s linear infinite}.track{border-color:var(--spectrum-progresscircle-medium-track-color,var(--spectrum-alias-track-color-default))}.fill{border-color:var(--spectrum-progresscircle-medium-track-fill-color,var(--spectrum-global-color-blue-500))}:host([over-background]) .track{border-color:var(--spectrum-progresscircle-medium-over-background-track-color,var(--spectrum-alias-track-color-over-background))}:host([over-background]) .fill{border-color:var(--spectrum-progresscircle-medium-over-background-track-fill-color,var(--spectrum-global-color-static-white))}:host([indeterminate][over-background]) .track{border-color:var(--spectrum-progresscircle-medium-over-background-track-color,var(--spectrum-alias-track-color-over-background))}:host([indeterminate][over-background]) .fill{border-color:var(--spectrum-progresscircle-medium-over-background-track-fill-color,var(--spectrum-global-color-static-white))}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @element sp-progress-circle
     */
    class ProgressCircle extends SpectrumElement {
        constructor() {
            super(...arguments);
            this.indeterminate = false;
            this.label = '';
            this.overBackground = false;
            this.progress = 0;
            this.size = '';
        }
        static get styles() {
            return [styles$j];
        }
        makeRotation(rotation) {
            return this.indeterminate
                ? undefined
                : `transform: rotate(${rotation}deg);`;
        }
        render() {
            const styles = [
                this.makeRotation(-180 + (180 / 50) * Math.min(this.progress, 50)),
                this.makeRotation(-180 + (180 / 50) * Math.max(this.progress - 50, 0)),
            ];
            const masks = ['Mask1', 'Mask2'];
            return html `
            <div class="track"></div>
            <div class="fills">
                ${masks.map((mask, index) => html `
                        <div class="fill${mask}">
                            <div
                                class="fillSub${mask}"
                                style=${ifDefined(styles[index])}
                            >
                                <div class="fill"></div>
                            </div>
                        </div>
                    `)}
            </div>
        `;
        }
        firstUpdated(changes) {
            super.firstUpdated(changes);
            if (!this.hasAttribute('role')) {
                this.setAttribute('role', 'progressbar');
            }
        }
        updated(changes) {
            super.updated(changes);
            if (!this.indeterminate && changes.has('progress')) {
                this.setAttribute('aria-valuenow', '' + this.progress);
            }
            else if (this.hasAttribute('aria-valuenow')) {
                this.removeAttribute('aria-valuenow');
            }
            if (this.label && changes.has('label')) {
                this.setAttribute('aria-label', this.label);
            }
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ProgressCircle.prototype, "indeterminate", void 0);
    __decorate([
        property({ type: String })
    ], ProgressCircle.prototype, "label", void 0);
    __decorate([
        property({ type: Boolean, reflect: true, attribute: 'over-background' })
    ], ProgressCircle.prototype, "overBackground", void 0);
    __decorate([
        property({ type: Number })
    ], ProgressCircle.prototype, "progress", void 0);
    __decorate([
        property({ type: String, reflect: true })
    ], ProgressCircle.prototype, "size", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-progress-circle', ProgressCircle);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$i = css `
:host{--spectrum-radio-circle-border-size:var(--spectrum-radio-m-circle-border-size,var(--spectrum-alias-border-size-thick));--spectrum-radio-circle-dot-size:var(--spectrum-radio-m-circle-dot-size,var(--spectrum-global-dimension-static-size-50));--spectrum-radio-text-font-style:var(--spectrum-radio-m-text-font-style,var(--spectrum-global-font-style-regular));--spectrum-radio-text-font-weight:var(--spectrum-radio-m-text-font-weight,var(--spectrum-alias-body-text-font-weight));--spectrum-radio-text-line-height:var(--spectrum-radio-m-text-line-height,var(--spectrum-alias-component-text-line-height));--spectrum-radio-text-size:var(--spectrum-radio-m-text-size,var(--spectrum-alias-item-text-size-m));--spectrum-radio-height:var(--spectrum-radio-m-height,var(--spectrum-alias-item-height-m));--spectrum-radio-circle-diameter:var(--spectrum-radio-m-circle-diameter,var(--spectrum-alias-item-control-2-size-m));--spectrum-radio-text-gap:var(--spectrum-radio-m-text-gap,var(--spectrum-alias-item-control-gap-m));--spectrum-radio-radius:calc(var(--spectrum-radio-circle-diameter)/2);--spectrum-radio-border-width-checked:calc(var(--spectrum-radio-circle-diameter)/2 - var(--spectrum-radio-circle-dot-size)/2);--spectrum-radio-labelbelow-label-margin:var(--spectrum-global-dimension-size-50) 0 0 0;--spectrum-radio-labelbelow-height:auto;--spectrum-radio-label-margin-top:var(--spectrum-global-dimension-size-75);display:inline-flex;align-items:flex-start;position:relative;min-height:var(--spectrum-radio-height);max-width:100%;vertical-align:top}#input{font-family:inherit;font-size:100%;line-height:1.15;margin:0;overflow:visible;box-sizing:border-box;padding:0;position:absolute;width:100%;height:100%;opacity:.0001;z-index:1;cursor:pointer}:host([disabled]) #input{cursor:default}:host([checked]) #input+#button:before{border-width:var(--spectrum-radio-border-width-checked)}#input.focus-visible+#button:after,#input.focus-visible+#button:after{margin:calc(var(--spectrum-alias-focus-ring-gap,
var(--spectrum-global-dimension-static-size-25))*-1)}#input.focus-visible+#button:after,#input:focus-visible+#button:after{margin:calc(var(--spectrum-alias-focus-ring-gap,
var(--spectrum-global-dimension-static-size-25))*-1)}:host([dir=ltr]) #label{text-align:left}:host([dir=rtl]) #label{text-align:right}:host([dir=ltr]) #label{margin-left:var(--spectrum-radio-text-gap)}:host([dir=rtl]) #label{margin-right:var(--spectrum-radio-text-gap)}#label{margin-top:var(--spectrum-radio-label-margin-top);font-size:var(--spectrum-radio-text-size);font-weight:var(--spectrum-radio-text-font-weight);font-style:var(--spectrum-radio-text-font-style);line-height:var(--spectrum-radio-text-line-height);transition:color var(--spectrum-global-animation-duration-100,.13s) ease-in-out}#button{position:relative;margin:calc((var(--spectrum-radio-height) - var(--spectrum-radio-circle-diameter))/2) 0;flex-grow:0;flex-shrink:0}#button,#button:before{box-sizing:border-box;width:var(--spectrum-radio-circle-diameter);height:var(--spectrum-radio-circle-diameter)}#button:before{z-index:0;border-radius:var(--spectrum-radio-radius);border-width:var(--spectrum-radio-circle-border-size);border-style:solid;transition:border var(--spectrum-global-animation-duration-100,.13s) ease-in-out,box-shadow var(--spectrum-global-animation-duration-100,.13s) ease-in-out}#button:after,#button:before{display:block;content:"";position:absolute}#button:after{border-radius:100%;left:0;right:0;bottom:0;top:0;margin:var(--spectrum-alias-focus-ring-gap,var(--spectrum-global-dimension-static-size-25));transition:opacity var(--spectrum-global-animation-duration-100,.13s) ease-out,margin var(--spectrum-global-animation-duration-100,.13s) ease-out}:host([label-below]){display:inline-flex;flex-direction:column;align-items:center;height:var(--spectrum-radio-labelbelow-height)}:host([label-below]) #button{flex-shrink:0;margin:0}:host([label-below]) #label{margin:var(--spectrum-radio-labelbelow-label-margin)}:host{--spectrum-radio-m-emphasized-circle-border-color-selected-key-focus:var(--spectrum-radio-m-emphasized-circle-border-color-selected-hover,var(--spectrum-global-color-blue-600))}:host([checked]) #input+#button:before{border-color:var(--spectrum-radio-m-circle-border-color-selected,var(--spectrum-global-color-gray-700))}#label{color:var(--spectrum-radio-m-text-color,var(--spectrum-alias-text-color))}#button:before{background-color:var(--spectrum-radio-m-circle-background-color,var(--spectrum-global-color-gray-75));border-color:var(--spectrum-radio-m-circle-border-color,var(--spectrum-global-color-gray-600))}:host(:hover) #button:before{border-color:var(--spectrum-radio-m-circle-border-color-hover,var(--spectrum-global-color-gray-700));box-shadow:none}:host(:hover[checked]) #input+#button:before{border-color:var(--spectrum-radio-m-circle-border-color-selected-hover,var(--spectrum-global-color-gray-800))}:host(:hover) #label{color:var(--spectrum-radio-m-text-color-hover,var(--spectrum-alias-text-color-hover))}:host(:active) #button:before{border-color:var(--spectrum-radio-m-circle-border-color-down,var(--spectrum-global-color-gray-800))}:host(:active[checked]) #input+#button:before{border-color:var(--spectrum-radio-m-circle-border-color-selected-down,var(--spectrum-global-color-gray-900))}:host(:active) #label{color:var(--spectrum-radio-m-text-color-down,var(--spectrum-alias-text-color-down))}:host([emphasized][checked]) #input+#button:before{border-color:var(--spectrum-radio-m-emphasized-circle-border-color-selected,var(--spectrum-global-color-blue-500))}:host([emphasized][checked]:hover) #input+#button:before{border-color:var(--spectrum-radio-m-emphasized-circle-border-color-selected-hover,var(--spectrum-global-color-blue-600))}:host([emphasized][checked]:active) #input+#button:before{border-color:var(--spectrum-radio-m-emphasized-circle-border-color-selected-down,var(--spectrum-global-color-blue-700))}:host([emphasized][invalid]:hover) #input+#button:before,:host([invalid]:hover) #input+#button:before{border-color:var(--spectrum-radio-m-emphasized-circle-border-color-error-hover,var(--spectrum-global-color-red-600))}:host([emphasized][invalid]:hover) #label,:host([invalid]:hover) #label{color:var(--spectrum-radio-m-emphasized-text-color-error-hover,var(--spectrum-global-color-red-700))}:host([emphasized][invalid]:active) #input+#button:before,:host([invalid]:active) #input+#button:before{border-color:var(--spectrum-radio-m-emphasized-circle-border-color-error-down,var(--spectrum-global-color-red-700))}:host([emphasized][invalid]:active) #label,:host([invalid]:active) #label{color:var(--spectrum-radio-m-emphasized-text-color-error-down,var(--spectrum-global-color-red-700))}:host([emphasized][invalid]) #button:before,:host([emphasized][invalid][checked]) #input+#button:before,:host([invalid]) #button:before,:host([invalid][checked]) #input+#button:before{border-color:var(--spectrum-radio-m-emphasized-circle-border-color-error,var(--spectrum-global-color-red-500))}:host([emphasized][invalid]) #label,:host([invalid]) #label{color:var(--spectrum-radio-m-emphasized-text-color-error,var(--spectrum-global-color-red-600))}:host([checked][disabled]) #input+#button:before,:host([disabled]) #input+#button:before{border-color:var(--spectrum-radio-m-emphasized-circle-border-color-disabled,var(--spectrum-global-color-gray-400))}:host([checked][disabled]) #input~#label,:host([disabled]) #input~#label{color:var(--spectrum-radio-m-emphasized-text-color-disabled,var(--spectrum-alias-text-color-disabled))}#input.focus-visible+#button:before,#input.focus-visible+#button:before,:host(:hover) #input.focus-visible+#button:before,:host(:hover) #input.focus-visible+#button:before,:host([emphasized]) #input.focus-visible+#button:before,:host([emphasized]) #input.focus-visible+#button:before,:host([emphasized]:hover) #input.focus-visible+#button:before,:host([emphasized]:hover) #input.focus-visible+#button:before{border-color:var(--spectrum-radio-m-circle-border-color-key-focus,var(--spectrum-global-color-gray-700))}#input.focus-visible+#button:before,#input:focus-visible+#button:before,:host(:hover) #input.focus-visible+#button:before,:host(:hover) #input:focus-visible+#button:before,:host([emphasized]) #input.focus-visible+#button:before,:host([emphasized]) #input:focus-visible+#button:before,:host([emphasized]:hover) #input.focus-visible+#button:before,:host([emphasized]:hover) #input:focus-visible+#button:before{border-color:var(--spectrum-radio-m-circle-border-color-key-focus,var(--spectrum-global-color-gray-700))}#input.focus-visible+#button:after,#input.focus-visible+#button:after,:host(:hover) #input.focus-visible+#button:after,:host(:hover) #input.focus-visible+#button:after,:host([emphasized]) #input.focus-visible+#button:after,:host([emphasized]) #input.focus-visible+#button:after,:host([emphasized]:hover) #input.focus-visible+#button:after,:host([emphasized]:hover) #input.focus-visible+#button:after{box-shadow:0 0 0 var(--spectrum-radio-m-focus-ring-size-key-focus,var(--spectrum-alias-focus-ring-size)) var(--spectrum-radio-m-focus-ring-color-key-focus,var(--spectrum-alias-focus-ring-color))}#input.focus-visible+#button:after,#input:focus-visible+#button:after,:host(:hover) #input.focus-visible+#button:after,:host(:hover) #input:focus-visible+#button:after,:host([emphasized]) #input.focus-visible+#button:after,:host([emphasized]) #input:focus-visible+#button:after,:host([emphasized]:hover) #input.focus-visible+#button:after,:host([emphasized]:hover) #input:focus-visible+#button:after{box-shadow:0 0 0 var(--spectrum-radio-m-focus-ring-size-key-focus,var(--spectrum-alias-focus-ring-size)) var(--spectrum-radio-m-focus-ring-color-key-focus,var(--spectrum-alias-focus-ring-color))}:host(:hover[checked]) #input.focus-visible+#button:before,:host(:hover[checked]) #input.focus-visible+#button:before,:host([checked]) #input.focus-visible+#button:before,:host([checked]) #input.focus-visible+#button:before,:host([emphasized][checked]) #input.focus-visible+#button:before,:host([emphasized][checked]) #input.focus-visible+#button:before,:host([emphasized][checked]:hover) #input.focus-visible+#button:before,:host([emphasized][checked]:hover) #input.focus-visible+#button:before{border-color:var(--spectrum-radio-m-emphasized-circle-border-color-selected-key-focus,var(--spectrum-global-color-blue-600))}:host(:hover[checked]) #input.focus-visible+#button:before,:host(:hover[checked]) #input:focus-visible+#button:before,:host([checked]) #input.focus-visible+#button:before,:host([checked]) #input:focus-visible+#button:before,:host([emphasized][checked]) #input.focus-visible+#button:before,:host([emphasized][checked]) #input:focus-visible+#button:before,:host([emphasized][checked]:hover) #input.focus-visible+#button:before,:host([emphasized][checked]:hover) #input:focus-visible+#button:before{border-color:var(--spectrum-radio-m-emphasized-circle-border-color-selected-key-focus,var(--spectrum-global-color-blue-600))}:host{--spectrum-radio-label-margin-top:var(--spectrum-global-dimension-size-75,6px)}:host([disabled]){pointer-events:none}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * Spectrum Radio Button Component
     *
     * @attr label-below - Moves the label below the radio button
     * @attr invalid - Uses the invalid style
     * @attr disabled - Uses the disabled style
     * @attr checked - Represents when the input is checked
     * @attr name - Represents the group this radio is a part of
     * @attr value - Identifies this radio button within its radio group
     *
     * @event sp-radio:change - When the input is interacted with and its state is changed
     */
    class Radio extends Focusable {
        constructor() {
            super(...arguments);
            this.name = '';
            this.value = '';
            this.checked = false;
            this.emphasized = false;
            this.invalid = false;
            this.readonly = false;
        }
        static get styles() {
            return [styles$i];
        }
        get focusElement() {
            return this.inputElement;
        }
        handleChange() {
            if (this.readonly) {
                this.inputElement.checked = this.checked;
                return;
            }
            this.checked = this.inputElement.checked;
            this.dispatchEvent(new Event('change', {
                bubbles: true,
                composed: true,
            }));
        }
        render() {
            return html `
            <input
                id="input"
                aria-labelledby="label"
                type="radio"
                name=${this.name}
                value=${this.value}
                .checked=${this.checked}
                @change=${this.handleChange}
            />
            <span id="button"></span>
            <label id="label"><slot></slot></label>
        `;
        }
        updated(changes) {
            super.updated(changes);
            if (changes.has('invalid')) {
                if (this.invalid) {
                    this.inputElement.setAttribute('aria-invalid', 'true');
                }
                else {
                    this.inputElement.removeAttribute('aria-invalid');
                }
            }
        }
    }
    __decorate([
        property({ type: String, reflect: true })
    ], Radio.prototype, "name", void 0);
    __decorate([
        property({ type: String, reflect: true })
    ], Radio.prototype, "value", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Radio.prototype, "checked", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Radio.prototype, "emphasized", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Radio.prototype, "invalid", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Radio.prototype, "readonly", void 0);
    __decorate([
        query('#input')
    ], Radio.prototype, "inputElement", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-radio', Radio);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * Radio group component
     * @slot - The `sp-radio` elements to display/manage in the group.
     *
     */
    class RadioGroup extends FieldGroup {
        constructor() {
            super();
            this.name = '';
            this.handleFocusin = () => {
                this.addEventListener('focusout', this.handleFocusout);
                this.addEventListener('keydown', this.handleKeydown);
                requestAnimationFrame(() => {
                    const firstButtonWithTabIndex = this.buttons.find((button) => button.tabIndex === 0);
                    if (firstButtonWithTabIndex) {
                        firstButtonWithTabIndex.tabIndex = -1;
                    }
                });
            };
            this.handleKeydown = (event) => {
                const { code } = event;
                const activeElement = this.getRootNode()
                    .activeElement;
                /* c8 ignore next 3 */
                if (!activeElement) {
                    return;
                }
                let nextIndex = this.buttons.indexOf(activeElement);
                /* c8 ignore next 3 */
                if (nextIndex === -1) {
                    return;
                }
                const circularIndexedElement = (list, index) => list[(list.length + index) % list.length];
                const buttonFromDelta = (delta) => {
                    nextIndex += delta;
                    while (circularIndexedElement(this.buttons, nextIndex).disabled) {
                        nextIndex += delta;
                    }
                };
                switch (code) {
                    case 'ArrowUp':
                        buttonFromDelta(-1);
                        break;
                    case 'ArrowLeft':
                        buttonFromDelta(this.isLTR ? -1 : 1);
                        break;
                    case 'ArrowRight':
                        buttonFromDelta(this.isLTR ? 1 : -1);
                        break;
                    case 'ArrowDown':
                        buttonFromDelta(1);
                        break;
                    case 'End':
                        nextIndex = this.buttons.length;
                        buttonFromDelta(-1);
                        break;
                    case 'Home':
                        nextIndex = -1;
                        buttonFromDelta(1);
                        break;
                    case 'PageUp':
                    case 'PageDown':
                        const tagsSiblings = [
                            ...this.getRootNode().querySelectorAll('sp-radio-group'),
                        ];
                        if (tagsSiblings.length < 2) {
                            return;
                        }
                        event.preventDefault();
                        const currentIndex = tagsSiblings.indexOf(this);
                        const offset = code === 'PageUp' ? -1 : 1;
                        let nextRadioGroupIndex = currentIndex + offset;
                        let nextRadioGroup = circularIndexedElement(tagsSiblings, nextRadioGroupIndex);
                        while (!nextRadioGroup.buttons.length) {
                            nextRadioGroupIndex += offset;
                            nextRadioGroup = circularIndexedElement(tagsSiblings, nextRadioGroupIndex);
                        }
                        nextRadioGroup.focus();
                        return;
                    default:
                        return;
                }
                event.preventDefault();
                const nextRadio = circularIndexedElement(this.buttons, nextIndex);
                nextRadio.focus();
                this.selected = nextRadio.value;
            };
            this.handleFocusout = () => {
                const firstButtonNonDisabled = this.buttons.find((button) => {
                    if (this.selected) {
                        return button.checked;
                    }
                    return !button.disabled;
                });
                if (firstButtonNonDisabled) {
                    firstButtonNonDisabled.tabIndex = 0;
                }
                this.removeEventListener('keydown', this.handleKeydown);
                this.removeEventListener('focusout', this.handleFocusout);
            };
            this._selected = '';
            this.addEventListener('focusin', this.handleFocusin);
        }
        get buttons() {
            return this.defaultNodes.filter((node) => node instanceof Radio);
        }
        focus() {
            if (!this.buttons.length) {
                return;
            }
            const firstButtonNonDisabled = this.buttons.find((button) => {
                if (this.selected) {
                    return button.checked;
                }
                return !button.disabled;
            });
            if (firstButtonNonDisabled) {
                firstButtonNonDisabled.focus();
            }
        }
        get selected() {
            return this._selected;
        }
        set selected(value) {
            const old = this.selected;
            const radio = value
                ? this.querySelector(`sp-radio[value="${value}"]`)
                : undefined;
            // If no matching radio, selected is reset to empty string
            this._selected = radio ? value : '';
            const applyDefault = this.dispatchEvent(new Event('change', {
                cancelable: true,
                bubbles: true,
                composed: true,
            }));
            if (!applyDefault) {
                this._selected = old;
                return;
            }
            this.deselectChecked();
            if (radio)
                radio.checked = true;
            this.requestUpdate('selected', old);
        }
        render() {
            return html `
            <slot></slot>
        `;
        }
        firstUpdated() {
            const checkedRadio = this.querySelector('sp-radio[checked]');
            const checkedRadioValue = checkedRadio ? checkedRadio.value : '';
            // If selected already assigned, don't overwrite
            this.selected = this.selected || checkedRadioValue;
            this.buttons.map((button) => {
                button.addEventListener('change', (event) => {
                    event.stopPropagation();
                    const target = event.target;
                    this.selected = target.value;
                });
            });
        }
        updated() {
            this.buttons.map((button, index) => {
                const focusable = this.selected
                    ? !button.disabled && button.value === this.selected
                        ? '0'
                        : '-1'
                    : !button.disabled && index === 0
                        ? '0'
                        : '-1';
                button.setAttribute('tabindex', focusable);
            });
        }
        deselectChecked() {
            const previousChecked = this.querySelectorAll('sp-radio[checked]');
            previousChecked.forEach((element) => {
                const radio = element;
                radio.checked = false;
            });
        }
    }
    __decorate([
        property({ type: String })
    ], RadioGroup.prototype, "name", void 0);
    __decorate([
        queryAssignedNodes('')
    ], RadioGroup.prototype, "defaultNodes", void 0);
    __decorate([
        property({ reflect: true })
    ], RadioGroup.prototype, "selected", null);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-radio-group', RadioGroup);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$h = css `
:host{--spectrum-textfield-border-size:var(--spectrum-textfield-m-border-size,var(--spectrum-alias-border-size-thin));--spectrum-textfield-text-line-height:var(--spectrum-textfield-m-text-line-height,var(--spectrum-alias-component-text-line-height));--spectrum-textfield-text-size:var(--spectrum-textfield-m-text-size,var(--spectrum-alias-item-text-size-m));--spectrum-textfield-height:var(--spectrum-textfield-m-height,var(--spectrum-alias-item-height-m));--spectrum-textfield-padding-left:var(--spectrum-textfield-m-padding-left,var(--spectrum-alias-item-padding-m));--spectrum-textfield-padding-right:var(--spectrum-textfield-m-padding-right,var(--spectrum-alias-item-padding-m));--spectrum-textfield-min-width:var(--spectrum-textfield-m-min-width,var(--spectrum-global-dimension-size-600));--spectrum-textfield-success-icon-height:var(--spectrum-textfield-m-success-icon-height,var(--spectrum-alias-ui-icon-checkmark-size-100));--spectrum-textfield-success-icon-width:var(--spectrum-textfield-m-success-icon-width,var(--spectrum-alias-ui-icon-checkmark-size-100));--spectrum-textfield-success-icon-margin-left:var(--spectrum-textfield-m-success-icon-margin-left,var(--spectrum-global-dimension-size-150));--spectrum-textfield-error-icon-height:var(--spectrum-textfield-m-error-icon-height,var(--spectrum-alias-ui-icon-alert-size-100));--spectrum-textfield-error-icon-width:var(--spectrum-textfield-m-error-icon-width,var(--spectrum-alias-ui-icon-alert-size-100));--spectrum-textfield-error-icon-margin-left:var(--spectrum-textfield-m-error-icon-margin-left,var(--spectrum-global-dimension-size-150));--spectrum-textfield-placeholder-text-font-style:var(--spectrum-textfield-m-placeholder-text-font-style,var(--spectrum-global-font-style-italic));--spectrum-textfield-placeholder-text-font-weight:var(--spectrum-textfield-m-placeholder-text-font-weight,var(--spectrum-global-font-weight-regular));--spectrum-textfield-border-radius:var(--spectrum-textfield-m-border-radius,var(--spectrum-alias-border-radius-regular));--spectrum-textfield-quiet-border-size:var(--spectrum-textfield-quiet-m-border-size,var(--spectrum-alias-border-size-thin));--spectrum-textfield-quiet-padding-left:var(--spectrum-textfield-quiet-m-padding-left,0);--spectrum-textfield-quiet-padding-right:var(--spectrum-textfield-quiet-m-padding-right,0);--spectrum-textfield-quiet-success-icon-margin-left:var(--spectrum-textfield-quiet-m-success-icon-margin-left,var(--spectrum-global-dimension-size-150));--spectrum-textfield-quiet-error-icon-margin-left:var(--spectrum-textfield-quiet-m-error-icon-margin-left,var(--spectrum-global-dimension-size-150));--spectrum-textfield-quiet-border-radius:var(--spectrum-textfield-quiet-m-border-radius,0px);--spectrum-textarea-text-padding-top:var(--spectrum-textarea-m-text-padding-top,var(--spectrum-alias-item-text-padding-top-m));--spectrum-textarea-text-padding-bottom:var(--spectrum-textarea-m-text-padding-bottom,var(--spectrum-alias-item-text-padding-bottom-m));--spectrum-textarea-height:var(--spectrum-textarea-m-height,var(--spectrum-alias-item-height-m));--spectrum-textarea-padding-left:var(--spectrum-textarea-m-padding-left,var(--spectrum-alias-item-padding-m));--spectrum-textarea-padding-right:var(--spectrum-textarea-m-padding-right,var(--spectrum-alias-item-padding-m));--spectrum-textfield-padding-top:3px;--spectrum-textfield-padding-bottom:5px;--spectrum-textfield-text-font-family:var(--spectrum-alias-body-text-font-family,var(--spectrum-global-font-family-base));--spectrum-textfield-icon-gap:var(--spectrum-global-dimension-size-65);--spectrum-textfield-quiet-icon-gap:var(--spectrum-global-dimension-size-75);--spectrum-textarea-min-height:var(--spectrum-textarea-height);--spectrum-textarea-height-adjusted:auto;--spectrum-textarea-padding-top:var(--spectrum-textarea-text-padding-top);--spectrum-textarea-padding-bottom:var(--spectrum-textarea-text-padding-bottom);display:inline-flex;position:relative;min-width:var(--spectrum-textfield-min-width);width:var(--spectrum-alias-single-line-width,var(--spectrum-global-dimension-size-2400))}:host([quiet][multiline]) #input{height:var(--spectrum-textfield-height);min-height:var(--spectrum-textfield-height)}#input{box-sizing:border-box;border:var(--spectrum-textfield-border-size) solid;border-radius:var(--spectrum-textfield-border-radius);padding:var(--spectrum-textfield-padding-top) var(--spectrum-textfield-padding-right) var(--spectrum-textfield-padding-bottom) calc(var(--spectrum-textfield-padding-left) - 1px);text-indent:0;width:100%;height:var(--spectrum-textfield-height);vertical-align:top;margin:0;overflow:visible;font-family:var(--spectrum-textfield-text-font-family);font-size:var(--spectrum-textfield-text-size);line-height:var(--spectrum-textfield-text-line-height);text-overflow:ellipsis;transition:border-color var(--spectrum-global-animation-duration-100,.13s) ease-in-out,box-shadow var(--spectrum-global-animation-duration-100,.13s) ease-in-out;outline:none;-webkit-appearance:none;-moz-appearance:textfield}#input::placeholder{font-weight:var(--spectrum-textfield-placeholder-text-font-weight);font-style:var(--spectrum-textfield-placeholder-text-font-style);transition:color var(--spectrum-global-animation-duration-100,.13s) ease-in-out;opacity:1}#input:lang(ja)::placeholder,#input:lang(ko)::placeholder,#input:lang(zh)::placeholder{font-style:normal}#input:hover::placeholder{font-weight:var(--spectrum-textfield-placeholder-text-font-weight)}#input:disabled{resize:none;opacity:1}#input:disabled::placeholder{font-weight:var(--spectrum-textfield-placeholder-text-font-weight)}#input::-ms-clear{width:0;height:0}#input::-webkit-inner-spin-button,#input::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}#input:-moz-ui-invalid{box-shadow:none}:host([dir=ltr][valid]) #input{padding-right:calc(var(--spectrum-textfield-padding-right) + var(--spectrum-icon-checkmark-medium-width) + var(--spectrum-textfield-success-icon-margin-left))}:host([dir=rtl][valid]) #input{padding-left:calc(var(--spectrum-textfield-padding-right) + var(--spectrum-icon-checkmark-medium-width) + var(--spectrum-textfield-success-icon-margin-left))}:host([dir=ltr][invalid]) #input{padding-right:calc(var(--spectrum-textfield-padding-right) + var(--spectrum-icon-alert-medium-width,
var(--spectrum-global-dimension-size-225)) + var(--spectrum-textfield-error-icon-margin-left))}:host([dir=rtl][invalid]) #input{padding-left:calc(var(--spectrum-textfield-padding-right) + var(--spectrum-icon-alert-medium-width,
var(--spectrum-global-dimension-size-225)) + var(--spectrum-textfield-error-icon-margin-left))}:host([multiline]) #input{height:var(--spectrum-textarea-height-adjusted);min-height:var(--spectrum-textarea-min-height);padding:var(--spectrum-textarea-padding-top) var(--spectrum-textarea-padding-right) var(--spectrum-textarea-padding-bottom) calc(var(--spectrum-textarea-padding-left) - 1px);overflow:auto}:host([dir=ltr][quiet]) #input{padding-left:var(--spectrum-textfield-quiet-padding-left)}:host([dir=rtl][quiet]) #input{padding-right:var(--spectrum-textfield-quiet-padding-left)}:host([dir=ltr][quiet]) #input{padding-right:var(--spectrum-textfield-quiet-padding-right)}:host([dir=rtl][quiet]) #input{padding-left:var(--spectrum-textfield-quiet-padding-right)}:host([quiet]) #input{border-radius:var(--spectrum-textfield-quiet-border-radius);border-top-width:0;border-bottom-width:var(--spectrum-textfield-quiet-border-size);border-left-width:0;border-right-width:0;resize:none;overflow-y:hidden}:host([dir=ltr][invalid][quiet]) #input{padding-right:calc(var(--spectrum-icon-alert-medium-width,
var(--spectrum-global-dimension-size-225)) + var(--spectrum-textfield-quiet-error-icon-margin-left))}:host([dir=rtl][invalid][quiet]) #input{padding-left:calc(var(--spectrum-icon-alert-medium-width,
var(--spectrum-global-dimension-size-225)) + var(--spectrum-textfield-quiet-error-icon-margin-left))}:host([dir=ltr][valid][quiet]) #input{padding-right:calc(var(--spectrum-icon-checkmark-medium-width) + var(--spectrum-textfield-quiet-success-icon-margin-left))}:host([dir=rtl][valid][quiet]) #input{padding-left:calc(var(--spectrum-icon-checkmark-medium-width) + var(--spectrum-textfield-quiet-success-icon-margin-left))}.icon{position:absolute;pointer-events:all}:host([dir=ltr][quiet]) .icon{padding-right:0}:host([dir=rtl][quiet]) .icon{padding-left:0}:host([dir=ltr][invalid]) .icon{right:var(--spectrum-textfield-error-icon-margin-left)}:host([dir=rtl][invalid]) .icon{left:var(--spectrum-textfield-error-icon-margin-left)}:host([invalid]) .icon{width:var(--spectrum-textfield-error-icon-width);height:var(--spectrum-textfield-error-icon-height);bottom:calc(var(--spectrum-textfield-height)/2 - var(--spectrum-textfield-error-icon-height)/2)}:host([dir=ltr][quiet][invalid]) .icon{right:0}:host([dir=rtl][quiet][invalid]) .icon{left:0}:host([dir=ltr][valid]) .icon{right:var(--spectrum-textfield-success-icon-margin-left)}:host([dir=rtl][valid]) .icon{left:var(--spectrum-textfield-success-icon-margin-left)}:host([valid]) .icon{width:var(--spectrum-textfield-success-icon-width);height:var(--spectrum-textfield-success-icon-height);bottom:calc(var(--spectrum-textfield-height)/2 - var(--spectrum-textfield-success-icon-height)/2)}:host([dir=ltr][quiet][valid]) .icon{right:0}:host([dir=rtl][quiet][valid]) .icon{left:0}:host([dir=ltr]) .icon-workflow{left:var(--spectrum-textfield-error-icon-margin-left)}:host([dir=rtl]) .icon-workflow{right:var(--spectrum-textfield-error-icon-margin-left)}.icon-workflow{display:block;position:absolute;height:var(--spectrum-alias-workflow-icon-size-m,var(--spectrum-global-dimension-size-225));width:var(--spectrum-alias-workflow-icon-size-m,var(--spectrum-global-dimension-size-225));top:calc(var(--spectrum-textfield-height)/2 - var(--spectrum-alias-workflow-icon-size-m,
var(--spectrum-global-dimension-size-225))/2)}:host([dir=ltr][quiet]) .icon-workflow{left:0}:host([dir=rtl][quiet]) .icon-workflow{right:0}:host([dir=ltr][quiet]) .icon-workflow~#input{padding-left:calc(var(--spectrum-alias-workflow-icon-size-m,
var(--spectrum-global-dimension-size-225)) + var(--spectrum-textfield-quiet-icon-gap))}:host([dir=rtl][quiet]) .icon-workflow~#input{padding-right:calc(var(--spectrum-alias-workflow-icon-size-m,
var(--spectrum-global-dimension-size-225)) + var(--spectrum-textfield-quiet-icon-gap))}:host([dir=ltr]) .icon-workflow+#input{padding-left:calc(var(--spectrum-textfield-error-icon-margin-left) + var(--spectrum-alias-workflow-icon-size-m,
var(--spectrum-global-dimension-size-225)) + var(--spectrum-textfield-icon-gap))}:host([dir=rtl]) .icon-workflow+#input{padding-right:calc(var(--spectrum-textfield-error-icon-margin-left) + var(--spectrum-alias-workflow-icon-size-m,
var(--spectrum-global-dimension-size-225)) + var(--spectrum-textfield-icon-gap))}:host([multiline]) .icon-workflow~#input{height:var(--spectrum-textfield-height);min-height:var(--spectrum-textfield-height)}:host{--spectrum-textfield-m-validation-icon-color-valid:var(--spectrum-semantic-positive-color-icon,var(--spectrum-global-color-green-600))}:host(:hover) #input{border-color:var(--spectrum-textfield-m-border-color-hover,var(--spectrum-alias-border-color-hover));box-shadow:none}:host(:hover) #input::placeholder{color:var(--spectrum-textfield-m-placeholder-text-color-hover,var(--spectrum-alias-placeholder-text-color-hover))}:host(:hover) .icon-workflow{color:var(--spectrum-textfield-m-icon-color-hover,var(--spectrum-global-color-gray-900))}:host(:active) #input{border-color:var(--spectrum-textfield-m-border-color-down,var(--spectrum-alias-border-color-mouse-focus))}:host(:active) .icon-workflow{color:var(--spectrum-textfield-m-icon-color-down,var(--spectrum-alias-icon-color-down))}:host([valid]) .icon{color:var(--spectrum-textfield-m-validation-icon-color-valid,var(--spectrum-global-color-green-400))}:host([invalid]) .icon{color:var(--spectrum-textfield-m-validation-icon-color-error,var(--spectrum-semantic-negative-color-icon))}:host([invalid]:hover) #input{border-color:var(--spectrum-textfield-m-border-color-error-hover,var(--spectrum-semantic-negative-color-state-hover))}:host([disabled]) .icon{color:var(--spectrum-textfield-m-validation-icon-color-disabled,var(--spectrum-global-color-gray-500))}:host([disabled]) .icon-workflow{color:var(--spectrum-textfield-m-icon-color-disabled,var(--spectrum-global-color-gray-500))}.icon-workflow{color:var(--spectrum-textfield-m-icon-color,var(--spectrum-alias-icon-color))}#input{background-color:var(--spectrum-textfield-m-background-color,var(--spectrum-global-color-gray-50));border-color:var(--spectrum-textfield-m-border-color,var(--spectrum-alias-border-color));color:var(--spectrum-textfield-m-text-color,var(--spectrum-alias-text-color))}#input::placeholder{color:var(--spectrum-textfield-m-placeholder-text-color,var(--spectrum-alias-placeholder-text-color))}#input:focus,:host([focused]) #input{border-color:var(--spectrum-textfield-m-border-color-down,var(--spectrum-alias-border-color-mouse-focus))}#input.focus-visible,#input.focus-visible,:host([focused]) #input{border-color:var(--spectrum-textfield-m-border-color-key-focus,var(--spectrum-alias-border-color-focus));box-shadow:0 0 0 1px var(--spectrum-textfield-m-border-color-key-focus,var(--spectrum-alias-border-color-focus))}#input.focus-visible,#input:focus-visible,:host([focused]) #input{border-color:var(--spectrum-textfield-m-border-color-key-focus,var(--spectrum-alias-border-color-focus));box-shadow:0 0 0 1px var(--spectrum-textfield-m-border-color-key-focus,var(--spectrum-alias-border-color-focus))}:host([invalid]) #input{border-color:var(--spectrum-textfield-m-border-color-error,var(--spectrum-semantic-negative-color-default))}:host([focused][invalid]) #input,:host([invalid]) #input.focus-visible,:host([invalid]) #input.focus-visible{border-color:var(--spectrum-textfield-m-border-color-error-key-focus,var(--spectrum-alias-border-color-focus));box-shadow:0 0 0 1px var(--spectrum-textfield-m-border-color-error-key-focus,var(--spectrum-alias-border-color-focus))}:host([focused][invalid]) #input,:host([invalid]) #input.focus-visible,:host([invalid]) #input:focus-visible{border-color:var(--spectrum-textfield-m-border-color-error-key-focus,var(--spectrum-alias-border-color-focus));box-shadow:0 0 0 1px var(--spectrum-textfield-m-border-color-error-key-focus,var(--spectrum-alias-border-color-focus))}#input :disabled,:host([disabled]) #input,:host([disabled]:hover) #input{background-color:var(--spectrum-textfield-m-background-color-disabled,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-textfield-m-border-color-disabled,var(--spectrum-alias-border-color-transparent));color:var(--spectrum-textfield-m-text-color-disabled,var(--spectrum-alias-text-color-disabled));-webkit-text-fill-color:var(--spectrum-textfield-m-text-color-disabled,var(--spectrum-alias-text-color-disabled))}#input :disabled::placeholder,:host([disabled]) #input::placeholder,:host([disabled]:hover) #input::placeholder{color:var(--spectrum-textfield-m-placeholder-text-color-disabled,var(--spectrum-alias-text-color-disabled))}:host([quiet]) #input{background-color:var(--spectrum-textfield-quiet-m-background-color,var(--spectrum-alias-background-color-transparent));border-color:var(--spectrum-textfield-quiet-m-border-color,var(--spectrum-alias-border-color))}:host([focused][quiet]) #input,:host([quiet]) #input:focus{border-color:var(--spectrum-textfield-quiet-m-border-color-mouse-focus,var(--spectrum-alias-border-color-mouse-focus))}:host([focused][quiet]) #input,:host([quiet]) #input.focus-visible,:host([quiet]) #input.focus-visible{border-color:var(--spectrum-textfield-m-border-color-key-focus,var(--spectrum-alias-border-color-focus));box-shadow:0 1px 0 var(--spectrum-textfield-m-border-color-key-focus,var(--spectrum-alias-border-color-focus))}:host([focused][quiet]) #input,:host([quiet]) #input.focus-visible,:host([quiet]) #input:focus-visible{border-color:var(--spectrum-textfield-m-border-color-key-focus,var(--spectrum-alias-border-color-focus));box-shadow:0 1px 0 var(--spectrum-textfield-m-border-color-key-focus,var(--spectrum-alias-border-color-focus))}:host([invalid][quiet]) #input{border-color:var(--spectrum-textfield-quiet-m-border-color-error,var(--spectrum-semantic-negative-color-default))}:host([focused][invalid][quiet]) #input,:host([invalid][quiet]) #input:focus{border-color:var(--spectrum-textfield-quiet-m-border-color-error-mouse-focus,var(--spectrum-semantic-negative-color-state-hover))}:host([focused][invalid][quiet]) #input,:host([invalid][quiet]) #input.focus-visible,:host([invalid][quiet]) #input.focus-visible{border-color:var(--spectrum-textfield-quiet-m-border-color-error-key-focus,var(--spectrum-alias-border-color-focus));box-shadow:0 1px 0 var(--spectrum-textfield-quiet-m-border-color-error-key-focus,var(--spectrum-alias-border-color-focus))}:host([focused][invalid][quiet]) #input,:host([invalid][quiet]) #input.focus-visible,:host([invalid][quiet]) #input:focus-visible{border-color:var(--spectrum-textfield-quiet-m-border-color-error-key-focus,var(--spectrum-alias-border-color-focus));box-shadow:0 1px 0 var(--spectrum-textfield-quiet-m-border-color-error-key-focus,var(--spectrum-alias-border-color-focus))}:host([disabled][quiet]) #input,:host([disabled][quiet]:hover) #input,:host([quiet]) #input :disabled{background-color:var(--spectrum-textfield-quiet-m-background-color-disabled,var(--spectrum-alias-background-color-transparent));border-color:var(--spectrum-textfield-quiet-m-border-color-disabled,var(--spectrum-alias-border-color-mid))}:host([grows]) #input{position:absolute;top:0;left:0;height:100%;resize:none}:host([grows]) #sizer{box-sizing:border-box;border:var(--spectrum-textfield-border-size,var(--spectrum-alias-border-size-thin)) solid;border-radius:var(--spectrum-textfield-border-radius,var(--spectrum-alias-border-radius-regular));padding:3px var(--spectrum-textfield-padding-x,var(--spectrum-global-dimension-size-150)) 5px calc(var(--spectrum-textfield-padding-x,
var(--spectrum-global-dimension-size-150)) - 1px);text-indent:0;width:100%;vertical-align:top;margin:0;font-family:var(--spectrum-alias-body-text-font-family,var(--spectrum-global-font-family-base));font-size:var(--spectrum-textfield-text-size,var(--spectrum-alias-font-size-default));line-height:var(--spectrum-textfield-text-line-height,var(--spectrum-alias-body-text-line-height))}:host([grows][quiet]) #sizer{padding-left:var(--spectrum-textfield-quiet-padding-x,0);padding-right:var(--spectrum-textfield-quiet-padding-x,0);border-right-width:0;border-left-width:0}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class Textfield extends Focusable {
        constructor() {
            super(...arguments);
            this.allowedKeys = '';
            this.focused = false;
            this.invalid = false;
            this.label = '';
            this.placeholder = '';
            this.grows = false;
            this.maxlength = -1;
            this.minlength = -1;
            this.multiline = false;
            this.readonly = false;
            this.valid = false;
            this.value = '';
            this.quiet = false;
            this.required = false;
        }
        static get styles() {
            return [styles$h, styles$M];
        }
        get focusElement() {
            return this.inputElement;
        }
        onInput() {
            if (this.allowedKeys && this.inputElement.value) {
                const regExp = new RegExp(`^[${this.allowedKeys}]*$`);
                if (!regExp.test(this.inputElement.value)) {
                    const selectionStart = this.inputElement
                        .selectionStart;
                    const nextSelectStart = selectionStart - 1;
                    this.inputElement.value = this.value;
                    this.inputElement.setSelectionRange(nextSelectStart, nextSelectStart);
                    return;
                }
            }
            this.value = this.inputElement.value;
            const selectionStart = this.inputElement.selectionStart;
            this.updateComplete.then(() => {
                this.inputElement.setSelectionRange(selectionStart, selectionStart);
            });
        }
        onChange() {
            this.dispatchEvent(new Event('change', {
                bubbles: true,
                composed: true,
            }));
        }
        onFocus() {
            this.focused = true;
        }
        onBlur() {
            this.focused = false;
        }
        renderStateIcons() {
            if (this.invalid) {
                return html `
                <sp-icon-alert id="invalid" class="icon"></sp-icon-alert>
            `;
            }
            else if (this.valid) {
                return html `
                <sp-icon-checkmark100
                    id="valid"
                    class="icon spectrum-UIIcon-Checkmark100"
                ></sp-icon-checkmark100>
            `;
            }
            return nothing;
        }
        get renderMultiline() {
            return html `
            ${this.grows && !this.quiet
            ? html `
                      <div id="sizer">${this.value}</div>
                  `
            : nothing}
            <!-- @ts-ignore -->
            <textarea
                aria-label=${this.label || this.placeholder}
                aria-invalid=${ifDefined(this.invalid || undefined)}
                id="input"
                maxlength=${ifDefined(this.maxlength > -1 ? this.maxlength : undefined)}
                minlength=${ifDefined(this.minlength > -1 ? this.minlength : undefined)}
                pattern=${ifDefined(this.pattern)}
                placeholder=${this.placeholder}
                .value=${this.value}
                @change=${this.onChange}
                @input=${this.onInput}
                @focus=${this.onFocus}
                @blur=${this.onBlur}
                ?disabled=${this.disabled}
                ?required=${this.required}
                ?readonly=${this.readonly}
                autocomplete=${ifDefined(this.autocomplete)}
            ></textarea>
        `;
        }
        get renderInput() {
            return html `
            <!-- @ts-ignore -->
            <input
                type="text"
                aria-label=${this.label || this.placeholder}
                aria-invalid=${ifDefined(this.invalid || undefined)}
                id="input"
                maxlength=${ifDefined(this.maxlength > -1 ? this.maxlength : undefined)}
                minlength=${ifDefined(this.minlength > -1 ? this.minlength : undefined)}
                pattern=${ifDefined(this.pattern)}
                placeholder=${this.placeholder}
                .value=${live(this.value)}
                @change=${this.onChange}
                @input=${this.onInput}
                @focus=${this.onFocus}
                @blur=${this.onBlur}
                ?disabled=${this.disabled}
                ?required=${this.required}
                ?readonly=${this.readonly}
                autocomplete=${ifDefined(this.autocomplete)}
            />
        `;
        }
        render() {
            return html `
            ${this.renderStateIcons()}
            ${this.multiline ? this.renderMultiline : this.renderInput}
        `;
        }
        updated(changedProperties) {
            if (changedProperties.has('value') ||
                (changedProperties.has('required') && this.required)) {
                this.checkValidity();
            }
        }
        checkValidity() {
            let validity = this.inputElement.checkValidity();
            if (this.required || (this.value && this.pattern)) {
                if ((this.disabled || this.multiline) && this.pattern) {
                    const regex = new RegExp(this.pattern);
                    validity = regex.test(this.value);
                }
                if (typeof this.minlength !== 'undefined') {
                    validity = validity && this.value.length > this.minlength;
                }
                this.valid = validity;
                this.invalid = !validity;
            }
            return validity;
        }
    }
    __decorate([
        property({ attribute: 'allowed-keys' })
    ], Textfield.prototype, "allowedKeys", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Textfield.prototype, "focused", void 0);
    __decorate([
        query('#input')
    ], Textfield.prototype, "inputElement", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Textfield.prototype, "invalid", void 0);
    __decorate([
        property()
    ], Textfield.prototype, "label", void 0);
    __decorate([
        property()
    ], Textfield.prototype, "placeholder", void 0);
    __decorate([
        property()
    ], Textfield.prototype, "pattern", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Textfield.prototype, "grows", void 0);
    __decorate([
        property({ type: Number })
    ], Textfield.prototype, "maxlength", void 0);
    __decorate([
        property({ type: Number })
    ], Textfield.prototype, "minlength", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Textfield.prototype, "multiline", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Textfield.prototype, "readonly", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Textfield.prototype, "valid", void 0);
    __decorate([
        property({ type: String })
    ], Textfield.prototype, "value", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Textfield.prototype, "quiet", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Textfield.prototype, "required", void 0);
    __decorate([
        property({ type: String, reflect: true })
    ], Textfield.prototype, "autocomplete", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const MagnifyIcon = ({ width = 24, height = 24, hidden = false, title = 'Magnify' } = {}) => {
        return tag `<svg
    xmlns="http://www.w3.org/2000/svg"
    height="${height}"
    viewBox="0 0 36 36"
    width="${width}"
    aria-hidden="${hidden ? 'true' : 'false'}"
    role="img"
    fill="currentColor"
    aria-label="${title}"
  >
    <path
      d="M33.173 30.215L25.4 22.443a12.826 12.826 0 10-2.957 2.957l7.772 7.772a2.1 2.1 0 002.958-2.958zM6 15a9 9 0 119 9 9 9 0 01-9-9z"
    />
  </svg>`;
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class IconMagnify extends IconBase {
        render() {
            setCustomTemplateLiteralTag(html);
            return MagnifyIcon({ hidden: !this.label, title: this.label });
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-icon-magnify', IconMagnify);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$g = css `
:host{--spectrum-search-quiet-button-offset:calc(var(--spectrum-actionbutton-m-min-width,
var(--spectrum-global-dimension-size-400))/2 - var(--spectrum-icon-cross-small-width,
var(--spectrum-global-dimension-size-100))/2);display:inline-block;position:relative}:host([dir=ltr]) #button{right:0}:host([dir=rtl]) #button{left:0}#button{position:absolute;top:0}#input{-webkit-appearance:none;outline-offset:-2px}#input::-webkit-search-cancel-button,#input::-webkit-search-decoration{-webkit-appearance:none}.spectrum-Search--quiet #button{transform:translateX(var(--spectrum-search-quiet-button-offset))}.icon{color:var(--spectrum-textfield-m-icon-color,var(--spectrum-alias-icon-color))}#input:hover~.icon{color:var(--spectrum-search-m-icon-color-hover,var(--spectrum-global-color-gray-900))}#input:active~.icon{color:var(--spectrum-search-m-icon-color-down,var(--spectrum-alias-icon-color-down))}#input.focus-visible~.icon,#input.focus-visible~.icon{color:var(--spectrum-search-m-icon-color-key-focus,var(--spectrum-global-color-gray-900))}#input.focus-visible~.icon,#input:focus-visible~.icon{color:var(--spectrum-search-m-icon-color-key-focus,var(--spectrum-global-color-gray-900))}#input:disabled~.icon{color:var(--spectrum-textfield-m-text-color-disabled,var(--spectrum-alias-text-color-disabled))}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const stopPropagation = (event) => event.stopPropagation();
    class Search extends Textfield {
        constructor() {
            super(...arguments);
            this.label = 'Search';
            this.placeholder = 'Search';
        }
        static get styles() {
            return [...super.styles, styles$g];
        }
        handleSubmit(event) {
            const applyDefault = this.dispatchEvent(new Event('submit', {
                cancelable: true,
                bubbles: true,
            }));
            if (!applyDefault) {
                event.preventDefault();
            }
        }
        handleKeydown(event) {
            const { code } = event;
            if (!this.value || code !== 'Escape') {
                return;
            }
            this.reset();
        }
        async reset() {
            this.value = '';
            await this.updateComplete;
            this.focusElement.dispatchEvent(new InputEvent('input', {
                bubbles: true,
                composed: true,
            }));
            // The native `change` event on an `input` element is not composed,
            // so this synthetic replication of a `change` event must not be
            // either as the `Textfield` baseclass should only need to handle
            // the native variant of this interaction.
            this.focusElement.dispatchEvent(new InputEvent('change', {
                bubbles: true,
            }));
        }
        render() {
            return html `
            <form
                action=${ifDefined(this.action)}
                id="form"
                method=${ifDefined(this.method)}
                @submit=${this.handleSubmit}
                @reset=${this.reset}
                @keydown=${this.handleKeydown}
            >
                <sp-icon-magnify
                    class="icon magnifier icon-workflow"
                ></sp-icon-magnify>
                ${super.render()}
                ${this.value
            ? html `
                          <sp-clear-button
                              id="button"
                              label="Reset"
                              tabindex="-1"
                              type="reset"
                              @keydown=${stopPropagation}
                          ></sp-clear-button>
                      `
            : html ``}
            </form>
        `;
        }
        updated(changedProperties) {
            super.updated(changedProperties);
            this.multiline = false;
        }
    }
    __decorate([
        property()
    ], Search.prototype, "action", void 0);
    __decorate([
        property()
    ], Search.prototype, "label", void 0);
    __decorate([
        property()
    ], Search.prototype, "method", void 0);
    __decorate([
        property()
    ], Search.prototype, "placeholder", void 0);
    __decorate([
        query('#form')
    ], Search.prototype, "form", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-search', Search);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$f = css `
:host{--spectrum-sidenav-item-padding-y:var(--spectrum-global-dimension-size-65);list-style-type:none;margin:0;padding:0;display:block;width:240px;--spectrum-web-component-sidenav-font-weight:var(--spectrum-sidenav-item-font-weight,var(--spectrum-global-font-weight-regular))}:host([variant=multilevel]){--spectrum-web-component-sidenav-font-weight:var(--spectrum-sidenav-multilevel-main-item-font-weight,var(--spectrum-global-font-weight-bold))}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$e = css `
#list{--spectrum-sidenav-item-padding-y:var(--spectrum-global-dimension-size-65);margin:0;padding:0}#list,:host{list-style-type:none}:host{margin-top:var(--spectrum-sidenav-item-gap,var(--spectrum-global-dimension-size-50));margin-bottom:var(--spectrum-sidenav-item-gap,var(--spectrum-global-dimension-size-50));margin-left:0;margin-right:0}#itemLink{position:relative;display:inline-flex;align-items:center;justify-content:left;box-sizing:border-box;width:100%;min-height:var(--spectrum-sidenav-item-height,var(--spectrum-alias-single-line-height));padding:var(--spectrum-sidenav-item-padding-y) var(--spectrum-sidenav-item-padding-x,var(--spectrum-global-dimension-size-150));border-radius:var(--spectrum-sidenav-item-border-radius,var(--spectrum-alias-border-radius-regular));font-size:var(--spectrum-sidenav-item-text-size,var(--spectrum-alias-font-size-default));font-weight:var(--spectrum-sidenav-item-text-font-weight,var(--spectrum-global-font-weight-regular));font-style:normal;text-decoration:none;word-break:break-word;-webkit-hyphens:auto;hyphens:auto;cursor:pointer;transition:background-color var(--spectrum-global-animation-duration-100,.13s) ease-out,color var(--spectrum-global-animation-duration-100,.13s) ease-out}#itemLink:focus{outline:none}:host([dir=ltr]) #itemLink.focus-visible:before,:host([dir=ltr]) #itemLink.focus-visible:before{left:0}:host([dir=ltr]) #itemLink.focus-visible:before,:host([dir=ltr]) #itemLink:focus-visible:before{left:0}:host([dir=ltr]) #itemLink.focus-visible:before,:host([dir=ltr]) #itemLink.focus-visible:before,:host([dir=rtl]) #itemLink.focus-visible:before,:host([dir=rtl]) #itemLink.focus-visible:before{right:0}:host([dir=ltr]) #itemLink.focus-visible:before,:host([dir=ltr]) #itemLink:focus-visible:before,:host([dir=rtl]) #itemLink.focus-visible:before,:host([dir=rtl]) #itemLink:focus-visible:before{right:0}:host([dir=rtl]) #itemLink.focus-visible:before,:host([dir=rtl]) #itemLink.focus-visible:before{left:0}:host([dir=rtl]) #itemLink.focus-visible:before,:host([dir=rtl]) #itemLink:focus-visible:before{left:0}#itemLink.focus-visible:before,#itemLink.focus-visible:before{content:"";position:absolute;top:0;bottom:0;border-top:var(--spectrum-tabs-m-focus-ring-size,var(--spectrum-alias-border-size-thick)) solid transparent;border-bottom:var(--spectrum-tabs-m-focus-ring-size,var(--spectrum-alias-border-size-thick)) solid transparent;border-radius:var(--spectrum-sidenav-item-border-radius,var(--spectrum-alias-border-radius-regular))}#itemLink.focus-visible:before,#itemLink:focus-visible:before{content:"";position:absolute;top:0;bottom:0;border-top:var(--spectrum-tabs-m-focus-ring-size,var(--spectrum-alias-border-size-thick)) solid transparent;border-bottom:var(--spectrum-tabs-m-focus-ring-size,var(--spectrum-alias-border-size-thick)) solid transparent;border-radius:var(--spectrum-sidenav-item-border-radius,var(--spectrum-alias-border-radius-regular))}:host([dir=ltr]) #itemLink ::slotted([slot=icon]){margin-right:var(--spectrum-sidenav-icon-gap,var(--spectrum-global-dimension-size-100))}:host([dir=rtl]) #itemLink ::slotted([slot=icon]){margin-left:var(--spectrum-sidenav-icon-gap,var(--spectrum-global-dimension-size-100))}#itemLink ::slotted([slot=icon]){flex-shrink:0}:host([dir=ltr]) .spectrum-SideNav-heading{margin-right:0}:host([dir=ltr]) .spectrum-SideNav-heading,:host([dir=rtl]) .spectrum-SideNav-heading{margin-left:0}:host([dir=rtl]) .spectrum-SideNav-heading{margin-right:0}:host([dir=ltr]) .spectrum-SideNav--multiLevel #list #itemLink{padding-left:calc(var(--spectrum-sidenav-multilevel-item-indentation,
var(--spectrum-global-dimension-size-150)) + var(--spectrum-sidenav-item-padding-x,
var(--spectrum-global-dimension-size-150)))}:host([dir=rtl]) .spectrum-SideNav--multiLevel #list #itemLink{padding-right:calc(var(--spectrum-sidenav-multilevel-item-indentation,
var(--spectrum-global-dimension-size-150)) + var(--spectrum-sidenav-item-padding-x,
var(--spectrum-global-dimension-size-150)))}:host([dir=ltr]) .spectrum-SideNav--multiLevel #list #list #itemLink{padding-left:calc(var(--spectrum-sidenav-multilevel-item-indentation,
var(--spectrum-global-dimension-size-150)) + var(--spectrum-sidenav-item-padding-x,
var(--spectrum-global-dimension-size-150)))}:host([dir=rtl]) .spectrum-SideNav--multiLevel #list #list #itemLink{padding-right:calc(var(--spectrum-sidenav-multilevel-item-indentation,
var(--spectrum-global-dimension-size-150)) + var(--spectrum-sidenav-item-padding-x,
var(--spectrum-global-dimension-size-150)))}:host([selected])>#itemLink{color:var(--spectrum-sidenav-item-text-color-selected,var(--spectrum-alias-text-color-hover));background-color:var(--spectrum-sidenav-item-background-color-selected,var(--spectrum-alias-highlight-hover))}.is-active>#itemLink{background-color:var(--spectrum-sidenav-item-background-color-down,var(--spectrum-alias-highlight-hover))}:host([disabled]) #itemLink{background-color:var(--spectrum-sidenav-item-background-color-disabled,var(--spectrum-alias-background-color-transparent));color:var(--spectrum-sidenav-item-text-color-disabled,var(--spectrum-alias-text-color-disabled));cursor:default;pointer-events:none}#itemLink{background-color:var(--spectrum-sidenav-item-background-color,var(--spectrum-alias-background-color-transparent));color:var(--spectrum-sidenav-item-text-color,var(--spectrum-alias-text-color))}#itemLink:hover{background-color:var(--spectrum-sidenav-item-background-color-hover,var(--spectrum-alias-highlight-hover));color:var(--spectrum-sidenav-item-text-color-hover,var(--spectrum-alias-text-color-hover))}#itemLink:active{background-color:var(--spectrum-sidenav-item-background-color-down,var(--spectrum-alias-highlight-hover))}#itemLink.focus-visible,#itemLink.focus-visible{background-color:var(--spectrum-sidenav-item-background-color-key-focus,var(--spectrum-alias-highlight-hover));color:var(--spectrum-sidenav-item-text-color-key-focus,var(--spectrum-alias-text-color-hover))}#itemLink.focus-visible,#itemLink:focus-visible{background-color:var(--spectrum-sidenav-item-background-color-key-focus,var(--spectrum-alias-highlight-hover));color:var(--spectrum-sidenav-item-text-color-key-focus,var(--spectrum-alias-text-color-hover))}#itemLink.focus-visible:before,#itemLink.focus-visible:before{border-color:var(--spectrum-sidenav-item-border-color-key-focus,var(--spectrum-alias-border-color-focus))}#itemLink.focus-visible:before,#itemLink:focus-visible:before{border-color:var(--spectrum-sidenav-item-border-color-key-focus,var(--spectrum-alias-border-color-focus))}:host{display:block}:host([multiLevel]){--spectrum-web-component-sidenav-font-weight:var(--spectrum-sidenav-item-font-weight,700)}::slotted(sp-sidenav-item:not([multiLevel])){--spectrum-web-component-sidenav-font-weight:var(--spectrum-sidenav-item-font-weight,400)}#itemLink{font-weight:var(--spectrum-web-component-sidenav-font-weight)}#itemLink[data-level="1"]{padding-left:calc(var(--spectrum-sidenav-multilevel-item-indentation-level1,
var(--spectrum-global-dimension-size-150)) + var(--spectrum-sidenav-item-padding-x,
var(--spectrum-global-dimension-size-150)))}#itemLink[data-level="2"]{padding-left:calc(var(--spectrum-sidenav-multilevel-item-indentation-level2,
var(--spectrum-global-dimension-size-300)) + var(--spectrum-sidenav-item-padding-x,
var(--spectrum-global-dimension-size-150)))}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class SideNavItem extends LikeAnchor(Focusable) {
        constructor() {
            super(...arguments);
            this.value = undefined;
            this.manageTabIndex = false;
            this.selected = false;
            this.expanded = false;
        }
        static get styles() {
            return [styles$e];
        }
        get parentSideNav() {
            return this.closest('sp-sidenav');
        }
        get hasChildren() {
            return !!this.querySelector('sp-sidenav-item');
        }
        get depth() {
            let depth = 0;
            let element = this.parentElement;
            while (element instanceof SideNavItem) {
                depth++;
                element = element.parentElement;
            }
            return depth;
        }
        firstUpdated(changes) {
            super.firstUpdated(changes);
            const parentSideNav = this.parentSideNav;
            if (parentSideNav) {
                parentSideNav.addEventListener('sidenav-select', (event) => this.handleSideNavSelect(event));
                this.selected =
                    this.value != null && this.value === parentSideNav.value;
            }
        }
        handleSideNavSelect(event) {
            this.selected = event.target === this;
        }
        handleClick(event) {
            if (!this.href && event) {
                event.preventDefault();
            }
            if (!this.disabled) {
                if (this.hasChildren) {
                    this.expanded = !this.expanded;
                }
                else if (this.value) {
                    this.announceSelected(this.value);
                }
            }
        }
        announceSelected(value) {
            const selectDetail = {
                value,
            };
            const selectionEvent = new CustomEvent('sidenav-select', {
                bubbles: true,
                composed: true,
                detail: selectDetail,
            });
            this.dispatchEvent(selectionEvent);
        }
        click() {
            this.handleClick();
        }
        get focusElement() {
            return this.shadowRoot.querySelector('#itemLink');
        }
        render() {
            return html `
            <a
                href=${this.href || '#'}
                target=${ifDefined(this.target)}
                download=${ifDefined(this.download)}
                rel=${ifDefined(this.rel)}
                data-level="${this.depth}"
                @click="${this.handleClick}"
                id="itemLink"
                aria-current=${ifDefined(this.selected && this.href ? 'page' : undefined)}
            >
                <slot name="icon"></slot>
                ${this.label}
            </a>
            ${this.expanded
            ? html `
                      <slot></slot>
                  `
            : html ``}
        `;
        }
        updated(changes) {
            super.updated(changes);
            if (changes.has('selected') || changes.has('manageTabIndex')) {
                const tabIndexForSelectedState = this.selected ? 0 : -1;
                this.tabIndex = this.manageTabIndex ? tabIndexForSelectedState : 0;
            }
        }
        connectedCallback() {
            super.connectedCallback();
            const manageTabIndex = this.dispatchEvent(new Event('manage-tab-index', {
                cancelable: true,
            }));
            if (manageTabIndex) {
                this.manageTabIndex = true;
            }
        }
    }
    __decorate([
        property()
    ], SideNavItem.prototype, "value", void 0);
    __decorate([
        property({ type: Boolean, attribute: false })
    ], SideNavItem.prototype, "manageTabIndex", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], SideNavItem.prototype, "selected", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], SideNavItem.prototype, "expanded", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$d = css `
#list{--spectrum-sidenav-item-padding-y:var(--spectrum-global-dimension-size-65);list-style-type:none;margin:0;padding:0}:host([dir=ltr]) .spectrum-SideNav-itemLink.focus-visible:before,:host([dir=ltr]) .spectrum-SideNav-itemLink.focus-visible:before{left:0}:host([dir=ltr]) .spectrum-SideNav-itemLink.focus-visible:before,:host([dir=ltr]) .spectrum-SideNav-itemLink:focus-visible:before{left:0}:host([dir=ltr]) .spectrum-SideNav-itemLink.focus-visible:before,:host([dir=ltr]) .spectrum-SideNav-itemLink.focus-visible:before,:host([dir=rtl]) .spectrum-SideNav-itemLink.focus-visible:before,:host([dir=rtl]) .spectrum-SideNav-itemLink.focus-visible:before{right:0}:host([dir=ltr]) .spectrum-SideNav-itemLink.focus-visible:before,:host([dir=ltr]) .spectrum-SideNav-itemLink:focus-visible:before,:host([dir=rtl]) .spectrum-SideNav-itemLink.focus-visible:before,:host([dir=rtl]) .spectrum-SideNav-itemLink:focus-visible:before{right:0}:host([dir=rtl]) .spectrum-SideNav-itemLink.focus-visible:before,:host([dir=rtl]) .spectrum-SideNav-itemLink.focus-visible:before{left:0}:host([dir=rtl]) .spectrum-SideNav-itemLink.focus-visible:before,:host([dir=rtl]) .spectrum-SideNav-itemLink:focus-visible:before{left:0}:host([dir=ltr]) .spectrum-SideNav-itemLink .spectrum-SideNav-itemIcon{margin-right:var(--spectrum-sidenav-icon-gap,var(--spectrum-global-dimension-size-100))}:host([dir=rtl]) .spectrum-SideNav-itemLink .spectrum-SideNav-itemIcon{margin-left:var(--spectrum-sidenav-icon-gap,var(--spectrum-global-dimension-size-100))}:host([dir=ltr]) #heading{margin-right:0}:host([dir=ltr]) #heading,:host([dir=rtl]) #heading{margin-left:0}:host([dir=rtl]) #heading{margin-right:0}#heading{height:var(--spectrum-sidenav-heading-height,var(--spectrum-alias-single-line-height));line-height:var(--spectrum-sidenav-heading-height,var(--spectrum-alias-single-line-height));margin-top:var(--spectrum-sidenav-heading-gap-top,var(--spectrum-global-dimension-size-200));margin-bottom:var(--spectrum-sidenav-heading-gap-bottom,var(--spectrum-global-dimension-size-50));padding-top:0;padding-bottom:0;padding-left:var(--spectrum-sidenav-heading-padding-x,var(--spectrum-global-dimension-size-150));padding-right:var(--spectrum-sidenav-heading-padding-x,var(--spectrum-global-dimension-size-150));border-radius:var(--spectrum-sidenav-heading-border-radius,var(--spectrum-alias-border-radius-regular));font-size:var(--spectrum-sidenav-heading-text-size,var(--spectrum-global-dimension-font-size-50));font-weight:var(--spectrum-sidenav-heading-text-font-weight,var(--spectrum-global-font-weight-medium));font-style:normal;letter-spacing:var(--spectrum-sidenav-heading-text-letter-spacing,var(--spectrum-global-font-letter-spacing-medium));text-transform:uppercase}:host([dir=ltr]) .spectrum-SideNav--multiLevel #list .spectrum-SideNav-itemLink{padding-left:calc(var(--spectrum-sidenav-multilevel-item-indentation,
var(--spectrum-global-dimension-size-150)) + var(--spectrum-sidenav-item-padding-x,
var(--spectrum-global-dimension-size-150)))}:host([dir=rtl]) .spectrum-SideNav--multiLevel #list .spectrum-SideNav-itemLink{padding-right:calc(var(--spectrum-sidenav-multilevel-item-indentation,
var(--spectrum-global-dimension-size-150)) + var(--spectrum-sidenav-item-padding-x,
var(--spectrum-global-dimension-size-150)))}:host([dir=ltr]) .spectrum-SideNav--multiLevel #list #list .spectrum-SideNav-itemLink{padding-left:calc(var(--spectrum-sidenav-multilevel-item-indentation,
var(--spectrum-global-dimension-size-150)) + var(--spectrum-sidenav-item-padding-x,
var(--spectrum-global-dimension-size-150)))}:host([dir=rtl]) .spectrum-SideNav--multiLevel #list #list .spectrum-SideNav-itemLink{padding-right:calc(var(--spectrum-sidenav-multilevel-item-indentation,
var(--spectrum-global-dimension-size-150)) + var(--spectrum-sidenav-item-padding-x,
var(--spectrum-global-dimension-size-150)))}#heading{color:var(--spectrum-sidenav-heading-text-color,var(--spectrum-global-color-gray-700))}:host{display:block}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class SideNavHeading extends SpectrumElement {
        constructor() {
            super(...arguments);
            this.label = '';
        }
        static get styles() {
            return [styles$e, styles$d];
        }
        render() {
            return html `
            <h2 id="heading">${this.label}</h2>
            <div id="list" aria-labelledby="heading">
                <slot></slot>
            </div>
        `;
        }
    }
    __decorate([
        property({ reflect: true })
    ], SideNavHeading.prototype, "label", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class SideNav extends Focusable {
        constructor() {
            super();
            this.manageTabIndex = false;
            this.value = undefined;
            this.addEventListener('focusin', this.startListeningToKeyboard);
            this.addEventListener('focusout', this.stopListeningToKeyboard);
        }
        static get styles() {
            return [styles$f];
        }
        handleSelect(event) {
            this.value = event.detail.value;
        }
        focus() {
            if (this.focusElement === this) {
                return;
            }
            super.focus();
        }
        blur() {
            if (this.focusElement === this) {
                return;
            }
            super.blur();
        }
        click() {
            if (this.focusElement === this) {
                return;
            }
            super.click();
        }
        get focusElement() {
            const selected = this.querySelector('[selected]');
            if (selected && !this.isDisabledChild(selected)) {
                return selected;
            }
            const items = [...this.querySelectorAll('sp-sidenav-item')];
            let index = 0;
            while (index < items.length &&
                items[index] &&
                this.isDisabledChild(items[index])) {
                index += 1;
            }
            if (items[index]) {
                return items[index];
            }
            /* c8 ignore next */
            return this;
        }
        startListeningToKeyboard() {
            this.addEventListener('keydown', this.handleKeydown);
            if (this.value && this.manageTabIndex) {
                const selected = this.querySelector(`[value="${this.value}"]`);
                if (selected) {
                    selected.tabIndex = -1;
                }
            }
        }
        stopListeningToKeyboard() {
            this.removeEventListener('keydown', this.handleKeydown);
            if (this.value && this.manageTabIndex) {
                const selected = this.querySelector(`[value="${this.value}"]`);
                if (selected) {
                    selected.tabIndex = 0;
                }
            }
        }
        handleKeydown(event) {
            const { code } = event;
            /* c8 ignore next */
            if (code !== 'ArrowDown' && code !== 'ArrowUp') {
                return;
            }
            event.preventDefault();
            const direction = code === 'ArrowDown' ? 1 : -1;
            this.focusItemByOffset(direction);
        }
        focusItemByOffset(direction) {
            const items = [...this.querySelectorAll('sp-sidenav-item')];
            const focused = items.indexOf(getActiveElement(this));
            let next = focused;
            next = (items.length + next + direction) % items.length;
            let availableItems = items.length;
            // cycle through the available items in the directions of the offset to find the next non-disabled item
            while (this.isDisabledChild(items[next]) && availableItems) {
                availableItems -= 1;
                next = (items.length + next + direction) % items.length;
            }
            // if there are no non-disabled items, skip the work to focus a child
            if (this.isDisabledChild(items[next])) {
                return;
            }
            items[next].focus();
        }
        isDisabledChild(child) {
            if (child.disabled) {
                return true;
            }
            let parent = child.parentElement;
            while (parent instanceof SideNavHeading ||
                (!parent.disabled &&
                    parent instanceof SideNavItem &&
                    parent.expanded)) {
                parent = parent.parentElement;
            }
            return parent !== this;
        }
        handleSlotchange() {
            this.manageTabIndexes();
        }
        async manageTabIndexes() {
            if (!this.value && this.manageTabIndex) {
                const managed = this.querySelector('sp-sidenav-item:not([tabindex])');
                if (managed) {
                    managed.tabIndex = -1;
                }
                const first = this.querySelector('sp-sidenav-item');
                if (first) {
                    await first.updateComplete;
                    first.tabIndex = 0;
                }
            }
        }
        render() {
            return html `
            <nav @sidenav-select=${this.handleSelect}>
                <slot @slotchange=${this.handleSlotchange}></slot>
            </nav>
        `;
        }
        firstUpdated(changes) {
            super.firstUpdated(changes);
            const selectedChild = this.querySelector('[selected]');
            if (selectedChild) {
                this.value = selectedChild.value;
            }
            else {
                this.manageTabIndexes();
            }
        }
        updated(changes) {
            super.updated(changes);
            if (changes.has('manageTabIndex')) {
                const items = [...this.querySelectorAll('sp-sidenav-item')];
                items.map((item) => (item.manageTabIndex = this.manageTabIndex));
                if (this.manageTabIndex) {
                    this.removeEventListener('manage-tab-index', this.handleManageTabIndex, true);
                }
                else {
                    this.addEventListener('manage-tab-index', this.handleManageTabIndex, true);
                }
            }
        }
        handleManageTabIndex(event) {
            event.preventDefault();
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true, attribute: 'manage-tab-index' })
    ], SideNav.prototype, "manageTabIndex", void 0);
    __decorate([
        property({ reflect: true })
    ], SideNav.prototype, "value", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-sidenav', SideNav);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-sidenav-heading', SideNavHeading);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-sidenav-item', SideNavItem);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$c = css `
:host{--spectrum-slider-handle-border-size:var(--spectrum-slider-m-handle-border-size,var(--spectrum-alias-border-size-thick));--spectrum-slider-handle-border-size-down:var(--spectrum-slider-m-handle-border-size-down,var(--spectrum-global-dimension-size-75));--spectrum-slider-track-border-radius:var(--spectrum-slider-m-track-border-radius,var(--spectrum-global-dimension-static-size-10));--spectrum-slider-track-height:var(--spectrum-slider-m-track-height,var(--spectrum-alias-border-size-thick));--spectrum-slider-handle-gap:var(--spectrum-slider-m-handle-gap,var(--spectrum-alias-border-size-thicker));--spectrum-slider-animation-duration:var(--spectrum-slider-m-animation-duration,var(--spectrum-global-animation-duration-100));--spectrum-slider-height:var(--spectrum-slider-m-height,var(--spectrum-alias-item-height-m));--spectrum-slider-min-width:var(--spectrum-slider-m-min-width,var(--spectrum-global-dimension-size-1250));--spectrum-slider-handle-width:var(--spectrum-slider-m-handle-width,var(--spectrum-alias-item-control-2-size-l));--spectrum-slider-handle-height:var(--spectrum-slider-m-handle-height,var(--spectrum-alias-item-control-2-size-l));--spectrum-slider-handle-border-radius:var(--spectrum-slider-m-handle-border-radius,var(--spectrum-global-dimension-size-100));--spectrum-slider-label-gap-x:var(--spectrum-slider-m-label-gap-x,var(--spectrum-alias-item-control-gap-m));--spectrum-slider-tick-mark-width:var(--spectrum-slider-tick-m-mark-width,var(--spectrum-alias-border-size-thick));--spectrum-slider-tick-mark-border-radius:var(--spectrum-slider-tick-m-mark-border-radius,var(--spectrum-alias-border-radius-xsmall));--spectrum-slider-tick-mark-height:var(--spectrum-slider-tick-m-mark-height,var(--spectrum-global-dimension-size-125));--spectrum-slider-label-gap-y:var(--spectrum-global-dimension-size-85);--spectrum-slider-controls-margin:calc(var(--spectrum-slider-handle-width)/2);--spectrum-slider-track-margin-offset:calc(var(--spectrum-slider-controls-margin)*-1);--spectrum-slider-handle-margin-top:calc(var(--spectrum-slider-handle-width)/-2);--spectrum-slider-handle-margin-left:calc(var(--spectrum-slider-handle-width)/-2);--spectrum-slider-track-handleoffset:var(--spectrum-slider-handle-gap);--spectrum-slider-track-middle-handleoffset:calc(var(--spectrum-slider-handle-gap) + var(--spectrum-slider-handle-width)/2);--spectrum-slider-input-top:calc(var(--spectrum-slider-handle-margin-top)/4);--spectrum-slider-input-left:calc(var(--spectrum-slider-handle-margin-left)/4);--spectrum-slider-ramp-margin-top:0;--spectrum-slider-range-track-reset:0;--spectrum-slide-label-text-size:var(--spectrum-global-dimension-font-size-75);--spectrum-slide-label-text-line-height:var(--spectrum-global-font-line-height-small,1.3);position:relative;z-index:1;display:block;min-height:var(--spectrum-slider-height);min-width:var(--spectrum-slider-min-width);-webkit-user-select:none;user-select:none}:host([dir=ltr]) #controls{margin-left:var(--spectrum-slider-controls-margin)}:host([dir=rtl]) #controls{margin-right:var(--spectrum-slider-controls-margin)}#controls{display:inline-block;box-sizing:border-box;position:relative;z-index:auto;width:calc(100% - var(--spectrum-slider-controls-margin)*2);min-height:var(--spectrum-slider-height);vertical-align:top}:host([dir=ltr]) #fill,:host([dir=ltr]) .track{left:0}:host([dir=rtl]) #fill,:host([dir=rtl]) .track{right:0}:host([dir=ltr]) #fill,:host([dir=ltr]) .track{right:auto}:host([dir=rtl]) #fill,:host([dir=rtl]) .track{left:auto}#fill,.track{height:var(--spectrum-slider-track-height);box-sizing:border-box;position:absolute;z-index:1;top:calc(var(--spectrum-slider-height)/2);margin-top:calc(var(--spectrum-slider-track-height)/-2);pointer-events:none}:host([dir=ltr]) #fill,:host([dir=ltr]) .track{padding-left:0;padding-right:var(--spectrum-slider-track-handleoffset)}:host([dir=rtl]) #fill,:host([dir=rtl]) .track{padding-right:0;padding-left:var(--spectrum-slider-track-handleoffset)}:host([dir=ltr]) #fill,:host([dir=ltr]) .track{margin-left:var(--spectrum-slider-track-margin-offset)}:host([dir=rtl]) #fill,:host([dir=rtl]) .track{margin-right:var(--spectrum-slider-track-margin-offset)}#fill,.track{padding-top:0;padding-bottom:0}#fill:before,.track:before{content:"";display:block;height:100%;border-radius:var(--spectrum-slider-track-border-radius)}:host([dir=ltr]) #fill{margin-left:0}:host([dir=rtl]) #fill{margin-right:0}:host([dir=ltr]) #fill{padding-left:calc(var(--spectrum-slider-controls-margin) + var(--spectrum-slider-track-handleoffset));padding-right:0}:host([dir=rtl]) #fill{padding-right:calc(var(--spectrum-slider-controls-margin) + var(--spectrum-slider-track-handleoffset));padding-left:0}#fill{padding-top:0;padding-bottom:0}:host([dir=ltr]) .spectrum-Slider-fill--right{padding-left:0;padding-right:calc(var(--spectrum-slider-controls-margin) + var(--spectrum-slider-track-handleoffset))}:host([dir=rtl]) .spectrum-Slider-fill--right{padding-right:0;padding-left:calc(var(--spectrum-slider-controls-margin) + var(--spectrum-slider-track-handleoffset))}.spectrum-Slider-fill--right{padding-top:0;padding-bottom:0}:host([dir=ltr]) .track~.track{left:auto}:host([dir=rtl]) .track~.track{right:auto}:host([dir=ltr]) .track~.track{right:var(--spectrum-slider-range-track-reset)}:host([dir=rtl]) .track~.track{left:var(--spectrum-slider-range-track-reset)}:host([dir=ltr]) .track~.track{padding-left:var(--spectrum-slider-track-handleoffset);padding-right:0}:host([dir=rtl]) .track~.track{padding-right:var(--spectrum-slider-track-handleoffset);padding-left:0}:host([dir=ltr]) .track~.track{margin-left:var(--spectrum-slider-range-track-reset)}:host([dir=rtl]) .track~.track{margin-right:var(--spectrum-slider-range-track-reset)}:host([dir=ltr]) .track~.track{margin-right:var(--spectrum-slider-track-margin-offset)}:host([dir=rtl]) .track~.track{margin-left:var(--spectrum-slider-track-margin-offset)}.track~.track{padding-top:0;padding-bottom:0}:host([variant=range]) #value{-webkit-user-select:text;user-select:text}:host([dir=ltr][variant=range]) .track:first-of-type{padding-left:0;padding-right:var(--spectrum-slider-track-handleoffset)}:host([dir=rtl][variant=range]) .track:first-of-type{padding-right:0;padding-left:var(--spectrum-slider-track-handleoffset)}:host([dir=ltr][variant=range]) .track:first-of-type{left:var(--spectrum-slider-range-track-reset)}:host([dir=rtl][variant=range]) .track:first-of-type{right:var(--spectrum-slider-range-track-reset)}:host([dir=ltr][variant=range]) .track:first-of-type{right:auto}:host([dir=rtl][variant=range]) .track:first-of-type{left:auto}:host([dir=ltr][variant=range]) .track:first-of-type{margin-left:var(--spectrum-slider-track-margin-offset)}:host([dir=rtl][variant=range]) .track:first-of-type{margin-right:var(--spectrum-slider-track-margin-offset)}:host([variant=range]) .track:first-of-type{padding-top:0;padding-bottom:0}:host([dir=ltr][variant=range]) [dir=ltr] .track,:host([dir=ltr][variant=range]) [dir=rtl] .track{left:auto}:host([dir=ltr][variant=range]) [dir=ltr] .track,:host([dir=ltr][variant=range]) [dir=rtl] .track,:host([dir=rtl][variant=range]) [dir=rtl] .track{right:auto}:host([dir=ltr][variant=range]) [dir=rtl] .track,:host([dir=rtl][variant=range]) [dir=rtl] .track{left:auto}:host([dir=ltr][variant=range]) .track,:host([dir=rtl][variant=range]) .track{padding-top:0;padding-bottom:0;padding-left:var(--spectrum-slider-track-middle-handleoffset);padding-right:var(--spectrum-slider-track-middle-handleoffset);margin:var(--spectrum-slider-range-track-reset)}:host([dir=ltr][variant=range]) .track:last-of-type{padding-left:var(--spectrum-slider-track-handleoffset);padding-right:0}:host([dir=rtl][variant=range]) .track:last-of-type{padding-right:var(--spectrum-slider-track-handleoffset);padding-left:0}:host([dir=ltr][variant=range]) .track:last-of-type{left:auto}:host([dir=rtl][variant=range]) .track:last-of-type{right:auto}:host([dir=ltr][variant=range]) .track:last-of-type{right:var(--spectrum-slider-range-track-reset)}:host([dir=rtl][variant=range]) .track:last-of-type{left:var(--spectrum-slider-range-track-reset)}:host([dir=ltr][variant=range]) .track:last-of-type{margin-right:var(--spectrum-slider-track-margin-offset)}:host([dir=rtl][variant=range]) .track:last-of-type{margin-left:var(--spectrum-slider-track-margin-offset)}:host([variant=range]) .track:last-of-type{padding-top:0;padding-bottom:0}:host([dir=ltr]) #ramp{left:var(--spectrum-slider-track-margin-offset)}:host([dir=ltr]) #ramp,:host([dir=rtl]) #ramp{right:var(--spectrum-slider-track-margin-offset)}:host([dir=rtl]) #ramp{left:var(--spectrum-slider-track-margin-offset)}#ramp{margin-top:var(--spectrum-slider-ramp-margin-top);height:var(--spectrum-slider-ramp-track-height,var(--spectrum-global-dimension-static-size-200));position:absolute;top:calc(var(--spectrum-slider-ramp-track-height,
var(--spectrum-global-dimension-static-size-200))/2)}:host([dir=rtl]) #ramp svg{transform:matrix(-1,0,0,1,0,0)}#ramp svg{width:100%;height:100%}:host([dir=ltr]) #handle{left:0}:host([dir=rtl]) #handle{right:0}:host([dir=ltr]) #handle{margin-left:calc(var(--spectrum-slider-handle-width)/-2);margin-right:0}:host([dir=rtl]) #handle{margin-right:calc(var(--spectrum-slider-handle-width)/-2);margin-left:0}#handle{position:absolute;top:calc(var(--spectrum-slider-height)/2);z-index:2;display:inline-block;box-sizing:border-box;width:var(--spectrum-slider-handle-width);height:var(--spectrum-slider-handle-height);margin-top:var(--spectrum-slider-handle-margin-top);margin-bottom:0;border-width:var(--spectrum-slider-handle-border-size);border-style:solid;border-radius:var(--spectrum-slider-handle-border-radius);transition:border-width var(--spectrum-slider-animation-duration) ease-in-out;outline:none}#handle:active,:host([dragging]) #handle,:host([handle-highlight]) #handle{border-width:var(--spectrum-slider-handle-border-size-down)}#handle.is-tophandle,#handle:active,:host([dragging]) #handle,:host([handle-highlight]) #handle{z-index:3}#handle:before{content:" ";display:block;position:absolute;left:50%;top:50%;transition:box-shadow var(--spectrum-global-animation-duration-100,.13s) ease-out,width var(--spectrum-global-animation-duration-100,.13s) ease-out,height var(--spectrum-global-animation-duration-100,.13s) ease-out;width:var(--spectrum-slider-handle-width);height:var(--spectrum-slider-handle-height);transform:translate(-50%,-50%);border-radius:100%}:host([handle-highlight]) #handle:before{width:calc(var(--spectrum-slider-handle-width) + var(--spectrum-alias-focus-ring-gap,
var(--spectrum-global-dimension-static-size-25))*2);height:calc(var(--spectrum-slider-handle-height) + var(--spectrum-alias-focus-ring-gap,
var(--spectrum-global-dimension-static-size-25))*2)}:host([dir=ltr]) #input{left:var(--spectrum-slider-input-left)}:host([dir=rtl]) #input{right:var(--spectrum-slider-input-left)}#input{margin:0;width:var(--spectrum-slider-handle-width);height:var(--spectrum-slider-handle-height);padding:0;position:absolute;top:var(--spectrum-slider-input-top);overflow:hidden;opacity:.000001;cursor:default;-webkit-appearance:none;border:0;pointer-events:none}#input:focus{outline:none}#labelContainer{display:flex;position:relative;width:auto;padding-top:var(--spectrum-fieldlabel-m-padding-top,var(--spectrum-global-dimension-size-50));font-size:var(--spectrum-slide-label-text-size);line-height:var(--spectrum-slide-label-text-line-height)}:host([dir=ltr]) #label{padding-left:0}:host([dir=rtl]) #label{padding-right:0}#label{flex-grow:1}:host([dir=ltr]) #value{padding-right:0}:host([dir=rtl]) #value{padding-left:0}:host([dir=ltr]) #value{text-align:right}:host([dir=rtl]) #value{text-align:left}#value{flex-grow:0;cursor:default;font-feature-settings:"tnum"}:host([dir=ltr]) #value{margin-left:var(--spectrum-slider-label-gap-x)}:host([dir=rtl]) #value{margin-right:var(--spectrum-slider-label-gap-x)}.ticks{display:flex;justify-content:space-between;z-index:0;margin:0 var(--spectrum-slider-track-margin-offset);margin-top:calc(var(--spectrum-slider-tick-mark-height) + var(--spectrum-slider-track-height)/2)}.tick{position:relative;width:var(--spectrum-slider-tick-mark-width)}:host([dir=ltr]) .tick:after{left:calc(50% - var(--spectrum-slider-tick-mark-width)/2)}:host([dir=rtl]) .tick:after{right:calc(50% - var(--spectrum-slider-tick-mark-width)/2)}.tick:after{display:block;position:absolute;top:0;content:"";width:var(--spectrum-slider-tick-mark-width);height:var(--spectrum-slider-tick-mark-height);border-radius:var(--spectrum-slider-tick-mark-border-radius)}.tick .tickLabel{display:flex;align-items:center;justify-content:center;margin-top:calc(var(--spectrum-slider-label-gap-y) + var(--spectrum-slider-tick-mark-height));margin-bottom:0;margin-left:calc(var(--spectrum-slider-label-gap-x)*-1);margin-right:calc(var(--spectrum-slider-label-gap-x)*-1);font-size:var(--spectrum-slide-label-text-size);line-height:var(--spectrum-slide-label-text-line-height)}.tick:first-of-type .tickLabel,.tick:last-of-type .tickLabel{display:block;position:absolute;margin-left:0;margin-right:0}:host([dir=ltr]) .tick:first-of-type .tickLabel{left:0}:host([dir=ltr]) .tick:last-of-type .tickLabel,:host([dir=rtl]) .tick:first-of-type .tickLabel{right:0}:host([dir=rtl]) .tick:last-of-type .tickLabel{left:0}:host([disabled]){cursor:default}:host([disabled]) #handle{cursor:default;pointer-events:none}:host{--spectrum-slider-m-focus-ring-size-key-focus:var(--spectrum-alias-focus-ring-size,var(--spectrum-global-dimension-static-size-25));--spectrum-slider-m-handle-border-color-key-focus:var(--spectrum-global-color-gray-800);--spectrum-slider-m-handle-focus-ring-color-key-focus:var(--spectrum-alias-focus-color,var(--spectrum-global-color-blue-400));--spectrum-slider-m-label-text-color:var(--spectrum-alias-label-text-color,var(--spectrum-global-color-gray-700));--spectrum-slider-m-label-text-color-disabled:var(--spectrum-alias-text-color-disabled,var(--spectrum-global-color-gray-500))}.track:before{background:var(--spectrum-slider-m-track-color,var(--spectrum-global-color-gray-400))}#labelContainer{color:var(--spectrum-slider-m-label-text-color)}#fill:before,:host([variant=filled]) .track:first-child:before{background:var(--spectrum-slider-m-track-fill-color,var(--spectrum-global-color-gray-700))}#ramp path{fill:var(--spectrum-slider-m-track-color,var(--spectrum-global-color-gray-400))}#handle{border-color:var(--spectrum-slider-m-handle-border-color,var(--spectrum-global-color-gray-700));background:var(--spectrum-slider-m-handle-background-color,var(--spectrum-alias-background-color-transparent))}#handle:hover{border-color:var(--spectrum-slider-m-handle-border-color-hover,var(--spectrum-global-color-gray-800))}:host([handle-highlight]) #handle{border-color:var(--spectrum-slider-m-handle-border-color-key-focus,var(--spectrum-global-color-gray-800))}:host([handle-highlight]) #handle:before{box-shadow:0 0 0 var(--spectrum-slider-m-focus-ring-size-key-focus,var(--spectrum-alias-focus-ring-size)) var(--spectrum-slider-m-handle-focus-ring-color-key-focus)}#handle:active,:host([dragging]) #handle{border-color:var(--spectrum-slider-m-handle-border-color-down,var(--spectrum-global-color-gray-800))}:host([variant=ramp]) #handle{box-shadow:0 0 0 4px var(--spectrum-alias-background-color-default,var(--spectrum-global-color-gray-100))}#input{background:transparent}.tick:after{background-color:var(--spectrum-slider-tick-m-mark-color,var(--spectrum-alias-track-color-default))}:host([dragging]) #handle{border-color:var(--spectrum-slider-m-handle-border-color-down,var(--spectrum-global-color-gray-800));background:var(--spectrum-slider-m-handle-background-color-down,var(--spectrum-alias-background-color-transparent))}:host([variant=range]) .track:not(:first-of-type):not(:last-of-type):before{background:var(--spectrum-slider-m-track-fill-color,var(--spectrum-global-color-gray-700))}:host([disabled]) #labelContainer{color:var(--spectrum-slider-m-label-text-color-disabled)}:host([disabled]) #handle{background:var(--spectrum-alias-background-color-default,var(--spectrum-global-color-gray-100))}:host([disabled]) #handle,:host([disabled]) #handle:active,:host([disabled]) #handle:hover{border-color:var(--spectrum-slider-m-handle-border-color-disabled,var(--spectrum-global-color-gray-400))}:host([disabled]) #handle:active,:host([disabled]) #handle:hover{background:var(--spectrum-slider-m-handle-background-color,var(--spectrum-alias-background-color-transparent))}:host([disabled]) .track:before{background:var(--spectrum-slider-m-track-color-disabled,var(--spectrum-global-color-gray-300))}:host([disabled]) #fill:before,:host([disabled][variant=filled]) .track:first-child:before{background:var(--spectrum-slider-m-track-fill-color-disabled,var(--spectrum-global-color-gray-300))}:host([disabled]) #ramp path{fill:var(--spectrum-slider-ramp-track-color-disabled,var(--spectrum-global-color-gray-200))}:host([disabled][variant=range]) .track:not(:first-of-type):not(:last-of-type):before{background:var(--spectrum-slider-m-track-fill-color-disabled,var(--spectrum-global-color-gray-300))}:host(:focus){outline-width:0}#handle{touch-action:none}.not-exact.ticks{justify-content:start}:host([dir=ltr]) .not-exact .tick{padding-right:var(--sp-slider-tick-offset)}:host([dir=rtl]) .not-exact .tick{padding-left:var(--sp-slider-tick-offset)}:host([dir=ltr]) .not-exact .tick:after{left:auto;transform:translate(-50%)}:host([dir=rtl]) .not-exact .tick:after{right:auto;transform:translate(50%)}.track:before{background-size:var(--spectrum-slider-track-background-size)!important}:host([dir=ltr]) #track-right:before,:host([dir=rtl]) #track-left:before{background-position:100%}:host([dir=ltr]) .track:before{background:var(--spectrum-slider-track-color,var(--spectrum-global-color-gray-300))}:host([dir=rtl]) .track:before{background:var(--spectrum-slider-track-color-rtl,var(--spectrum-slider-track-color,var(--spectrum-global-color-gray-300)))}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const variants = ['filled', 'ramp', 'range', 'tick'];
    class Slider extends Focusable {
        constructor() {
            super(...arguments);
            this.type = '';
            this._value = 10;
            /* Ensure that a '' value for `variant` removes the attribute instead of a blank value */
            this._variant = '';
            this.getAriaValueText = (value) => `${value}`;
            this.label = '';
            this.max = 100;
            this.min = 0;
            this.step = 1;
            this.tickStep = 0;
            this.tickLabels = false;
            this.disabled = false;
            this.dragging = false;
            this.handleHighlight = false;
        }
        static get styles() {
            return [styles$c];
        }
        get value() {
            return this._value;
        }
        set value(value) {
            const oldValue = this.value;
            if (this.input) {
                this.input.value = String(value);
            }
            const newValue = this.input ? parseFloat(this.input.value) : value;
            if (newValue === oldValue) {
                return;
            }
            this._value = newValue;
            this.requestUpdate('value', oldValue);
        }
        set variant(variant) {
            const oldVariant = this.variant;
            if (variant === this.variant) {
                return;
            }
            if (variants.includes(variant)) {
                this.setAttribute('variant', variant);
                this._variant = variant;
            }
            else {
                this.removeAttribute('variant');
                this._variant = '';
            }
            this.requestUpdate('variant', oldVariant);
        }
        get variant() {
            return this._variant;
        }
        get ariaValueText() {
            if (!this.getAriaValueText) {
                return `${this.value}`;
            }
            return this.getAriaValueText(this.value);
        }
        get focusElement() {
            return this.input;
        }
        render() {
            return html `
            ${this.renderLabel()} ${this.renderTrack()}
        `;
        }
        updated(changedProperties) {
            if (changedProperties.has('value')) {
                this.dispatchInputEvent();
            }
        }
        renderLabel() {
            return html `
            <div id="labelContainer">
                <label id="label" for="input"><slot>${this.label}</slot></label>
                <output id="value" aria-live="off" for="input">
                    ${this.ariaValueText}
                </output>
            </div>
        `;
        }
        renderTrackLeft() {
            if (this.variant === 'ramp') {
                return html ``;
            }
            return html `
            <div
                class="track"
                id="track-left"
                style=${styleMap(this.trackStartStyles)}
                role="presentation"
            ></div>
        `;
        }
        renderTrackRight() {
            if (this.variant === 'ramp') {
                return html ``;
            }
            return html `
            <div
                class="track"
                id="track-right"
                style=${styleMap(this.trackEndStyles)}
                role="presentation"
            ></div>
        `;
        }
        renderRamp() {
            if (this.variant !== 'ramp') {
                return html ``;
            }
            return html `
            <div id="ramp">
                <svg
                    viewBox="0 0 240 16"
                    preserveAspectRatio="none"
                    aria-hidden="true"
                    focusable="false"
                >
                    <path
                        d="M240,4v8c0,2.3-1.9,4.1-4.2,4L1,9C0.4,9,0,8.5,0,8c0-0.5,0.4-1,1-1l234.8-7C238.1-0.1,240,1.7,240,4z"
                    ></path>
                </svg>
            </div>
        `;
        }
        renderTicks() {
            if (this.variant !== 'tick') {
                return html ``;
            }
            const tickStep = this.tickStep || this.step;
            const tickCount = (this.max - this.min) / tickStep;
            const partialFit = tickCount % 1 !== 0;
            const ticks = new Array(Math.floor(tickCount + 1));
            ticks.fill(0, 0, tickCount + 1);
            return html `
            <div
                class="${partialFit ? 'not-exact ' : ''}ticks"
                style=${ifDefined(partialFit
            ? `--sp-slider-tick-offset: calc(100% / ${this.max} * ${this.tickStep}`
            : undefined)}
            >
                ${ticks.map((_tick, i) => html `
                        <div class="tick">
                            ${this.tickLabels
            ? html `
                                      <div class="tickLabel">
                                          ${i * tickStep}
                                      </div>
                                  `
            : html ``}
                        </div>
                    `)}
            </div>
        `;
        }
        renderHandle() {
            return html `
            <div
                id="handle"
                style=${this.handleStyle}
                @manage=${streamingListener({ type: 'pointerdown', fn: this.handlePointerdown }, { type: 'pointermove', fn: this.handlePointermove }, {
            type: ['pointerup', 'pointercancel'],
            fn: this.handlePointerup,
        })}
                role="presentation"
            >
                <input
                    type="range"
                    id="input"
                    value=${this.value}
                    step=${this.step}
                    min=${this.min}
                    max=${this.max}
                    aria-disabled=${ifDefined(this.disabled ? 'true' : undefined)}
                    aria-valuetext=${this.ariaValueText}
                    @change=${this.onInputChange}
                    @focus=${this.onInputFocus}
                    @blur=${this.onInputBlur}
                />
            </div>
        `;
        }
        renderTrack() {
            return html `
            <div @pointerdown=${this.handleTrackPointerdown}>
                <div id="controls">
                    ${this.renderTrackLeft()} ${this.renderRamp()}
                    ${this.renderTicks()} ${this.renderHandle()}
                    ${this.renderTrackRight()}
                </div>
            </div>
        `;
        }
        handlePointerdown(event) {
            if (this.disabled || event.button !== 0) {
                event.preventDefault();
                return;
            }
            this.boundingClientRect = this.getBoundingClientRect();
            this.labelEl.click();
            this.dragging = true;
            this.handle.setPointerCapture(event.pointerId);
        }
        handlePointerup(event) {
            // Retain focus on input element after mouse up to enable keyboard interactions
            this.labelEl.click();
            this.handleHighlight = false;
            this.dragging = false;
            this.handle.releasePointerCapture(event.pointerId);
            this.dispatchChangeEvent();
        }
        handlePointermove(event) {
            if (!this.dragging) {
                return;
            }
            this.value = this.calculateHandlePosition(event);
        }
        /**
         * Move the handle under the cursor and begin start a pointer capture when the track
         * is moused down
         */
        handleTrackPointerdown(event) {
            if (event.target === this.handle ||
                this.disabled ||
                event.button !== 0) {
                return;
            }
            this.boundingClientRect = this.getBoundingClientRect();
            this.dragging = true;
            this.handle.setPointerCapture(event.pointerId);
            /**
             * Dispatch a synthetic pointerdown event to ensure that pointerdown
             * handlers attached to the slider are invoked before input handlers
             */
            event.stopPropagation();
            const syntheticPointerEvent = new PointerEvent('pointerdown', event);
            this.dispatchEvent(syntheticPointerEvent);
            this.value = this.calculateHandlePosition(event);
        }
        /**
         * Keep the slider value property in sync with the input element's value
         */
        onInputChange() {
            const inputValue = parseFloat(this.input.value);
            this.value = inputValue;
            this.dispatchChangeEvent();
        }
        onInputFocus() {
            let isFocusVisible;
            try {
                isFocusVisible =
                    this.input.matches(':focus-visible') ||
                        this.matches('.focus-visible');
            }
            catch (error) {
                isFocusVisible = this.matches('.focus-visible');
            }
            this.handleHighlight = isFocusVisible;
        }
        onInputBlur() {
            this.handleHighlight = false;
        }
        /**
         * Returns the value under the cursor
         * @param: PointerEvent on slider
         * @return: Slider value that correlates to the position under the pointer
         */
        calculateHandlePosition(event) {
            if (!this.boundingClientRect) {
                return this.value;
            }
            const rect = this.boundingClientRect;
            const minOffset = rect.left;
            const offset = event.clientX;
            const size = rect.width;
            const percent = (offset - minOffset) / size;
            const value = this.min + (this.max - this.min) * percent;
            return this.isLTR ? value : this.max - value;
        }
        dispatchInputEvent() {
            if (!this.dragging) {
                return;
            }
            const inputEvent = new Event('input', {
                bubbles: true,
                composed: true,
            });
            this.dispatchEvent(inputEvent);
        }
        dispatchChangeEvent() {
            this.input.value = this.value.toString();
            const changeEvent = new Event('change', {
                bubbles: true,
                composed: true,
            });
            this.dispatchEvent(changeEvent);
        }
        /**
         * Ratio representing the slider's position on the track
         */
        get trackProgress() {
            const range = this.max - this.min;
            const progress = this.value - this.min;
            return progress / range;
        }
        get trackStartStyles() {
            return {
                width: `${this.trackProgress * 100}%`,
                '--spectrum-slider-track-background-size': `calc(100% / ${this.trackProgress})`,
            };
        }
        get trackEndStyles() {
            return {
                width: `${100 - this.trackProgress * 100}%`,
                '--spectrum-slider-track-background-size': `calc(100% / ${1 - this.trackProgress})`,
            };
        }
        get handleStyle() {
            return `${this.isLTR ? 'left' : 'right'}: ${this.trackProgress * 100}%`;
        }
    }
    __decorate([
        property()
    ], Slider.prototype, "type", void 0);
    __decorate([
        property({ type: Number, reflect: true })
    ], Slider.prototype, "value", null);
    __decorate([
        property({ type: String })
    ], Slider.prototype, "variant", null);
    __decorate([
        property({ attribute: false })
    ], Slider.prototype, "getAriaValueText", void 0);
    __decorate([
        property({ attribute: false })
    ], Slider.prototype, "ariaValueText", null);
    __decorate([
        property()
    ], Slider.prototype, "label", void 0);
    __decorate([
        property({ reflect: true, attribute: 'aria-label' })
    ], Slider.prototype, "ariaLabel", void 0);
    __decorate([
        property({ type: Number })
    ], Slider.prototype, "max", void 0);
    __decorate([
        property({ type: Number })
    ], Slider.prototype, "min", void 0);
    __decorate([
        property({ type: Number })
    ], Slider.prototype, "step", void 0);
    __decorate([
        property({ type: Number, attribute: 'tick-step' })
    ], Slider.prototype, "tickStep", void 0);
    __decorate([
        property({ type: Boolean, attribute: 'tick-labels' })
    ], Slider.prototype, "tickLabels", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Slider.prototype, "disabled", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Slider.prototype, "dragging", void 0);
    __decorate([
        property({ type: Boolean, reflect: true, attribute: 'handle-highlight' })
    ], Slider.prototype, "handleHighlight", void 0);
    __decorate([
        query('#handle')
    ], Slider.prototype, "handle", void 0);
    __decorate([
        query('#input')
    ], Slider.prototype, "input", void 0);
    __decorate([
        query('#label')
    ], Slider.prototype, "labelEl", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-slider', Slider);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$b = css `
:host{--spectrum-splitbutton-trigger-border-left:0;--spectrum-splitbutton-trigger-min-width:0;--spectrum-spltibutton-margin-left:0;--spectrum-splitbutton-icon-gap:var(--spectrum-global-dimension-size-150);--spectrum-splitbutton-border-radius-edge:var(--spectrum-alias-border-radius-small,var(--spectrum-global-dimension-size-25))}.trigger{--spectrum-splitbutton-trigger-round-edge-padding:var(--spectrum-global-dimension-size-125);--spectrum-splitbutton-trigger-flat-edge-padding:var(--spectrum-global-dimension-size-100);--spectrum-splitbutton-cta-trigger-flat-edge-padding:calc(var(--spectrum-splitbutton-trigger-flat-edge-padding) - var(--spectrum-button-primary-border-size))}#button{--spectrum-splitbutton-flat-edge-padding:calc(var(--spectrum-button-primary-padding-left) - var(--spectrum-button-primary-border-size)*2);--spectrum-splitbutton-round-edge-padding:var(--spectrum-button-primary-padding-right);--spectrum-splitbutton-cta-flat-edge-padding:calc(var(--spectrum-button-primary-padding-left) - var(--spectrum-button-primary-border-size)*3)}:host{position:relative;display:inline-flex;flex-direction:row;vertical-align:top}:host([dir=ltr]) #button{margin-left:0}:host([dir=rtl]) #button{margin-right:0}:host([dir=ltr]) #button{border-top-left-radius:var(--spectrum-button-primary-border-radius)}:host([dir=rtl]) #button{border-top-right-radius:var(--spectrum-button-primary-border-radius)}:host([dir=ltr]) #button{border-top-right-radius:0}:host([dir=rtl]) #button{border-top-left-radius:0}:host([dir=ltr]) #button{border-bottom-right-radius:0}:host([dir=rtl]) #button{border-bottom-left-radius:0}:host([dir=ltr]) #button{border-bottom-left-radius:var(--spectrum-button-primary-border-radius)}:host([dir=rtl]) #button{border-bottom-right-radius:var(--spectrum-button-primary-border-radius)}:host([dir=ltr]) #button{padding-right:var(--spectrum-splitbutton-flat-edge-padding)}:host([dir=rtl]) #button{padding-left:var(--spectrum-splitbutton-flat-edge-padding)}:host([dir=ltr]) #button{padding-left:var(--spectrum-splitbutton-round-edge-padding)}:host([dir=rtl]) #button{padding-right:var(--spectrum-splitbutton-round-edge-padding)}:host([dir=ltr][variant=cta]) #button{padding-right:var(--spectrum-splitbutton-cta-flat-edge-padding)}:host([dir=rtl][variant=cta]) #button{padding-left:var(--spectrum-splitbutton-cta-flat-edge-padding)}:host([dir=ltr][variant=cta]) #button{margin-right:var(--spectrum-button-primary-border-size)}:host([dir=rtl][variant=cta]) #button{margin-left:var(--spectrum-button-primary-border-size)}:host([dir=ltr]) #button:after{border-top-right-radius:var(--spectrum-splitbutton-border-radius-edge)}:host([dir=rtl]) #button:after{border-top-left-radius:var(--spectrum-splitbutton-border-radius-edge)}:host([dir=ltr]) #button:after{border-bottom-right-radius:var(--spectrum-splitbutton-border-radius-edge)}:host([dir=rtl]) #button:after{border-bottom-left-radius:var(--spectrum-splitbutton-border-radius-edge)}:host([dir=ltr]) .trigger{margin-left:0}:host([dir=rtl]) .trigger{margin-right:0}:host([dir=ltr]) .trigger{border-top-left-radius:0}:host([dir=rtl]) .trigger{border-top-right-radius:0}:host([dir=ltr]) .trigger{border-top-right-radius:var(--spectrum-button-primary-border-radius)}:host([dir=rtl]) .trigger{border-top-left-radius:var(--spectrum-button-primary-border-radius)}:host([dir=ltr]) .trigger{border-bottom-right-radius:var(--spectrum-button-primary-border-radius)}:host([dir=rtl]) .trigger{border-bottom-left-radius:var(--spectrum-button-primary-border-radius)}:host([dir=ltr]) .trigger{border-bottom-left-radius:0}:host([dir=rtl]) .trigger{border-bottom-right-radius:0}:host([dir=ltr]) .trigger{border-left-width:var(--spectrum-splitbutton-trigger-border-left)}:host([dir=rtl]) .trigger{border-right-width:var(--spectrum-splitbutton-trigger-border-left)}:host([dir=ltr]) .trigger{padding-left:var(--spectrum-splitbutton-trigger-flat-edge-padding)}:host([dir=rtl]) .trigger{padding-right:var(--spectrum-splitbutton-trigger-flat-edge-padding)}:host([dir=ltr]) .trigger{padding-right:var(--spectrum-splitbutton-trigger-round-edge-padding)}:host([dir=rtl]) .trigger{padding-left:var(--spectrum-splitbutton-trigger-round-edge-padding)}.trigger{min-width:var(--spectrum-splitbutton-trigger-min-width)}:host([dir=ltr][variant=cta]) .trigger{padding-left:var(--spectrum-splitbutton-cta-trigger-flat-edge-padding)}:host([dir=rtl][variant=cta]) .trigger{padding-right:var(--spectrum-splitbutton-cta-trigger-flat-edge-padding)}:host([dir=ltr][variant=cta]) .trigger{border-left-width:var(--spectrum-button-primary-border-size)}:host([dir=rtl][variant=cta]) .trigger{border-right-width:var(--spectrum-button-primary-border-size)}.trigger.focus-visible,.trigger.focus-visible{box-shadow:none}.trigger.focus-visible,.trigger:focus-visible{box-shadow:none}:host([dir=ltr]) .trigger:after{border-top-left-radius:var(--spectrum-splitbutton-border-radius-edge)}:host([dir=rtl]) .trigger:after{border-top-right-radius:var(--spectrum-splitbutton-border-radius-edge)}:host([dir=ltr]) .trigger:after{border-bottom-left-radius:var(--spectrum-splitbutton-border-radius-edge)}:host([dir=rtl]) .trigger:after{border-bottom-right-radius:var(--spectrum-splitbutton-border-radius-edge)}.icon{display:block;margin-top:1px}#button,.trigger{position:relative}#button:focus,.trigger:focus{z-index:1}:host([dir=ltr]) #button .label+.spectrum-Icon{margin-left:var(--spectrum-splitbutton-icon-gap)}:host([dir=rtl]) #button .label+.spectrum-Icon{margin-right:var(--spectrum-splitbutton-icon-gap)}:host([dir=ltr][left]) #button{border-top-left-radius:0}:host([dir=rtl][left]) #button{border-top-right-radius:0}:host([dir=ltr][left]) #button{border-top-right-radius:var(--spectrum-button-primary-border-radius)}:host([dir=rtl][left]) #button{border-top-left-radius:var(--spectrum-button-primary-border-radius)}:host([dir=ltr][left]) #button{border-bottom-right-radius:var(--spectrum-button-primary-border-radius)}:host([dir=rtl][left]) #button{border-bottom-left-radius:var(--spectrum-button-primary-border-radius)}:host([dir=ltr][left]) #button{border-bottom-left-radius:0}:host([dir=rtl][left]) #button{border-bottom-right-radius:0}:host([dir=ltr][left]) #button{margin-right:0}:host([dir=rtl][left]) #button{margin-left:0}:host([dir=ltr][left]) #button{margin-left:var(--spectrum-spltibutton-margin-left)}:host([dir=rtl][left]) #button{margin-right:var(--spectrum-spltibutton-margin-left)}:host([dir=ltr][left]) #button{padding-left:var(--spectrum-splitbutton-flat-edge-padding)}:host([dir=rtl][left]) #button{padding-right:var(--spectrum-splitbutton-flat-edge-padding)}:host([dir=ltr][left]) #button{padding-right:var(--spectrum-splitbutton-round-edge-padding)}:host([dir=rtl][left]) #button{padding-left:var(--spectrum-splitbutton-round-edge-padding)}:host([dir=ltr][left][variant=cta]) #button{padding-left:var(--spectrum-splitbutton-cta-flat-edge-padding)}:host([dir=rtl][left][variant=cta]) #button{padding-right:var(--spectrum-splitbutton-cta-flat-edge-padding)}:host([dir=ltr][left][variant=cta]) #button{margin-left:var(--spectrum-button-primary-border-size)}:host([dir=rtl][left][variant=cta]) #button{margin-right:var(--spectrum-button-primary-border-size)}:host([dir=ltr][left]) #button:after{border-top-left-radius:var(--spectrum-splitbutton-border-radius-edge)}:host([dir=rtl][left]) #button:after{border-top-right-radius:var(--spectrum-splitbutton-border-radius-edge)}:host([dir=ltr][left]) #button:after{border-top-right-radius:var(--spectrum-button-primary-border-radius)}:host([dir=rtl][left]) #button:after{border-top-left-radius:var(--spectrum-button-primary-border-radius)}:host([dir=ltr][left]) #button:after{border-bottom-right-radius:var(--spectrum-button-primary-border-radius)}:host([dir=rtl][left]) #button:after{border-bottom-left-radius:var(--spectrum-button-primary-border-radius)}:host([dir=ltr][left]) #button:after{border-bottom-left-radius:var(--spectrum-splitbutton-border-radius-edge)}:host([dir=rtl][left]) #button:after{border-bottom-right-radius:var(--spectrum-splitbutton-border-radius-edge)}:host([dir=ltr][left]) .trigger{margin-right:0}:host([dir=rtl][left]) .trigger{margin-left:0}:host([dir=ltr][left]) .trigger{border-top-left-radius:var(--spectrum-button-primary-border-radius)}:host([dir=rtl][left]) .trigger{border-top-right-radius:var(--spectrum-button-primary-border-radius)}:host([dir=ltr][left]) .trigger{border-top-right-radius:0}:host([dir=rtl][left]) .trigger{border-top-left-radius:0}:host([dir=ltr][left]) .trigger{border-bottom-right-radius:0}:host([dir=rtl][left]) .trigger{border-bottom-left-radius:0}:host([dir=ltr][left]) .trigger{border-bottom-left-radius:var(--spectrum-button-primary-border-radius)}:host([dir=rtl][left]) .trigger{border-bottom-right-radius:var(--spectrum-button-primary-border-radius)}:host([dir=ltr][left]) .trigger{border-left-width:var(--spectrum-button-primary-border-size)}:host([dir=rtl][left]) .trigger{border-right-width:var(--spectrum-button-primary-border-size)}:host([dir=ltr][left]) .trigger{border-right-width:var(--spectrum-splitbutton-trigger-border-left)}:host([dir=rtl][left]) .trigger{border-left-width:var(--spectrum-splitbutton-trigger-border-left)}:host([dir=ltr][left]) .trigger{padding-right:var(--spectrum-splitbutton-trigger-flat-edge-padding)}:host([dir=rtl][left]) .trigger{padding-left:var(--spectrum-splitbutton-trigger-flat-edge-padding)}:host([dir=ltr][left]) .trigger{padding-left:var(--spectrum-splitbutton-trigger-round-edge-padding)}:host([dir=rtl][left]) .trigger{padding-right:var(--spectrum-splitbutton-trigger-round-edge-padding)}:host([dir=ltr][left][variant=cta]) .trigger{padding-right:var(--spectrum-splitbutton-cta-trigger-flat-edge-padding)}:host([dir=rtl][left][variant=cta]) .trigger{padding-left:var(--spectrum-splitbutton-cta-trigger-flat-edge-padding)}:host([dir=ltr][left][variant=cta]) .trigger{border-right-width:var(--spectrum-button-primary-border-size)}:host([dir=rtl][left][variant=cta]) .trigger{border-left-width:var(--spectrum-button-primary-border-size)}:host([dir=ltr][left]) .trigger:after{border-top-left-radius:var(--spectrum-button-primary-border-radius)}:host([dir=rtl][left]) .trigger:after{border-top-right-radius:var(--spectrum-button-primary-border-radius)}:host([dir=ltr][left]) .trigger:after{border-top-right-radius:var(--spectrum-splitbutton-border-radius-edge)}:host([dir=rtl][left]) .trigger:after{border-top-left-radius:var(--spectrum-splitbutton-border-radius-edge)}:host([dir=ltr][left]) .trigger:after{border-bottom-right-radius:var(--spectrum-splitbutton-border-radius-edge)}:host([dir=rtl][left]) .trigger:after{border-bottom-left-radius:var(--spectrum-splitbutton-border-radius-edge)}:host([dir=ltr][left]) .trigger:after{border-bottom-left-radius:var(--spectrum-button-primary-border-radius)}:host([dir=rtl][left]) .trigger:after{border-bottom-right-radius:var(--spectrum-button-primary-border-radius)}:host([size=s]){--spectrum-button-primary-padding-right:var(--spectrum-button-primary-s-padding-right,var(--spectrum-alias-item-rounded-padding-s))}:host([size=m]){--spectrum-button-primary-padding-right:var(--spectrum-button-primary-m-padding-right,var(--spectrum-alias-item-rounded-padding-m))}:host([size=l]){--spectrum-button-primary-padding-right:var(--spectrum-button-primary-l-padding-right,var(--spectrum-alias-item-rounded-padding-l))}:host([size=xl]){--spectrum-button-primary-padding-right:var(--spectrum-button-primary-xl-padding-right,var(--spectrum-alias-item-rounded-padding-xl))}::slotted(sp-menu),sp-popover{display:none}.more-medium{width:18px;height:18px;margin:1px -4px 0}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const chevronClass = {
        s: 'spectrum-UIIcon-ChevronDown75',
        m: 'spectrum-UIIcon-ChevronDown100',
        l: 'spectrum-UIIcon-ChevronDown200',
        xl: 'spectrum-UIIcon-ChevronDown300',
    };
    class SplitButton extends SizedMixin(PickerBase) {
        constructor() {
            super(...arguments);
            this.left = false;
            /**
             * The visual variant to apply to this button.
             */
            this.variant = 'cta';
            this.type = 'field';
            this.listRole = 'menu';
            this.itemRole = 'menuitem';
        }
        static get styles() {
            return [styles$b, styles$12];
        }
        get target() {
            return this;
        }
        focus() {
            if (this.disabled) {
                return;
            }
            if (this.left) {
                this.trigger.focus();
                return;
            }
            super.focus();
        }
        sizePopover(popover) {
            popover.style.setProperty('min-width', `${this.offsetWidth}px`);
        }
        passClick() {
            const target = this.type === 'more'
                ? this.menuItems[0]
                : this.menuItems.find((el) => el.selected) || this.menuItems[0];
            if (target) {
                target.click();
            }
        }
        get buttonContent() {
            var _a;
            return [
                html `
                <div
                    id="label"
                    role="presentation"
                    class=${ifDefined(this.value ? undefined : 'placeholder')}
                >
                    ${((_a = this.selectedItem) === null || _a === void 0 ? void 0 : _a.itemText) || ''}
                </div>
            `,
            ];
        }
        render() {
            const buttons = [
                html `
                <sp-button
                    aria-haspopup="true"
                    aria-label=${ifDefined(this.label || undefined)}
                    id="button"
                    class="button ${this.variant}"
                    @click=${this.passClick}
                    ?disabled=${this.disabled}
                    variant=${this.variant}
                    size=${this.size}
                >
                    ${this.buttonContent}
                </sp-button>
            `,
                html `
                <sp-button
                    class="button trigger ${this.variant}"
                    @blur=${this.onButtonBlur}
                    @click=${this.onButtonClick}
                    @focus=${this.onButtonFocus}
                    ?disabled=${this.disabled}
                    aria-label="More"
                    variant=${this.variant}
                    size=${this.size}
                >
                    ${this.type === 'field'
                ? html `
                              <sp-icon-chevron100
                                  class="icon ${chevronClass[this.size]}"
                              ></sp-icon-chevron100>
                          `
                : html `
                              <sp-icon-more class="icon"></sp-icon-more>
                          `}
                </sp-button>
            `,
            ];
            if (this.left) {
                buttons.reverse();
            }
            return html `
            ${buttons} ${this.renderPopover}
        `;
        }
        updated(changedProperties) {
            super.updated(changedProperties);
            if (changedProperties.has('value')) {
                this.manageSplitButtonItems();
            }
        }
        manageSelection() {
            super.manageSelection();
            this.manageSplitButtonItems();
        }
        async manageSplitButtonItems() {
            if (this.menuItems.length) {
                if (this.type === 'more') {
                    this.menuItems[0].hidden = true;
                    this.menuItems.forEach((el) => (el.selected = false));
                    this.menuItems[0].selected = true;
                    this.selectedItem = this.menuItems[0];
                }
                else {
                    this.selectedItem = this.selectedItem || this.menuItems[0];
                    this.selectedItem.selected = true;
                }
                return;
            }
            await this.updateComplete;
            if (this.menuItems.length) {
                this.manageSplitButtonItems();
            }
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], SplitButton.prototype, "left", void 0);
    __decorate([
        property({ reflect: true })
    ], SplitButton.prototype, "variant", void 0);
    __decorate([
        property({ type: String })
    ], SplitButton.prototype, "type", void 0);
    __decorate([
        query('.trigger')
    ], SplitButton.prototype, "trigger", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-split-button', SplitButton);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$a = css `
:host{--spectrum-splitview-vertical-width:100%;--spectrum-splitview-vertical-gripper-width:50%;--spectrum-splitview-vertical-gripper-outer-width:100%;--spectrum-splitview-vertical-gripper-reset:0;display:flex;overflow:hidden}::slotted(*){height:100%}:host([dir=ltr]) #gripper{left:calc((var(--spectrum-dragbar-gripper-width,
var(--spectrum-global-dimension-static-size-50)) + 2*var(--spectrum-dragbar-gripper-border-width-horizontal, 3px) - var(--spectrum-dragbar-handle-width,
var(--spectrum-global-dimension-static-size-25)))/2*-1)}:host([dir=rtl]) #gripper{right:calc((var(--spectrum-dragbar-gripper-width,
var(--spectrum-global-dimension-static-size-50)) + 2*var(--spectrum-dragbar-gripper-border-width-horizontal, 3px) - var(--spectrum-dragbar-handle-width,
var(--spectrum-global-dimension-static-size-25)))/2*-1)}#gripper{content:"";display:block;position:absolute;border-style:solid;border-radius:var(--spectrum-dragbar-gripper-border-radius,var(--spectrum-alias-border-radius-small));top:50%;transform:translateY(-50%);width:var(--spectrum-dragbar-gripper-width,var(--spectrum-global-dimension-static-size-50));height:var(--spectrum-dragbar-gripper-height,var(--spectrum-global-dimension-static-size-200));border-width:var(--spectrum-dragbar-gripper-border-width-vertical,4px) var(--spectrum-dragbar-gripper-border-width-horizontal,3px)}#splitter{position:relative;-webkit-user-select:none;user-select:none;width:var(--spectrum-dragbar-handle-width,var(--spectrum-global-dimension-static-size-25));height:100%;z-index:1}:host([dir=ltr]) #splitter.is-collapsed-end #gripper:before,:host([dir=ltr]) #splitter.is-collapsed-start #gripper:before{left:calc(50% - var(--spectrum-dragbar-handle-width,
var(--spectrum-global-dimension-static-size-25))/2)}:host([dir=rtl]) #splitter.is-collapsed-end #gripper:before,:host([dir=rtl]) #splitter.is-collapsed-start #gripper:before{right:calc(50% - var(--spectrum-dragbar-handle-width,
var(--spectrum-global-dimension-static-size-25))/2)}#splitter.is-collapsed-end #gripper:before,#splitter.is-collapsed-start #gripper:before{content:"";position:absolute;top:0;width:var(--spectrum-dragbar-handle-width,var(--spectrum-global-dimension-static-size-25));height:100%}:host([dir=ltr]) #splitter.is-collapsed-start #gripper{left:0}:host([dir=ltr]) #splitter.is-collapsed-end #gripper,:host([dir=rtl]) #splitter.is-collapsed-start #gripper{right:0}:host([dir=rtl]) #splitter.is-collapsed-end #gripper{left:0}:host([dir=ltr]) #splitter.is-collapsed-end #gripper{left:auto}:host([dir=rtl]) #splitter.is-collapsed-end #gripper{right:auto}:host([vertical]){flex-direction:column}:host([vertical]) ::slotted(*){height:auto;width:var(--spectrum-splitview-vertical-width)}:host([dir=ltr][vertical]) #gripper{left:var(--spectrum-splitview-vertical-gripper-width)}:host([dir=rtl][vertical]) #gripper{right:var(--spectrum-splitview-vertical-gripper-width)}:host([vertical]) #gripper{top:calc((var(--spectrum-dragbar-gripper-width,
var(--spectrum-global-dimension-static-size-50)) + 2*var(--spectrum-dragbar-gripper-border-width-horizontal, 3px) - var(--spectrum-dragbar-handle-width,
var(--spectrum-global-dimension-static-size-25)))/2*-1);transform:translate(calc(-1*var(--spectrum-splitview-vertical-gripper-width)));width:var(--spectrum-dragbar-gripper-height,var(--spectrum-global-dimension-static-size-200));height:var(--spectrum-dragbar-gripper-width,var(--spectrum-global-dimension-static-size-50));border-width:var(--spectrum-dragbar-gripper-border-width-horizontal,3px) var(--spectrum-dragbar-gripper-border-width-vertical,4px)}:host([vertical]) #splitter{width:var(--spectrum-splitview-vertical-width);height:var(--spectrum-dragbar-handle-width,var(--spectrum-global-dimension-static-size-25))}:host([dir=ltr][vertical]) #splitter.is-collapsed-end #gripper,:host([dir=ltr][vertical]) #splitter.is-collapsed-start #gripper{left:var(--spectrum-splitview-vertical-gripper-width)}:host([dir=rtl][vertical]) #splitter.is-collapsed-end #gripper,:host([dir=rtl][vertical]) #splitter.is-collapsed-start #gripper{right:var(--spectrum-splitview-vertical-gripper-width)}:host([dir=ltr][vertical]) #splitter.is-collapsed-end #gripper:before,:host([dir=ltr][vertical]) #splitter.is-collapsed-start #gripper:before{left:var(--spectrum-splitview-vertical-gripper-reset)}:host([dir=rtl][vertical]) #splitter.is-collapsed-end #gripper:before,:host([dir=rtl][vertical]) #splitter.is-collapsed-start #gripper:before{right:var(--spectrum-splitview-vertical-gripper-reset)}:host([vertical]) #splitter.is-collapsed-end #gripper:before,:host([vertical]) #splitter.is-collapsed-start #gripper:before{top:calc(var(--spectrum-splitview-vertical-gripper-width) - var(--spectrum-dragbar-handle-width,
var(--spectrum-global-dimension-static-size-25))/2);width:var(--spectrum-splitview-vertical-gripper-outer-width);height:var(--spectrum-dragbar-handle-width,var(--spectrum-global-dimension-static-size-25))}:host([vertical]) #splitter.is-collapsed-start #gripper{top:var(--spectrum-splitview-vertical-gripper-reset)}:host([vertical]) #splitter.is-collapsed-end #gripper{top:auto;bottom:var(--spectrum-splitview-vertical-gripper-reset)}::slotted(*){background-color:var(--spectrum-panel-background-color,var(--spectrum-global-color-gray-100))}#splitter{background-color:var(--spectrum-dragbar-handle-background-color,var(--spectrum-global-color-gray-300))}#gripper{border-color:var(--spectrum-dragbar-handle-background-color,var(--spectrum-global-color-gray-300))}#gripper:before{background-color:var(--spectrum-dragbar-handle-background-color,var(--spectrum-global-color-gray-300))}:host([resizable]) #splitter.is-hovered,:host([resizable]) #splitter:hover{background-color:var(--spectrum-dragbar-handle-background-color-hover,var(--spectrum-global-color-gray-400))}:host([resizable]) #splitter.is-hovered #gripper,:host([resizable]) #splitter:hover #gripper{border-color:var(--spectrum-dragbar-handle-background-color-hover,var(--spectrum-global-color-gray-400))}:host([resizable]) #splitter.is-hovered #gripper:before,:host([resizable]) #splitter:hover #gripper:before{background-color:var(--spectrum-dragbar-handle-background-color-hover,var(--spectrum-global-color-gray-400))}:host([resizable]) #splitter.is-active,:host([resizable]) #splitter:active{background-color:var(--spectrum-dragbar-handle-background-color-down,var(--spectrum-global-color-gray-800))}:host([resizable]) #splitter.is-active #gripper,:host([resizable]) #splitter:active #gripper{border-color:var(--spectrum-dragbar-handle-background-color-down,var(--spectrum-global-color-gray-800))}:host([resizable]) #splitter.is-active #gripper:before,:host([resizable]) #splitter:active #gripper:before{background-color:var(--spectrum-dragbar-handle-background-color-down,var(--spectrum-global-color-gray-800))}:host([resizable]) #splitter:focus{outline:none}:host([resizable]) #splitter.focus-visible,:host([resizable]) #splitter.focus-visible{background-color:var(--spectrum-alias-focus-color,var(--spectrum-global-color-blue-400))}:host([resizable]) #splitter.focus-visible,:host([resizable]) #splitter:focus-visible{background-color:var(--spectrum-alias-focus-color,var(--spectrum-global-color-blue-400))}:host([resizable]) #splitter.focus-visible #gripper,:host([resizable]) #splitter.focus-visible #gripper{border-color:var(--spectrum-alias-focus-color,var(--spectrum-global-color-blue-400));box-shadow:0 0 0 1px var(--spectrum-alias-focus-color,var(--spectrum-global-color-blue-400))}:host([resizable]) #splitter.focus-visible #gripper,:host([resizable]) #splitter:focus-visible #gripper{border-color:var(--spectrum-alias-focus-color,var(--spectrum-global-color-blue-400));box-shadow:0 0 0 1px var(--spectrum-alias-focus-color,var(--spectrum-global-color-blue-400))}:host([resizable]) #splitter.focus-visible #gripper:before,:host([resizable]) #splitter.focus-visible #gripper:before{background-color:var(--spectrum-alias-focus-color,var(--spectrum-global-color-blue-400))}:host([resizable]) #splitter.focus-visible #gripper:before,:host([resizable]) #splitter:focus-visible #gripper:before{background-color:var(--spectrum-alias-focus-color,var(--spectrum-global-color-blue-400))}:host{--spectrum-split-view-first-pane-size:50%}::slotted(*){overflow:auto}::slotted(:first-child){order:1}:host(:not([vertical])) ::slotted(:first-child:not(:last-child)){width:var(--spectrum-split-view-first-pane-size)}:host([vertical]) ::slotted(:first-child:not(:last-child)){height:var(--spectrum-split-view-first-pane-size)}::slotted(:nth-child(2)){order:3;flex:1}::slotted(:nth-child(n+3)){display:none}#splitter{order:2;height:auto}:host([resizable]) #splitter{padding:0 var(--spectrum-global-dimension-static-size-125);margin:0 calc(-1*var(--spectrum-global-dimension-static-size-125));background-clip:content-box;cursor:ew-resize}:host([vertical][resizable]) #splitter{padding:var(--spectrum-global-dimension-static-size-125) 0;margin:calc(-1*var(--spectrum-global-dimension-static-size-125)) 0;background-clip:content-box;cursor:ns-resize}:host([resizable][dir=ltr]) #splitter.is-resized-start,:host([resizable][dir=rtl]) #splitter.is-resized-end{cursor:e-resize}:host([resizable][dir=ltr]) #splitter.is-resized-end,:host([resizable][dir=rtl]) #splitter.is-resized-start{cursor:w-resize}:host([vertical][resizable]) #splitter.is-resized-start{cursor:s-resize}:host([vertical][resizable]) #splitter.is-resized-end{cursor:n-resize}:host([resizable][collapsible]) #splitter.is-resized-end,:host([resizable][collapsible]) #splitter.is-resized-start{cursor:ew-resize}:host([resizable][dir=ltr][collapsible]) #splitter.is-collapsed-start,:host([resizable][dir=rtl][collapsible]) #splitter.is-collapsed-end{cursor:e-resize}:host([resizable][dir=ltr][collapsible]) #splitter.is-collapsed-end,:host([resizable][dir=rtl][collapsible]) #splitter.is-collapsed-start{cursor:w-resize}:host([vertical][resizable][collapsible]) #splitter.is-collapsed-start{cursor:s-resize}:host([vertical][resizable][collapsible]) #splitter.is-collapsed-end{cursor:n-resize}:host([vertical][resizable][collapsible]) #splitter.is-resized-end,:host([vertical][resizable][collapsible]) #splitter.is-resized-start{cursor:ns-resize}:host([dir=ltr][resizable]) #gripper{left:calc(var(--spectrum-global-dimension-static-size-125) + (var(--spectrum-dragbar-gripper-width,
var(--spectrum-global-dimension-static-size-50)) + 2*var(--spectrum-dragbar-gripper-border-width-horizontal, 3px) - var(--spectrum-dragbar-handle-width,
var(--spectrum-global-dimension-static-size-25)))/2*-1)}:host([dir=rtl][resizable]) #gripper{right:calc(var(--spectrum-global-dimension-static-size-125) + (var(--spectrum-dragbar-gripper-width,
var(--spectrum-global-dimension-static-size-50)) + 2*var(--spectrum-dragbar-gripper-border-width-horizontal, 3px) - var(--spectrum-dragbar-handle-width,
var(--spectrum-global-dimension-static-size-25)))/2*-1)}:host([vertical][resizable]) #gripper{margin-top:var(--spectrum-global-dimension-static-size-125);left:50%;right:50%}:host([dir=ltr][resizable]) #splitter.is-collapsed-start #gripper{left:var(--spectrum-global-dimension-static-size-125)}:host([dir=rtl][resizable]) #splitter.is-collapsed-start #gripper{right:var(--spectrum-global-dimension-static-size-125)}:host([vertical][resizable]) #splitter.is-collapsed-start #gripper{left:50%;right:50%}:host([dir=ltr][resizable]) #splitter.is-collapsed-end #gripper{left:var(--spectrum-global-dimension-static-size-25)}:host([dir=rtl][resizable]) #splitter.is-collapsed-end #gripper{right:var(--spectrum-global-dimension-static-size-25)}:host([vertical][resizable]) #splitter.is-collapsed-end #gripper{margin-top:0;top:var(--spectrum-global-dimension-static-size-25);left:50%;right:50%}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const DEFAULT_MAX_SIZE = 3840;
    const SPLITTERSIZE = 2;
    const ARROW_KEY_CHANGE_VALUE = 10;
    const PAGEUPDOWN_KEY_CHANGE_VALUE = 50;
    const COLLAPSE_THREASHOLD = 50;
    /**
     * @element sp-split-view
     * @slot Two sibling elements to be sized by the element attritubes
     */
    class SplitView extends SpectrumElement {
        constructor() {
            super();
            this.vertical = false;
            this.resizable = false;
            this.collapsible = false;
            /** The minimum size of the primary pane */
            this.primaryMin = 0;
            /** The maximum size of the primary pane */
            this.primaryMax = DEFAULT_MAX_SIZE;
            /** The minimum size of the secondary pane */
            this.secondaryMin = 0;
            /** The maximum size of the secondary pane */
            this.secondaryMax = DEFAULT_MAX_SIZE;
            /** The current size of first pane of split-view */
            this.firstPaneSize = 'auto';
            this.enoughChildren = false;
            this.viewSize = 0;
            this.offset = 0;
            this.minPos = 0;
            this.maxPos = DEFAULT_MAX_SIZE;
            const RO = window
                .ResizeObserver;
            if (RO) {
                this.observer = new RO(() => {
                    this.rect = undefined;
                    this.updateMinMax();
                });
            }
        }
        static get styles() {
            return [styles$a];
        }
        connectedCallback() {
            var _a;
            super.connectedCallback();
            (_a = this.observer) === null || _a === void 0 ? void 0 : _a.observe(this);
        }
        disconnectedCallback() {
            var _a;
            (_a = this.observer) === null || _a === void 0 ? void 0 : _a.unobserve(this);
            super.disconnectedCallback();
        }
        /**
         * @private
         **/
        get splitterSize() {
            if (!this._splitterSize) {
                this._splitterSize =
                    (this.splitter &&
                        Math.round(parseFloat(window
                            .getComputedStyle(this.splitter)
                            .getPropertyValue(this.vertical ? 'height' : 'width')))) ||
                        SPLITTERSIZE;
            }
            return this._splitterSize;
        }
        render() {
            const splitterClasses = {
                'is-resized-start': this.splitterPos === this.minPos,
                'is-resized-end': (this.splitterPos &&
                    this.splitterPos > this.splitterSize &&
                    this.splitterPos === this.maxPos),
                'is-collapsed-start': this.splitterPos === 0,
                'is-collapsed-end': (this.splitterPos &&
                    this.splitterPos >=
                        Math.max(this.splitterSize, this.viewSize - this.splitterSize)),
            };
            return html `
            <slot
                @slotchange=${this.onContentSlotChange}
                style="--spectrum-split-view-first-pane-size: ${this
            .firstPaneSize}"
            ></slot>
            ${this.enoughChildren
            ? html `
                      <div
                          id="splitter"
                          class=${classMap$1(splitterClasses)}
                          role="separator"
                          aria-label=${ifDefined(this.label || undefined)}
                          tabindex=${ifDefined(this.resizable ? '0' : undefined)}
                          @keydown=${this.onKeydown}
                          @pointerdown=${this.onPointerdown}
                          @pointerup=${this.onPointerup}
                      >
                          ${this.resizable
                ? html `
                                    <div id="gripper"></div>
                                `
                : html ``}
                      </div>
                  `
            : nothing}
        `;
        }
        onContentSlotChange() {
            this.enoughChildren = this.children.length > 1;
            this.checkResize();
        }
        onPointerdown(event) {
            if (!this.resizable || (event.button && event.button !== 0)) {
                return;
            }
            this.splitter.setPointerCapture(event.pointerId);
            this.onpointermove = this.onPointermove;
            this.offset = this.getOffset();
        }
        onPointermove(event) {
            event.preventDefault();
            let pos = this.vertical || this.isLTR
                ? this.getPosition(event) - this.offset
                : this.offset - this.getPosition(event);
            if (this.collapsible && pos < this.minPos - COLLAPSE_THREASHOLD) {
                pos = 0;
            }
            if (this.collapsible && pos > this.maxPos + COLLAPSE_THREASHOLD) {
                pos = this.viewSize - this.splitterSize;
            }
            this.updatePosition(pos);
        }
        onPointerup(event) {
            this.splitter.releasePointerCapture(event.pointerId);
            this.onpointermove = null;
        }
        getOffset() {
            if (!this.rect) {
                this.rect = this.getBoundingClientRect();
            }
            const offsetX = this.isLTR ? this.rect.left : this.rect.right;
            return this.vertical ? this.rect.top : offsetX;
        }
        getPosition(event) {
            return this.vertical ? event.clientY : event.clientX;
        }
        movePosition(event, offset) {
            event.preventDefault();
            if (this.splitterPos !== undefined) {
                this.updatePosition(this.splitterPos + offset);
            }
        }
        onKeydown(event) {
            if (!this.resizable) {
                return;
            }
            let direction = 0;
            const isLTRorVertical = this.isLTR || this.vertical;
            switch (event.key) {
                case 'Home':
                    event.preventDefault();
                    this.updatePosition(this.collapsible ? 0 : this.minPos);
                    return;
                case 'End':
                    event.preventDefault();
                    this.updatePosition(this.collapsible
                        ? this.viewSize - this.splitterSize
                        : this.maxPos);
                    return;
                case 'ArrowLeft':
                    direction = isLTRorVertical ? -1 : 1;
                    break;
                case 'ArrowRight':
                    direction = isLTRorVertical ? 1 : -1;
                    break;
                case 'ArrowUp':
                    direction = this.vertical ? -1 : 1;
                    break;
                case 'ArrowDown':
                    direction = this.vertical ? 1 : -1;
                    break;
                case 'PageUp':
                    direction = this.vertical ? -1 : 1;
                    break;
                case 'PageDown':
                    direction = this.vertical ? 1 : -1;
                    break;
            }
            if (direction !== 0) {
                const moveBy = event.key.startsWith('Page')
                    ? PAGEUPDOWN_KEY_CHANGE_VALUE
                    : ARROW_KEY_CHANGE_VALUE;
                this.movePosition(event, moveBy * direction);
            }
        }
        async checkResize() {
            if (!this.enoughChildren) {
                return;
            }
            this.updateMinMax();
            if (this.splitterPos === undefined) {
                const startPos = await this.calcStartPos();
                this.updatePosition(startPos);
            }
        }
        updateMinMax() {
            this.viewSize = this.vertical ? this.offsetHeight : this.offsetWidth;
            this.minPos = Math.max(this.primaryMin, this.viewSize - this.secondaryMax);
            this.maxPos = Math.min(this.primaryMax, this.viewSize - Math.max(this.secondaryMin, this.splitterSize));
        }
        updatePosition(x) {
            let pos = this.getLimitedPosition(x);
            if (this.collapsible && x <= 0) {
                pos = 0;
            }
            if (this.collapsible &&
                x > this.maxPos &&
                x >= this.viewSize - this.splitterSize) {
                pos = this.viewSize - this.splitterSize;
            }
            if (pos !== this.splitterPos) {
                this.splitterPos = pos;
                this.dispatchChangeEvent();
            }
        }
        getLimitedPosition(input) {
            if (input <= this.minPos) {
                return this.minPos;
            }
            if (input >= this.maxPos) {
                return this.maxPos;
            }
            return Math.max(this.minPos, Math.min(this.maxPos, input));
        }
        async calcStartPos() {
            if (this.primarySize !== undefined &&
                /^\d+(px)?$/.test(this.primarySize)) {
                return parseInt(this.primarySize, 10);
            }
            if (this.primarySize !== undefined && /^\d+%$/.test(this.primarySize)) {
                return (parseInt(this.primarySize, 10) * this.viewSize) / 100;
            }
            if (this.primarySize === 'auto') {
                this.firstPaneSize = 'auto';
                const nodes = this.paneSlot.assignedNodes({ flatten: true });
                const firstEl = nodes.find((node) => node instanceof HTMLElement);
                if (typeof firstEl.updateComplete !== 'undefined') {
                    await firstEl.updateComplete;
                }
                if (firstEl) {
                    const size = window
                        .getComputedStyle(firstEl)
                        .getPropertyValue(this.vertical ? 'height' : 'width');
                    const size_i = parseFloat(size);
                    if (!isNaN(size_i)) {
                        return this.getLimitedPosition(Math.ceil(size_i));
                    }
                }
            }
            return this.viewSize / 2;
        }
        dispatchChangeEvent() {
            const changeEvent = new Event('change', {
                bubbles: true,
                composed: true,
            });
            this.dispatchEvent(changeEvent);
        }
        firstUpdated(changed) {
            super.firstUpdated(changed);
            this.checkResize();
        }
        updated(changed) {
            super.updated(changed);
            if (changed.has('splitterPos') &&
                this.splitterPos !== undefined &&
                this.enoughChildren) {
                this.firstPaneSize = `${Math.round(this.splitterPos)}px`;
            }
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], SplitView.prototype, "vertical", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], SplitView.prototype, "resizable", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], SplitView.prototype, "collapsible", void 0);
    __decorate([
        property({ type: Number, attribute: 'primary-min' })
    ], SplitView.prototype, "primaryMin", void 0);
    __decorate([
        property({ type: Number, attribute: 'primary-max' })
    ], SplitView.prototype, "primaryMax", void 0);
    __decorate([
        property({ type: String, attribute: 'primary-size' })
    ], SplitView.prototype, "primarySize", void 0);
    __decorate([
        property({ type: Number, attribute: 'secondary-min' })
    ], SplitView.prototype, "secondaryMin", void 0);
    __decorate([
        property({ type: Number, attribute: 'secondary-max' })
    ], SplitView.prototype, "secondaryMax", void 0);
    __decorate([
        property({ type: Number, reflect: true, attribute: 'splitter-pos' })
    ], SplitView.prototype, "splitterPos", void 0);
    __decorate([
        property({ type: String, attribute: false })
    ], SplitView.prototype, "firstPaneSize", void 0);
    __decorate([
        property()
    ], SplitView.prototype, "label", void 0);
    __decorate([
        property({ type: Boolean, attribute: false })
    ], SplitView.prototype, "enoughChildren", void 0);
    __decorate([
        property({ type: Number })
    ], SplitView.prototype, "viewSize", void 0);
    __decorate([
        query('slot')
    ], SplitView.prototype, "paneSlot", void 0);
    __decorate([
        query('#splitter')
    ], SplitView.prototype, "splitter", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-split-view', SplitView);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$9 = css `
:host{--spectrum-switch-handle-border-radius:var(--spectrum-switch-m-handle-border-radius);--spectrum-switch-handle-border-size:var(--spectrum-switch-m-handle-border-size,var(--spectrum-alias-border-size-thick));--spectrum-switch-cursor-hit-x:var(--spectrum-switch-m-cursor-hit-x,var(--spectrum-global-dimension-size-100));--spectrum-switch-text-size:var(--spectrum-switch-m-text-size,var(--spectrum-alias-item-text-size-m));--spectrum-switch-height:var(--spectrum-switch-m-height,var(--spectrum-alias-item-height-m));--spectrum-switch-track-height:var(--spectrum-switch-m-track-height,var(--spectrum-alias-item-control-3-height-m));--spectrum-switch-track-width:var(--spectrum-switch-m-track-width,var(--spectrum-alias-item-control-3-width-m));--spectrum-switch-handle-size:var(--spectrum-switch-m-handle-size,var(--spectrum-alias-item-control-2-size-m));--spectrum-switch-text-gap:var(--spectrum-switch-m-text-gap,var(--spectrum-alias-item-control-gap-m));--spectrum-switch-label-margin-top:var(--spectrum-global-dimension-size-65);--spectrum-switch-label-line-height:1.49}:host([dir=ltr]){margin-right:calc(var(--spectrum-switch-cursor-hit-x)*2)}:host([dir=rtl]){margin-left:calc(var(--spectrum-switch-cursor-hit-x)*2)}:host{display:inline-flex;align-items:flex-start;position:relative;min-height:var(--spectrum-switch-height);max-width:100%;vertical-align:top}:host([dir=ltr]) #input{left:0}:host([dir=rtl]) #input{right:0}#input{margin:0;box-sizing:border-box;padding:0;position:absolute;width:100%;height:100%;top:0;opacity:.0001;z-index:1;cursor:pointer}:host([dir=ltr][checked]) #input+#switch:before{transform:translateX(calc(var(--spectrum-switch-track-width) - 100%))}:host([dir=rtl][checked]) #input+#switch:before{transform:translateX(calc(-1*(var(--spectrum-switch-track-width) - 100%)))}#input[disabled],:host([disabled]) #input{cursor:default}#input.focus-visible+#switch:after,#input.focus-visible+#switch:after{margin:calc(var(--spectrum-alias-focus-ring-gap,
var(--spectrum-global-dimension-static-size-25))*-1)}#input.focus-visible+#switch:after,#input:focus-visible+#switch:after{margin:calc(var(--spectrum-alias-focus-ring-gap,
var(--spectrum-global-dimension-static-size-25))*-1)}#label{margin-left:var(--spectrum-switch-text-gap);margin-right:var(--spectrum-switch-text-gap);margin-top:var(--spectrum-switch-label-margin-top);margin-bottom:0;font-size:var(--spectrum-switch-text-size);line-height:var(--spectrum-switch-label-line-height);transition:color var(--spectrum-global-animation-duration-200,.16s) ease-in-out}:host([dir=ltr]) #switch{left:0}:host([dir=ltr]) #switch,:host([dir=rtl]) #switch{right:0}:host([dir=rtl]) #switch{left:0}#switch{display:inline-block;box-sizing:border-box;position:relative;width:var(--spectrum-switch-track-width);margin-top:calc((var(--spectrum-switch-height) - var(--spectrum-switch-track-height))/2);margin-bottom:calc((var(--spectrum-switch-height) - var(--spectrum-switch-track-height))/2);margin-left:0;margin-right:0;flex-grow:0;flex-shrink:0;vertical-align:middle;transition:background var(--spectrum-global-animation-duration-100,.13s) ease-in-out,border var(--spectrum-global-animation-duration-100,.13s) ease-in-out;height:var(--spectrum-switch-track-height);border-radius:calc(var(--spectrum-switch-track-height)/2)}#switch:before{display:block;position:absolute;content:"";box-sizing:border-box}:host([dir=ltr]) #switch:before{left:0}:host([dir=rtl]) #switch:before{right:0}#switch:before{transition:background var(--spectrum-global-animation-duration-100,.13s) ease-in-out,border var(--spectrum-global-animation-duration-100,.13s) ease-in-out,transform var(--spectrum-global-animation-duration-100,.13s) ease-in-out,box-shadow var(--spectrum-global-animation-duration-100,.13s) ease-in-out;width:var(--spectrum-switch-handle-size);height:var(--spectrum-switch-handle-size);top:0;border-width:var(--spectrum-switch-handle-border-size);border-radius:var(--spectrum-switch-handle-border-radius);border-style:solid}:host([dir=ltr]) #switch:after{left:0}:host([dir=ltr]) #switch:after,:host([dir=rtl]) #switch:after{right:0}:host([dir=rtl]) #switch:after{left:0}#switch:after{border-radius:calc(var(--spectrum-switch-track-height) + var(--spectrum-alias-focus-ring-gap,
var(--spectrum-global-dimension-static-size-25)));content:"";display:block;position:absolute;bottom:0;top:0;margin:0;transition:opacity var(--spectrum-global-animation-duration-100,.13s) ease-out,margin var(--spectrum-global-animation-duration-100,.13s) ease-out}#switch{background-color:var(--spectrum-switch-m-track-color,var(--spectrum-global-color-gray-300))}#switch:before{background-color:var(--spectrum-switch-m-handle-background-color,var(--spectrum-global-color-gray-75));border-color:var(--spectrum-switch-m-handle-border-color,var(--spectrum-global-color-gray-600))}#input~#label{color:var(--spectrum-switch-m-text-color,var(--spectrum-alias-text-color))}:host([checked]) #input+#switch{background-color:var(--spectrum-switch-m-track-color-selected,var(--spectrum-global-color-gray-700))}:host([checked]) #input+#switch:before{border-color:var(--spectrum-switch-m-handle-border-color-selected,var(--spectrum-global-color-gray-700))}:host(:hover) #input+#switch:before{border-color:var(--spectrum-switch-m-handle-border-color-hover,var(--spectrum-global-color-gray-700));box-shadow:none}:host(:hover) #input~#label{color:var(--spectrum-switch-m-text-color-hover,var(--spectrum-alias-text-color-hover))}:host(:hover[checked]) #input:enabled+#switch{background-color:var(--spectrum-switch-m-track-color-selected-hover,var(--spectrum-global-color-gray-800))}:host(:hover[checked]) #input:enabled+#switch:before{border-color:var(--spectrum-switch-m-handle-border-color-selected-hover,var(--spectrum-global-color-gray-800))}:host(:active) #input+#switch:before{border-color:var(--spectrum-switch-m-handle-border-color-down,var(--spectrum-global-color-gray-800))}:host(:active) #input~#label{color:var(--spectrum-switch-m-text-color-down,var(--spectrum-alias-text-color-down))}:host(:active[checked]) #input:enabled+#switch{background-color:var(--spectrum-switch-m-track-color-selected-down,var(--spectrum-global-color-gray-900))}:host(:active[checked]) #input:enabled+#switch:before{border-color:var(--spectrum-switch-m-handle-border-color-selected-down,var(--spectrum-global-color-gray-900))}:host([disabled]) #input+#switch{background-color:var(--spectrum-switch-m-track-color-disabled,var(--spectrum-global-color-gray-300))}:host([disabled]) #input+#switch:before{border-color:var(--spectrum-switch-m-handle-border-color-disabled,var(--spectrum-global-color-gray-400))}:host([disabled]) #input~#label{color:var(--spectrum-switch-m-text-color-disabled,var(--spectrum-alias-text-color-disabled))}:host([disabled][checked][dir]) #input+#switch{background-color:var(--spectrum-switch-m-track-color-selected-disabled,var(--spectrum-global-color-gray-400))}:host([disabled][checked][dir]) #input+#switch:before{border-color:var(--spectrum-switch-m-handle-border-color-selected-disabled,var(--spectrum-global-color-gray-400))}:host([disabled][checked][dir]) #input~#label{color:var(--spectrum-switch-m-text-color-selected-disabled,var(--spectrum-alias-text-color-disabled))}:host([emphasized][checked]) #input+#switch{background-color:var(--spectrum-switch-m-emphasized-track-color-selected,var(--spectrum-global-color-blue-500))}:host([emphasized][checked]) #input+#switch:before{border-color:var(--spectrum-switch-m-emphasized-handle-border-color-selected,var(--spectrum-global-color-blue-500))}:host([emphasized][checked]:hover) #input:enabled+#switch{background-color:var(--spectrum-switch-m-emphasized-track-color-selected-hover,var(--spectrum-global-color-blue-600))}:host([emphasized][checked]:hover) #input:enabled+#switch:before{border-color:var(--spectrum-switch-m-emphasized-handle-border-color-selected-hover,var(--spectrum-global-color-blue-600))}:host([emphasized]:active[checked]) #input:enabled+#switch{background-color:var(--spectrum-switch-m-emphasized-track-color-selected-down,var(--spectrum-global-color-blue-700))}:host([emphasized]:active[checked]) #input:enabled+#switch:before{border-color:var(--spectrum-switch-m-emphasized-handle-border-color-selected-down,var(--spectrum-global-color-blue-700))}#input.focus-visible+#switch:after,#input.focus-visible+#switch:after,:host(:hover) #input.focus-visible+#switch:after,:host(:hover) #input.focus-visible+#switch:after{box-shadow:0 0 0 var(--spectrum-switch-m-focus-ring-size-key-focus,var(--spectrum-alias-focus-ring-size)) var(--spectrum-switch-m-focus-ring-color-key-focus,var(--spectrum-alias-focus-ring-color))}#input.focus-visible+#switch:after,#input:focus-visible+#switch:after,:host(:hover) #input.focus-visible+#switch:after,:host(:hover) #input:focus-visible+#switch:after{box-shadow:0 0 0 var(--spectrum-switch-m-focus-ring-size-key-focus,var(--spectrum-alias-focus-ring-size)) var(--spectrum-switch-m-focus-ring-color-key-focus,var(--spectrum-alias-focus-ring-color))}#input.focus-visible+#switch:before,#input.focus-visible+#switch:before,:host(:hover) #input.focus-visible+#switch:before,:host(:hover) #input.focus-visible+#switch:before{border-color:var(--spectrum-switch-m-handle-border-color-key-focus,var(--spectrum-global-color-gray-700))}#input.focus-visible+#switch:before,#input:focus-visible+#switch:before,:host(:hover) #input.focus-visible+#switch:before,:host(:hover) #input:focus-visible+#switch:before{border-color:var(--spectrum-switch-m-handle-border-color-key-focus,var(--spectrum-global-color-gray-700))}:host(:hover[checked]) #input.focus-visible+#switch,:host(:hover[checked]) #input.focus-visible+#switch,:host([checked]) #input.focus-visible+#switch,:host([checked]) #input.focus-visible+#switch{background-color:var(--spectrum-switch-m-track-color-selected-key-focus,var(--spectrum-global-color-gray-800))}:host(:hover[checked]) #input.focus-visible+#switch,:host(:hover[checked]) #input:focus-visible+#switch,:host([checked]) #input.focus-visible+#switch,:host([checked]) #input:focus-visible+#switch{background-color:var(--spectrum-switch-m-track-color-selected-key-focus,var(--spectrum-global-color-gray-800))}:host(:hover[checked]) #input.focus-visible+#switch:before,:host(:hover[checked]) #input.focus-visible+#switch:before,:host([checked]) #input.focus-visible+#switch:before,:host([checked]) #input.focus-visible+#switch:before{border-color:var(--spectrum-switch-m-handle-border-color-selected-key-focus,var(--spectrum-global-color-gray-800))}:host(:hover[checked]) #input.focus-visible+#switch:before,:host(:hover[checked]) #input:focus-visible+#switch:before,:host([checked]) #input.focus-visible+#switch:before,:host([checked]) #input:focus-visible+#switch:before{border-color:var(--spectrum-switch-m-handle-border-color-selected-key-focus,var(--spectrum-global-color-gray-800))}:host([emphasized][checked]) #input.focus-visible+#switch,:host([emphasized][checked]) #input.focus-visible+#switch,:host([emphasized][checked]:hover) #input.focus-visible+#switch,:host([emphasized][checked]:hover) #input.focus-visible+#switch{background-color:var(--spectrum-switch-m-emphasized-track-color-selected-key-focus,var(--spectrum-global-color-blue-600))}:host([emphasized][checked]) #input.focus-visible+#switch,:host([emphasized][checked]) #input:focus-visible+#switch,:host([emphasized][checked]:hover) #input.focus-visible+#switch,:host([emphasized][checked]:hover) #input:focus-visible+#switch{background-color:var(--spectrum-switch-m-emphasized-track-color-selected-key-focus,var(--spectrum-global-color-blue-600))}:host([emphasized][checked]) #input.focus-visible+#switch:before,:host([emphasized][checked]) #input.focus-visible+#switch:before,:host([emphasized][checked]:hover) #input.focus-visible+#switch:before,:host([emphasized][checked]:hover) #input.focus-visible+#switch:before{border-color:var(--spectrum-switch-m-emphasized-handle-border-color-selected-key-focus,var(--spectrum-global-color-blue-600))}:host([emphasized][checked]) #input.focus-visible+#switch:before,:host([emphasized][checked]) #input:focus-visible+#switch:before,:host([emphasized][checked]:hover) #input.focus-visible+#switch:before,:host([emphasized][checked]:hover) #input:focus-visible+#switch:before{border-color:var(--spectrum-switch-m-emphasized-handle-border-color-selected-key-focus,var(--spectrum-global-color-blue-600))}:host{--spectrum-switch-label-margin-top:var(--spectrum-global-dimension-size-65,5px);--spectrum-switch-track-width:var(--spectrum-global-dimension-size-325);--spectrum-switch-handle-border-radius:50%}:host([disabled]){pointer-events:none}:host([dir=ltr][checked]) #input+#switch:before{transform:translateX(calc(var(--spectrum-switch-track-width) - var(--spectrum-switch-handle-size)))}:host([dir=rtl][checked]) #input+#switch:before{transform:translateX(calc(var(--spectrum-switch-handle-size) - var(--spectrum-switch-track-width)))}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$8 = css `
#switch:before{transition:background var(--spectrum-global-animation-duration-100,.13s) ease-in-out,border var(--spectrum-global-animation-duration-100,.13s) ease-in-out,box-shadow var(--spectrum-global-animation-duration-100,.13s) ease-in-out}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class Switch extends CheckboxBase {
        constructor() {
            super(...arguments);
            this.emphasized = false;
        }
        static get styles() {
            /* c8 ignore next 4 */
            if (window.hasOwnProperty('ShadyDOM')) {
                // Override some styles if we are using the web component polyfill
                return [styles$9, styles$8];
            }
            return [styles$9];
        }
        render() {
            return html `
            ${super.render()}
            <span id="switch"></span>
            <label id="label" for="input"><slot></slot></label>
        `;
        }
        firstUpdated(changes) {
            super.firstUpdated(changes);
            this.inputElement.setAttribute('role', 'switch');
        }
        updated(changes) {
            if (changes.has('checked')) {
                this.inputElement.setAttribute('aria-checked', this.checked ? 'true' : 'false');
            }
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Switch.prototype, "emphasized", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-switch', Switch);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$7 = css `
:host{position:relative;box-sizing:border-box;height:var(--spectrum-tabs-item-height);line-height:var(--spectrum-tabs-item-height);z-index:1;text-decoration:none;white-space:nowrap;transition:color var(--spectrum-global-animation-duration-100,.13s) ease-out;cursor:pointer;outline:none}:host([disabled]),:host([disabled]) #itemLabel{cursor:default}:host(:not([vertical])) ::slotted([slot=icon]){height:var(--spectrum-tabs-item-height)}:host([dir=ltr]) slot[name=icon]+#itemLabel{margin-left:calc(var(--spectrum-tabs-icon-gap) - var(--spectrum-global-dimension-size-40))}:host([dir=rtl]) slot[name=icon]+#itemLabel{margin-right:calc(var(--spectrum-tabs-icon-gap) - var(--spectrum-global-dimension-size-40))}:host([dir=ltr]):before{left:calc(-1*var(--spectrum-tabs-focus-ring-padding-x))}:host([dir=ltr]):before,:host([dir=rtl]):before{right:calc(-1*var(--spectrum-tabs-focus-ring-padding-x))}:host([dir=rtl]):before{left:calc(-1*var(--spectrum-tabs-focus-ring-padding-x))}:host:before{content:"";position:absolute;top:50%;box-sizing:border-box;height:var(--spectrum-tabs-focus-ring-height);margin-top:calc(var(--spectrum-tabs-focus-ring-height)/-2 + var(--spectrum-tabs-rule-size)/2);border:var(--spectrum-tabs-focus-ring-size) solid transparent;border-radius:var(--spectrum-tabs-focus-ring-border-radius);pointer-events:none}#itemLabel{cursor:pointer;vertical-align:top;display:inline-block;font-size:var(--spectrum-tabs-text-size);font-weight:var(--spectrum-tabs-text-font-weight);text-decoration:none}#itemLabel:empty{display:none}:host{color:var(--spectrum-tabs-m-text-color,var(--spectrum-alias-label-text-color))}:host(:not([vertical])) ::slotted([slot=icon]){color:var(--spectrum-tabs-m-icon-color,var(--spectrum-alias-icon-color))}:host(:hover){color:var(--spectrum-tabs-m-text-color-hover,var(--spectrum-alias-text-color-hover))}:host(:hover) ::slotted([slot=icon]){color:var(--spectrum-tabs-m-icon-color-hover,var(--spectrum-alias-icon-color-hover))}:host([selected]){color:var(--spectrum-tabs-m-text-color-selected,var(--spectrum-global-color-gray-900))}:host([selected]) ::slotted([slot=icon]){color:var(--spectrum-tabs-m-icon-color-selected,var(--spectrum-global-color-gray-900))}:host(.focus-visible),:host(.focus-visible){color:var(--spectrum-tabs-m-text-color-key-focus,var(--spectrum-alias-text-color-hover))}:host(.focus-visible),:host(:focus-visible){color:var(--spectrum-tabs-m-text-color-key-focus,var(--spectrum-alias-text-color-hover))}:host(.focus-visible):before,:host(.focus-visible):before{border-color:var(--spectrum-tabs-m-focus-ring-color,var(--spectrum-alias-border-color-focus))}:host(.focus-visible):before,:host(:focus-visible):before{border-color:var(--spectrum-tabs-m-focus-ring-color,var(--spectrum-alias-border-color-focus))}:host(.focus-visible) ::slotted([slot=icon]),:host(.focus-visible) ::slotted([slot=icon]){color:var(--spectrum-tabs-m-icon-color-key-focus,var(--spectrum-alias-icon-color-focus))}:host(.focus-visible) ::slotted([slot=icon]),:host(:focus-visible) ::slotted([slot=icon]){color:var(--spectrum-tabs-m-icon-color-key-focus,var(--spectrum-alias-icon-color-focus))}:host([disabled]){color:var(--spectrum-tabs-m-text-color-disabled,var(--spectrum-alias-text-color-disabled))}:host([disabled]) ::slotted([slot=icon]){color:var(--spectrum-tabs-m-icon-color-disabled,var(--spectrum-alias-icon-color-disabled))}:host([vertical]){display:flex;flex-direction:column;justify-content:center;align-items:center;height:auto!important;--sp-tab-vertial-margin-y:calc((var(--spectrum-tabs-vertical-item-height,
var(--spectrum-global-dimension-size-550)) - var(--spectrum-tabs-focus-ring-height,
var(--spectrum-alias-single-line-height)))/2)}:host([vertical]):before{left:calc(-1*var(--spectrum-tabs-focus-ring-size, var(--spectrum-alias-border-size-thick)));right:calc(-1*var(--spectrum-tabs-focus-ring-size, var(--spectrum-alias-border-size-thick)));height:auto;margin-top:0!important;top:0;bottom:0}:host([vertical]) ::slotted([slot=icon]){margin-top:var(--sp-tab-vertial-margin-y);flex-shrink:0}:host([dir][vertical]) slot[name=icon]+#itemLabel{font-size:var(--spectrum-tabs-text-size,var(--spectrum-alias-font-size-default));font-weight:var(--spectrum-tabs-text-font-weight,var(--spectrum-alias-body-text-font-weight));line-height:1;margin:var(--sp-tab-vertial-margin-y) 0}#itemLabel[hidden]{display:none}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @slot icon - The icon that appears on the left of the label
     */
    class Tab extends FocusVisiblePolyfillMixin(ObserveSlotText(ObserveSlotPresence(SpectrumElement, '[slot="icon"]'), '')) {
        constructor() {
            super(...arguments);
            this.label = '';
            this.selected = false;
            this.vertical = false;
            this.value = '';
        }
        static get styles() {
            return [styles$7];
        }
        get hasIcon() {
            return this.slotContentIsPresent;
        }
        get hasLabel() {
            return !!this.label || this.slotHasContent;
        }
        render() {
            return html `
            ${this.hasIcon
            ? html `
                      <slot name="icon"></slot>
                  `
            : html ``}
            <label id="itemLabel" ?hidden=${!this.hasLabel}>
                ${!this.slotHasContent
            ? html `
                          ${this.label}
                          <slot></slot>
                      `
            : html `
                          <slot>${this.label}</slot>
                      `}
            </label>
        `;
        }
        firstUpdated(changes) {
            super.firstUpdated(changes);
            this.setAttribute('role', 'tab');
        }
        updated(changes) {
            super.updated(changes);
            if (changes.has('selected')) {
                this.setAttribute('aria-selected', this.selected ? 'true' : 'false');
                this.setAttribute('tabindex', this.selected ? '0' : '-1');
            }
        }
    }
    __decorate([
        property({ reflect: true })
    ], Tab.prototype, "label", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Tab.prototype, "selected", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Tab.prototype, "vertical", void 0);
    __decorate([
        property({ type: String, reflect: true })
    ], Tab.prototype, "value", void 0);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-tab', Tab);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$6 = css `
:host{--spectrum-tabs-focus-ring-border-radius:var(--spectrum-tabs-m-focus-ring-border-radius);--spectrum-tabs-compact-item-height:var(--spectrum-tabs-m-compact-item-height,var(--spectrum-alias-item-height-m));--spectrum-tabs-compact-vertical-item-height:var(--spectrum-tabs-m-compact-vertical-item-height,var(--spectrum-global-dimension-size-400));--spectrum-tabs-compact-vertical-item-gap:var(--spectrum-tabs-m-compact-vertical-item-gap,var(--spectrum-global-dimension-size-50));--spectrum-tabs-text-font-weight:var(--spectrum-tabs-m-text-font-weight,var(--spectrum-alias-body-text-font-weight));--spectrum-tabs-rule-border-radius:var(--spectrum-tabs-m-rule-border-radius,var(--spectrum-global-dimension-static-size-10));--spectrum-tabs-rule-size:var(--spectrum-tabs-m-rule-size,var(--spectrum-alias-border-size-thick));--spectrum-tabs-focus-ring-size:var(--spectrum-tabs-m-focus-ring-size,var(--spectrum-alias-border-size-thick));--spectrum-tabs-text-size:var(--spectrum-tabs-m-text-size,var(--spectrum-alias-item-text-size-m));--spectrum-tabs-height:var(--spectrum-tabs-m-height,var(--spectrum-global-dimension-size-600));--spectrum-tabs-item-height:var(--spectrum-tabs-m-item-height,var(--spectrum-alias-item-height-m));--spectrum-tabs-icon-gap:var(--spectrum-tabs-m-icon-gap,var(--spectrum-alias-item-workflow-icon-gap-m));--spectrum-tabs-focus-ring-height:var(--spectrum-tabs-m-focus-ring-height,var(--spectrum-alias-item-height-m));--spectrum-tabs-focus-ring-padding-x:var(--spectrum-tabs-m-focus-ring-padding-x,var(--spectrum-alias-item-padding-m));--spectrum-tabs-item-gap:var(--spectrum-tabs-m-item-gap,var(--spectrum-global-dimension-size-300));--spectrum-tabs-selection-indicator-animation-duration:var(--spectrum-tabs-m-selection-indicator-animation-duration,var(--spectrum-global-animation-duration-100));--spectrum-tabs-vertical-rule-size:var(--spectrum-tabs-m-vertical-rule-size,var(--spectrum-alias-border-size-thick));--spectrum-tabs-vertical-item-height:var(--spectrum-tabs-m-vertical-item-height,var(--spectrum-global-dimension-size-550));--spectrum-tabs-vertical-item-gap:var(--spectrum-tabs-m-vertical-item-gap,var(--spectrum-global-dimension-size-50));--spectrum-tabs-vertical-item-margin-left:var(--spectrum-tabs-m-vertical-item-margin-left,var(--spectrum-global-dimension-size-150));--spectrum-tabs-quiet-compact-height:var(--spectrum-tabs-quiet-m-compact-height,var(--spectrum-alias-item-height-m));--spectrum-tabs-item-height:calc(var(--spectrum-tabs-height) - var(--spectrum-tabs-rule-size));--spectrum-tabs-compact-item-height:calc(var(--spectrum-tabs-quiet-compact-height) - var(--spectrum-tabs-rule-size));--spectrum-tabs-text-size:var(--spectrum-alias-font-size-default,var(--spectrum-global-dimension-font-size-100));display:flex;position:relative;z-index:0;margin:0;padding-top:0;padding-bottom:0;padding-left:var(--spectrum-tabs-focus-ring-padding-x);padding-right:var(--spectrum-tabs-focus-ring-padding-x);vertical-align:top}:host([dir=ltr]) ::slotted(*):before{left:calc(-1*var(--spectrum-tabs-focus-ring-padding-x))}:host([dir=ltr]) ::slotted(*):before,:host([dir=rtl]) ::slotted(*):before{right:calc(-1*var(--spectrum-tabs-focus-ring-padding-x))}:host([dir=rtl]) ::slotted(*):before{left:calc(-1*var(--spectrum-tabs-focus-ring-padding-x))}:host([dir=ltr]) #selectionIndicator{left:0}:host([dir=rtl]) #selectionIndicator{right:0}#selectionIndicator{position:absolute;z-index:0;transition:transform var(--spectrum-tabs-selection-indicator-animation-duration) ease-in-out;transform-origin:top left;border-radius:var(--spectrum-tabs-rule-border-radius)}:host([compact]) ::slotted(*){line-height:var(--spectrum-tabs-compact-item-height);height:var(--spectrum-tabs-compact-item-height)}:host([direction=horizontal]){align-items:center;border-bottom:var(--spectrum-tabs-rule-size) solid}:host([direction=horizontal]) ::slotted(*){vertical-align:top}:host([dir=ltr][direction=horizontal]) ::slotted(:not(:first-child)){margin-left:var(--spectrum-tabs-item-gap)}:host([dir=rtl][direction=horizontal]) ::slotted(:not(:first-child)){margin-right:var(--spectrum-tabs-item-gap)}:host([direction=horizontal]) #selectionIndicator{position:absolute;bottom:0;height:var(--spectrum-tabs-rule-size);bottom:calc(-1*var(--spectrum-tabs-rule-size))}:host([direction=horizontal][compact]){box-sizing:initial;height:var(--spectrum-tabs-compact-item-height);align-items:end}:host([quiet]){display:inline-flex}:host([dir=ltr][direction=vertical]){border-left:var(--spectrum-tabs-vertical-rule-size) solid}:host([dir=rtl][direction=vertical]){border-right:var(--spectrum-tabs-vertical-rule-size) solid}:host([direction=vertical]){display:inline-flex;flex-direction:column;padding:0}:host([dir=ltr][direction=vertical]) ::slotted(*){margin-left:calc(var(--spectrum-tabs-vertical-item-margin-left) - var(--spectrum-tabs-focus-ring-padding-x))}:host([dir=rtl][direction=vertical]) ::slotted(*){margin-right:calc(var(--spectrum-tabs-vertical-item-margin-left) - var(--spectrum-tabs-focus-ring-padding-x))}:host([direction=vertical]) ::slotted(*){height:var(--spectrum-tabs-vertical-item-height);padding-top:0;padding-bottom:0;padding-left:var(--spectrum-tabs-focus-ring-padding-x);padding-right:var(--spectrum-tabs-focus-ring-padding-x);margin-bottom:var(--spectrum-tabs-vertical-item-gap)}:host([dir=ltr][direction=vertical]) ::slotted(*):before{left:calc(-1*var(--spectrum-tabs-focus-ring-size))}:host([dir=ltr][direction=vertical]) ::slotted(*):before,:host([dir=rtl][direction=vertical]) ::slotted(*):before{right:calc(-1*var(--spectrum-tabs-focus-ring-size))}:host([dir=rtl][direction=vertical]) ::slotted(*):before{left:calc(-1*var(--spectrum-tabs-focus-ring-size))}:host([direction=vertical]) ::slotted(*):before{margin-top:calc(var(--spectrum-tabs-focus-ring-height)/-2)}:host([direction=vertical][compact]) ::slotted(*){height:var(--spectrum-tabs-compact-vertical-item-height);line-height:var(--spectrum-tabs-compact-vertical-item-height);margin-bottom:var(--spectrum-tabs-compact-vertical-item-gap)}:host([dir=ltr][direction=vertical]) #selectionIndicator{left:0}:host([dir=rtl][direction=vertical]) #selectionIndicator{right:0}:host([dir=ltr][direction=vertical]) #selectionIndicator{left:calc(-1*var(--spectrum-tabs-vertical-rule-size))}:host([dir=rtl][direction=vertical]) #selectionIndicator{right:calc(-1*var(--spectrum-tabs-vertical-rule-size))}:host([direction=vertical]) #selectionIndicator{position:absolute;width:var(--spectrum-tabs-vertical-rule-size)}:host{border-bottom-color:var(--spectrum-tabs-m-rule-color,var(--spectrum-alias-border-color-light))}:host([dir=ltr][direction=vertical]){border-left-color:var(--spectrum-tabs-m-vertical-rule-color,var(--spectrum-alias-border-color-light))}:host([dir=rtl][direction=vertical]){border-right-color:var(--spectrum-tabs-m-vertical-rule-color,var(--spectrum-alias-border-color-light))}#selectionIndicator{background-color:var(--spectrum-tabs-m-selection-indicator-color,var(--spectrum-global-color-gray-900))}:host([quiet]){border-bottom-color:var(--spectrum-tabs-quiet-m-rule-color,var(--spectrum-alias-border-color-transparent))}:host([quiet]) #selectionIndicator{background-color:var(--spectrum-tabs-quiet-m-selection-indicator-color,var(--spectrum-global-color-gray-900))}:host([dir=ltr][direction=vertical][compact]),:host([dir=ltr][direction=vertical][quiet]){border-left-color:var(--spectrum-tabs-quiet-m-vertical-rule-color,var(--spectrum-alias-border-color-transparent))}:host([dir=rtl][direction=vertical][compact]),:host([dir=rtl][direction=vertical][quiet]){border-right-color:var(--spectrum-tabs-quiet-m-vertical-rule-color,var(--spectrum-alias-border-color-transparent))}:host([direction=vertical][compact]) #selectionIndicator,:host([direction=vertical][quiet]) #selectionIndicator{background-color:var(--spectrum-tabs-quiet-m-selection-indicator-color,var(--spectrum-global-color-gray-900))}:host([direction=vertical-right]) #selectionIndicator,:host([direction=vertical]) #selectionIndicator{top:0;height:1px}:host([compact]){--spectrum-tabs-height:var(--spectrum-tabs-quiet-compact-height)}:host([direction=horizontal]:not([quiet])){border-bottom-color:var(--spectrum-tabs-rule-color,var(--spectrum-global-color-gray-200))}:host([dir][direction=horizontal]) #selectionIndicator{width:1px;left:0;right:auto}:host([dir=ltr][direction=vertical-right]){display:inline-flex;flex-direction:column;padding:0;border-right:var(--spectrum-tabs-vertical-rule-width,var(--spectrum-alias-border-size-thick)) solid;border-right-color:var(--spectrum-tabs-vertical-rule-color,var(--spectrum-global-color-gray-200))}:host([dir=rtl][direction=vertical-right]){display:inline-flex;flex-direction:column;padding:0;border-left:var(--spectrum-tabs-vertical-rule-width,var(--spectrum-alias-border-size-thick)) solid;border-left-color:var(--spectrum-tabs-vertical-rule-color,var(--spectrum-global-color-gray-200))}:host([dir=ltr][direction=vertical-right]) ::slotted(*){margin-right:calc(var(--spectrum-tabs-vertical-item-margin-left,
var(--spectrum-global-dimension-size-150)) - var(--spectrum-tabs-focus-ring-padding-x,
var(--spectrum-global-dimension-size-100)))}:host([dir=ltr][direction=vertical-right]) ::slotted(*),:host([dir=rtl][direction=vertical-right]) ::slotted(*){height:var(--spectrum-tabs-vertical-item-height,var(--spectrum-global-dimension-size-550));padding:0 var(--spectrum-tabs-focus-ring-padding-x,var(--spectrum-global-dimension-size-100));margin-bottom:var(--spectrum-tabs-vertical-item-gap,var(--spectrum-global-dimension-size-50))}:host([dir=rtl][direction=vertical-right]) ::slotted(*){margin-left:calc(var(--spectrum-tabs-vertical-item-margin-left,
var(--spectrum-global-dimension-size-150)) - var(--spectrum-tabs-focus-ring-padding-x,
var(--spectrum-global-dimension-size-100)))}:host([direction=vertical-right][compact]) ::slotted(*){line-height:var(--spectrum-tabs-compact-vertical-item-height,var(--spectrum-global-dimension-size-400));margin-bottom:var(--spectrum-tabs-compact-vertical-item-gap,var(--spectrum-global-dimension-size-50));height:var(--spectrum-tabs-compact-vertical-item-height,var(--spectrum-global-dimension-size-400))}:host([dir=ltr][direction=vertical-right]) #selectionIndicator{position:absolute;left:auto;width:var(--spectrum-tabs-vertical-rule-width,var(--spectrum-alias-border-size-thick));right:calc(-1*var(--spectrum-tabs-vertical-rule-width, var(--spectrum-alias-border-size-thick)))}:host([dir=rtl][direction=vertical-right]) #selectionIndicator{position:absolute;right:auto;width:var(--spectrum-tabs-vertical-rule-width,var(--spectrum-alias-border-size-thick));left:calc(-1*var(--spectrum-tabs-vertical-rule-width, var(--spectrum-alias-border-size-thick)))}:host([dir=ltr][direction=vertical-right][compact]),:host([dir=ltr][direction=vertical-right][quiet]){border-right-color:var(--spectrum-tabs-quiet-vertical-rule-color,var(--spectrum-alias-border-color-transparent))}:host([dir=rtl][direction=vertical-right][compact]),:host([dir=rtl][direction=vertical-right][quiet]){border-left-color:var(--spectrum-tabs-quiet-vertical-rule-color,var(--spectrum-alias-border-color-transparent))}:host([direction=vertical-right][compact]) #selectionIndicator,:host([direction=vertical-right][quiet]) #selectionIndicator{background-color:var(--spectrum-tabs-quiet-selection-indicator-color,var(--spectrum-global-color-gray-900))}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const availableArrowsByDirection = {
        vertical: ['ArrowUp', 'ArrowDown'],
        ['vertical-right']: ['ArrowUp', 'ArrowDown'],
        horizontal: ['ArrowLeft', 'ArrowRight'],
    };
    /**
     * @slot - Child tab elements
     * @attr {Boolean} quiet - The tabs border is a lot smaller
     * @attr {Boolean} compact - The collection of tabs take up less space
     */
    class Tabs extends Focusable {
        constructor() {
            super();
            this.direction = 'horizontal';
            this.selectionIndicatorStyle = '';
            this._selected = '';
            this.tabs = [];
            /**
             * This will force apply the focus visible styling.
             * It should always do so when this styling is already applied.
             */
            this.shouldApplyFocusVisible = false;
            this.manageFocusinType = () => {
                if (this.shouldApplyFocusVisible) {
                    return;
                }
                const handleFocusin = () => {
                    this.shouldApplyFocusVisible = false;
                    this.removeEventListener('focusin', handleFocusin);
                };
                this.addEventListener('focusin', handleFocusin);
            };
            this.startListeningToKeyboard = () => {
                this.addEventListener('keydown', this.handleKeydown);
                this.shouldApplyFocusVisible = true;
                const selected = this.querySelector('[selected]');
                if (selected) {
                    selected.tabIndex = -1;
                }
                const stopListeningToKeyboard = () => {
                    this.removeEventListener('keydown', this.handleKeydown);
                    this.shouldApplyFocusVisible = false;
                    const selected = this.querySelector('[selected]');
                    if (selected) {
                        selected.tabIndex = 0;
                    }
                    this.removeEventListener('focusout', stopListeningToKeyboard);
                };
                this.addEventListener('focusout', stopListeningToKeyboard);
            };
            this.onClick = (event) => {
                const target = event.target;
                this.selectTarget(target);
                if (this.shouldApplyFocusVisible && event.composedPath()[0] !== this) {
                    /* Trick :focus-visible polyfill into thinking keyboard based focus */
                    this.dispatchEvent(new KeyboardEvent('keydown', {
                        code: 'Tab',
                    }));
                    target.focus();
                }
            };
            this.onKeyDown = (event) => {
                if (event.code === 'Enter' || event.code === 'Space') {
                    event.preventDefault();
                    const target = event.target;
                    if (target) {
                        this.selectTarget(target);
                    }
                }
            };
            this.updateCheckedState = () => {
                if (!this.tabs.length) {
                    this.tabs = [...this.querySelectorAll('[role="tab"]')];
                }
                this.tabs.forEach((element) => {
                    element.removeAttribute('selected');
                });
                if (this.selected) {
                    const currentChecked = this.tabs.find((el) => el.value === this.selected);
                    if (currentChecked) {
                        currentChecked.selected = true;
                    }
                    else {
                        this.selected = '';
                    }
                }
                else {
                    const firstTab = this.tabs[0];
                    if (firstTab) {
                        firstTab.setAttribute('tabindex', '0');
                    }
                }
                this.updateSelectionIndicator();
                this.tabChangeResolver();
            };
            this.updateSelectionIndicator = async () => {
                const selectedElement = this.tabs.find((el) => el.selected);
                if (!selectedElement) {
                    this.selectionIndicatorStyle = `transform: translateX(0px) scaleX(0) scaleY(0);`;
                    return;
                }
                await Promise.all([
                    selectedElement.updateComplete,
                    document.fonts ? document.fonts.ready : Promise.resolve(),
                ]);
                const tabBoundingClientRect = selectedElement.getBoundingClientRect();
                const parentBoundingClientRect = this.getBoundingClientRect();
                if (this.direction === 'horizontal') {
                    const width = tabBoundingClientRect.width;
                    const offset = tabBoundingClientRect.left - parentBoundingClientRect.left;
                    this.selectionIndicatorStyle = `transform: translateX(${offset}px) scaleX(${width});`;
                }
                else {
                    const height = tabBoundingClientRect.height;
                    const offset = tabBoundingClientRect.top - parentBoundingClientRect.top;
                    this.selectionIndicatorStyle = `transform: translateY(${offset}px) scaleY(${height});`;
                }
            };
            this.tabChangePromise = Promise.resolve();
            this.tabChangeResolver = function () {
                return;
            };
            // These can be added as @click and @keydown handlers on the
            // slot once we no longer need web component polyfills
            this.addEventListener('click', this.onClick);
            this.addEventListener('keydown', this.onKeyDown);
        }
        static get styles() {
            return [styles$6];
        }
        get selected() {
            return this._selected;
        }
        set selected(value) {
            const oldValue = this.selected;
            if (value === oldValue) {
                return;
            }
            this._selected = value;
            this.shouldUpdateCheckedState();
            this.requestUpdate('selected', oldValue);
        }
        get focusElement() {
            const focusElement = this.tabs.find((tab) => tab.selected || tab.value === this.selected);
            if (focusElement) {
                return focusElement;
            }
            return this.tabs[0];
        }
        manageAutoFocus() {
            const tabs = [...this.children];
            const tabUpdateCompletes = tabs.map((tab) => {
                if (typeof tab.updateComplete !== 'undefined') {
                    return tab.updateComplete;
                }
                return Promise.resolve();
            });
            Promise.all(tabUpdateCompletes).then(() => super.manageAutoFocus());
        }
        render() {
            return html `
            <slot @slotchange=${this.onSlotChange}></slot>
            <div
                id="selectionIndicator"
                style=${this.selectionIndicatorStyle}
            ></div>
        `;
        }
        firstUpdated(changes) {
            super.firstUpdated(changes);
            this.setAttribute('role', 'tablist');
            this.addEventListener('mousedown', this.manageFocusinType);
            this.addEventListener('focusin', this.startListeningToKeyboard);
            const selectedChild = this.querySelector('[selected]');
            if (selectedChild) {
                this.selectTarget(selectedChild);
            }
        }
        updated(changes) {
            super.updated(changes);
            if (changes.has('direction')) {
                if (this.direction === 'horizontal') {
                    this.removeAttribute('aria-orientation');
                }
                else {
                    this.setAttribute('aria-orientation', 'vertical');
                }
            }
            if (changes.has('dir')) {
                this.updateSelectionIndicator();
            }
        }
        handleKeydown(event) {
            const { code } = event;
            const availableArrows = [...availableArrowsByDirection[this.direction]];
            if (!availableArrows.includes(code)) {
                return;
            }
            if (!this.isLTR && this.direction === 'horizontal') {
                availableArrows.reverse();
            }
            event.preventDefault();
            const currentFocusedTab = getActiveElement(this);
            let currentFocusedTabIndex = this.tabs.indexOf(currentFocusedTab);
            currentFocusedTabIndex += code === availableArrows[0] ? -1 : 1;
            this.tabs[(currentFocusedTabIndex + this.tabs.length) % this.tabs.length].focus();
        }
        selectTarget(target) {
            const value = target.getAttribute('value');
            if (value) {
                const selected = this.selected;
                this.selected = value;
                const applyDefault = this.dispatchEvent(new Event('change', {
                    cancelable: true,
                }));
                if (!applyDefault) {
                    this.selected = selected;
                }
            }
        }
        onSlotChange() {
            this.tabs = [...this.querySelectorAll('[role="tab"]')];
            this.shouldUpdateCheckedState();
        }
        shouldUpdateCheckedState() {
            this.tabChangeResolver();
            this.tabChangePromise = new Promise((res) => (this.tabChangeResolver = res));
            setTimeout(this.updateCheckedState);
        }
        async _getUpdateComplete() {
            await super._getUpdateComplete();
            await this.tabChangePromise;
        }
        connectedCallback() {
            super.connectedCallback();
            window.addEventListener('resize', this.updateSelectionIndicator);
            if ('fonts' in document) {
                document.fonts.addEventListener('loadingdone', this.updateSelectionIndicator);
            }
        }
        disconnectedCallback() {
            window.removeEventListener('resize', this.updateSelectionIndicator);
            if ('fonts' in document) {
                document.fonts.removeEventListener('loadingdone', this.updateSelectionIndicator);
            }
            super.disconnectedCallback();
        }
    }
    __decorate([
        property({ reflect: true })
    ], Tabs.prototype, "direction", void 0);
    __decorate([
        property()
    ], Tabs.prototype, "selectionIndicatorStyle", void 0);
    __decorate([
        property({ reflect: true })
    ], Tabs.prototype, "selected", null);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-tabs', Tabs);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-textfield', Textfield);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$5 = css `
:host,:root{--spectrum-global-animation-duration-0:0ms;--spectrum-global-animation-duration-100:130ms;--spectrum-global-animation-duration-200:160ms;--spectrum-global-animation-duration-300:190ms;--spectrum-global-animation-duration-400:220ms;--spectrum-global-animation-duration-500:250ms;--spectrum-global-animation-duration-600:300ms;--spectrum-global-animation-duration-700:350ms;--spectrum-global-animation-duration-800:400ms;--spectrum-global-animation-duration-900:450ms;--spectrum-global-animation-duration-1000:500ms;--spectrum-global-animation-duration-2000:1000ms;--spectrum-global-animation-duration-4000:2000ms;--spectrum-global-animation-ease-in-out:cubic-bezier(0.45,0,0.4,1);--spectrum-global-animation-ease-in:cubic-bezier(0.5,0,1,1);--spectrum-global-animation-ease-out:cubic-bezier(0,0,0.4,1);--spectrum-global-animation-linear:cubic-bezier(0,0,1,1);--spectrum-global-color-status:Verified;--spectrum-global-color-version:5.1;--spectrum-global-color-static-black:#000;--spectrum-global-color-static-white:#fff;--spectrum-global-color-static-blue:#1473e6;--spectrum-global-color-static-gray-50:#fff;--spectrum-global-color-static-gray-75:#fff;--spectrum-global-color-static-gray-100:#fff;--spectrum-global-color-static-gray-200:#f4f4f4;--spectrum-global-color-static-gray-300:#eaeaea;--spectrum-global-color-static-gray-400:#d3d3d3;--spectrum-global-color-static-gray-500:#bcbcbc;--spectrum-global-color-static-gray-600:#959595;--spectrum-global-color-static-gray-700:#747474;--spectrum-global-color-static-gray-800:#505050;--spectrum-global-color-static-gray-900:#323232;--spectrum-global-color-static-blue-200:#5aa9fa;--spectrum-global-color-static-blue-300:#4b9cf5;--spectrum-global-color-static-blue-400:#378ef0;--spectrum-global-color-static-blue-500:#2680eb;--spectrum-global-color-static-blue-600:#1473e6;--spectrum-global-color-static-blue-700:#0d66d0;--spectrum-global-color-static-blue-800:#095aba;--spectrum-global-color-static-red-400:#ec5b62;--spectrum-global-color-static-red-500:#e34850;--spectrum-global-color-static-red-600:#d7373f;--spectrum-global-color-static-red-700:#c9252d;--spectrum-global-color-static-red-800:#bb121a;--spectrum-global-color-static-orange-400:#f29423;--spectrum-global-color-static-orange-500:#e68619;--spectrum-global-color-static-orange-600:#da7b11;--spectrum-global-color-static-orange-700:#cb6f10;--spectrum-global-color-static-orange-800:#bd640d;--spectrum-global-color-static-green-400:#33ab84;--spectrum-global-color-static-green-500:#2d9d78;--spectrum-global-color-static-green-600:#268e6c;--spectrum-global-color-static-green-700:#12805c;--spectrum-global-color-static-green-800:#107154;--spectrum-global-color-static-celery-200:#58e06f;--spectrum-global-color-static-celery-300:#51d267;--spectrum-global-color-static-celery-400:#4bc35f;--spectrum-global-color-static-celery-500:#44b556;--spectrum-global-color-static-celery-600:#3da74e;--spectrum-global-color-static-celery-700:#379947;--spectrum-global-color-static-celery-800:#318b40;--spectrum-global-color-static-chartreuse-300:#9bec54;--spectrum-global-color-static-chartreuse-400:#8ede49;--spectrum-global-color-static-chartreuse-500:#85d044;--spectrum-global-color-static-chartreuse-600:#7cc33f;--spectrum-global-color-static-chartreuse-700:#73b53a;--spectrum-global-color-static-chartreuse-800:#6aa834;--spectrum-global-color-static-yellow-200:#ffe22e;--spectrum-global-color-static-yellow-300:#fad900;--spectrum-global-color-static-yellow-400:#edcc00;--spectrum-global-color-static-yellow-500:#dfbf00;--spectrum-global-color-static-yellow-600:#d2b200;--spectrum-global-color-static-yellow-700:#c4a600;--spectrum-global-color-static-yellow-800:#b79900;--spectrum-global-color-static-magenta-200:#f56bb7;--spectrum-global-color-static-magenta-300:#ec5aaa;--spectrum-global-color-static-magenta-400:#e2499d;--spectrum-global-color-static-magenta-500:#d83790;--spectrum-global-color-static-magenta-600:#ca2982;--spectrum-global-color-static-magenta-700:#bc1c74;--spectrum-global-color-static-magenta-800:#ae0e66;--spectrum-global-color-static-fuchsia-400:#cf3edc;--spectrum-global-color-static-fuchsia-500:#c038cc;--spectrum-global-color-static-fuchsia-600:#b130bd;--spectrum-global-color-static-fuchsia-700:#a228ad;--spectrum-global-color-static-fuchsia-800:#93219e;--spectrum-global-color-static-purple-400:#9d64e1;--spectrum-global-color-static-purple-500:#9256d9;--spectrum-global-color-static-purple-600:#864ccc;--spectrum-global-color-static-purple-700:#7a42bf;--spectrum-global-color-static-purple-800:#6f38b1;--spectrum-global-color-static-indigo-200:#9090fa;--spectrum-global-color-static-indigo-300:#8282f6;--spectrum-global-color-static-indigo-400:#7575f1;--spectrum-global-color-static-indigo-500:#6767ec;--spectrum-global-color-static-indigo-600:#5c5ce0;--spectrum-global-color-static-indigo-700:#5151d3;--spectrum-global-color-static-indigo-800:#4646c6;--spectrum-global-color-static-seafoam-200:#26c0c7;--spectrum-global-color-static-seafoam-300:#23b2b8;--spectrum-global-color-static-seafoam-400:#20a3a8;--spectrum-global-color-static-seafoam-500:#1b959a;--spectrum-global-color-static-seafoam-600:#16878c;--spectrum-global-color-static-seafoam-700:#0f797d;--spectrum-global-color-static-seafoam-800:#096c6f;--spectrum-global-color-opacity-100:1;--spectrum-global-color-opacity-90:0.9;--spectrum-global-color-opacity-80:0.8;--spectrum-global-color-opacity-60:0.6;--spectrum-global-color-opacity-50:0.5;--spectrum-global-color-opacity-42:0.42;--spectrum-global-color-opacity-40:0.4;--spectrum-global-color-opacity-30:0.3;--spectrum-global-color-opacity-25:0.25;--spectrum-global-color-opacity-20:0.2;--spectrum-global-color-opacity-15:0.15;--spectrum-global-color-opacity-10:0.1;--spectrum-global-color-opacity-8:0.08;--spectrum-global-color-opacity-7:0.07;--spectrum-global-color-opacity-6:0.06;--spectrum-global-color-opacity-5:0.05;--spectrum-global-color-opacity-4:0.04;--spectrum-semantic-negative-color-background:var(--spectrum-global-color-static-red-700);--spectrum-semantic-negative-color-default:var(--spectrum-global-color-red-500);--spectrum-semantic-negative-color-state-hover:var(--spectrum-global-color-red-600);--spectrum-semantic-negative-color-dark:var(--spectrum-global-color-red-600);--spectrum-semantic-negative-color-border:var(--spectrum-global-color-red-400);--spectrum-semantic-negative-color-icon:var(--spectrum-global-color-red-600);--spectrum-semantic-negative-color-status:var(--spectrum-global-color-red-400);--spectrum-semantic-negative-color-text-large:var(--spectrum-global-color-red-500);--spectrum-semantic-negative-color-text-small:var(--spectrum-global-color-red-600);--spectrum-semantic-negative-color-state-down:var(--spectrum-global-color-red-700);--spectrum-semantic-negative-color-state-focus:var(--spectrum-global-color-red-400);--spectrum-semantic-negative-background-color-default:var(--spectrum-global-color-static-red-600);--spectrum-semantic-negative-background-color-hover:var(--spectrum-global-color-static-red-700);--spectrum-semantic-negative-background-color-down:var(--spectrum-global-color-static-red-800);--spectrum-semantic-negative-background-color-key-focus:var(--spectrum-global-color-static-red-700);--spectrum-semantic-notice-color-background:var(--spectrum-global-color-static-orange-700);--spectrum-semantic-notice-color-default:var(--spectrum-global-color-orange-500);--spectrum-semantic-notice-color-dark:var(--spectrum-global-color-orange-600);--spectrum-semantic-notice-color-border:var(--spectrum-global-color-orange-400);--spectrum-semantic-notice-color-icon:var(--spectrum-global-color-orange-600);--spectrum-semantic-notice-color-status:var(--spectrum-global-color-orange-400);--spectrum-semantic-notice-color-text-large:var(--spectrum-global-color-orange-500);--spectrum-semantic-notice-color-text-small:var(--spectrum-global-color-orange-600);--spectrum-semantic-notice-color-state-down:var(--spectrum-global-color-orange-700);--spectrum-semantic-notice-color-state-focus:var(--spectrum-global-color-orange-400);--spectrum-semantic-notice-background-color-default:var(--spectrum-global-color-static-orange-600);--spectrum-semantic-notice-background-color-hover:var(--spectrum-global-color-static-orange-700);--spectrum-semantic-notice-background-color-down:var(--spectrum-global-color-static-orange-800);--spectrum-semantic-notice-background-color-key-focus:var(--spectrum-global-color-static-orange-700);--spectrum-semantic-positive-color-background:var(--spectrum-global-color-static-green-700);--spectrum-semantic-positive-color-default:var(--spectrum-global-color-green-500);--spectrum-semantic-positive-color-dark:var(--spectrum-global-color-green-600);--spectrum-semantic-positive-color-border:var(--spectrum-global-color-green-400);--spectrum-semantic-positive-color-icon:var(--spectrum-global-color-green-600);--spectrum-semantic-positive-color-status:var(--spectrum-global-color-green-400);--spectrum-semantic-positive-color-text-large:var(--spectrum-global-color-green-500);--spectrum-semantic-positive-color-text-small:var(--spectrum-global-color-green-600);--spectrum-semantic-positive-color-state-down:var(--spectrum-global-color-green-700);--spectrum-semantic-positive-color-state-focus:var(--spectrum-global-color-green-400);--spectrum-semantic-positive-background-color-default:var(--spectrum-global-color-static-green-600);--spectrum-semantic-positive-background-color-hover:var(--spectrum-global-color-static-green-700);--spectrum-semantic-positive-background-color-down:var(--spectrum-global-color-static-green-800);--spectrum-semantic-positive-background-color-key-focus:var(--spectrum-global-color-static-green-700);--spectrum-semantic-informative-color-background:var(--spectrum-global-color-static-blue-700);--spectrum-semantic-informative-color-default:var(--spectrum-global-color-blue-500);--spectrum-semantic-informative-color-dark:var(--spectrum-global-color-blue-600);--spectrum-semantic-informative-color-border:var(--spectrum-global-color-blue-400);--spectrum-semantic-informative-color-icon:var(--spectrum-global-color-blue-600);--spectrum-semantic-informative-color-status:var(--spectrum-global-color-blue-400);--spectrum-semantic-informative-color-text-large:var(--spectrum-global-color-blue-500);--spectrum-semantic-informative-color-text-small:var(--spectrum-global-color-blue-600);--spectrum-semantic-informative-color-state-down:var(--spectrum-global-color-blue-700);--spectrum-semantic-informative-color-state-focus:var(--spectrum-global-color-blue-400);--spectrum-semantic-informative-background-color-default:var(--spectrum-global-color-static-blue-600);--spectrum-semantic-informative-background-color-hover:var(--spectrum-global-color-static-blue-700);--spectrum-semantic-informative-background-color-down:var(--spectrum-global-color-static-blue-800);--spectrum-semantic-informative-background-color-key-focus:var(--spectrum-global-color-static-blue-700);--spectrum-semantic-cta-color-background-default:var(--spectrum-global-color-static-blue-600);--spectrum-semantic-cta-color-background-hover:var(--spectrum-global-color-static-blue-700);--spectrum-semantic-cta-color-background-down:var(--spectrum-global-color-static-blue-800);--spectrum-semantic-cta-color-background-key-focus:var(--spectrum-global-color-static-blue-600);--spectrum-semantic-neutral-background-color-default:var(--spectrum-global-color-static-gray-700);--spectrum-semantic-neutral-background-color-hover:var(--spectrum-global-color-static-gray-800);--spectrum-semantic-neutral-background-color-down:var(--spectrum-global-color-static-gray-900);--spectrum-semantic-neutral-background-color-key-focus:var(--spectrum-global-color-static-gray-800);--spectrum-semantic-presence-color-1:var(--spectrum-global-color-static-red-500);--spectrum-semantic-presence-color-2:var(--spectrum-global-color-static-orange-400);--spectrum-semantic-presence-color-3:var(--spectrum-global-color-static-yellow-400);--spectrum-semantic-presence-color-4:#4bcca2;--spectrum-semantic-presence-color-5:#00c7ff;--spectrum-semantic-presence-color-6:#008cb8;--spectrum-semantic-presence-color-7:#7e4bf3;--spectrum-semantic-presence-color-8:var(--spectrum-global-color-static-fuchsia-600);--spectrum-global-dimension-static-size-0:0px;--spectrum-global-dimension-static-size-10:1px;--spectrum-global-dimension-static-size-25:2px;--spectrum-global-dimension-static-size-40:3px;--spectrum-global-dimension-static-size-50:4px;--spectrum-global-dimension-static-size-65:5px;--spectrum-global-dimension-static-size-75:6px;--spectrum-global-dimension-static-size-85:7px;--spectrum-global-dimension-static-size-100:8px;--spectrum-global-dimension-static-size-115:9px;--spectrum-global-dimension-static-size-125:10px;--spectrum-global-dimension-static-size-130:11px;--spectrum-global-dimension-static-size-150:12px;--spectrum-global-dimension-static-size-160:13px;--spectrum-global-dimension-static-size-175:14px;--spectrum-global-dimension-static-size-200:16px;--spectrum-global-dimension-static-size-225:18px;--spectrum-global-dimension-static-size-250:20px;--spectrum-global-dimension-static-size-275:22px;--spectrum-global-dimension-static-size-300:24px;--spectrum-global-dimension-static-size-325:26px;--spectrum-global-dimension-static-size-400:32px;--spectrum-global-dimension-static-size-450:36px;--spectrum-global-dimension-static-size-500:40px;--spectrum-global-dimension-static-size-550:44px;--spectrum-global-dimension-static-size-600:48px;--spectrum-global-dimension-static-size-700:56px;--spectrum-global-dimension-static-size-800:64px;--spectrum-global-dimension-static-size-900:72px;--spectrum-global-dimension-static-size-1000:80px;--spectrum-global-dimension-static-size-1200:96px;--spectrum-global-dimension-static-size-1700:136px;--spectrum-global-dimension-static-size-2400:192px;--spectrum-global-dimension-static-size-2500:200px;--spectrum-global-dimension-static-size-2600:208px;--spectrum-global-dimension-static-size-2800:224px;--spectrum-global-dimension-static-size-3200:256px;--spectrum-global-dimension-static-size-3400:272px;--spectrum-global-dimension-static-size-3500:280px;--spectrum-global-dimension-static-size-3600:288px;--spectrum-global-dimension-static-size-3800:304px;--spectrum-global-dimension-static-size-4600:368px;--spectrum-global-dimension-static-size-5000:400px;--spectrum-global-dimension-static-size-6000:480px;--spectrum-global-dimension-static-size-16000:1280px;--spectrum-global-dimension-static-font-size-50:11px;--spectrum-global-dimension-static-font-size-75:12px;--spectrum-global-dimension-static-font-size-100:14px;--spectrum-global-dimension-static-font-size-150:15px;--spectrum-global-dimension-static-font-size-200:16px;--spectrum-global-dimension-static-font-size-300:18px;--spectrum-global-dimension-static-font-size-400:20px;--spectrum-global-dimension-static-font-size-500:22px;--spectrum-global-dimension-static-font-size-600:25px;--spectrum-global-dimension-static-font-size-700:28px;--spectrum-global-dimension-static-font-size-800:32px;--spectrum-global-dimension-static-font-size-900:36px;--spectrum-global-dimension-static-font-size-1000:40px;--spectrum-global-dimension-static-percent-50:50%;--spectrum-global-dimension-static-percent-100:100%;--spectrum-global-dimension-static-breakpoint-xsmall:304px;--spectrum-global-dimension-static-breakpoint-small:768px;--spectrum-global-dimension-static-breakpoint-medium:1280px;--spectrum-global-dimension-static-breakpoint-large:1768px;--spectrum-global-dimension-static-breakpoint-xlarge:2160px;--spectrum-global-dimension-static-grid-columns:12;--spectrum-global-dimension-static-grid-fluid-width:100%;--spectrum-global-dimension-static-grid-fixed-max-width:1280px;--spectrum-global-font-family-base:adobe-clean,"Source Sans Pro",-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Ubuntu,"Trebuchet MS","Lucida Grande",sans-serif;--spectrum-global-font-family-serif:adobe-clean-serif,"Source Serif Pro",Georgia,serif;--spectrum-global-font-family-code:"Source Code Pro",Monaco,monospace;--spectrum-global-font-weight-thin:100;--spectrum-global-font-weight-ultra-light:200;--spectrum-global-font-weight-light:300;--spectrum-global-font-weight-regular:400;--spectrum-global-font-weight-medium:500;--spectrum-global-font-weight-semi-bold:600;--spectrum-global-font-weight-bold:700;--spectrum-global-font-weight-extra-bold:800;--spectrum-global-font-weight-black:900;--spectrum-global-font-style-regular:normal;--spectrum-global-font-style-italic:italic;--spectrum-global-font-letter-spacing-none:0;--spectrum-global-font-letter-spacing-small:0.0125em;--spectrum-global-font-letter-spacing-han:0.05em;--spectrum-global-font-letter-spacing-medium:0.06em;--spectrum-global-font-line-height-large:1.7;--spectrum-global-font-line-height-medium:1.5;--spectrum-global-font-line-height-small:1.3;--spectrum-global-font-multiplier-25:0.25em;--spectrum-global-font-multiplier-75:0.75em;--spectrum-alias-border-size-thin:var(--spectrum-global-dimension-static-size-10);--spectrum-alias-border-size-thick:var(--spectrum-global-dimension-static-size-25);--spectrum-alias-border-size-thicker:var(--spectrum-global-dimension-static-size-50);--spectrum-alias-border-size-thickest:var(--spectrum-global-dimension-static-size-100);--spectrum-alias-border-offset-thin:var(--spectrum-global-dimension-static-size-25);--spectrum-alias-border-offset-thick:var(--spectrum-global-dimension-static-size-50);--spectrum-alias-border-offset-thicker:var(--spectrum-global-dimension-static-size-100);--spectrum-alias-border-offset-thickest:var(--spectrum-global-dimension-static-size-200);--spectrum-alias-grid-baseline:var(--spectrum-global-dimension-static-size-100);--spectrum-alias-grid-gutter-xsmall:var(--spectrum-global-dimension-static-size-200);--spectrum-alias-grid-gutter-small:var(--spectrum-global-dimension-static-size-300);--spectrum-alias-grid-gutter-medium:var(--spectrum-global-dimension-static-size-400);--spectrum-alias-grid-gutter-large:var(--spectrum-global-dimension-static-size-500);--spectrum-alias-grid-gutter-xlarge:var(--spectrum-global-dimension-static-size-600);--spectrum-alias-grid-margin-xsmall:var(--spectrum-global-dimension-static-size-200);--spectrum-alias-grid-margin-small:var(--spectrum-global-dimension-static-size-300);--spectrum-alias-grid-margin-medium:var(--spectrum-global-dimension-static-size-400);--spectrum-alias-grid-margin-large:var(--spectrum-global-dimension-static-size-500);--spectrum-alias-grid-margin-xlarge:var(--spectrum-global-dimension-static-size-600);--spectrum-alias-grid-layout-region-margin-bottom-xsmall:var(--spectrum-global-dimension-static-size-200);--spectrum-alias-grid-layout-region-margin-bottom-small:var(--spectrum-global-dimension-static-size-300);--spectrum-alias-grid-layout-region-margin-bottom-medium:var(--spectrum-global-dimension-static-size-400);--spectrum-alias-grid-layout-region-margin-bottom-large:var(--spectrum-global-dimension-static-size-500);--spectrum-alias-grid-layout-region-margin-bottom-xlarge:var(--spectrum-global-dimension-static-size-600);--spectrum-alias-radial-reaction-size-default:var(--spectrum-global-dimension-static-size-550);--spectrum-alias-font-family-ar:myriad-arabic,adobe-clean,"Source Sans Pro",-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Ubuntu,"Trebuchet MS","Lucida Grande",sans-serif;--spectrum-alias-font-family-he:myriad-hebrew,adobe-clean,"Source Sans Pro",-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Ubuntu,"Trebuchet MS","Lucida Grande",sans-serif;--spectrum-alias-font-family-zh:adobe-clean-han-traditional,source-han-traditional,"MingLiu","Heiti TC Light","sans-serif";--spectrum-alias-font-family-zhhans:adobe-clean-han-simplified-c,source-han-simplified-c,"SimSun","Heiti SC Light","sans-serif";--spectrum-alias-font-family-ko:adobe-clean-han-korean,source-han-korean,"Malgun Gothic","Apple Gothic","sans-serif";--spectrum-alias-font-family-ja:adobe-clean-han-japanese,source-han-japanese,"Yu Gothic","\\30E1 \\30A4 \\30EA \\30AA","\\30D2 \\30E9 \\30AE \\30CE \\89D2 \\30B4  Pro W3","Hiragino Kaku Gothic Pro W3","Osaka","\\FF2D \\FF33 \\FF30 \\30B4 \\30B7 \\30C3 \\30AF","MS PGothic","sans-serif";--spectrum-alias-font-family-condensed:adobe-clean-han-traditional,source-han-traditional,"MingLiu","Heiti TC Light",adobe-clean,"Source Sans Pro",-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Ubuntu,"Trebuchet MS","Lucida Grande",sans-serif;--spectrum-alias-body-text-font-family:var(--spectrum-global-font-family-base);--spectrum-alias-body-text-line-height:var(--spectrum-global-font-line-height-medium);--spectrum-alias-body-text-font-weight:var(--spectrum-global-font-weight-regular);--spectrum-alias-body-text-font-weight-strong:var(--spectrum-global-font-weight-bold);--spectrum-alias-button-text-line-height:var(--spectrum-global-font-line-height-small);--spectrum-alias-component-text-line-height:var(--spectrum-global-font-line-height-small);--spectrum-alias-han-component-text-line-height:var(--spectrum-global-font-line-height-medium);--spectrum-alias-heading-text-line-height:var(--spectrum-global-font-line-height-small);--spectrum-alias-heading-text-font-weight-regular:var(--spectrum-global-font-weight-bold);--spectrum-alias-heading-text-font-weight-regular-strong:var(--spectrum-global-font-weight-black);--spectrum-alias-heading-text-font-weight-quiet:var(--spectrum-global-font-weight-light);--spectrum-alias-heading-text-font-weight-quiet-strong:var(--spectrum-global-font-weight-bold);--spectrum-alias-heading-text-font-weight-strong:var(--spectrum-global-font-weight-black);--spectrum-alias-heading-text-font-weight-strong-strong:var(--spectrum-global-font-weight-black);--spectrum-alias-subheading-text-font-weight:var(--spectrum-global-font-weight-bold);--spectrum-alias-subheading-text-font-weight-strong:var(--spectrum-global-font-weight-black);--spectrum-alias-detail-text-font-weight:var(--spectrum-global-font-weight-bold);--spectrum-alias-detail-text-font-weight-light:var(--spectrum-global-font-weight-regular);--spectrum-alias-detail-text-font-weight-strong:var(--spectrum-global-font-weight-black);--spectrum-alias-serif-text-font-family:var(--spectrum-global-font-family-serif);--spectrum-alias-article-body-text-font-weight:var(--spectrum-global-font-weight-regular);--spectrum-alias-article-body-text-font-weight-strong:var(--spectrum-global-font-weight-black);--spectrum-alias-article-heading-text-font-weight:var(--spectrum-global-font-weight-bold);--spectrum-alias-article-heading-text-font-weight-strong:var(--spectrum-global-font-weight-black);--spectrum-alias-article-heading-text-font-weight-quiet:var(--spectrum-global-font-weight-regular);--spectrum-alias-article-heading-text-font-weight-quiet-strong:var(--spectrum-global-font-weight-bold);--spectrum-alias-article-subheading-text-font-weight:var(--spectrum-global-font-weight-bold);--spectrum-alias-article-subheading-text-font-weight-strong:var(--spectrum-global-font-weight-black);--spectrum-alias-article-detail-text-font-weight:var(--spectrum-global-font-weight-regular);--spectrum-alias-article-detail-text-font-weight-strong:var(--spectrum-global-font-weight-bold);--spectrum-alias-code-text-font-family:var(--spectrum-global-font-family-code);--spectrum-alias-han-heading-text-line-height:var(--spectrum-global-font-line-height-medium);--spectrum-alias-han-heading-text-font-weight-regular:var(--spectrum-global-font-weight-bold);--spectrum-alias-han-heading-text-font-weight-regular-emphasis:var(--spectrum-global-font-weight-extra-bold);--spectrum-alias-han-heading-text-font-weight-regular-strong:var(--spectrum-global-font-weight-black);--spectrum-alias-han-heading-text-font-weight-quiet-strong:var(--spectrum-global-font-weight-bold);--spectrum-alias-han-heading-text-font-weight-light:var(--spectrum-global-font-weight-light);--spectrum-alias-han-heading-text-font-weight-light-emphasis:var(--spectrum-global-font-weight-regular);--spectrum-alias-han-heading-text-font-weight-light-strong:var(--spectrum-global-font-weight-bold);--spectrum-alias-han-heading-text-font-weight-heavy:var(--spectrum-global-font-weight-black);--spectrum-alias-han-heading-text-font-weight-heavy-emphasis:var(--spectrum-global-font-weight-black);--spectrum-alias-han-heading-text-font-weight-heavy-strong:var(--spectrum-global-font-weight-black);--spectrum-alias-han-body-text-line-height:var(--spectrum-global-font-line-height-large);--spectrum-alias-han-body-text-font-weight-regular:var(--spectrum-global-font-weight-regular);--spectrum-alias-han-body-text-font-weight-emphasis:var(--spectrum-global-font-weight-bold);--spectrum-alias-han-body-text-font-weight-strong:var(--spectrum-global-font-weight-black);--spectrum-alias-han-subheading-text-font-weight-regular:var(--spectrum-global-font-weight-bold);--spectrum-alias-han-subheading-text-font-weight-emphasis:var(--spectrum-global-font-weight-extra-bold);--spectrum-alias-han-subheading-text-font-weight-strong:var(--spectrum-global-font-weight-black);--spectrum-alias-han-detail-text-font-weight:var(--spectrum-global-font-weight-regular);--spectrum-alias-han-detail-text-font-weight-emphasis:var(--spectrum-global-font-weight-bold);--spectrum-alias-han-detail-text-font-weight-strong:var(--spectrum-global-font-weight-black);--spectrum-alias-code-text-font-weight-regular:var(--spectrum-global-font-weight-regular);--spectrum-alias-code-text-font-weight-strong:var(--spectrum-global-font-weight-bold);--spectrum-alias-code-text-line-height:var(--spectrum-global-font-line-height-medium);--spectrum-alias-heading-margin-bottom:var(--spectrum-global-font-multiplier-25);--spectrum-alias-body-margin-bottom:var(--spectrum-global-font-multiplier-75);--spectrum-alias-focus-ring-gap:var(--spectrum-global-dimension-static-size-25);--spectrum-alias-focus-ring-size:var(--spectrum-global-dimension-static-size-25);--spectrum-alias-loupe-entry-animation-duration:var(--spectrum-global-animation-duration-300);--spectrum-alias-loupe-exit-animation-duration:var(--spectrum-global-animation-duration-300);--spectrum-alias-dropshadow-blur:var(--spectrum-global-dimension-size-50);--spectrum-alias-dropshadow-offset-y:var(--spectrum-global-dimension-size-10);--spectrum-alias-font-size-default:var(--spectrum-global-dimension-font-size-100);--spectrum-alias-layout-label-gap-size:var(--spectrum-global-dimension-size-100);--spectrum-alias-pill-button-text-size:var(--spectrum-global-dimension-font-size-100);--spectrum-alias-pill-button-text-baseline:var(--spectrum-global-dimension-static-size-150);--spectrum-alias-border-radius-xsmall:var(--spectrum-global-dimension-size-10);--spectrum-alias-border-radius-small:var(--spectrum-global-dimension-size-25);--spectrum-alias-border-radius-regular:var(--spectrum-global-dimension-size-50);--spectrum-alias-border-radius-medium:var(--spectrum-global-dimension-size-100);--spectrum-alias-border-radius-large:var(--spectrum-global-dimension-size-200);--spectrum-alias-single-line-height:var(--spectrum-global-dimension-size-400);--spectrum-alias-single-line-width:var(--spectrum-global-dimension-size-2400);--spectrum-alias-item-height-s:var(--spectrum-global-dimension-size-300);--spectrum-alias-item-height-m:var(--spectrum-global-dimension-size-400);--spectrum-alias-item-height-l:var(--spectrum-global-dimension-size-500);--spectrum-alias-item-height-xl:var(--spectrum-global-dimension-size-600);--spectrum-alias-item-rounded-border-radius-s:var(--spectrum-global-dimension-size-150);--spectrum-alias-item-rounded-border-radius-m:var(--spectrum-global-dimension-size-200);--spectrum-alias-item-rounded-border-radius-l:var(--spectrum-global-dimension-size-250);--spectrum-alias-item-rounded-border-radius-xl:var(--spectrum-global-dimension-size-300);--spectrum-alias-item-text-size-s:var(--spectrum-global-dimension-font-size-75);--spectrum-alias-item-text-size-m:var(--spectrum-global-dimension-font-size-100);--spectrum-alias-item-text-size-l:var(--spectrum-global-dimension-font-size-200);--spectrum-alias-item-text-size-xl:var(--spectrum-global-dimension-font-size-300);--spectrum-alias-item-text-padding-top-s:var(--spectrum-global-dimension-static-size-50);--spectrum-alias-item-text-padding-top-m:var(--spectrum-global-dimension-size-75);--spectrum-alias-item-text-padding-top-xl:var(--spectrum-global-dimension-size-150);--spectrum-alias-item-text-padding-bottom-m:var(--spectrum-global-dimension-size-115);--spectrum-alias-item-text-padding-bottom-l:var(--spectrum-global-dimension-size-130);--spectrum-alias-item-text-padding-bottom-xl:var(--spectrum-global-dimension-size-175);--spectrum-alias-item-icon-padding-top-s:var(--spectrum-global-dimension-size-50);--spectrum-alias-item-icon-padding-top-m:var(--spectrum-global-dimension-size-85);--spectrum-alias-item-icon-padding-top-l:var(--spectrum-global-dimension-size-125);--spectrum-alias-item-icon-padding-top-xl:var(--spectrum-global-dimension-size-160);--spectrum-alias-item-icon-padding-bottom-s:var(--spectrum-global-dimension-size-50);--spectrum-alias-item-icon-padding-bottom-m:var(--spectrum-global-dimension-size-85);--spectrum-alias-item-icon-padding-bottom-l:var(--spectrum-global-dimension-size-125);--spectrum-alias-item-icon-padding-bottom-xl:var(--spectrum-global-dimension-size-160);--spectrum-alias-item-mark-padding-top-s:var(--spectrum-global-dimension-size-40);--spectrum-alias-item-mark-padding-top-l:var(--spectrum-global-dimension-size-115);--spectrum-alias-item-mark-padding-top-xl:var(--spectrum-global-dimension-size-130);--spectrum-alias-item-mark-padding-bottom-s:var(--spectrum-global-dimension-size-40);--spectrum-alias-item-mark-padding-bottom-l:var(--spectrum-global-dimension-size-115);--spectrum-alias-item-mark-padding-bottom-xl:var(--spectrum-global-dimension-size-130);--spectrum-alias-item-padding-s:var(--spectrum-global-dimension-size-115);--spectrum-alias-item-padding-m:var(--spectrum-global-dimension-size-150);--spectrum-alias-item-padding-l:var(--spectrum-global-dimension-size-185);--spectrum-alias-item-padding-xl:var(--spectrum-global-dimension-size-225);--spectrum-alias-item-rounded-padding-s:var(--spectrum-global-dimension-size-150);--spectrum-alias-item-rounded-padding-m:var(--spectrum-global-dimension-size-200);--spectrum-alias-item-rounded-padding-l:var(--spectrum-global-dimension-size-250);--spectrum-alias-item-rounded-padding-xl:var(--spectrum-global-dimension-size-300);--spectrum-alias-item-icononly-padding-s:var(--spectrum-global-dimension-size-50);--spectrum-alias-item-icononly-padding-m:var(--spectrum-global-dimension-size-85);--spectrum-alias-item-icononly-padding-l:var(--spectrum-global-dimension-size-125);--spectrum-alias-item-icononly-padding-xl:var(--spectrum-global-dimension-size-160);--spectrum-alias-item-workflow-padding-left-s:var(--spectrum-global-dimension-size-85);--spectrum-alias-item-workflow-padding-left-l:var(--spectrum-global-dimension-size-160);--spectrum-alias-item-workflow-padding-left-xl:var(--spectrum-global-dimension-size-185);--spectrum-alias-item-rounded-workflow-padding-left-s:var(--spectrum-global-dimension-size-125);--spectrum-alias-item-rounded-workflow-padding-left-l:var(--spectrum-global-dimension-size-225);--spectrum-alias-item-mark-padding-left-s:var(--spectrum-global-dimension-size-85);--spectrum-alias-item-mark-padding-left-l:var(--spectrum-global-dimension-size-160);--spectrum-alias-item-mark-padding-left-xl:var(--spectrum-global-dimension-size-185);--spectrum-alias-item-control-1-size-s:var(--spectrum-global-dimension-static-size-100);--spectrum-alias-item-control-1-size-m:var(--spectrum-global-dimension-size-100);--spectrum-alias-item-control-2-size-m:var(--spectrum-global-dimension-size-175);--spectrum-alias-item-control-2-size-l:var(--spectrum-global-dimension-size-200);--spectrum-alias-item-control-2-size-xl:var(--spectrum-global-dimension-size-225);--spectrum-alias-item-control-2-size-xxl:var(--spectrum-global-dimension-size-250);--spectrum-alias-item-control-3-height-m:var(--spectrum-global-dimension-size-175);--spectrum-alias-item-control-3-height-l:var(--spectrum-global-dimension-size-200);--spectrum-alias-item-control-3-height-xl:var(--spectrum-global-dimension-size-225);--spectrum-alias-item-mark-size-s:var(--spectrum-global-dimension-size-225);--spectrum-alias-item-mark-size-l:var(--spectrum-global-dimension-size-275);--spectrum-alias-item-mark-size-xl:var(--spectrum-global-dimension-size-325);--spectrum-alias-workflow-icon-size-s:var(--spectrum-global-dimension-size-200);--spectrum-alias-workflow-icon-size-m:var(--spectrum-global-dimension-size-225);--spectrum-alias-workflow-icon-size-xl:var(--spectrum-global-dimension-size-275);--spectrum-alias-ui-icon-alert-size-75:var(--spectrum-global-dimension-size-200);--spectrum-alias-ui-icon-alert-size-100:var(--spectrum-global-dimension-size-225);--spectrum-alias-ui-icon-alert-size-200:var(--spectrum-global-dimension-size-250);--spectrum-alias-ui-icon-alert-size-300:var(--spectrum-global-dimension-size-275);--spectrum-alias-ui-icon-triplegripper-size-100-height:var(--spectrum-global-dimension-size-100);--spectrum-alias-ui-icon-doublegripper-size-100-width:var(--spectrum-global-dimension-size-200);--spectrum-alias-ui-icon-singlegripper-size-100-width:var(--spectrum-global-dimension-size-300);--spectrum-alias-ui-icon-cornertriangle-size-75:var(--spectrum-global-dimension-size-65);--spectrum-alias-ui-icon-cornertriangle-size-200:var(--spectrum-global-dimension-size-75);--spectrum-alias-ui-icon-asterisk-size-75:var(--spectrum-global-dimension-static-size-100);--spectrum-alias-ui-icon-asterisk-size-100:var(--spectrum-global-dimension-size-100);--spectrum-alias-item-control-gap-s:var(--spectrum-global-dimension-size-115);--spectrum-alias-item-control-gap-m:var(--spectrum-global-dimension-size-125);--spectrum-alias-item-control-gap-l:var(--spectrum-global-dimension-size-130);--spectrum-alias-item-control-gap-xl:var(--spectrum-global-dimension-size-160);--spectrum-alias-item-workflow-icon-gap-s:var(--spectrum-global-dimension-size-85);--spectrum-alias-item-workflow-icon-gap-m:var(--spectrum-global-dimension-size-100);--spectrum-alias-item-workflow-icon-gap-l:var(--spectrum-global-dimension-size-115);--spectrum-alias-item-workflow-icon-gap-xl:var(--spectrum-global-dimension-size-125);--spectrum-alias-item-mark-gap-s:var(--spectrum-global-dimension-size-85);--spectrum-alias-item-mark-gap-m:var(--spectrum-global-dimension-size-100);--spectrum-alias-item-mark-gap-l:var(--spectrum-global-dimension-size-115);--spectrum-alias-item-mark-gap-xl:var(--spectrum-global-dimension-size-125);--spectrum-alias-item-ui-icon-gap-s:var(--spectrum-global-dimension-size-85);--spectrum-alias-item-ui-icon-gap-m:var(--spectrum-global-dimension-size-100);--spectrum-alias-item-ui-icon-gap-l:var(--spectrum-global-dimension-size-115);--spectrum-alias-item-ui-icon-gap-xl:var(--spectrum-global-dimension-size-125);--spectrum-alias-item-clearbutton-gap-s:var(--spectrum-global-dimension-size-50);--spectrum-alias-item-clearbutton-gap-m:var(--spectrum-global-dimension-size-85);--spectrum-alias-item-clearbutton-gap-l:var(--spectrum-global-dimension-size-125);--spectrum-alias-item-clearbutton-gap-xl:var(--spectrum-global-dimension-size-150);--spectrum-alias-heading-xxxl-text-size:var(--spectrum-global-dimension-font-size-1300);--spectrum-alias-heading-han-xxxl-text-size:var(--spectrum-global-dimension-font-size-1300);--spectrum-alias-heading-han-xxxl-margin-top:var(--spectrum-global-dimension-font-size-1200);--spectrum-alias-heading-xxxl-margin-top:var(--spectrum-global-dimension-font-size-1200);--spectrum-alias-heading-xxl-text-size:var(--spectrum-global-dimension-font-size-1100);--spectrum-alias-heading-xxl-margin-top:var(--spectrum-global-dimension-font-size-900);--spectrum-alias-heading-han-xxl-text-size:var(--spectrum-global-dimension-font-size-900);--spectrum-alias-heading-han-xxl-margin-top:var(--spectrum-global-dimension-font-size-800);--spectrum-alias-heading-xl-text-size:var(--spectrum-global-dimension-font-size-900);--spectrum-alias-heading-xl-margin-top:var(--spectrum-global-dimension-font-size-800);--spectrum-alias-heading-han-xl-text-size:var(--spectrum-global-dimension-font-size-800);--spectrum-alias-heading-han-xl-margin-top:var(--spectrum-global-dimension-font-size-700);--spectrum-alias-heading-l-text-size:var(--spectrum-global-dimension-font-size-700);--spectrum-alias-heading-l-margin-top:var(--spectrum-global-dimension-font-size-600);--spectrum-alias-heading-han-l-text-size:var(--spectrum-global-dimension-font-size-600);--spectrum-alias-heading-han-l-margin-top:var(--spectrum-global-dimension-font-size-500);--spectrum-alias-heading-m-text-size:var(--spectrum-global-dimension-font-size-500);--spectrum-alias-heading-m-margin-top:var(--spectrum-global-dimension-font-size-400);--spectrum-alias-heading-han-m-text-size:var(--spectrum-global-dimension-font-size-400);--spectrum-alias-heading-han-m-margin-top:var(--spectrum-global-dimension-font-size-300);--spectrum-alias-heading-s-text-size:var(--spectrum-global-dimension-font-size-300);--spectrum-alias-heading-s-margin-top:var(--spectrum-global-dimension-font-size-200);--spectrum-alias-heading-xs-text-size:var(--spectrum-global-dimension-font-size-200);--spectrum-alias-heading-xs-margin-top:var(--spectrum-global-dimension-font-size-100);--spectrum-alias-heading-xxs-text-size:var(--spectrum-global-dimension-font-size-100);--spectrum-alias-heading-xxs-margin-top:var(--spectrum-global-dimension-font-size-75);--spectrum-alias-avatar-size-50:var(--spectrum-global-dimension-size-200);--spectrum-alias-avatar-size-75:var(--spectrum-global-dimension-size-225);--spectrum-alias-avatar-size-200:var(--spectrum-global-dimension-size-275);--spectrum-alias-avatar-size-300:var(--spectrum-global-dimension-size-325);--spectrum-alias-avatar-size-500:var(--spectrum-global-dimension-size-400);--spectrum-alias-avatar-size-700:var(--spectrum-global-dimension-size-500);--spectrum-alias-background-color-default:var(--spectrum-global-color-gray-100);--spectrum-alias-background-color-disabled:var(--spectrum-global-color-gray-200);--spectrum-alias-background-color-transparent:transparent;--spectrum-alias-background-color-over-background-down:hsla(0,0%,100%,0.2);--spectrum-alias-background-color-quickactions-overlay:rgba(0,0,0,0.2);--spectrum-alias-placeholder-text-color:var(--spectrum-global-color-gray-800);--spectrum-alias-placeholder-text-color-hover:var(--spectrum-global-color-gray-900);--spectrum-alias-placeholder-text-color-down:var(--spectrum-global-color-gray-900);--spectrum-alias-placeholder-text-color-selected:var(--spectrum-global-color-gray-800);--spectrum-alias-label-text-color:var(--spectrum-global-color-gray-700);--spectrum-alias-text-color:var(--spectrum-global-color-gray-800);--spectrum-alias-text-color-hover:var(--spectrum-global-color-gray-900);--spectrum-alias-text-color-down:var(--spectrum-global-color-gray-900);--spectrum-alias-text-color-key-focus:var(--spectrum-global-color-blue-600);--spectrum-alias-text-color-mouse-focus:var(--spectrum-global-color-blue-600);--spectrum-alias-text-color-disabled:var(--spectrum-global-color-gray-500);--spectrum-alias-text-color-invalid:var(--spectrum-global-color-red-500);--spectrum-alias-text-color-selected:var(--spectrum-global-color-blue-600);--spectrum-alias-text-color-selected-neutral:var(--spectrum-global-color-gray-900);--spectrum-alias-text-color-over-background:var(--spectrum-global-color-static-white);--spectrum-alias-text-color-over-background-disabled:hsla(0,0%,100%,0.2);--spectrum-alias-heading-text-color:var(--spectrum-global-color-gray-900);--spectrum-alias-border-color:var(--spectrum-global-color-gray-400);--spectrum-alias-border-color-hover:var(--spectrum-global-color-gray-500);--spectrum-alias-border-color-down:var(--spectrum-global-color-gray-500);--spectrum-alias-border-color-focus:var(--spectrum-global-color-blue-400);--spectrum-alias-border-color-mouse-focus:var(--spectrum-global-color-blue-500);--spectrum-alias-border-color-disabled:var(--spectrum-global-color-gray-200);--spectrum-alias-border-color-extralight:var(--spectrum-global-color-gray-100);--spectrum-alias-border-color-light:var(--spectrum-global-color-gray-200);--spectrum-alias-border-color-mid:var(--spectrum-global-color-gray-300);--spectrum-alias-border-color-dark:var(--spectrum-global-color-gray-400);--spectrum-alias-border-color-darker-default:var(--spectrum-global-color-gray-600);--spectrum-alias-border-color-darker-hover:var(--spectrum-global-color-gray-900);--spectrum-alias-border-color-darker-down:var(--spectrum-global-color-gray-900);--spectrum-alias-border-color-transparent:transparent;--spectrum-alias-border-color-translucent-dark:rgba(0,0,0,0.05);--spectrum-alias-border-color-translucent-darker:rgba(0,0,0,0.1);--spectrum-alias-focus-color:var(--spectrum-global-color-blue-400);--spectrum-alias-focus-ring-color:var(--spectrum-alias-focus-color);--spectrum-alias-track-color-default:var(--spectrum-global-color-gray-300);--spectrum-alias-track-color-disabled:var(--spectrum-global-color-gray-300);--spectrum-alias-track-color-over-background:hsla(0,0%,100%,0.2);--spectrum-alias-icon-color:var(--spectrum-global-color-gray-700);--spectrum-alias-icon-color-over-background:var(--spectrum-global-color-static-white);--spectrum-alias-icon-color-hover:var(--spectrum-global-color-gray-900);--spectrum-alias-icon-color-down:var(--spectrum-global-color-gray-900);--spectrum-alias-icon-color-focus:var(--spectrum-global-color-gray-900);--spectrum-alias-icon-color-disabled:var(--spectrum-global-color-gray-400);--spectrum-alias-icon-color-over-background-disabled:hsla(0,0%,100%,0.2);--spectrum-alias-icon-color-selected-neutral:var(--spectrum-global-color-gray-900);--spectrum-alias-icon-color-selected:var(--spectrum-global-color-blue-500);--spectrum-alias-icon-color-selected-hover:var(--spectrum-global-color-blue-600);--spectrum-alias-icon-color-selected-down:var(--spectrum-global-color-blue-700);--spectrum-alias-icon-color-selected-focus:var(--spectrum-global-color-blue-600);--spectrum-alias-image-opacity-disabled:var(--spectrum-global-color-opacity-30);--spectrum-alias-toolbar-background-color:var(--spectrum-global-color-gray-100);--spectrum-alias-colorhandle-outer-border-color:rgba(0,0,0,0.42);--spectrum-alias-code-highlight-color-default:var(--spectrum-global-color-gray-800);--spectrum-alias-code-highlight-color-background:var(--spectrum-global-color-gray-75);--spectrum-alias-code-highlight-color-keyword:var(--spectrum-global-color-fuchsia-600);--spectrum-alias-code-highlight-color-section:var(--spectrum-global-color-red-600);--spectrum-alias-code-highlight-color-literal:var(--spectrum-global-color-blue-600);--spectrum-alias-code-highlight-color-attribute:var(--spectrum-global-color-seafoam-600);--spectrum-alias-code-highlight-color-class:var(--spectrum-global-color-magenta-600);--spectrum-alias-code-highlight-color-variable:var(--spectrum-global-color-purple-600);--spectrum-alias-code-highlight-color-title:var(--spectrum-global-color-indigo-600);--spectrum-alias-code-highlight-color-string:var(--spectrum-global-color-fuchsia-600);--spectrum-alias-code-highlight-color-function:var(--spectrum-global-color-blue-600);--spectrum-alias-code-highlight-color-comment:var(--spectrum-global-color-gray-700);--spectrum-alias-categorical-color-1:var(--spectrum-global-color-static-seafoam-200);--spectrum-alias-categorical-color-2:var(--spectrum-global-color-static-indigo-700);--spectrum-alias-categorical-color-3:var(--spectrum-global-color-static-orange-500);--spectrum-alias-categorical-color-4:var(--spectrum-global-color-static-magenta-500);--spectrum-alias-categorical-color-5:var(--spectrum-global-color-static-indigo-200);--spectrum-alias-categorical-color-6:var(--spectrum-global-color-static-celery-200);--spectrum-alias-categorical-color-7:var(--spectrum-global-color-static-blue-500);--spectrum-alias-categorical-color-8:var(--spectrum-global-color-static-purple-800);--spectrum-alias-categorical-color-9:var(--spectrum-global-color-static-yellow-500);--spectrum-alias-categorical-color-10:var(--spectrum-global-color-static-orange-700);--spectrum-alias-categorical-color-11:var(--spectrum-global-color-static-green-600);--spectrum-alias-categorical-color-12:var(--spectrum-global-color-static-chartreuse-300);--spectrum-alias-categorical-color-13:var(--spectrum-global-color-static-blue-200);--spectrum-alias-categorical-color-14:var(--spectrum-global-color-static-fuchsia-500);--spectrum-alias-categorical-color-15:var(--spectrum-global-color-static-magenta-200);--spectrum-alias-categorical-color-16:var(--spectrum-global-color-static-yellow-200);font-family:var(--spectrum-alias-body-text-font-family);font-size:var(--spectrum-alias-font-size-default)}:host:lang(ar),:root:lang(ar){font-family:var(--spectrum-alias-font-family-ar)}:host:lang(he),:root:lang(he){font-family:var(--spectrum-alias-font-family-he)}:host:lang(zh-Hans),:root:lang(zh-Hans){font-family:var(--spectrum-alias-font-family-zhhans)}:host:lang(zh),:host:lang(zh-Hant),:root:lang(zh),:root:lang(zh-Hant){font-family:var(--spectrum-alias-font-family-zh)}:host:lang(ko),:root:lang(ko){font-family:var(--spectrum-alias-font-family-ko)}:host:lang(ja),:root:lang(ja){font-family:var(--spectrum-alias-font-family-ja)}:host{display:block}#scale,#theme{width:100%;height:100%}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const ScaleValues = ['medium', 'large'];
    const ColorValues = ['light', 'lightest', 'dark', 'darkest'];
    class Theme extends HTMLElement {
        constructor() {
            super();
            this.hasAdoptedStyles = false;
            this._color = '';
            this._scale = '';
            this.trackedChildren = new Set();
            this.attachShadow({ mode: 'open' });
            const node = document.importNode(Theme.template.content, true);
            this.shadowRoot.appendChild(node);
            this.shouldAdoptStyles();
            this.addEventListener('sp-query-theme', this.onQueryTheme);
        }
        static get observedAttributes() {
            return ['color', 'scale'];
        }
        attributeChangedCallback(attrName, old, value) {
            if (old === value) {
                return;
            }
            if (attrName === 'color') {
                this.color = value;
            }
            else if (attrName === 'scale') {
                this.scale = value;
            }
        }
        requestUpdate() {
            this.hasAdoptedStyles = false;
            if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {
                window.ShadyCSS.styleElement(this);
            }
            else {
                this.shouldAdoptStyles();
            }
        }
        get core() {
            return 'core';
        }
        get color() {
            const themeFragments = Theme.themeFragmentsByKind.get('color');
            const { name } = (themeFragments && themeFragments.get('default')) || {};
            return this._color || name || '';
        }
        set color(newValue) {
            if (newValue === this._color)
                return;
            const color = !!newValue && ColorValues.includes(newValue)
                ? newValue
                : this.color;
            if (color !== this._color) {
                this._color = color;
                this.requestUpdate();
            }
            if (color) {
                this.setAttribute('color', color);
            }
            else {
                this.removeAttribute('color');
            }
        }
        get scale() {
            const themeFragments = Theme.themeFragmentsByKind.get('scale');
            const { name } = (themeFragments && themeFragments.get('default')) || {};
            return this._scale || name || '';
        }
        set scale(newValue) {
            if (newValue === this._scale)
                return;
            const scale = !!newValue && ScaleValues.includes(newValue)
                ? newValue
                : this.scale;
            if (scale !== this._scale) {
                this._scale = scale;
                this.requestUpdate();
            }
            if (scale) {
                this.setAttribute('scale', scale);
            }
            else {
                this.removeAttribute('scale');
            }
        }
        get styles() {
            const themeKinds = [
                ...Theme.themeFragmentsByKind.keys(),
            ];
            const styles = themeKinds.reduce((acc, kind) => {
                const kindFragments = Theme.themeFragmentsByKind.get(kind);
                const { [kind]: name } = this;
                const currentStyles = kindFragments.get(name);
                if (currentStyles) {
                    acc.push(currentStyles.styles);
                }
                return acc;
            }, []);
            return [...styles];
        }
        static get template() {
            if (!this.templateElement) {
                this.templateElement = document.createElement('template');
                this.templateElement.innerHTML = '<slot></slot>';
            }
            return this.templateElement;
        }
        onQueryTheme(event) {
            if (event.defaultPrevented) {
                return;
            }
            event.preventDefault();
            const { detail: theme } = event;
            theme.color = this.color || undefined;
            theme.scale = this.scale || undefined;
        }
        connectedCallback() {
            this.shouldAdoptStyles();
            // Note, first update/render handles styleElement so we only call this if
            // connected after first update.
            /* c8 ignore next 3 */
            if (window.ShadyCSS !== undefined) {
                window.ShadyCSS.styleElement(this);
            }
            // Add `this` to the instances array.
            Theme.instances.add(this);
            const manageDir = () => {
                const { dir } = this;
                this.trackedChildren.forEach((el) => {
                    el.setAttribute('dir', dir === 'rtl' ? dir : 'ltr');
                });
            };
            if (!this.observer) {
                this.observer = new MutationObserver(manageDir);
            }
            this.observer.observe(this, {
                attributes: true,
                attributeFilter: ['dir'],
            });
            if (!this.hasAttribute('dir')) {
                let dirParent = (this.assignedSlot ||
                    this.parentNode);
                while (dirParent !== document.documentElement &&
                    !(dirParent instanceof Theme)) {
                    dirParent = (dirParent.assignedSlot || // step into the shadow DOM of the parent of a slotted node
                        dirParent.parentNode || // DOM Element detected
                        dirParent.host);
                }
                this.dir = dirParent.dir === 'rtl' ? dirParent.dir : 'ltr';
            }
            requestAnimationFrame(() => manageDir());
        }
        disconnectedCallback() {
            // Remove `this` to the instances array.
            Theme.instances.delete(this);
            this.observer.disconnect();
        }
        startManagingContentDirection(el) {
            this.trackedChildren.add(el);
        }
        stopManagingContentDirection(el) {
            this.trackedChildren.delete(el);
        }
        shouldAdoptStyles() {
            /* c8 ignore next 3 */
            if (!this.hasAdoptedStyles) {
                this.adoptStyles();
            }
        }
        get expectedFragments() {
            // color, scale and core
            return 3;
        }
        adoptStyles() {
            const styles = this.styles; // No test coverage on Edge
            if (styles.length < this.expectedFragments)
                return;
            // There are three separate cases here based on Shadow DOM support.
            // (1) shadowRoot polyfilled: use ShadyCSS
            // (2) shadowRoot.adoptedStyleSheets available: use it.
            // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after
            // rendering
            /* c8 ignore next */ if (window.ShadyCSS !== undefined &&
                !window.ShadyCSS.nativeShadow &&
                window.ShadyCSS.ScopingShim) {
                // For browsers using the shim, there seems to be one set of
                // processed styles per template, so it is hard to nest styles. So,
                // for those, we load in all style fragments and then switch using a
                // host selector (e.g. :host([color='dark']))
                const fragmentCSS = [];
                for (const [kind, fragments] of Theme.themeFragmentsByKind) {
                    for (const [name, { styles }] of fragments) {
                        if (name === 'default')
                            continue;
                        let cssText = styles.cssText;
                        if (!Theme.defaultFragments.has(name)) {
                            cssText = cssText.replace(':host', `:host([${kind}='${name}'])`);
                        }
                        fragmentCSS.push(cssText);
                    }
                }
                window.ShadyCSS.ScopingShim.prepareAdoptedCssText(fragmentCSS, this.localName);
                window.ShadyCSS.prepareTemplate(Theme.template, this.localName);
            }
            else if (supportsAdoptingStyleSheets) {
                const styleSheets = [];
                for (const style of styles) {
                    styleSheets.push(style.styleSheet);
                }
                this.shadowRoot.adoptedStyleSheets = styleSheets;
            }
            else {
                const styleNodes = this.shadowRoot.querySelectorAll('style');
                styleNodes.forEach((element) => element.remove());
                styles.forEach((s) => {
                    const style = document.createElement('style');
                    style.textContent = s.cssText;
                    this.shadowRoot.appendChild(style);
                });
            }
            this.hasAdoptedStyles = true;
        }
        static registerThemeFragment(name, kind, styles) {
            const fragmentMap = Theme.themeFragmentsByKind.get(kind) || new Map();
            if (fragmentMap.size === 0) {
                Theme.themeFragmentsByKind.set(kind, fragmentMap);
                // we're adding our first fragment for this kind, set as default
                fragmentMap.set('default', { name, styles });
                Theme.defaultFragments.add(name);
            }
            fragmentMap.set(name, { name, styles });
            Theme.instances.forEach((instance) => instance.shouldAdoptStyles());
        }
    }
    Theme.themeFragmentsByKind = new Map();
    Theme.defaultFragments = new Set(['core']);
    Theme.instances = new Set();
    Theme.registerThemeFragment('core', 'core', styles$5);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-theme', Theme);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$4 = css `
:host,:root{--spectrum-global-color-status:Verified;--spectrum-global-color-version:5.1;--spectrum-global-color-celery-400:#44b556;--spectrum-global-color-celery-500:#3da74e;--spectrum-global-color-celery-600:#379947;--spectrum-global-color-celery-700:#318b40;--spectrum-global-color-chartreuse-400:#85d044;--spectrum-global-color-chartreuse-500:#7cc33f;--spectrum-global-color-chartreuse-600:#73b53a;--spectrum-global-color-chartreuse-700:#6aa834;--spectrum-global-color-yellow-400:#dfbf00;--spectrum-global-color-yellow-500:#d2b200;--spectrum-global-color-yellow-600:#c4a600;--spectrum-global-color-yellow-700:#b79900;--spectrum-global-color-magenta-400:#d83790;--spectrum-global-color-magenta-500:#ce2783;--spectrum-global-color-magenta-600:#bc1c74;--spectrum-global-color-magenta-700:#ae0e66;--spectrum-global-color-fuchsia-400:#c038cc;--spectrum-global-color-fuchsia-500:#b130bd;--spectrum-global-color-fuchsia-600:#a228ad;--spectrum-global-color-fuchsia-700:#93219e;--spectrum-global-color-purple-400:#9256d9;--spectrum-global-color-purple-500:#864ccc;--spectrum-global-color-purple-600:#7a42bf;--spectrum-global-color-purple-700:#6f38b1;--spectrum-global-color-indigo-400:#6767ec;--spectrum-global-color-indigo-500:#5c5ce0;--spectrum-global-color-indigo-600:#5151d3;--spectrum-global-color-indigo-700:#4646c6;--spectrum-global-color-seafoam-400:#1b959a;--spectrum-global-color-seafoam-500:#16878c;--spectrum-global-color-seafoam-600:#0f797d;--spectrum-global-color-seafoam-700:#096c6f;--spectrum-global-color-red-400:#e34850;--spectrum-global-color-red-500:#d7373f;--spectrum-global-color-red-600:#c9252d;--spectrum-global-color-red-700:#bb121a;--spectrum-global-color-orange-400:#e68619;--spectrum-global-color-orange-500:#da7b11;--spectrum-global-color-orange-600:#cb6f10;--spectrum-global-color-orange-700:#bd640d;--spectrum-global-color-green-400:#2d9d78;--spectrum-global-color-green-500:#268e6c;--spectrum-global-color-green-600:#12805c;--spectrum-global-color-green-700:#107154;--spectrum-global-color-blue-400:#2680eb;--spectrum-global-color-blue-500:#1473e6;--spectrum-global-color-blue-600:#0d66d0;--spectrum-global-color-blue-700:#095aba;--spectrum-global-color-gray-50:#fff;--spectrum-global-color-gray-75:#fafafa;--spectrum-global-color-gray-100:#f5f5f5;--spectrum-global-color-gray-200:#eaeaea;--spectrum-global-color-gray-300:#e1e1e1;--spectrum-global-color-gray-400:#cacaca;--spectrum-global-color-gray-500:#b3b3b3;--spectrum-global-color-gray-600:#8e8e8e;--spectrum-global-color-gray-700:#6e6e6e;--spectrum-global-color-gray-800:#4b4b4b;--spectrum-global-color-gray-900:#2c2c2c;--spectrum-alias-background-color-primary:var(--spectrum-global-color-gray-50);--spectrum-alias-background-color-secondary:var(--spectrum-global-color-gray-100);--spectrum-alias-background-color-tertiary:var(--spectrum-global-color-gray-300);--spectrum-alias-background-color-modal-overlay:rgba(0,0,0,0.4);--spectrum-alias-dropshadow-color:rgba(0,0,0,0.15);--spectrum-alias-background-color-hover-overlay:rgba(44,44,44,0.04);--spectrum-alias-highlight-hover:rgba(44,44,44,0.06);--spectrum-alias-highlight-active:rgba(44,44,44,0.1);--spectrum-alias-highlight-selected:rgba(20,115,230,0.1);--spectrum-alias-highlight-selected-hover:rgba(20,115,230,0.2);--spectrum-alias-text-highlight-color:rgba(20,115,230,0.2);--spectrum-alias-background-color-quickactions:hsla(0,0%,96.1%,0.9);--spectrum-alias-border-color-selected:var(--spectrum-global-color-blue-500);--spectrum-alias-radial-reaction-color-default:rgba(75,75,75,0.6);--spectrum-alias-pasteboard-background-color:var(--spectrum-global-color-gray-300);--spectrum-alias-appframe-border-color:var(--spectrum-global-color-gray-300);--spectrum-alias-appframe-separator-color:var(--spectrum-global-color-gray-300);--spectrum-colorarea-border-color:rgba(44,44,44,0.1);--spectrum-colorarea-border-color-hover:rgba(44,44,44,0.1);--spectrum-colorarea-border-color-down:rgba(44,44,44,0.1);--spectrum-colorarea-border-color-key-focus:rgba(44,44,44,0.1);--spectrum-colorslider-border-color:rgba(44,44,44,0.1);--spectrum-colorslider-border-color-hover:rgba(44,44,44,0.1);--spectrum-colorslider-border-color-down:rgba(44,44,44,0.1);--spectrum-colorslider-border-color-key-focus:rgba(44,44,44,0.1);--spectrum-colorslider-vertical-border-color:rgba(44,44,44,0.1);--spectrum-colorslider-vertical-border-color-hover:rgba(44,44,44,0.1);--spectrum-colorslider-vertical-border-color-down:rgba(44,44,44,0.1);--spectrum-colorslider-vertical-border-color-key-focus:rgba(44,44,44,0.1);--spectrum-colorwheel-border-color:rgba(44,44,44,0.1);--spectrum-colorwheel-border-color-hover:rgba(44,44,44,0.1);--spectrum-colorwheel-border-color-down:rgba(44,44,44,0.1);--spectrum-colorwheel-border-color-key-focus:rgba(44,44,44,0.1);--spectrum-miller-column-item-background-color-selected:rgba(20,115,230,0.1);--spectrum-miller-column-item-background-color-selected-hover:rgba(20,115,230,0.2);--spectrum-well-background-color:rgba(75,75,75,0.02);--spectrum-well-border-color:rgba(44,44,44,0.05)}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    Theme.registerThemeFragment('light', 'color', styles$4);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$3 = css `
:host,:root{--spectrum-global-color-status:Verified;--spectrum-global-color-version:5.1;--spectrum-global-color-celery-400:#44b556;--spectrum-global-color-celery-500:#4bc35f;--spectrum-global-color-celery-600:#51d267;--spectrum-global-color-celery-700:#58e06f;--spectrum-global-color-chartreuse-400:#85d044;--spectrum-global-color-chartreuse-500:#8ede49;--spectrum-global-color-chartreuse-600:#9bec54;--spectrum-global-color-chartreuse-700:#a3f858;--spectrum-global-color-yellow-400:#dfbf00;--spectrum-global-color-yellow-500:#edcc00;--spectrum-global-color-yellow-600:#fad900;--spectrum-global-color-yellow-700:#ffe22e;--spectrum-global-color-magenta-400:#d83790;--spectrum-global-color-magenta-500:#e2499d;--spectrum-global-color-magenta-600:#ec5aaa;--spectrum-global-color-magenta-700:#f56bb7;--spectrum-global-color-fuchsia-400:#c038cc;--spectrum-global-color-fuchsia-500:#cf3edc;--spectrum-global-color-fuchsia-600:#d951e5;--spectrum-global-color-fuchsia-700:#e366ef;--spectrum-global-color-purple-400:#9256d9;--spectrum-global-color-purple-500:#9d64e1;--spectrum-global-color-purple-600:#a873e9;--spectrum-global-color-purple-700:#b483f0;--spectrum-global-color-indigo-400:#6767ec;--spectrum-global-color-indigo-500:#7575f1;--spectrum-global-color-indigo-600:#8282f6;--spectrum-global-color-indigo-700:#9090fa;--spectrum-global-color-seafoam-400:#1b959a;--spectrum-global-color-seafoam-500:#20a3a8;--spectrum-global-color-seafoam-600:#23b2b8;--spectrum-global-color-seafoam-700:#26c0c7;--spectrum-global-color-red-400:#e34850;--spectrum-global-color-red-500:#ec5b62;--spectrum-global-color-red-600:#f76d74;--spectrum-global-color-red-700:#ff7b82;--spectrum-global-color-orange-400:#e68619;--spectrum-global-color-orange-500:#f29423;--spectrum-global-color-orange-600:#f9a43f;--spectrum-global-color-orange-700:#ffb55b;--spectrum-global-color-green-400:#2d9d78;--spectrum-global-color-green-500:#33ab84;--spectrum-global-color-green-600:#39b990;--spectrum-global-color-green-700:#3fc89c;--spectrum-global-color-blue-400:#2680eb;--spectrum-global-color-blue-500:#378ef0;--spectrum-global-color-blue-600:#4b9cf5;--spectrum-global-color-blue-700:#5aa9fa;--spectrum-global-color-gray-50:#252525;--spectrum-global-color-gray-75:#2f2f2f;--spectrum-global-color-gray-100:#323232;--spectrum-global-color-gray-200:#3e3e3e;--spectrum-global-color-gray-300:#4a4a4a;--spectrum-global-color-gray-400:#5a5a5a;--spectrum-global-color-gray-500:#6e6e6e;--spectrum-global-color-gray-600:#909090;--spectrum-global-color-gray-700:#b9b9b9;--spectrum-global-color-gray-800:#e3e3e3;--spectrum-global-color-gray-900:#fff;--spectrum-alias-background-color-primary:var(--spectrum-global-color-gray-100);--spectrum-alias-background-color-secondary:var(--spectrum-global-color-gray-75);--spectrum-alias-background-color-tertiary:var(--spectrum-global-color-gray-50);--spectrum-alias-background-color-modal-overlay:rgba(0,0,0,0.5);--spectrum-alias-dropshadow-color:rgba(0,0,0,0.5);--spectrum-alias-background-color-hover-overlay:hsla(0,0%,100%,0.06);--spectrum-alias-highlight-hover:hsla(0,0%,100%,0.07);--spectrum-alias-highlight-active:hsla(0,0%,100%,0.1);--spectrum-alias-highlight-selected:rgba(55,142,240,0.15);--spectrum-alias-highlight-selected-hover:rgba(55,142,240,0.25);--spectrum-alias-text-highlight-color:rgba(55,142,240,0.25);--spectrum-alias-background-color-quickactions:rgba(50,50,50,0.9);--spectrum-alias-border-color-selected:var(--spectrum-global-color-blue-600);--spectrum-alias-radial-reaction-color-default:hsla(0,0%,89%,0.6);--spectrum-alias-pasteboard-background-color:var(--spectrum-global-color-gray-50);--spectrum-alias-appframe-border-color:var(--spectrum-global-color-gray-50);--spectrum-alias-appframe-separator-color:var(--spectrum-global-color-gray-50);--spectrum-miller-column-item-background-color-selected:rgba(55,142,240,0.1);--spectrum-miller-column-item-background-color-selected-hover:rgba(55,142,240,0.2);--spectrum-well-background-color:hsla(0,0%,89%,0.02);--spectrum-colorarea-border-color:hsla(0,0%,100%,0.1);--spectrum-colorarea-border-color-hover:hsla(0,0%,100%,0.1);--spectrum-colorarea-border-color-down:hsla(0,0%,100%,0.1);--spectrum-colorarea-border-color-key-focus:hsla(0,0%,100%,0.1);--spectrum-colorslider-border-color:hsla(0,0%,100%,0.1);--spectrum-colorslider-border-color-hover:hsla(0,0%,100%,0.1);--spectrum-colorslider-border-color-down:hsla(0,0%,100%,0.1);--spectrum-colorslider-border-color-key-focus:hsla(0,0%,100%,0.1);--spectrum-colorslider-vertical-border-color:hsla(0,0%,100%,0.1);--spectrum-colorslider-vertical-border-color-hover:hsla(0,0%,100%,0.1);--spectrum-colorslider-vertical-border-color-down:hsla(0,0%,100%,0.1);--spectrum-colorslider-vertical-border-color-key-focus:hsla(0,0%,100%,0.1);--spectrum-colorwheel-border-color:hsla(0,0%,100%,0.1);--spectrum-colorwheel-border-color-hover:hsla(0,0%,100%,0.1);--spectrum-colorwheel-border-color-down:hsla(0,0%,100%,0.1);--spectrum-colorwheel-border-color-key-focus:hsla(0,0%,100%,0.1);--spectrum-well-border-color:hsla(0,0%,100%,0.05)}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    Theme.registerThemeFragment('dark', 'color', styles$3);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$2 = css `
:host,:root{--spectrum-global-dimension-scale-factor:1;--spectrum-global-dimension-size-0:0px;--spectrum-global-dimension-size-10:1px;--spectrum-global-dimension-size-25:2px;--spectrum-global-dimension-size-40:3px;--spectrum-global-dimension-size-50:4px;--spectrum-global-dimension-size-65:5px;--spectrum-global-dimension-size-75:6px;--spectrum-global-dimension-size-85:7px;--spectrum-global-dimension-size-100:8px;--spectrum-global-dimension-size-115:9px;--spectrum-global-dimension-size-125:10px;--spectrum-global-dimension-size-130:11px;--spectrum-global-dimension-size-150:12px;--spectrum-global-dimension-size-160:13px;--spectrum-global-dimension-size-175:14px;--spectrum-global-dimension-size-185:15px;--spectrum-global-dimension-size-200:16px;--spectrum-global-dimension-size-225:18px;--spectrum-global-dimension-size-250:20px;--spectrum-global-dimension-size-275:22px;--spectrum-global-dimension-size-300:24px;--spectrum-global-dimension-size-325:26px;--spectrum-global-dimension-size-350:28px;--spectrum-global-dimension-size-400:32px;--spectrum-global-dimension-size-450:36px;--spectrum-global-dimension-size-500:40px;--spectrum-global-dimension-size-550:44px;--spectrum-global-dimension-size-600:48px;--spectrum-global-dimension-size-650:52px;--spectrum-global-dimension-size-675:54px;--spectrum-global-dimension-size-700:56px;--spectrum-global-dimension-size-750:60px;--spectrum-global-dimension-size-800:64px;--spectrum-global-dimension-size-900:72px;--spectrum-global-dimension-size-1000:80px;--spectrum-global-dimension-size-1125:90px;--spectrum-global-dimension-size-1200:96px;--spectrum-global-dimension-size-1250:100px;--spectrum-global-dimension-size-1600:128px;--spectrum-global-dimension-size-1700:136px;--spectrum-global-dimension-size-1800:144px;--spectrum-global-dimension-size-2000:160px;--spectrum-global-dimension-size-2400:192px;--spectrum-global-dimension-size-2500:200px;--spectrum-global-dimension-size-3000:240px;--spectrum-global-dimension-size-3400:272px;--spectrum-global-dimension-size-3600:288px;--spectrum-global-dimension-size-4600:368px;--spectrum-global-dimension-size-5000:400px;--spectrum-global-dimension-size-6000:480px;--spectrum-global-dimension-font-size-25:10px;--spectrum-global-dimension-font-size-50:11px;--spectrum-global-dimension-font-size-75:12px;--spectrum-global-dimension-font-size-100:14px;--spectrum-global-dimension-font-size-150:15px;--spectrum-global-dimension-font-size-200:16px;--spectrum-global-dimension-font-size-300:18px;--spectrum-global-dimension-font-size-400:20px;--spectrum-global-dimension-font-size-500:22px;--spectrum-global-dimension-font-size-600:25px;--spectrum-global-dimension-font-size-700:28px;--spectrum-global-dimension-font-size-800:32px;--spectrum-global-dimension-font-size-900:36px;--spectrum-global-dimension-font-size-1000:40px;--spectrum-global-dimension-font-size-1100:45px;--spectrum-global-dimension-font-size-1200:50px;--spectrum-global-dimension-font-size-1300:60px;--spectrum-alias-focus-ring-radius-default:var(--spectrum-global-dimension-static-size-100);--spectrum-alias-item-text-padding-top-l:var(--spectrum-global-dimension-size-115);--spectrum-alias-item-text-padding-bottom-s:var(--spectrum-global-dimension-static-size-65);--spectrum-alias-item-mark-padding-top-m:var(--spectrum-global-dimension-static-size-75);--spectrum-alias-item-mark-padding-bottom-m:var(--spectrum-global-dimension-static-size-75);--spectrum-alias-item-workflow-padding-left-m:var(--spectrum-global-dimension-size-125);--spectrum-alias-item-rounded-workflow-padding-left-m:var(--spectrum-global-dimension-size-175);--spectrum-alias-item-rounded-workflow-padding-left-xl:21px;--spectrum-alias-item-mark-padding-left-m:var(--spectrum-global-dimension-size-125);--spectrum-alias-item-control-1-size-l:var(--spectrum-global-dimension-size-125);--spectrum-alias-item-control-1-size-xl:var(--spectrum-global-dimension-size-125);--spectrum-alias-item-control-2-size-s:var(--spectrum-global-dimension-size-150);--spectrum-alias-item-control-3-height-s:var(--spectrum-global-dimension-size-150);--spectrum-alias-item-control-3-width-s:23px;--spectrum-alias-item-control-3-width-m:var(--spectrum-global-dimension-static-size-325);--spectrum-alias-item-control-3-width-l:29px;--spectrum-alias-item-control-3-width-xl:33px;--spectrum-alias-item-mark-size-m:var(--spectrum-global-dimension-size-250);--spectrum-alias-workflow-icon-size-l:var(--spectrum-global-dimension-static-size-250);--spectrum-alias-ui-icon-chevron-size-75:var(--spectrum-global-dimension-static-size-125);--spectrum-alias-ui-icon-chevron-size-100:var(--spectrum-global-dimension-static-size-125);--spectrum-alias-ui-icon-chevron-size-200:var(--spectrum-global-dimension-static-size-150);--spectrum-alias-ui-icon-chevron-size-300:var(--spectrum-global-dimension-static-size-175);--spectrum-alias-ui-icon-chevron-size-400:var(--spectrum-global-dimension-static-size-200);--spectrum-alias-ui-icon-chevron-size-500:var(--spectrum-global-dimension-static-size-200);--spectrum-alias-ui-icon-checkmark-size-50:var(--spectrum-global-dimension-static-size-125);--spectrum-alias-ui-icon-checkmark-size-75:var(--spectrum-global-dimension-static-size-125);--spectrum-alias-ui-icon-checkmark-size-100:var(--spectrum-global-dimension-static-size-125);--spectrum-alias-ui-icon-checkmark-size-200:var(--spectrum-global-dimension-static-size-150);--spectrum-alias-ui-icon-checkmark-size-300:var(--spectrum-global-dimension-static-size-175);--spectrum-alias-ui-icon-checkmark-size-400:var(--spectrum-global-dimension-static-size-200);--spectrum-alias-ui-icon-checkmark-size-500:var(--spectrum-global-dimension-static-size-200);--spectrum-alias-ui-icon-checkmark-size-600:var(--spectrum-global-dimension-static-size-225);--spectrum-alias-ui-icon-dash-size-50:var(--spectrum-global-dimension-static-size-100);--spectrum-alias-ui-icon-dash-size-75:var(--spectrum-global-dimension-static-size-100);--spectrum-alias-ui-icon-dash-size-100:var(--spectrum-global-dimension-static-size-125);--spectrum-alias-ui-icon-dash-size-200:var(--spectrum-global-dimension-static-size-150);--spectrum-alias-ui-icon-dash-size-300:var(--spectrum-global-dimension-static-size-150);--spectrum-alias-ui-icon-dash-size-400:var(--spectrum-global-dimension-static-size-175);--spectrum-alias-ui-icon-dash-size-500:var(--spectrum-global-dimension-static-size-200);--spectrum-alias-ui-icon-dash-size-600:var(--spectrum-global-dimension-static-size-225);--spectrum-alias-ui-icon-cross-size-75:var(--spectrum-global-dimension-static-size-100);--spectrum-alias-ui-icon-cross-size-100:var(--spectrum-global-dimension-static-size-100);--spectrum-alias-ui-icon-cross-size-200:var(--spectrum-global-dimension-static-size-125);--spectrum-alias-ui-icon-cross-size-300:var(--spectrum-global-dimension-static-size-150);--spectrum-alias-ui-icon-cross-size-400:var(--spectrum-global-dimension-static-size-150);--spectrum-alias-ui-icon-cross-size-500:var(--spectrum-global-dimension-static-size-175);--spectrum-alias-ui-icon-cross-size-600:var(--spectrum-global-dimension-static-size-200);--spectrum-alias-ui-icon-arrow-size-75:var(--spectrum-global-dimension-static-size-125);--spectrum-alias-ui-icon-arrow-size-100:var(--spectrum-global-dimension-static-size-125);--spectrum-alias-ui-icon-arrow-size-200:var(--spectrum-global-dimension-static-size-150);--spectrum-alias-ui-icon-arrow-size-300:var(--spectrum-global-dimension-static-size-175);--spectrum-alias-ui-icon-arrow-size-400:var(--spectrum-global-dimension-static-size-200);--spectrum-alias-ui-icon-arrow-size-500:var(--spectrum-global-dimension-static-size-225);--spectrum-alias-ui-icon-arrow-size-600:var(--spectrum-global-dimension-static-size-250);--spectrum-alias-ui-icon-triplegripper-size-100-width:var(--spectrum-global-dimension-static-size-125);--spectrum-alias-ui-icon-doublegripper-size-100-height:var(--spectrum-global-dimension-static-size-50);--spectrum-alias-ui-icon-singlegripper-size-100-height:var(--spectrum-global-dimension-static-size-25);--spectrum-alias-ui-icon-cornertriangle-size-100:var(--spectrum-global-dimension-static-size-65);--spectrum-alias-ui-icon-cornertriangle-size-300:var(--spectrum-global-dimension-static-size-85);--spectrum-alias-ui-icon-asterisk-size-200:var(--spectrum-global-dimension-static-size-125);--spectrum-alias-ui-icon-asterisk-size-300:var(--spectrum-global-dimension-static-size-125);--spectrum-alias-avatar-size-100:var(--spectrum-global-dimension-size-250);--spectrum-alias-avatar-size-400:var(--spectrum-global-dimension-size-350);--spectrum-alias-avatar-size-600:var(--spectrum-global-dimension-size-450);--spectrum-actionbutton-l-emphasized-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-l-emphasized-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-l-emphasized-icononly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-l-emphasized-icononly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-l-emphasized-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-l-emphasized-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-emphasized-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-emphasized-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-emphasized-icononly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-emphasized-icononly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-emphasized-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-emphasized-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-emphasized-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-emphasized-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-emphasized-icononly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-emphasized-icononly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-emphasized-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-emphasized-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-emphasized-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-emphasized-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-emphasized-icononly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-emphasized-icononly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-emphasized-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-emphasized-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-l-quiet-emphasized-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-l-quiet-emphasized-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-l-quiet-emphasized-icononly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-l-quiet-emphasized-icononly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-l-quiet-emphasized-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-l-quiet-emphasized-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-quiet-emphasized-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-quiet-emphasized-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-quiet-emphasized-icononly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-quiet-emphasized-icononly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-quiet-emphasized-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-quiet-emphasized-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-quiet-emphasized-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-quiet-emphasized-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-quiet-emphasized-icononly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-quiet-emphasized-icononly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-quiet-emphasized-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-quiet-emphasized-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-quiet-emphasized-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-quiet-emphasized-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-quiet-emphasized-icononly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-quiet-emphasized-icononly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-quiet-emphasized-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-quiet-emphasized-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-l-quiet-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-l-quiet-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-l-quiet-icononly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-l-quiet-icononly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-l-quiet-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-l-quiet-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-quiet-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-quiet-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-quiet-icononly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-quiet-icononly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-quiet-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-quiet-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-quiet-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-quiet-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-quiet-icononly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-quiet-icononly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-quiet-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-quiet-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-quiet-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-quiet-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-quiet-icononly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-quiet-icononly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-quiet-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-quiet-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-l-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-l-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-l-icononly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-l-icononly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-l-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-l-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-icononly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-icononly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-m-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-icononly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-icononly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-s-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-icononly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-icononly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-actionbutton-xl-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-breadcrumb-compact-item-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-breadcrumb-compact-button-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-breadcrumb-item-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-breadcrumb-button-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-breadcrumb-multiline-item-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-breadcrumb-multiline-button-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-cta-l-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-cta-l-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-cta-l-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-cta-l-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-cta-m-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-cta-m-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-cta-m-min-width:var(--spectrum-global-dimension-size-900);--spectrum-button-cta-m-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-cta-m-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-cta-m-textonly-min-width:var(--spectrum-global-dimension-size-900);--spectrum-button-cta-s-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-cta-s-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-cta-s-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-cta-s-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-cta-xl-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-cta-xl-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-cta-xl-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-cta-xl-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-over-background-l-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-over-background-l-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-over-background-l-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-over-background-l-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-over-background-m-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-over-background-m-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-over-background-m-min-width:var(--spectrum-global-dimension-size-900);--spectrum-button-over-background-m-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-over-background-m-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-over-background-m-textonly-min-width:var(--spectrum-global-dimension-size-900);--spectrum-button-over-background-s-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-over-background-s-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-over-background-s-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-over-background-s-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-over-background-xl-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-over-background-xl-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-over-background-xl-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-over-background-xl-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-over-background-l-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-over-background-l-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-over-background-l-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-over-background-l-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-over-background-m-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-over-background-m-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-over-background-m-min-width:var(--spectrum-global-dimension-size-900);--spectrum-button-quiet-over-background-m-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-over-background-m-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-over-background-m-textonly-min-width:var(--spectrum-global-dimension-size-900);--spectrum-button-quiet-over-background-s-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-over-background-s-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-over-background-s-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-over-background-s-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-over-background-xl-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-over-background-xl-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-over-background-xl-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-over-background-xl-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-primary-l-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-primary-l-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-primary-l-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-primary-l-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-primary-m-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-primary-m-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-primary-m-min-width:var(--spectrum-global-dimension-size-900);--spectrum-button-primary-m-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-primary-m-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-primary-m-textonly-min-width:var(--spectrum-global-dimension-size-900);--spectrum-button-primary-s-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-primary-s-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-primary-s-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-primary-s-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-primary-xl-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-primary-xl-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-primary-xl-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-primary-xl-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-primary-l-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-primary-l-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-primary-l-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-primary-l-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-primary-m-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-primary-m-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-primary-m-min-width:var(--spectrum-global-dimension-size-900);--spectrum-button-quiet-primary-m-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-primary-m-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-primary-m-textonly-min-width:var(--spectrum-global-dimension-size-900);--spectrum-button-quiet-primary-s-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-primary-s-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-primary-s-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-primary-s-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-primary-xl-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-primary-xl-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-primary-xl-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-primary-xl-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-secondary-l-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-secondary-l-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-secondary-l-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-secondary-l-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-secondary-m-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-secondary-m-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-secondary-m-min-width:var(--spectrum-global-dimension-size-900);--spectrum-button-quiet-secondary-m-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-secondary-m-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-secondary-m-textonly-min-width:var(--spectrum-global-dimension-size-900);--spectrum-button-quiet-secondary-s-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-secondary-s-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-secondary-s-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-secondary-s-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-secondary-xl-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-secondary-xl-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-secondary-xl-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-secondary-xl-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-secondary-l-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-secondary-l-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-secondary-l-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-secondary-l-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-secondary-m-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-secondary-m-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-secondary-m-min-width:var(--spectrum-global-dimension-size-900);--spectrum-button-secondary-m-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-secondary-m-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-secondary-m-textonly-min-width:var(--spectrum-global-dimension-size-900);--spectrum-button-secondary-s-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-secondary-s-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-secondary-s-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-secondary-s-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-secondary-xl-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-secondary-xl-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-secondary-xl-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-secondary-xl-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-warning-l-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-warning-l-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-warning-l-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-warning-l-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-warning-m-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-warning-m-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-warning-m-min-width:var(--spectrum-global-dimension-size-900);--spectrum-button-quiet-warning-m-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-warning-m-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-warning-m-textonly-min-width:var(--spectrum-global-dimension-size-900);--spectrum-button-quiet-warning-s-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-warning-s-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-warning-s-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-warning-s-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-warning-xl-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-warning-xl-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-warning-xl-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-quiet-warning-xl-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-warning-l-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-warning-l-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-warning-l-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-warning-l-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-warning-m-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-warning-m-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-warning-m-min-width:var(--spectrum-global-dimension-size-900);--spectrum-button-warning-m-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-warning-m-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-warning-m-textonly-min-width:var(--spectrum-global-dimension-size-900);--spectrum-button-warning-s-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-warning-s-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-warning-s-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-warning-s-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-warning-xl-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-warning-xl-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-button-warning-xl-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-button-warning-xl-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-checkbox-l-emphasized-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-checkbox-m-emphasized-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-checkbox-s-emphasized-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-checkbox-xl-emphasized-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-checkbox-l-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-checkbox-m-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-checkbox-s-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-checkbox-xl-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-colorloupe-colorhandle-gap:var(--spectrum-global-dimension-static-size-125);--spectrum-colorslider-touch-hit-y:var(--spectrum-global-dimension-size-150);--spectrum-colorslider-vertical-touch-hit-x:var(--spectrum-global-dimension-size-150);--spectrum-colorwheel-min-size:var(--spectrum-global-dimension-size-2400);--spectrum-colorwheel-touch-hit-outer:var(--spectrum-global-dimension-size-150);--spectrum-colorwheel-touch-hit-inner:var(--spectrum-global-dimension-size-150);--spectrum-cyclebutton-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-cyclebutton-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-dialog-confirm-max-width:var(--spectrum-global-dimension-static-size-6000);--spectrum-dialog-confirm-title-text-size:var(--spectrum-global-dimension-font-size-300);--spectrum-dialog-confirm-description-text-size:var(--spectrum-global-dimension-font-size-100);--spectrum-dialog-confirm-padding:var(--spectrum-global-dimension-static-size-500);--spectrum-dialog-confirm-description-margin-bottom:var(--spectrum-global-dimension-static-size-600);--spectrum-dialog-destructive-max-width:var(--spectrum-global-dimension-static-size-6000);--spectrum-dialog-destructive-title-text-size:var(--spectrum-global-dimension-font-size-300);--spectrum-dialog-destructive-description-text-size:var(--spectrum-global-dimension-font-size-100);--spectrum-dialog-destructive-padding:var(--spectrum-global-dimension-static-size-500);--spectrum-dialog-destructive-description-margin-bottom:var(--spectrum-global-dimension-static-size-600);--spectrum-dialog-error-max-width:var(--spectrum-global-dimension-static-size-6000);--spectrum-dialog-error-title-text-size:var(--spectrum-global-dimension-font-size-300);--spectrum-dialog-error-description-text-size:var(--spectrum-global-dimension-font-size-100);--spectrum-dialog-error-padding:var(--spectrum-global-dimension-static-size-500);--spectrum-dialog-error-description-margin-bottom:var(--spectrum-global-dimension-static-size-600);--spectrum-dialog-info-max-width:var(--spectrum-global-dimension-static-size-6000);--spectrum-dialog-info-title-text-size:var(--spectrum-global-dimension-font-size-300);--spectrum-dialog-info-description-text-size:var(--spectrum-global-dimension-font-size-100);--spectrum-dialog-info-padding:var(--spectrum-global-dimension-static-size-500);--spectrum-dialog-info-description-margin-bottom:var(--spectrum-global-dimension-static-size-600);--spectrum-icon-arrow-down-small-height:var(--spectrum-global-dimension-size-125);--spectrum-icon-arrow-left-medium-height:var(--spectrum-global-dimension-size-125);--spectrum-icon-checkmark-medium-width:var(--spectrum-global-dimension-size-150);--spectrum-icon-checkmark-medium-height:var(--spectrum-global-dimension-size-150);--spectrum-icon-checkmark-small-width:var(--spectrum-global-dimension-size-125);--spectrum-icon-checkmark-small-height:var(--spectrum-global-dimension-size-125);--spectrum-icon-chevron-down-medium-width:var(--spectrum-global-dimension-size-125);--spectrum-icon-chevron-left-large-width:var(--spectrum-global-dimension-size-150);--spectrum-icon-chevron-left-medium-height:var(--spectrum-global-dimension-size-125);--spectrum-icon-chevron-right-large-width:var(--spectrum-global-dimension-size-150);--spectrum-icon-chevron-right-medium-height:var(--spectrum-global-dimension-size-125);--spectrum-icon-cross-large-width:var(--spectrum-global-dimension-size-150);--spectrum-icon-cross-large-height:var(--spectrum-global-dimension-size-150);--spectrum-icon-dash-small-width:var(--spectrum-global-dimension-size-125);--spectrum-icon-dash-small-height:var(--spectrum-global-dimension-size-125);--spectrum-icon-skip-left-width:9px;--spectrum-icon-skip-left-height:var(--spectrum-global-dimension-size-125);--spectrum-icon-skip-right-width:9px;--spectrum-icon-skip-right-height:var(--spectrum-global-dimension-size-125);--spectrum-icon-triplegripper-width:var(--spectrum-global-dimension-size-125);--spectrum-meter-negative-m-border-radius:var(--spectrum-global-dimension-static-size-40);--spectrum-meter-negative-m-over-background-border-radius:var(--spectrum-global-dimension-static-size-40);--spectrum-meter-negative-s-border-radius:var(--spectrum-global-dimension-static-size-25);--spectrum-meter-negative-s-over-background-border-radius:var(--spectrum-global-dimension-static-size-25);--spectrum-meter-negative-xl-border-radius:var(--spectrum-global-dimension-static-size-65);--spectrum-meter-negative-xl-over-background-border-radius:var(--spectrum-global-dimension-static-size-65);--spectrum-meter-notice-m-border-radius:var(--spectrum-global-dimension-static-size-40);--spectrum-meter-notice-m-over-background-border-radius:var(--spectrum-global-dimension-static-size-40);--spectrum-meter-notice-s-border-radius:var(--spectrum-global-dimension-static-size-25);--spectrum-meter-notice-s-over-background-border-radius:var(--spectrum-global-dimension-static-size-25);--spectrum-meter-notice-xl-border-radius:var(--spectrum-global-dimension-static-size-65);--spectrum-meter-notice-xl-over-background-border-radius:var(--spectrum-global-dimension-static-size-65);--spectrum-meter-positive-m-border-radius:var(--spectrum-global-dimension-static-size-40);--spectrum-meter-positive-m-over-background-border-radius:var(--spectrum-global-dimension-static-size-40);--spectrum-meter-positive-s-over-background-border-radius:var(--spectrum-global-dimension-static-size-25);--spectrum-meter-positive-xl-border-radius:var(--spectrum-global-dimension-static-size-65);--spectrum-meter-positive-xl-over-background-border-radius:var(--spectrum-global-dimension-static-size-65);--spectrum-pagination-page-button-line-height:26px;--spectrum-panel-l-header-height:var(--spectrum-global-dimension-size-600);--spectrum-panel-l-collapsible-header-height:var(--spectrum-global-dimension-size-600);--spectrum-panel-s-header-height:var(--spectrum-global-dimension-size-600);--spectrum-panel-s-collapsible-header-height:var(--spectrum-global-dimension-size-600);--spectrum-picker-quiet-l-touch-hit-y:var(--spectrum-global-dimension-static-size-400);--spectrum-picker-quiet-l-min-width:var(--spectrum-global-dimension-size-250);--spectrum-picker-quiet-l-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-400);--spectrum-picker-quiet-l-textonly-min-width:var(--spectrum-global-dimension-size-250);--spectrum-picker-quiet-m-touch-hit-y:var(--spectrum-global-dimension-static-size-400);--spectrum-picker-quiet-m-min-width:var(--spectrum-global-dimension-size-225);--spectrum-picker-quiet-m-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-400);--spectrum-picker-quiet-m-textonly-min-width:var(--spectrum-global-dimension-size-225);--spectrum-picker-quiet-s-touch-hit-y:var(--spectrum-global-dimension-static-size-400);--spectrum-picker-quiet-s-min-width:var(--spectrum-global-dimension-size-200);--spectrum-picker-quiet-s-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-400);--spectrum-picker-quiet-s-textonly-min-width:var(--spectrum-global-dimension-size-200);--spectrum-picker-quiet-xl-touch-hit-y:var(--spectrum-global-dimension-static-size-400);--spectrum-picker-quiet-xl-min-width:var(--spectrum-global-dimension-size-275);--spectrum-picker-quiet-xl-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-400);--spectrum-picker-quiet-xl-textonly-min-width:var(--spectrum-global-dimension-size-275);--spectrum-picker-l-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-picker-l-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-picker-l-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-picker-l-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-picker-m-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-picker-m-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-picker-m-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-picker-m-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-picker-s-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-picker-s-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-picker-s-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-picker-s-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-picker-xl-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-picker-xl-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-picker-xl-textonly-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-picker-xl-textonly-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-progressbar-m-border-radius:var(--spectrum-global-dimension-static-size-40);--spectrum-progressbar-m-over-background-border-radius:var(--spectrum-global-dimension-static-size-40);--spectrum-progressbar-s-border-radius:var(--spectrum-global-dimension-static-size-25);--spectrum-progressbar-s-over-background-border-radius:var(--spectrum-global-dimension-static-size-25);--spectrum-progressbar-xl-border-radius:var(--spectrum-global-dimension-static-size-65);--spectrum-progressbar-xl-over-background-border-radius:var(--spectrum-global-dimension-static-size-65);--spectrum-progressbar-m-indeterminate-border-radius:var(--spectrum-global-dimension-static-size-40);--spectrum-progressbar-m-indeterminate-over-background-border-radius:var(--spectrum-global-dimension-static-size-40);--spectrum-progressbar-s-indeterminate-border-radius:var(--spectrum-global-dimension-static-size-25);--spectrum-progressbar-s-indeterminate-over-background-border-radius:var(--spectrum-global-dimension-static-size-25);--spectrum-progressbar-xl-indeterminate-border-radius:var(--spectrum-global-dimension-static-size-65);--spectrum-progressbar-xl-indeterminate-over-background-border-radius:var(--spectrum-global-dimension-static-size-65);--spectrum-progresscircle-medium-border-size:3px;--spectrum-progresscircle-medium-over-background-border-size:3px;--spectrum-progresscircle-small-border-size:var(--spectrum-global-dimension-static-size-25);--spectrum-progresscircle-small-indeterminate-border-size:var(--spectrum-global-dimension-static-size-25);--spectrum-progresscircle-small-over-background-border-size:var(--spectrum-global-dimension-static-size-25);--spectrum-progresscircle-medium-indeterminate-border-size:3px;--spectrum-radio-l-emphasized-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-radio-m-emphasized-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-radio-s-emphasized-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-radio-xl-emphasized-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-radio-l-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-radio-m-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-radio-s-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-radio-xl-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-rating-icon-width:24px;--spectrum-rating-indicator-width:16px;--spectrum-rating-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-rating-emphasized-icon-width:24px;--spectrum-rating-emphasized-indicator-width:16px;--spectrum-rating-emphasized-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-search-quiet-l-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-search-quiet-l-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-search-quiet-m-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-search-quiet-m-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-search-quiet-s-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-search-quiet-s-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-search-quiet-xl-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-search-quiet-xl-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-search-l-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-search-l-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-search-m-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-search-m-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-search-s-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-search-s-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-search-xl-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-search-xl-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-sidenav-item-touch-hit-bottom:var(--spectrum-global-dimension-static-size-25);--spectrum-sidenav-multilevel-item-touch-hit-bottom:var(--spectrum-global-dimension-static-size-25);--spectrum-slider-l-track-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-slider-l-handle-touch-hit-x:var(--spectrum-global-dimension-static-size-200);--spectrum-slider-l-handle-touch-hit-y:var(--spectrum-global-dimension-static-size-200);--spectrum-slider-m-track-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-slider-m-handle-touch-hit-x:var(--spectrum-global-dimension-static-size-200);--spectrum-slider-m-handle-touch-hit-y:var(--spectrum-global-dimension-static-size-200);--spectrum-slider-s-track-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-slider-s-handle-touch-hit-x:var(--spectrum-global-dimension-static-size-200);--spectrum-slider-s-handle-touch-hit-y:var(--spectrum-global-dimension-static-size-200);--spectrum-slider-xl-track-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-slider-xl-handle-touch-hit-x:var(--spectrum-global-dimension-static-size-200);--spectrum-slider-xl-handle-touch-hit-y:var(--spectrum-global-dimension-static-size-200);--spectrum-slider-editable-track-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-slider-editable-handle-touch-hit-x:var(--spectrum-global-dimension-static-size-200);--spectrum-slider-editable-handle-touch-hit-y:var(--spectrum-global-dimension-static-size-200);--spectrum-slider-tick-l-track-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-slider-tick-l-handle-touch-hit-x:var(--spectrum-global-dimension-static-size-200);--spectrum-slider-tick-l-handle-touch-hit-y:var(--spectrum-global-dimension-static-size-200);--spectrum-slider-tick-m-track-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-slider-tick-m-handle-touch-hit-x:var(--spectrum-global-dimension-static-size-200);--spectrum-slider-tick-m-handle-touch-hit-y:var(--spectrum-global-dimension-static-size-200);--spectrum-slider-tick-s-track-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-slider-tick-s-handle-touch-hit-x:var(--spectrum-global-dimension-static-size-200);--spectrum-slider-tick-s-handle-touch-hit-y:var(--spectrum-global-dimension-static-size-200);--spectrum-slider-tick-xl-track-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-slider-tick-xl-handle-touch-hit-x:var(--spectrum-global-dimension-static-size-200);--spectrum-slider-tick-xl-handle-touch-hit-y:var(--spectrum-global-dimension-static-size-200);--spectrum-switch-l-emphasized-focus-ring-border-radius-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-l-emphasized-focus-ring-border-radius-selected-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-l-emphasized-focus-ring-border-radius-error-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-l-emphasized-focus-ring-border-radius-error-selected-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-l-emphasized-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-switch-l-emphasized-handle-border-radius:7px;--spectrum-switch-m-emphasized-focus-ring-border-radius-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-m-emphasized-focus-ring-border-radius-selected-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-m-emphasized-focus-ring-border-radius-error-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-m-emphasized-focus-ring-border-radius-error-selected-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-m-emphasized-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-switch-m-emphasized-handle-border-radius:7px;--spectrum-switch-s-emphasized-focus-ring-border-radius-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-s-emphasized-focus-ring-border-radius-selected-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-s-emphasized-focus-ring-border-radius-error-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-s-emphasized-focus-ring-border-radius-error-selected-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-s-emphasized-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-switch-s-emphasized-handle-border-radius:7px;--spectrum-switch-xl-emphasized-focus-ring-border-radius-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-xl-emphasized-focus-ring-border-radius-selected-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-xl-emphasized-focus-ring-border-radius-error-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-xl-emphasized-focus-ring-border-radius-error-selected-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-xl-emphasized-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-switch-xl-emphasized-handle-border-radius:7px;--spectrum-switch-l-focus-ring-border-radius-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-l-focus-ring-border-radius-selected-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-l-focus-ring-border-radius-error-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-l-focus-ring-border-radius-error-selected-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-l-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-switch-l-handle-border-radius:7px;--spectrum-switch-m-focus-ring-border-radius-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-m-focus-ring-border-radius-selected-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-m-focus-ring-border-radius-error-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-m-focus-ring-border-radius-error-selected-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-m-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-switch-m-handle-border-radius:7px;--spectrum-switch-s-focus-ring-border-radius-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-s-focus-ring-border-radius-selected-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-s-focus-ring-border-radius-error-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-s-focus-ring-border-radius-error-selected-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-s-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-switch-s-handle-border-radius:7px;--spectrum-switch-xl-focus-ring-border-radius-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-xl-focus-ring-border-radius-selected-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-xl-focus-ring-border-radius-error-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-xl-focus-ring-border-radius-error-selected-key-focus:var(--spectrum-global-dimension-static-size-130);--spectrum-switch-xl-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-switch-xl-handle-border-radius:7px;--spectrum-tabs-quiet-s-compact-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-quiet-s-compact-emphasized-margin-left:-7px;--spectrum-tabs-quiet-s-compact-emphasized-margin-right:-7px;--spectrum-tabs-quiet-s-compact-focus-ring-border-radius:5px;--spectrum-tabs-quiet-s-compact-margin-left:-7px;--spectrum-tabs-quiet-s-compact-margin-right:-7px;--spectrum-tabs-quiet-s-compact-vertical-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-quiet-s-compact-vertical-focus-ring-border-radius:5px;--spectrum-tabs-quiet-s-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-quiet-s-emphasized-margin-left:-7px;--spectrum-tabs-quiet-s-emphasized-margin-right:-7px;--spectrum-tabs-quiet-s-focus-ring-border-radius:5px;--spectrum-tabs-quiet-s-margin-left:-7px;--spectrum-tabs-quiet-s-margin-right:-7px;--spectrum-tabs-quiet-s-vertical-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-quiet-s-vertical-focus-ring-border-radius:5px;--spectrum-tabs-quiet-m-compact-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-quiet-m-compact-emphasized-margin-left:-8px;--spectrum-tabs-quiet-m-compact-emphasized-margin-right:-8px;--spectrum-tabs-quiet-m-compact-focus-ring-border-radius:5px;--spectrum-tabs-quiet-m-compact-margin-left:-8px;--spectrum-tabs-quiet-m-compact-margin-right:-8px;--spectrum-tabs-quiet-m-compact-vertical-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-quiet-m-compact-vertical-focus-ring-border-radius:5px;--spectrum-tabs-quiet-m-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-quiet-m-emphasized-margin-left:-8px;--spectrum-tabs-quiet-m-emphasized-margin-right:-8px;--spectrum-tabs-quiet-m-focus-ring-border-radius:5px;--spectrum-tabs-quiet-m-margin-left:-8px;--spectrum-tabs-quiet-m-margin-right:-8px;--spectrum-tabs-quiet-m-vertical-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-quiet-m-vertical-focus-ring-border-radius:5px;--spectrum-tabs-quiet-l-compact-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-quiet-l-compact-emphasized-margin-left:-9px;--spectrum-tabs-quiet-l-compact-emphasized-margin-right:-9px;--spectrum-tabs-quiet-l-compact-focus-ring-border-radius:5px;--spectrum-tabs-quiet-l-compact-margin-left:-9px;--spectrum-tabs-quiet-l-compact-margin-right:-9px;--spectrum-tabs-quiet-l-compact-vertical-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-quiet-l-compact-vertical-focus-ring-border-radius:5px;--spectrum-tabs-quiet-l-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-quiet-l-emphasized-margin-left:-9px;--spectrum-tabs-quiet-l-emphasized-margin-right:-9px;--spectrum-tabs-quiet-l-focus-ring-border-radius:5px;--spectrum-tabs-quiet-l-margin-left:-9px;--spectrum-tabs-quiet-l-margin-right:-9px;--spectrum-tabs-quiet-l-vertical-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-quiet-l-vertical-focus-ring-border-radius:5px;--spectrum-tabs-quiet-xl-compact-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-quiet-xl-compact-emphasized-margin-left:-10px;--spectrum-tabs-quiet-xl-compact-emphasized-margin-right:-10px;--spectrum-tabs-quiet-xl-compact-focus-ring-border-radius:5px;--spectrum-tabs-quiet-xl-compact-margin-left:-10px;--spectrum-tabs-quiet-xl-compact-margin-right:-10px;--spectrum-tabs-quiet-xl-compact-vertical-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-quiet-xl-compact-vertical-focus-ring-border-radius:5px;--spectrum-tabs-quiet-xl-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-quiet-xl-emphasized-margin-left:-10px;--spectrum-tabs-quiet-xl-emphasized-margin-right:-10px;--spectrum-tabs-quiet-xl-focus-ring-border-radius:5px;--spectrum-tabs-quiet-xl-margin-left:-10px;--spectrum-tabs-quiet-xl-margin-right:-10px;--spectrum-tabs-quiet-xl-vertical-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-quiet-xl-vertical-focus-ring-border-radius:5px;--spectrum-tabs-s-compact-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-s-compact-emphasized-margin-left:-7px;--spectrum-tabs-s-compact-emphasized-margin-right:-7px;--spectrum-tabs-s-compact-focus-ring-border-radius:5px;--spectrum-tabs-s-compact-margin-left:-7px;--spectrum-tabs-s-compact-margin-right:-7px;--spectrum-tabs-s-compact-vertical-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-s-compact-vertical-focus-ring-border-radius:5px;--spectrum-tabs-s-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-s-emphasized-margin-left:-7px;--spectrum-tabs-s-emphasized-margin-right:-7px;--spectrum-tabs-s-focus-ring-border-radius:5px;--spectrum-tabs-s-margin-left:-7px;--spectrum-tabs-s-margin-right:-7px;--spectrum-tabs-s-vertical-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-s-vertical-focus-ring-border-radius:5px;--spectrum-tabs-m-compact-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-m-compact-emphasized-margin-left:-8px;--spectrum-tabs-m-compact-emphasized-margin-right:-8px;--spectrum-tabs-m-compact-focus-ring-border-radius:5px;--spectrum-tabs-m-compact-margin-left:-8px;--spectrum-tabs-m-compact-margin-right:-8px;--spectrum-tabs-m-compact-vertical-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-m-compact-vertical-focus-ring-border-radius:5px;--spectrum-tabs-m-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-m-emphasized-margin-left:-8px;--spectrum-tabs-m-emphasized-margin-right:-8px;--spectrum-tabs-m-focus-ring-border-radius:5px;--spectrum-tabs-m-margin-left:-8px;--spectrum-tabs-m-margin-right:-8px;--spectrum-tabs-m-vertical-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-m-vertical-focus-ring-border-radius:5px;--spectrum-tabs-l-compact-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-l-compact-emphasized-margin-left:-9px;--spectrum-tabs-l-compact-emphasized-margin-right:-9px;--spectrum-tabs-l-compact-focus-ring-border-radius:5px;--spectrum-tabs-l-compact-margin-left:-9px;--spectrum-tabs-l-compact-margin-right:-9px;--spectrum-tabs-l-compact-vertical-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-l-compact-vertical-focus-ring-border-radius:5px;--spectrum-tabs-l-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-l-emphasized-margin-left:-9px;--spectrum-tabs-l-emphasized-margin-right:-9px;--spectrum-tabs-l-focus-ring-border-radius:5px;--spectrum-tabs-l-margin-left:-9px;--spectrum-tabs-l-margin-right:-9px;--spectrum-tabs-l-vertical-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-l-vertical-focus-ring-border-radius:5px;--spectrum-tabs-xl-compact-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-xl-compact-emphasized-margin-left:-10px;--spectrum-tabs-xl-compact-emphasized-margin-right:-10px;--spectrum-tabs-xl-compact-focus-ring-border-radius:5px;--spectrum-tabs-xl-compact-margin-left:-10px;--spectrum-tabs-xl-compact-margin-right:-10px;--spectrum-tabs-xl-compact-vertical-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-xl-compact-vertical-focus-ring-border-radius:5px;--spectrum-tabs-xl-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-xl-emphasized-margin-left:-10px;--spectrum-tabs-xl-emphasized-margin-right:-10px;--spectrum-tabs-xl-focus-ring-border-radius:5px;--spectrum-tabs-xl-margin-left:-10px;--spectrum-tabs-xl-margin-right:-10px;--spectrum-tabs-xl-vertical-emphasized-focus-ring-border-radius:5px;--spectrum-tabs-xl-vertical-focus-ring-border-radius:5px;--spectrum-textarea-quiet-l-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-textarea-quiet-l-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-textarea-quiet-m-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-textarea-quiet-m-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-textarea-quiet-s-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-textarea-quiet-s-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-textarea-quiet-xl-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-textarea-quiet-xl-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-textarea-l-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-textarea-l-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-textarea-m-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-textarea-m-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-textarea-s-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-textarea-s-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-textarea-xl-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-textarea-xl-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-textfield-quiet-l-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-textfield-quiet-l-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-textfield-quiet-m-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-textfield-quiet-m-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-textfield-quiet-s-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-textfield-quiet-s-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-textfield-quiet-xl-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-textfield-quiet-xl-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-textfield-l-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-textfield-l-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-textfield-m-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-textfield-m-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-textfield-s-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-textfield-s-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-textfield-xl-touch-hit-x:var(--spectrum-global-dimension-static-size-100);--spectrum-textfield-xl-touch-hit-y:var(--spectrum-global-dimension-static-size-100);--spectrum-tooltip-info-padding-bottom:5px;--spectrum-tooltip-negative-padding-bottom:5px;--spectrum-tooltip-padding-bottom:5px;--spectrum-tooltip-positive-padding-bottom:5px}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    Theme.registerThemeFragment('medium', 'scale', styles$2);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const InfoIcon = ({ width = 24, height = 24, hidden = false, title = 'Info' } = {}) => {
        return tag `<svg
    xmlns="http://www.w3.org/2000/svg"
    height="${height}"
    viewBox="0 0 36 36"
    width="${width}"
    aria-hidden="${hidden ? 'true' : 'false'}"
    role="img"
    fill="currentColor"
    aria-label="${title}"
  >
    <path
      d="M18 2a16 16 0 1016 16A16 16 0 0018 2zm-.3 4.3a2.718 2.718 0 012.864 2.824 2.664 2.664 0 01-2.864 2.863 2.705 2.705 0 01-2.864-2.864A2.717 2.717 0 0117.7 6.3zM22 27a1 1 0 01-1 1h-6a1 1 0 01-1-1v-2a1 1 0 011-1h1v-6h-1a1 1 0 01-1-1v-2a1 1 0 011-1h4a1 1 0 011 1v9h1a1 1 0 011 1z"
    />
  </svg>`;
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class IconInfo extends IconBase {
        render() {
            setCustomTemplateLiteralTag(html);
            return InfoIcon({ hidden: !this.label, title: this.label });
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-icon-info', IconInfo);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const CheckmarkCircleIcon = ({ width = 24, height = 24, hidden = false, title = 'Checkmark Circle', } = {}) => {
        return tag `<svg
    xmlns="http://www.w3.org/2000/svg"
    height="${height}"
    viewBox="0 0 36 36"
    width="${width}"
    aria-hidden="${hidden ? 'true' : 'false'}"
    role="img"
    fill="currentColor"
    aria-label="${title}"
  >
    <path
      d="M18 2a16 16 0 1016 16A16 16 0 0018 2zm10.666 9.08L16.018 27.341a1.206 1.206 0 01-.875.461h-.073a1.2 1.2 0 01-.849-.351l-7.785-7.793a1.2 1.2 0 010-1.7l1.326-1.325a1.2 1.2 0 011.7 0l5.338 5.349L25.314 8.473A1.2 1.2 0 0127 8.263L28.455 9.4a1.2 1.2 0 01.211 1.68z"
    />
  </svg>`;
    };

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    class IconCheckmarkCircle extends IconBase {
        render() {
            setCustomTemplateLiteralTag(html);
            return CheckmarkCircleIcon({ hidden: !this.label, title: this.label });
        }
    }

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-icon-checkmark-circle', IconCheckmarkCircle);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles$1 = css `
:host{--spectrum-toast-icon-padding-y:var(--spectrum-global-dimension-size-85);--spectrum-toast-neutral-content-padding-top:var(--spectrum-global-dimension-size-65);--spectrum-toast-content-padding-bottom:var(--spectrum-global-dimension-size-65);--spectrum-toast-button-margin-right:var(--spectrum-global-dimension-size-130)}:host([dir=ltr]){padding-right:var(--spectrum-toast-neutral-padding-right,var(--spectrum-global-dimension-size-100))}:host([dir=rtl]){padding-left:var(--spectrum-toast-neutral-padding-right,var(--spectrum-global-dimension-size-100))}:host([dir=ltr]){padding-left:var(--spectrum-toast-neutral-padding-left,var(--spectrum-global-dimension-size-200))}:host([dir=rtl]){padding-right:var(--spectrum-toast-neutral-padding-left,var(--spectrum-global-dimension-size-200))}:host{box-sizing:border-box;display:inline-flex;flex-direction:row;align-items:stretch;border-radius:var(--spectrum-toast-neutral-border-radius,var(--spectrum-global-dimension-static-size-50));padding-top:var(--spectrum-toast-neutral-padding-y,var(--spectrum-global-dimension-size-100));padding-bottom:var(--spectrum-toast-neutral-padding-y,var(--spectrum-global-dimension-size-100));font-size:var(--spectrum-toast-neutral-text-size,var(--spectrum-alias-font-size-default));font-weight:var(--spectrum-toast-neutral-text-font-weight,var(--spectrum-global-font-weight-bold));-webkit-font-smoothing:antialiased}:host([dir=ltr]) .type{margin-right:var(--spectrum-toast-neutral-icon-padding-right,var(--spectrum-global-dimension-size-150))}:host([dir=rtl]) .type{margin-left:var(--spectrum-toast-neutral-icon-padding-right,var(--spectrum-global-dimension-size-150))}:host([dir=ltr]) .type{margin-left:0}:host([dir=rtl]) .type{margin-right:0}.type{flex-shrink:0;flex-grow:0;margin-top:var(--spectrum-toast-icon-padding-y);margin-bottom:var(--spectrum-toast-icon-padding-y)}:host([dir=ltr]) .content{padding-right:var(--spectrum-toast-neutral-content-padding-right,var(--spectrum-global-dimension-size-200))}:host([dir=rtl]) .content{padding-left:var(--spectrum-toast-neutral-content-padding-right,var(--spectrum-global-dimension-size-200))}:host([dir=ltr]) .content{padding-left:0}:host([dir=rtl]) .content{padding-right:0}:host([dir=ltr]) .content{text-align:left}:host([dir=rtl]) .content{text-align:right}.content{flex:1 1 auto;display:inline-block;box-sizing:border-box;padding-top:var(--spectrum-toast-neutral-content-padding-top,var(--spectrum-global-dimension-size-65));padding-bottom:var(--spectrum-toast-content-padding-bottom);font-size:var(--spectrum-toast-info-text-size,var(--spectrum-alias-font-size-default));font-weight:var(--spectrum-toast-info-text-font-weight,var(--spectrum-global-font-weight-bold));line-height:var(--spectrum-toast-info-text-line-height,var(--spectrum-alias-body-text-line-height))}.buttons{display:flex;flex:0 0 auto;align-items:flex-start}:host([dir=ltr]) .buttons .spectrum-ClearButton+.spectrum-ClearButton,:host([dir=ltr]) .buttons .spectrum-ClearButton+::slotted([slot=action]),:host([dir=ltr]) .buttons slot[name=action]+.spectrum-ClearButton,:host([dir=ltr]) .buttons slot[name=action]+::slotted([slot=action]){margin-left:var(--spectrum-toast-neutral-button-gap-x,var(--spectrum-global-dimension-size-100))}:host([dir=rtl]) .buttons .spectrum-ClearButton+.spectrum-ClearButton,:host([dir=rtl]) .buttons .spectrum-ClearButton+::slotted([slot=action]),:host([dir=rtl]) .buttons slot[name=action]+.spectrum-ClearButton,:host([dir=rtl]) .buttons slot[name=action]+::slotted([slot=action]){margin-right:var(--spectrum-toast-neutral-button-gap-x,var(--spectrum-global-dimension-size-100))}.body{flex:1 1 auto;align-self:center}:host([dir=ltr]) .body ::slotted([slot=action]){float:right}:host([dir=rtl]) .body ::slotted([slot=action]){float:left}:host([dir=ltr]) .body ::slotted([slot=action]){margin-right:var(--spectrum-toast-button-margin-right)}:host([dir=rtl]) .body ::slotted([slot=action]){margin-left:var(--spectrum-toast-button-margin-right)}:host([dir=ltr]) .body+.buttons{padding-left:var(--spectrum-toast-neutral-padding-right,var(--spectrum-global-dimension-size-100))}:host([dir=rtl]) .body+.buttons{padding-right:var(--spectrum-toast-neutral-padding-right,var(--spectrum-global-dimension-size-100))}:host([dir=ltr]) .body+.buttons{border-left-width:1px}:host([dir=rtl]) .body+.buttons{border-right-width:1px}:host([dir=ltr]) .body+.buttons{border-left-style:solid}:host([dir=rtl]) .body+.buttons{border-right-style:solid}:host{background-color:var(--spectrum-toast-neutral-background-color,var(--spectrum-semantic-neutral-background-color-default));color:var(--spectrum-toast-neutral-background-color,var(--spectrum-semantic-neutral-background-color-default))}.content{color:var(--spectrum-toast-neutral-text-color,var(--spectrum-global-color-static-white))}.type{color:#fff}:host([dir=ltr]) .buttons{border-left-color:hsla(0,0%,100%,.2)}:host([dir=rtl]) .buttons{border-right-color:hsla(0,0%,100%,.2)}:host([variant=warning]){background-color:var(--spectrum-toast-warning-background-color,var(--spectrum-global-color-static-orange-700))}:host([variant=warning]),:host([variant=warning]) .closeButton.focus-visible:not(:active),:host([variant=warning]) .closeButton.focus-visible:not(:active){color:var(--spectrum-toast-warning-background-color,var(--spectrum-global-color-static-orange-700))}:host([variant=warning]),:host([variant=warning]) .closeButton.focus-visible:not(:active),:host([variant=warning]) .closeButton:focus-visible:not(:active){color:var(--spectrum-toast-warning-background-color,var(--spectrum-global-color-static-orange-700))}:host([variant=error]),:host([variant=negative]){background-color:var(--spectrum-toast-negative-background-color,var(--spectrum-semantic-negative-color-background))}:host([variant=error]),:host([variant=error]) .closeButton.focus-visible:not(:active),:host([variant=error]) .closeButton.focus-visible:not(:active),:host([variant=negative]),:host([variant=negative]) .closeButton.focus-visible:not(:active),:host([variant=negative]) .closeButton.focus-visible:not(:active){color:var(--spectrum-toast-negative-background-color,var(--spectrum-semantic-negative-color-background))}:host([variant=error]),:host([variant=error]) .closeButton.focus-visible:not(:active),:host([variant=error]) .closeButton:focus-visible:not(:active),:host([variant=negative]),:host([variant=negative]) .closeButton.focus-visible:not(:active),:host([variant=negative]) .closeButton:focus-visible:not(:active){color:var(--spectrum-toast-negative-background-color,var(--spectrum-semantic-negative-color-background))}:host([variant=info]){background-color:var(--spectrum-toast-info-background-color,var(--spectrum-semantic-informative-color-background))}:host([variant=info]),:host([variant=info]) .closeButton.focus-visible:not(:active),:host([variant=info]) .closeButton.focus-visible:not(:active){color:var(--spectrum-toast-info-background-color,var(--spectrum-semantic-informative-color-background))}:host([variant=info]),:host([variant=info]) .closeButton.focus-visible:not(:active),:host([variant=info]) .closeButton:focus-visible:not(:active){color:var(--spectrum-toast-info-background-color,var(--spectrum-semantic-informative-color-background))}:host([variant=positive]),:host([variant=success]){background-color:var(--spectrum-toast-positive-background-color,var(--spectrum-semantic-positive-color-background))}:host([variant=positive]),:host([variant=positive]) .closeButton.focus-visible:not(:active),:host([variant=positive]) .closeButton.focus-visible:not(:active),:host([variant=success]),:host([variant=success]) .closeButton.focus-visible:not(:active),:host([variant=success]) .closeButton.focus-visible:not(:active){color:var(--spectrum-toast-positive-background-color,var(--spectrum-semantic-positive-color-background))}:host([variant=positive]),:host([variant=positive]) .closeButton.focus-visible:not(:active),:host([variant=positive]) .closeButton:focus-visible:not(:active),:host([variant=success]),:host([variant=success]) .closeButton.focus-visible:not(:active),:host([variant=success]) .closeButton:focus-visible:not(:active){color:var(--spectrum-toast-positive-background-color,var(--spectrum-semantic-positive-color-background))}.content{line-height:1.5}:host(:not([open])){display:none}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const toastVariants = [
        'negative',
        'positive',
        'info',
        'error',
        'warning',
    ];
    /**
     * @slot - The toast content
     */
    class Toast extends SpectrumElement {
        constructor() {
            super(...arguments);
            this.open = false;
            this._timeout = null;
            this._variant = '';
            this.countdownStart = 0;
            this.nextCount = -1;
            this.doCountdown = (time) => {
                if (!this.countdownStart) {
                    this.countdownStart = performance.now();
                }
                if (time - this.countdownStart > this._timeout) {
                    this.open = false;
                    this.countdownStart = 0;
                }
                else {
                    this.countdown();
                }
            };
            this.countdown = () => {
                cancelAnimationFrame(this.nextCount);
                this.nextCount = requestAnimationFrame(this.doCountdown);
            };
            this.holdCountdown = () => {
                this.stopCountdown();
                this.addEventListener('focusout', this.resumeCountdown);
            };
            this.resumeCountdown = () => {
                this.removeEventListener('focusout', this.holdCountdown);
                this.countdown();
            };
        }
        static get styles() {
            return [styles$1];
        }
        set timeout(timeout) {
            const hasTimeout = typeof timeout !== null && timeout > 0;
            const newTimeout = hasTimeout
                ? Math.max(6000, timeout)
                : null;
            const oldValue = this.timeout;
            if (newTimeout && this.countdownStart) {
                this.countdownStart = performance.now();
            }
            this._timeout = newTimeout;
            this.requestUpdate('timeout', oldValue);
        }
        get timeout() {
            return this._timeout;
        }
        /**
         * The variant applies specific styling when set to `negative`, `positive`, `info`, `error`, or `warning`.
         * `variant` attribute is removed when not matching one of the above.
         *
         * @param {String} variant
         */
        set variant(variant) {
            if (variant === this.variant) {
                return;
            }
            const oldValue = this.variant;
            if (toastVariants.includes(variant)) {
                this.setAttribute('variant', variant);
                this._variant = variant;
            }
            else {
                this.removeAttribute('variant');
                this._variant = '';
            }
            this.requestUpdate('variant', oldValue);
        }
        get variant() {
            return this._variant;
        }
        renderIcon(variant) {
            switch (variant) {
                case 'info':
                    return html `
                    <sp-icon-info
                        label="Information"
                        class="type"
                    ></sp-icon-info>
                `;
                case 'negative':
                case 'error': // deprecated
                case 'warning': // deprecated
                    return html `
                    <sp-icon-alert label="Error" class="type"></sp-icon-alert>
                `;
                case 'positive':
                case 'success': // deprecated
                    return html `
                    <sp-icon-checkmark-circle
                        label="Success"
                        class="type"
                    ></sp-icon-checkmark-circle>
                `;
                default:
                    return html ``;
            }
        }
        startCountdown() {
            this.countdown();
            this.addEventListener('focusin', this.holdCountdown);
        }
        stopCountdown() {
            cancelAnimationFrame(this.nextCount);
            this.countdownStart = 0;
        }
        close() {
            this.open = false;
        }
        render() {
            return html `
            ${this.renderIcon(this.variant)}
            <div class="body" role="alert">
                <div class="content">
                    <slot></slot>
                </div>
                <slot name="action"></slot>
            </div>
            <div class="buttons">
                <sp-clear-button
                    label="Close"
                    variant="overBackground"
                    @click=${this.close}
                ></sp-clear-button>
            </div>
        `;
        }
        updated(changes) {
            super.updated(changes);
            if (changes.has('open')) {
                if (this.open) {
                    if (this.timeout) {
                        this.startCountdown();
                    }
                }
                else {
                    if (this.timeout) {
                        this.stopCountdown();
                    }
                    const applyDefault = this.dispatchEvent(new CustomEvent('close', {
                        composed: true,
                        bubbles: true,
                        cancelable: true,
                    }));
                    if (!applyDefault) {
                        this.open = true;
                    }
                }
            }
            if (changes.has('timeout')) {
                if (this.timeout !== null && this.open) {
                    this.startCountdown();
                }
                else {
                    this.stopCountdown();
                }
            }
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Toast.prototype, "open", void 0);
    __decorate([
        property({ type: Number })
    ], Toast.prototype, "timeout", null);
    __decorate([
        property({ type: String })
    ], Toast.prototype, "variant", null);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-toast', Toast);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    const styles = css `
:host{--spectrum-overlay-animation-distance:var(--spectrum-picker-m-popover-offset-y,var(--spectrum-global-dimension-size-75));visibility:hidden;opacity:0;transition:transform var(--spectrum-global-animation-duration-100,.13s) ease-in-out,opacity var(--spectrum-global-animation-duration-100,.13s) ease-in-out,visibility 0ms linear var(--spectrum-global-animation-duration-100,.13s);pointer-events:none}:host([open]){visibility:visible;opacity:1;transition-delay:0ms;pointer-events:auto}:host([placement*=bottom][open]){transform:translateY(var(--spectrum-overlay-animation-distance))}:host([placement*=top][open]){transform:translateY(calc(-1*var(--spectrum-overlay-animation-distance)))}:host([placement*=right][open]){transform:translateX(var(--spectrum-overlay-animation-distance))}:host([placement*=left][open]){transform:translateX(calc(-1*var(--spectrum-overlay-animation-distance)))}:host{--spectrum-tooltip-target-offset:3px;--spectrum-tooltip-tip-width:var(--spectrum-tooltip-tip-height,var(--spectrum-global-dimension-size-50));position:relative;left:0;top:0;display:inline-flex;flex-direction:row;align-items:center;box-sizing:border-box;vertical-align:top;width:auto;padding:var(--spectrum-tooltip-padding-top,var(--spectrum-global-dimension-size-50)) var(--spectrum-tooltip-padding-x,var(--spectrum-global-dimension-size-125));border-radius:var(--spectrum-tooltip-border-radius,var(--spectrum-global-dimension-size-50));min-height:var(--spectrum-tooltip-min-height,var(--spectrum-global-dimension-size-300));max-width:var(--spectrum-tooltip-max-width,var(--spectrum-global-dimension-size-2000));font-size:var(--spectrum-tooltip-text-size,var(--spectrum-global-dimension-font-size-75));font-weight:var(--spectrum-tooltip-text-font-weight,var(--spectrum-global-font-weight-regular));line-height:var(--spectrum-tooltip-text-line-height,var(--spectrum-alias-component-text-line-height));word-break:break-word;-webkit-font-smoothing:antialiased;cursor:default;-webkit-user-select:none;user-select:none}p{margin:0}#tip{position:absolute;height:0;width:0;border-top-width:var(--spectrum-tooltip-tip-width,var(--spectrum-global-dimension-size-100));border-top-style:solid;border-left:var(--spectrum-tooltip-tip-width,var(--spectrum-global-dimension-size-100)) solid transparent;border-right:var(--spectrum-tooltip-tip-width,var(--spectrum-global-dimension-size-100)) solid transparent;border-bottom:var(--spectrum-tooltip-tip-width,var(--spectrum-global-dimension-size-100)) solid transparent}:host([placement*=left]) #tip,:host([placement*=right]) #tip{top:50%;margin-top:calc(-1*var(--spectrum-tooltip-tip-width, var(--spectrum-global-dimension-size-100)))}:host([placement*=right]){margin-left:var(--spectrum-tooltip-target-offset)}:host([placement*=right]) #tip{right:100%;transform:rotate(90deg)}:host([placement*=left]){margin-right:var(--spectrum-tooltip-target-offset)}:host([placement*=left]) #tip{left:100%;transform:rotate(-90deg)}:host([placement*=top]){margin-bottom:var(--spectrum-tooltip-target-offset)}:host([placement*=top]) #tip{top:100%}:host([placement*=bottom]){margin-top:var(--spectrum-tooltip-target-offset)}:host([placement*=bottom]) #tip{bottom:100%;transform:rotate(-180deg)}:host([placement*=bottom]) #tip,:host([placement*=top]) #tip{left:50%;margin-left:calc(-1*var(--spectrum-tooltip-tip-width, var(--spectrum-global-dimension-size-100)))}:host([dir=ltr]) ::slotted([slot=icon]){margin-left:calc(var(--spectrum-tooltip-icon-margin-x,
var(--spectrum-global-dimension-size-100)) - var(--spectrum-tooltip-padding-x,
var(--spectrum-global-dimension-size-125)))}:host([dir=rtl]) ::slotted([slot=icon]){margin-right:calc(var(--spectrum-tooltip-icon-margin-x,
var(--spectrum-global-dimension-size-100)) - var(--spectrum-tooltip-padding-x,
var(--spectrum-global-dimension-size-125)))}:host([dir=ltr]) ::slotted([slot=icon]){margin-right:var(--spectrum-tooltip-icon-margin-x,var(--spectrum-global-dimension-size-100))}:host([dir=rtl]) ::slotted([slot=icon]){margin-left:var(--spectrum-tooltip-icon-margin-x,var(--spectrum-global-dimension-size-100))}::slotted([slot=icon]){width:var(--spectrum-tooltip-icon-size,var(--spectrum-global-dimension-size-175));height:var(--spectrum-tooltip-icon-size,var(--spectrum-global-dimension-size-175));align-self:flex-start;flex-shrink:0;margin-top:1px}#label{line-height:var(--spectrum-tooltip-text-line-height,var(--spectrum-alias-component-text-line-height))}:host{background-color:var(--spectrum-tooltip-background-color,var(--spectrum-global-color-static-gray-700));color:var(--spectrum-tooltip-text-color,var(--spectrum-global-color-static-white))}#tip{border-top-color:var(--spectrum-tooltip-background-color,var(--spectrum-global-color-static-gray-700))}.spectrum-Tooltip--error,:host([variant=negative]){background-color:var(--spectrum-tooltip-negative-background-color,var(--spectrum-global-color-static-red-700))}.spectrum-Tooltip--error #tip,:host([variant=negative]) #tip{border-top-color:var(--spectrum-tooltip-negative-background-color,var(--spectrum-global-color-static-red-700))}.spectrum-Tooltip--help,:host([variant=info]){background-color:var(--spectrum-tooltip-info-background-color,var(--spectrum-global-color-static-blue-700))}.spectrum-Tooltip--help #tip,:host([variant=info]) #tip{border-top-color:var(--spectrum-tooltip-info-background-color,var(--spectrum-global-color-static-blue-700))}.spectrum-Tooltip--success,:host([variant=positive]){background-color:var(--spectrum-tooltip-positive-background-color,var(--spectrum-global-color-static-green-700))}.spectrum-Tooltip--success #tip,:host([variant=positive]) #tip{border-top-color:var(--spectrum-tooltip-positive-background-color,var(--spectrum-global-color-static-green-700))}#tip{border:none}:host([placement*=bottom]) #tip,:host([placement*=left]) #tip,:host([placement*=right]) #tip{transform:none}#tip:after{content:"";position:absolute;left:0;width:0;height:0;border-top-color:transparent;border:var(--spectrum-tooltip-tip-height,var(--spectrum-global-dimension-size-50)) solid transparent;border-top:var(--spectrum-tooltip-tip-height,var(--spectrum-global-dimension-size-50)) solid var(--spectrum-tooltip-background-color,var(--spectrum-global-color-static-gray-700))}:host([placement*=bottom]) #tip:after{bottom:100%;transform:scaleY(-1)}:host([placement*=left]) #tip:after{left:100%;transform:rotate(-90deg)}:host([placement*=right]) #tip:after{right:100%;left:auto;transform:rotate(90deg)}:host([variant=negative]) #tip:after{border-top-color:var(--spectrum-tooltip-negative-background-color,var(--spectrum-global-color-static-red-700))}:host([variant=info]) #tip:after{border-top-color:var(--spectrum-tooltip-info-background-color,var(--spectrum-global-color-static-blue-700))}:host([variant=positive]) #tip:after{border-top-color:var(--spectrum-tooltip-positive-background-color,var(--spectrum-global-color-static-green-700))}
`;

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    /**
     * @slot icon - The icon that appears on the left of the label
     * @slot - The label
     */
    class Tooltip extends SpectrumElement {
        constructor() {
            super(...arguments);
            this.open = false;
            /**
             * @type {"auto" | "auto-start" | "auto-end" | "top" | "bottom" | "right" | "left" | "top-start" | "top-end" | "bottom-start" | "bottom-end" | "right-start" | "right-end" | "left-start" | "left-end" | "none"}
             * @attr
             */
            this.placement = 'top';
            /* Ensure that a '' value for `variant` removes the attribute instead of a blank value */
            this._variant = '';
        }
        static get styles() {
            return [styles];
        }
        get variant() {
            return this._variant;
        }
        set variant(variant) {
            if (variant === this.variant) {
                return;
            }
            if (['info', 'positive', 'negative'].includes(variant)) {
                this.setAttribute('variant', variant);
                this._variant = variant;
                return;
            }
            this.removeAttribute('variant');
            this._variant = '';
        }
        connectedCallback() {
            super.connectedCallback();
            this.addEventListener('sp-overlay-query', this.onOverlayQuery);
        }
        disconnectedCallback() {
            super.disconnectedCallback();
            this.removeEventListener('sp-overlay-query', this.onOverlayQuery);
        }
        onOverlayQuery(event) {
            /* c8 ignore next */
            if (!event.target)
                return;
            const target = event.target;
            /* c8 ignore next */
            if (target !== this)
                return;
            event.detail.overlayContentTipElement = this.tipElement;
        }
        render() {
            return html `
            <slot name="icon"></slot>
            <span id="label"><slot></slot></span>
            <span id="tip"></span>
        `;
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], Tooltip.prototype, "open", void 0);
    __decorate([
        property({ reflect: true })
    ], Tooltip.prototype, "placement", void 0);
    __decorate([
        query('#tip')
    ], Tooltip.prototype, "tipElement", void 0);
    __decorate([
        property({ type: String })
    ], Tooltip.prototype, "variant", null);

    /*
    Copyright 2020 Adobe. All rights reserved.
    This file is licensed to you under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
    OF ANY KIND, either express or implied. See the License for the specific language
    governing permissions and limitations under the License.
    */
    customElements.define('sp-tooltip', Tooltip);

    function LoadIcons(data) {
        const svg = (new DOMParser())
            .parseFromString(data, "image/svg+xml")
            .firstChild;
        if (!svg || svg.tagName !== 'svg') {
            return null;
        }
        svg.style.display = 'none';
        document.head.insertBefore(svg, null);
        return svg;
    }

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
        const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_custom_element_data(node, prop, value) {
        if (prop in node) {
            node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;
        }
        else {
            attr(node, prop, value);
        }
    }
    function xlink_attr(node, attribute, value) {
        node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            callbacks.slice().forEach(fn => fn(event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    function outro_and_destroy_block(block, lookup) {
        transition_out(block, 1, 1, () => {
            lookup.delete(block.key);
        });
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                block.p(child_ctx, dirty);
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error('Cannot have duplicate keys in a keyed each');
            }
            keys.add(key);
        }
    }

    function bind(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : options.context || []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.38.2' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    const CanvasStateTool = writable('pan');

    const TimelinePlayOffset = writable(0);

    /* src/Components/SVGIcon.svelte generated by Svelte v3.38.2 */

    const file$f = "src/Components/SVGIcon.svelte";

    function create_fragment$f(ctx) {
    	let svg;
    	let use;
    	let use_xlink_href_value;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			use = svg_element("use");
    			xlink_attr(use, "xlink:href", use_xlink_href_value = "#" + /*name*/ ctx[0]);
    			add_location(use, file$f, 10, 4, 206);
    			attr_dev(svg, "viewBox", "0 0 22 22");
    			attr_dev(svg, "role", "img");
    			attr_dev(svg, "fill", "currentColor");
    			attr_dev(svg, "height", "18");
    			attr_dev(svg, "width", "18");
    			attr_dev(svg, "aria-hidden", "true");
    			add_location(svg, file$f, 2, 0, 46);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, use);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*name*/ 1 && use_xlink_href_value !== (use_xlink_href_value = "#" + /*name*/ ctx[0])) {
    				xlink_attr(use, "xlink:href", use_xlink_href_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("SVGIcon", slots, []);
    	let { name } = $$props;
    	const writable_props = ["name"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SVGIcon> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("name" in $$props) $$invalidate(0, name = $$props.name);
    	};

    	$$self.$capture_state = () => ({ name });

    	$$self.$inject_state = $$props => {
    		if ("name" in $$props) $$invalidate(0, name = $$props.name);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [name];
    }

    class SVGIcon extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, { name: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SVGIcon",
    			options,
    			id: create_fragment$f.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*name*/ ctx[0] === undefined && !("name" in props)) {
    			console.warn("<SVGIcon> was created without expected prop 'name'");
    		}
    	}

    	get name() {
    		throw new Error("<SVGIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<SVGIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Components/ToolbarSubTools.svelte generated by Svelte v3.38.2 */
    const file$e = "src/Components/ToolbarSubTools.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	return child_ctx;
    }

    // (26:16) {#if current !== button}
    function create_if_block$3(ctx) {
    	let sp_action_button;
    	let sp_icon;
    	let svgicon;
    	let t;
    	let sp_action_button_data_tool_name_value;
    	let sp_action_button_title_value;
    	let current;
    	let mounted;
    	let dispose;

    	svgicon = new SVGIcon({
    			props: { name: /*button*/ ctx[10].icon },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			sp_action_button = element("sp-action-button");
    			sp_icon = element("sp-icon");
    			create_component(svgicon.$$.fragment);
    			t = space();
    			set_custom_element_data(sp_icon, "slot", "icon");
    			add_location(sp_icon, file$e, 27, 24, 1378);
    			set_custom_element_data(sp_action_button, "data-tool-name", sp_action_button_data_tool_name_value = /*button*/ ctx[10].tool);
    			set_custom_element_data(sp_action_button, "title", sp_action_button_title_value = /*button*/ ctx[10].title);
    			add_location(sp_action_button, file$e, 26, 20, 1260);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, sp_action_button, anchor);
    			append_dev(sp_action_button, sp_icon);
    			mount_component(svgicon, sp_icon, null);
    			append_dev(sp_action_button, t);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(sp_action_button, "click", /*selectTool*/ ctx[6], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			const svgicon_changes = {};
    			if (dirty & /*buttons*/ 4) svgicon_changes.name = /*button*/ ctx[10].icon;
    			svgicon.$set(svgicon_changes);

    			if (!current || dirty & /*buttons*/ 4 && sp_action_button_data_tool_name_value !== (sp_action_button_data_tool_name_value = /*button*/ ctx[10].tool)) {
    				set_custom_element_data(sp_action_button, "data-tool-name", sp_action_button_data_tool_name_value);
    			}

    			if (!current || dirty & /*buttons*/ 4 && sp_action_button_title_value !== (sp_action_button_title_value = /*button*/ ctx[10].title)) {
    				set_custom_element_data(sp_action_button, "title", sp_action_button_title_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(svgicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(svgicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(sp_action_button);
    			destroy_component(svgicon);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(26:16) {#if current !== button}",
    		ctx
    	});

    	return block;
    }

    // (25:12) {#each buttons as button (button.tool)}
    function create_each_block$2(key_1, ctx) {
    	let first;
    	let if_block_anchor;
    	let current;
    	let if_block = /*current*/ ctx[5] !== /*button*/ ctx[10] && create_if_block$3(ctx);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first = empty();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			this.first = first;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (/*current*/ ctx[5] !== /*button*/ ctx[10]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*current, buttons*/ 36) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$3(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(25:12) {#each buttons as button (button.tool)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let overlay_trigger;
    	let sp_action_button;
    	let sp_icon;
    	let svgicon;
    	let sp_action_button_title_value;
    	let sp_action_button_data_tool_name_value;
    	let sp_action_button_selected_value;
    	let t;
    	let sp_popover;
    	let sp_action_group;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let current;
    	let mounted;
    	let dispose;

    	svgicon = new SVGIcon({
    			props: { name: /*current*/ ctx[5].icon },
    			$$inline: true
    		});

    	let each_value = /*buttons*/ ctx[2];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*button*/ ctx[10].tool;
    	validate_each_keys(ctx, each_value, get_each_context$2, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$2(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$2(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			overlay_trigger = element("overlay-trigger");
    			sp_action_button = element("sp-action-button");
    			sp_icon = element("sp-icon");
    			create_component(svgicon.$$.fragment);
    			t = space();
    			sp_popover = element("sp-popover");
    			sp_action_group = element("sp-action-group");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			set_custom_element_data(sp_icon, "slot", "icon");
    			add_location(sp_icon, file$e, 18, 8, 847);
    			set_custom_element_data(sp_action_button, "title", sp_action_button_title_value = /*current*/ ctx[5].title);
    			set_custom_element_data(sp_action_button, "data-tool-name", sp_action_button_data_tool_name_value = /*current*/ ctx[5].tool);
    			set_custom_element_data(sp_action_button, "selected", sp_action_button_selected_value = /*selected*/ ctx[0] === /*current*/ ctx[5].tool);
    			set_custom_element_data(sp_action_button, "disabled", /*disabled*/ ctx[1]);
    			set_custom_element_data(sp_action_button, "hold-affordance", "");
    			set_custom_element_data(sp_action_button, "slot", "trigger");
    			add_location(sp_action_button, file$e, 17, 4, 638);
    			set_custom_element_data(sp_action_group, "quiet", "");
    			set_style(sp_action_group, "padding", "var(--spectrum-global-dimension-size-50)");
    			add_location(sp_action_group, file$e, 23, 8, 1062);
    			set_custom_element_data(sp_popover, "slot", "longpress-content");
    			set_custom_element_data(sp_popover, "tip", "");
    			set_style(sp_popover, "--spectrum-popover-dialog-min-width", "0");
    			add_location(sp_popover, file$e, 22, 4, 963);
    			set_custom_element_data(overlay_trigger, "type", "inline");
    			set_custom_element_data(overlay_trigger, "placement", /*placement*/ ctx[3]);
    			set_custom_element_data(overlay_trigger, "disabled", /*disabled*/ ctx[1]);
    			add_location(overlay_trigger, file$e, 13, 0, 452);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, overlay_trigger, anchor);
    			append_dev(overlay_trigger, sp_action_button);
    			append_dev(sp_action_button, sp_icon);
    			mount_component(svgicon, sp_icon, null);
    			append_dev(overlay_trigger, t);
    			append_dev(overlay_trigger, sp_popover);
    			append_dev(sp_popover, sp_action_group);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(sp_action_group, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(sp_action_button, "click", /*click_handler*/ ctx[7], false, false, false),
    					listen_dev(overlay_trigger, "sp-opened", /*sp_opened_handler*/ ctx[8], false, false, false),
    					listen_dev(overlay_trigger, "sp-closed", /*sp_closed_handler*/ ctx[9], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const svgicon_changes = {};
    			if (dirty & /*current*/ 32) svgicon_changes.name = /*current*/ ctx[5].icon;
    			svgicon.$set(svgicon_changes);

    			if (!current || dirty & /*current*/ 32 && sp_action_button_title_value !== (sp_action_button_title_value = /*current*/ ctx[5].title)) {
    				set_custom_element_data(sp_action_button, "title", sp_action_button_title_value);
    			}

    			if (!current || dirty & /*current*/ 32 && sp_action_button_data_tool_name_value !== (sp_action_button_data_tool_name_value = /*current*/ ctx[5].tool)) {
    				set_custom_element_data(sp_action_button, "data-tool-name", sp_action_button_data_tool_name_value);
    			}

    			if (!current || dirty & /*selected, current*/ 33 && sp_action_button_selected_value !== (sp_action_button_selected_value = /*selected*/ ctx[0] === /*current*/ ctx[5].tool)) {
    				set_custom_element_data(sp_action_button, "selected", sp_action_button_selected_value);
    			}

    			if (!current || dirty & /*disabled*/ 2) {
    				set_custom_element_data(sp_action_button, "disabled", /*disabled*/ ctx[1]);
    			}

    			if (dirty & /*buttons, selectTool, current*/ 100) {
    				each_value = /*buttons*/ ctx[2];
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$2, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, sp_action_group, outro_and_destroy_block, create_each_block$2, null, get_each_context$2);
    				check_outros();
    			}

    			if (!current || dirty & /*placement*/ 8) {
    				set_custom_element_data(overlay_trigger, "placement", /*placement*/ ctx[3]);
    			}

    			if (!current || dirty & /*disabled*/ 2) {
    				set_custom_element_data(overlay_trigger, "disabled", /*disabled*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(svgicon.$$.fragment, local);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(svgicon.$$.fragment, local);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(overlay_trigger);
    			destroy_component(svgicon);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let current;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("ToolbarSubTools", slots, []);
    	let { disabled = false } = $$props;
    	let { selected = undefined } = $$props;
    	let { buttons = [] } = $$props;
    	let { placement = "right" } = $$props;
    	let open = false;

    	function selectTool(e) {
    		const el = e.target;
    		$$invalidate(0, selected = el.getAttribute("data-tool-name"));
    		el.dispatchEvent(new Event("close", { bubbles: true, composed: true }));
    	}

    	const writable_props = ["disabled", "selected", "buttons", "placement"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ToolbarSubTools> was created with unknown prop '${key}'`);
    	});

    	const click_handler = e => !open && selectTool(e);
    	const sp_opened_handler = () => $$invalidate(4, open = true);
    	const sp_closed_handler = () => $$invalidate(4, open = false);

    	$$self.$$set = $$props => {
    		if ("disabled" in $$props) $$invalidate(1, disabled = $$props.disabled);
    		if ("selected" in $$props) $$invalidate(0, selected = $$props.selected);
    		if ("buttons" in $$props) $$invalidate(2, buttons = $$props.buttons);
    		if ("placement" in $$props) $$invalidate(3, placement = $$props.placement);
    	};

    	$$self.$capture_state = () => ({
    		SVGIcon,
    		disabled,
    		selected,
    		buttons,
    		placement,
    		open,
    		selectTool,
    		current
    	});

    	$$self.$inject_state = $$props => {
    		if ("disabled" in $$props) $$invalidate(1, disabled = $$props.disabled);
    		if ("selected" in $$props) $$invalidate(0, selected = $$props.selected);
    		if ("buttons" in $$props) $$invalidate(2, buttons = $$props.buttons);
    		if ("placement" in $$props) $$invalidate(3, placement = $$props.placement);
    		if ("open" in $$props) $$invalidate(4, open = $$props.open);
    		if ("current" in $$props) $$invalidate(5, current = $$props.current);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*buttons, selected*/ 5) {
    			$$invalidate(5, current = buttons.find(v => v.tool === selected) || buttons[0]);
    		}
    	};

    	return [
    		selected,
    		disabled,
    		buttons,
    		placement,
    		open,
    		current,
    		selectTool,
    		click_handler,
    		sp_opened_handler,
    		sp_closed_handler
    	];
    }

    class ToolbarSubTools extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$e, create_fragment$e, safe_not_equal, {
    			disabled: 1,
    			selected: 0,
    			buttons: 2,
    			placement: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ToolbarSubTools",
    			options,
    			id: create_fragment$e.name
    		});
    	}

    	get disabled() {
    		throw new Error("<ToolbarSubTools>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<ToolbarSubTools>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected() {
    		throw new Error("<ToolbarSubTools>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<ToolbarSubTools>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get buttons() {
    		throw new Error("<ToolbarSubTools>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set buttons(value) {
    		throw new Error("<ToolbarSubTools>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placement() {
    		throw new Error("<ToolbarSubTools>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placement(value) {
    		throw new Error("<ToolbarSubTools>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Components/ToolbarRegionUp.svelte generated by Svelte v3.38.2 */
    const file$d = "src/Components/ToolbarRegionUp.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	return child_ctx;
    }

    // (15:8) {:else}
    function create_else_block(ctx) {
    	let sp_action_button;
    	let sp_icon;
    	let svgicon;
    	let t;
    	let sp_action_button_title_value;
    	let sp_action_button_selected_value;
    	let sp_action_button_data_tool_name_value;
    	let current;
    	let mounted;
    	let dispose;

    	svgicon = new SVGIcon({
    			props: { name: /*button*/ ctx[5].icon },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			sp_action_button = element("sp-action-button");
    			sp_icon = element("sp-icon");
    			create_component(svgicon.$$.fragment);
    			t = space();
    			set_custom_element_data(sp_icon, "slot", "icon");
    			add_location(sp_icon, file$d, 16, 16, 717);
    			set_custom_element_data(sp_action_button, "title", sp_action_button_title_value = /*button*/ ctx[5].title);
    			set_custom_element_data(sp_action_button, "selected", sp_action_button_selected_value = /*selected*/ ctx[0] === /*button*/ ctx[5].tool);
    			set_custom_element_data(sp_action_button, "disabled", /*disabled*/ ctx[1]);
    			set_custom_element_data(sp_action_button, "data-tool-name", sp_action_button_data_tool_name_value = /*button*/ ctx[5].tool);
    			add_location(sp_action_button, file$d, 15, 12, 551);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, sp_action_button, anchor);
    			append_dev(sp_action_button, sp_icon);
    			mount_component(svgicon, sp_icon, null);
    			append_dev(sp_action_button, t);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(sp_action_button, "click", /*selectTool*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			const svgicon_changes = {};
    			if (dirty & /*buttons*/ 4) svgicon_changes.name = /*button*/ ctx[5].icon;
    			svgicon.$set(svgicon_changes);

    			if (!current || dirty & /*buttons*/ 4 && sp_action_button_title_value !== (sp_action_button_title_value = /*button*/ ctx[5].title)) {
    				set_custom_element_data(sp_action_button, "title", sp_action_button_title_value);
    			}

    			if (!current || dirty & /*selected, buttons*/ 5 && sp_action_button_selected_value !== (sp_action_button_selected_value = /*selected*/ ctx[0] === /*button*/ ctx[5].tool)) {
    				set_custom_element_data(sp_action_button, "selected", sp_action_button_selected_value);
    			}

    			if (!current || dirty & /*disabled*/ 2) {
    				set_custom_element_data(sp_action_button, "disabled", /*disabled*/ ctx[1]);
    			}

    			if (!current || dirty & /*buttons*/ 4 && sp_action_button_data_tool_name_value !== (sp_action_button_data_tool_name_value = /*button*/ ctx[5].tool)) {
    				set_custom_element_data(sp_action_button, "data-tool-name", sp_action_button_data_tool_name_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(svgicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(svgicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(sp_action_button);
    			destroy_component(svgicon);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(15:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (13:8) {#if Array.isArray(button)}
    function create_if_block$2(ctx) {
    	let toolbarsubtools;
    	let updating_selected;
    	let current;

    	function toolbarsubtools_selected_binding(value) {
    		/*toolbarsubtools_selected_binding*/ ctx[4](value);
    	}

    	let toolbarsubtools_props = {
    		buttons: /*button*/ ctx[5],
    		disabled: /*disabled*/ ctx[1]
    	};

    	if (/*selected*/ ctx[0] !== void 0) {
    		toolbarsubtools_props.selected = /*selected*/ ctx[0];
    	}

    	toolbarsubtools = new ToolbarSubTools({
    			props: toolbarsubtools_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(toolbarsubtools, "selected", toolbarsubtools_selected_binding));

    	const block = {
    		c: function create() {
    			create_component(toolbarsubtools.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(toolbarsubtools, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const toolbarsubtools_changes = {};
    			if (dirty & /*buttons*/ 4) toolbarsubtools_changes.buttons = /*button*/ ctx[5];
    			if (dirty & /*disabled*/ 2) toolbarsubtools_changes.disabled = /*disabled*/ ctx[1];

    			if (!updating_selected && dirty & /*selected*/ 1) {
    				updating_selected = true;
    				toolbarsubtools_changes.selected = /*selected*/ ctx[0];
    				add_flush_callback(() => updating_selected = false);
    			}

    			toolbarsubtools.$set(toolbarsubtools_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(toolbarsubtools.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(toolbarsubtools.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(toolbarsubtools, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(13:8) {#if Array.isArray(button)}",
    		ctx
    	});

    	return block;
    }

    // (12:4) {#each buttons as button}
    function create_each_block$1(ctx) {
    	let show_if;
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$2, create_else_block];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (dirty & /*buttons*/ 4) show_if = !!Array.isArray(/*button*/ ctx[5]);
    		if (show_if) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx, -1);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx, dirty);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(12:4) {#each buttons as button}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let sp_action_group;
    	let current;
    	let each_value = /*buttons*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			sp_action_group = element("sp-action-group");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			set_custom_element_data(sp_action_group, "vertical", "");
    			set_custom_element_data(sp_action_group, "quiet", "");
    			set_custom_element_data(sp_action_group, "emphasized", "");
    			add_location(sp_action_group, file$d, 10, 0, 314);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, sp_action_group, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(sp_action_group, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*buttons, disabled, selected, Array, selectTool*/ 15) {
    				each_value = /*buttons*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(sp_action_group, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(sp_action_group);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("ToolbarRegionUp", slots, []);
    	let { selected = undefined } = $$props;
    	let { disabled = false } = $$props;
    	let { buttons = [] } = $$props;

    	function selectTool(e) {
    		const el = e.target;
    		$$invalidate(0, selected = el.getAttribute("data-tool-name"));
    	}

    	const writable_props = ["selected", "disabled", "buttons"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ToolbarRegionUp> was created with unknown prop '${key}'`);
    	});

    	function toolbarsubtools_selected_binding(value) {
    		selected = value;
    		$$invalidate(0, selected);
    	}

    	$$self.$$set = $$props => {
    		if ("selected" in $$props) $$invalidate(0, selected = $$props.selected);
    		if ("disabled" in $$props) $$invalidate(1, disabled = $$props.disabled);
    		if ("buttons" in $$props) $$invalidate(2, buttons = $$props.buttons);
    	};

    	$$self.$capture_state = () => ({
    		SVGIcon,
    		ToolbarSubTools,
    		selected,
    		disabled,
    		buttons,
    		selectTool
    	});

    	$$self.$inject_state = $$props => {
    		if ("selected" in $$props) $$invalidate(0, selected = $$props.selected);
    		if ("disabled" in $$props) $$invalidate(1, disabled = $$props.disabled);
    		if ("buttons" in $$props) $$invalidate(2, buttons = $$props.buttons);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [selected, disabled, buttons, selectTool, toolbarsubtools_selected_binding];
    }

    class ToolbarRegionUp extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, { selected: 0, disabled: 1, buttons: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ToolbarRegionUp",
    			options,
    			id: create_fragment$d.name
    		});
    	}

    	get selected() {
    		throw new Error("<ToolbarRegionUp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<ToolbarRegionUp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<ToolbarRegionUp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<ToolbarRegionUp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get buttons() {
    		throw new Error("<ToolbarRegionUp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set buttons(value) {
    		throw new Error("<ToolbarRegionUp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Components/Timeline/TimelineControls.svelte generated by Svelte v3.38.2 */

    const file$c = "src/Components/Timeline/TimelineControls.svelte";

    function create_fragment$c(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "controls";
    			attr_dev(div, "class", "timeline-controls");
    			add_location(div, file$c, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("TimelineControls", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TimelineControls> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class TimelineControls extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TimelineControls",
    			options,
    			id: create_fragment$c.name
    		});
    	}
    }

    /* src/Components/Timeline/TimelineItem.svelte generated by Svelte v3.38.2 */

    const file$b = "src/Components/Timeline/TimelineItem.svelte";

    // (9:4) {#if keyframes}
    function create_if_block$1(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "timeline-keyframes-line");
    			add_location(div, file$b, 9, 8, 283);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(9:4) {#if keyframes}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let div;
    	let t;
    	let current;
    	let if_block = /*keyframes*/ ctx[2] && create_if_block$1(ctx);
    	const default_slot_template = /*#slots*/ ctx[4].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			t = space();
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", "timeline-item");
    			toggle_class(div, "has-keyframes", /*keyframes*/ ctx[2]);
    			toggle_class(div, "is-disabled", /*disabled*/ ctx[0]);
    			toggle_class(div, "is-selected", /*selected*/ ctx[1]);
    			add_location(div, file$b, 4, 0, 117);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*keyframes*/ ctx[2]) {
    				if (if_block) ; else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					if_block.m(div, t);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
    				}
    			}

    			if (dirty & /*keyframes*/ 4) {
    				toggle_class(div, "has-keyframes", /*keyframes*/ ctx[2]);
    			}

    			if (dirty & /*disabled*/ 1) {
    				toggle_class(div, "is-disabled", /*disabled*/ ctx[0]);
    			}

    			if (dirty & /*selected*/ 2) {
    				toggle_class(div, "is-selected", /*selected*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("TimelineItem", slots, ['default']);
    	let { disabled = false } = $$props;
    	let { selected = false } = $$props;
    	let { keyframes = false } = $$props;
    	const writable_props = ["disabled", "selected", "keyframes"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TimelineItem> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("disabled" in $$props) $$invalidate(0, disabled = $$props.disabled);
    		if ("selected" in $$props) $$invalidate(1, selected = $$props.selected);
    		if ("keyframes" in $$props) $$invalidate(2, keyframes = $$props.keyframes);
    		if ("$$scope" in $$props) $$invalidate(3, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ disabled, selected, keyframes });

    	$$self.$inject_state = $$props => {
    		if ("disabled" in $$props) $$invalidate(0, disabled = $$props.disabled);
    		if ("selected" in $$props) $$invalidate(1, selected = $$props.selected);
    		if ("keyframes" in $$props) $$invalidate(2, keyframes = $$props.keyframes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [disabled, selected, keyframes, $$scope, slots];
    }

    class TimelineItem extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, { disabled: 0, selected: 1, keyframes: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TimelineItem",
    			options,
    			id: create_fragment$b.name
    		});
    	}

    	get disabled() {
    		throw new Error("<TimelineItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<TimelineItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected() {
    		throw new Error("<TimelineItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<TimelineItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get keyframes() {
    		throw new Error("<TimelineItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set keyframes(value) {
    		throw new Error("<TimelineItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Components/Timeline/Keyframe.svelte generated by Svelte v3.38.2 */

    const file$a = "src/Components/Timeline/Keyframe.svelte";

    function create_fragment$a(ctx) {
    	let div;
    	let div_style_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "timeline-keyframe");
    			attr_dev(div, "style", div_style_value = `--keyframe-offset: ${/*offset*/ ctx[0]}`);
    			toggle_class(div, "is-selected", /*selected*/ ctx[1]);
    			add_location(div, file$a, 3, 0, 77);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "click", /*click_handler*/ ctx[2], false, false, false),
    					listen_dev(div, "pointerdown", /*pointerdown_handler*/ ctx[3], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*offset*/ 1 && div_style_value !== (div_style_value = `--keyframe-offset: ${/*offset*/ ctx[0]}`)) {
    				attr_dev(div, "style", div_style_value);
    			}

    			if (dirty & /*selected*/ 2) {
    				toggle_class(div, "is-selected", /*selected*/ ctx[1]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Keyframe", slots, []);
    	let { offset } = $$props;
    	let { selected = false } = $$props;
    	const writable_props = ["offset", "selected"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Keyframe> was created with unknown prop '${key}'`);
    	});

    	function click_handler(event) {
    		bubble($$self, event);
    	}

    	function pointerdown_handler(event) {
    		bubble($$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ("offset" in $$props) $$invalidate(0, offset = $$props.offset);
    		if ("selected" in $$props) $$invalidate(1, selected = $$props.selected);
    	};

    	$$self.$capture_state = () => ({ offset, selected });

    	$$self.$inject_state = $$props => {
    		if ("offset" in $$props) $$invalidate(0, offset = $$props.offset);
    		if ("selected" in $$props) $$invalidate(1, selected = $$props.selected);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [offset, selected, click_handler, pointerdown_handler];
    }

    class Keyframe$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, { offset: 0, selected: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Keyframe",
    			options,
    			id: create_fragment$a.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*offset*/ ctx[0] === undefined && !("offset" in props)) {
    			console.warn("<Keyframe> was created without expected prop 'offset'");
    		}
    	}

    	get offset() {
    		throw new Error("<Keyframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set offset(value) {
    		throw new Error("<Keyframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected() {
    		throw new Error("<Keyframe>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<Keyframe>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Components/Timeline/Easing.svelte generated by Svelte v3.38.2 */

    const file$9 = "src/Components/Timeline/Easing.svelte";

    // (16:0) {#if end != null}
    function create_if_block(ctx) {
    	let div;
    	let div_style_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "timeline-easing");
    			attr_dev(div, "style", div_style_value = `--timeline-keyframe-easing-start: ${/*min*/ ctx[2]}; --timeline-keyframe-easing-end: ${/*max*/ ctx[3]}`);
    			toggle_class(div, "is-selected", /*selected*/ ctx[1]);
    			add_location(div, file$9, 16, 0, 284);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "click", /*click_handler*/ ctx[5], false, false, false),
    					listen_dev(div, "contextmenu", /*contextmenu_handler*/ ctx[6], false, false, false),
    					listen_dev(div, "pointerdown", /*pointerdown_handler*/ ctx[7], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*min, max*/ 12 && div_style_value !== (div_style_value = `--timeline-keyframe-easing-start: ${/*min*/ ctx[2]}; --timeline-keyframe-easing-end: ${/*max*/ ctx[3]}`)) {
    				attr_dev(div, "style", div_style_value);
    			}

    			if (dirty & /*selected*/ 2) {
    				toggle_class(div, "is-selected", /*selected*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(16:0) {#if end != null}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let if_block_anchor;
    	let if_block = /*end*/ ctx[0] != null && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*end*/ ctx[0] != null) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Easing", slots, []);
    	let { start = 0 } = $$props;
    	let { end = null } = $$props;
    	let { selected = false } = $$props;
    	let min, max;
    	const writable_props = ["start", "end", "selected"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Easing> was created with unknown prop '${key}'`);
    	});

    	function click_handler(event) {
    		bubble($$self, event);
    	}

    	function contextmenu_handler(event) {
    		bubble($$self, event);
    	}

    	function pointerdown_handler(event) {
    		bubble($$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ("start" in $$props) $$invalidate(4, start = $$props.start);
    		if ("end" in $$props) $$invalidate(0, end = $$props.end);
    		if ("selected" in $$props) $$invalidate(1, selected = $$props.selected);
    	};

    	$$self.$capture_state = () => ({ start, end, selected, min, max });

    	$$self.$inject_state = $$props => {
    		if ("start" in $$props) $$invalidate(4, start = $$props.start);
    		if ("end" in $$props) $$invalidate(0, end = $$props.end);
    		if ("selected" in $$props) $$invalidate(1, selected = $$props.selected);
    		if ("min" in $$props) $$invalidate(2, min = $$props.min);
    		if ("max" in $$props) $$invalidate(3, max = $$props.max);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*end, start*/ 17) {
    			{
    				if (end != null && start > end) {
    					$$invalidate(2, min = end);
    					$$invalidate(3, max = start);
    				} else {
    					$$invalidate(2, min = start);
    					$$invalidate(3, max = end);
    				}
    			}
    		}
    	};

    	return [
    		end,
    		selected,
    		min,
    		max,
    		start,
    		click_handler,
    		contextmenu_handler,
    		pointerdown_handler
    	];
    }

    class Easing extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, { start: 4, end: 0, selected: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Easing",
    			options,
    			id: create_fragment$9.name
    		});
    	}

    	get start() {
    		throw new Error("<Easing>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set start(value) {
    		throw new Error("<Easing>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get end() {
    		throw new Error("<Easing>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set end(value) {
    		throw new Error("<Easing>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected() {
    		throw new Error("<Easing>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<Easing>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Components/Timeline/LocalMarker.svelte generated by Svelte v3.38.2 */

    const file$8 = "src/Components/Timeline/LocalMarker.svelte";

    function create_fragment$8(ctx) {
    	let div1;
    	let div0;
    	let t;
    	let div1_style_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			t = text(/*label*/ ctx[0]);
    			attr_dev(div0, "class", "timeline-marker-text");
    			add_location(div0, file$8, 9, 4, 396);
    			attr_dev(div1, "class", "timeline-local-marker");
    			attr_dev(div1, "data-color", /*color*/ ctx[4]);
    			attr_dev(div1, "style", div1_style_value = `--timeline-marker-offset: ${/*offset*/ ctx[1]}; --timeline-marker-length: ${/*length*/ ctx[2]}; --timeline-marker-lines: ${/*lines*/ ctx[3]}; background: var(--spectrum-global-color-${/*color*/ ctx[4]}-400)`);
    			add_location(div1, file$8, 6, 0, 149);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, t);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*click_handler*/ ctx[5], false, false, false),
    					listen_dev(div0, "pointerdown", /*pointerdown_handler*/ ctx[6], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*label*/ 1) set_data_dev(t, /*label*/ ctx[0]);

    			if (dirty & /*color*/ 16) {
    				attr_dev(div1, "data-color", /*color*/ ctx[4]);
    			}

    			if (dirty & /*offset, length, lines, color*/ 30 && div1_style_value !== (div1_style_value = `--timeline-marker-offset: ${/*offset*/ ctx[1]}; --timeline-marker-length: ${/*length*/ ctx[2]}; --timeline-marker-lines: ${/*lines*/ ctx[3]}; background: var(--spectrum-global-color-${/*color*/ ctx[4]}-400)`)) {
    				attr_dev(div1, "style", div1_style_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("LocalMarker", slots, []);
    	let { label = "" } = $$props;
    	let { offset = 0 } = $$props;
    	let { length = 0 } = $$props;
    	let { lines = 0 } = $$props;
    	let { color = "purple" } = $$props;
    	const writable_props = ["label", "offset", "length", "lines", "color"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<LocalMarker> was created with unknown prop '${key}'`);
    	});

    	function click_handler(event) {
    		bubble($$self, event);
    	}

    	function pointerdown_handler(event) {
    		bubble($$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ("label" in $$props) $$invalidate(0, label = $$props.label);
    		if ("offset" in $$props) $$invalidate(1, offset = $$props.offset);
    		if ("length" in $$props) $$invalidate(2, length = $$props.length);
    		if ("lines" in $$props) $$invalidate(3, lines = $$props.lines);
    		if ("color" in $$props) $$invalidate(4, color = $$props.color);
    	};

    	$$self.$capture_state = () => ({ label, offset, length, lines, color });

    	$$self.$inject_state = $$props => {
    		if ("label" in $$props) $$invalidate(0, label = $$props.label);
    		if ("offset" in $$props) $$invalidate(1, offset = $$props.offset);
    		if ("length" in $$props) $$invalidate(2, length = $$props.length);
    		if ("lines" in $$props) $$invalidate(3, lines = $$props.lines);
    		if ("color" in $$props) $$invalidate(4, color = $$props.color);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [label, offset, length, lines, color, click_handler, pointerdown_handler];
    }

    class LocalMarker extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {
    			label: 0,
    			offset: 1,
    			length: 2,
    			lines: 3,
    			color: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "LocalMarker",
    			options,
    			id: create_fragment$8.name
    		});
    	}

    	get label() {
    		throw new Error("<LocalMarker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<LocalMarker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get offset() {
    		throw new Error("<LocalMarker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set offset(value) {
    		throw new Error("<LocalMarker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get length() {
    		throw new Error("<LocalMarker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set length(value) {
    		throw new Error("<LocalMarker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get lines() {
    		throw new Error("<LocalMarker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set lines(value) {
    		throw new Error("<LocalMarker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<LocalMarker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<LocalMarker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const ElementIconMap = {
        group: 'expr:group',
        rect: 'expr:rectangle-tool',
        ellipse: 'expr:ellipse',
        poly: 'expr:polygon',
    };
    const FallbackElementIcon = 'expr:unknown';
    const ElementTitleMap = {
        group: 'Group',
        rect: 'Rectangle',
        ellipse: 'Ellipse',
        path: 'Path',
        star: 'Star',
        poly: 'Polygon',
        'regular-polygon': 'Regular polygon',
        'clip-path': 'Clip path',
    };
    const PropertyNameMap = {
        global: {
            // Transform
            originX: 'Origin X',
            originY: 'Origin Y',
            translateX: 'Translate X',
            translateY: 'Translate Y',
            scaleX: 'Scale X',
            scaleY: 'Scale Y',
            skewX: 'Skew X',
            skewY: 'Skew Y',
            rotate: 'Rotate',
            //
            opacity: 'Opacity',
            // Fill
            fill: 'Fill',
            fillOpacity: 'Fill opacity',
            // Stroke
            strokeBrush: 'Stroke',
            strokeOpacity: 'Stroke opacity',
            strokeLineWidth: 'Stroke width',
            strokeDashArray: 'Stroke dashes',
            strokeDashOffset: 'Stroke dash offset',
        },
        rect: {
            width: 'Width',
            height: 'Height',
            // TODO: radius
            radius: 'Corner radius',
        },
        ellipse: {
            width: 'Width',
            height: 'Height',
        },
        poly: {
        // TODO: poly
        //shape: 'Points',
        },
        // TODO: rest
    };

    /* src/Components/Timeline/Element.svelte generated by Svelte v3.38.2 */
    const file$7 = "src/Components/Timeline/Element.svelte";

    function create_fragment$7(ctx) {
    	let div;
    	let sp_icon;
    	let svgicon;
    	let t0;
    	let span;
    	let t1_value = (/*title*/ ctx[1] || ElementIconMap[/*type*/ ctx[0]] || "Unknown") + "";
    	let t1;
    	let current;

    	svgicon = new SVGIcon({
    			props: {
    				name: ElementIconMap[/*type*/ ctx[0]] || FallbackElementIcon
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			sp_icon = element("sp-icon");
    			create_component(svgicon.$$.fragment);
    			t0 = space();
    			span = element("span");
    			t1 = text(t1_value);
    			set_custom_element_data(sp_icon, "size", "s");
    			add_location(sp_icon, file$7, 10, 4, 352);
    			add_location(span, file$7, 11, 4, 447);
    			attr_dev(div, "class", "timeline-item");
    			toggle_class(div, "is-disabled", /*disabled*/ ctx[2]);
    			toggle_class(div, "is-selected", /*selected*/ ctx[3]);
    			add_location(div, file$7, 7, 0, 252);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, sp_icon);
    			mount_component(svgicon, sp_icon, null);
    			append_dev(div, t0);
    			append_dev(div, span);
    			append_dev(span, t1);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const svgicon_changes = {};
    			if (dirty & /*type*/ 1) svgicon_changes.name = ElementIconMap[/*type*/ ctx[0]] || FallbackElementIcon;
    			svgicon.$set(svgicon_changes);
    			if ((!current || dirty & /*title, type*/ 3) && t1_value !== (t1_value = (/*title*/ ctx[1] || ElementIconMap[/*type*/ ctx[0]] || "Unknown") + "")) set_data_dev(t1, t1_value);

    			if (dirty & /*disabled*/ 4) {
    				toggle_class(div, "is-disabled", /*disabled*/ ctx[2]);
    			}

    			if (dirty & /*selected*/ 8) {
    				toggle_class(div, "is-selected", /*selected*/ ctx[3]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(svgicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(svgicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(svgicon);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Element", slots, []);
    	let { type } = $$props;
    	let { title = null } = $$props;
    	let { disabled = false } = $$props;
    	let { selected = false } = $$props;
    	const writable_props = ["type", "title", "disabled", "selected"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Element> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("type" in $$props) $$invalidate(0, type = $$props.type);
    		if ("title" in $$props) $$invalidate(1, title = $$props.title);
    		if ("disabled" in $$props) $$invalidate(2, disabled = $$props.disabled);
    		if ("selected" in $$props) $$invalidate(3, selected = $$props.selected);
    	};

    	$$self.$capture_state = () => ({
    		FallbackElementIcon,
    		ElementIconMap,
    		ElementTitleMap,
    		SVGIcon,
    		type,
    		title,
    		disabled,
    		selected
    	});

    	$$self.$inject_state = $$props => {
    		if ("type" in $$props) $$invalidate(0, type = $$props.type);
    		if ("title" in $$props) $$invalidate(1, title = $$props.title);
    		if ("disabled" in $$props) $$invalidate(2, disabled = $$props.disabled);
    		if ("selected" in $$props) $$invalidate(3, selected = $$props.selected);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [type, title, disabled, selected];
    }

    class Element$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
    			type: 0,
    			title: 1,
    			disabled: 2,
    			selected: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Element",
    			options,
    			id: create_fragment$7.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*type*/ ctx[0] === undefined && !("type" in props)) {
    			console.warn("<Element> was created without expected prop 'type'");
    		}
    	}

    	get type() {
    		throw new Error("<Element>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<Element>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<Element>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Element>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Element>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Element>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selected() {
    		throw new Error("<Element>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selected(value) {
    		throw new Error("<Element>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Components/Timeline/Property.svelte generated by Svelte v3.38.2 */
    const file$6 = "src/Components/Timeline/Property.svelte";

    function create_fragment$6(ctx) {
    	let div;
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			t = text(/*title*/ ctx[1]);
    			add_location(span, file$6, 8, 4, 338);
    			attr_dev(div, "class", "timeline-item");
    			toggle_class(div, "is-disabled", /*disabled*/ ctx[0]);
    			add_location(div, file$6, 7, 0, 277);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    			append_dev(span, t);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*title*/ 2) set_data_dev(t, /*title*/ ctx[1]);

    			if (dirty & /*disabled*/ 1) {
    				toggle_class(div, "is-disabled", /*disabled*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let title;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Property", slots, []);
    	let { name } = $$props;
    	let { property } = $$props;
    	let { disabled = false } = $$props;
    	const writable_props = ["name", "property", "disabled"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Property> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("name" in $$props) $$invalidate(2, name = $$props.name);
    		if ("property" in $$props) $$invalidate(3, property = $$props.property);
    		if ("disabled" in $$props) $$invalidate(0, disabled = $$props.disabled);
    	};

    	$$self.$capture_state = () => ({
    		PropertyNameMap,
    		SVGIcon,
    		name,
    		property,
    		disabled,
    		title
    	});

    	$$self.$inject_state = $$props => {
    		if ("name" in $$props) $$invalidate(2, name = $$props.name);
    		if ("property" in $$props) $$invalidate(3, property = $$props.property);
    		if ("disabled" in $$props) $$invalidate(0, disabled = $$props.disabled);
    		if ("title" in $$props) $$invalidate(1, title = $$props.title);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*name, property*/ 12) {
    			$$invalidate(1, title = (name in PropertyNameMap
    			? PropertyNameMap[name][property]
    			: false) || "Unknown");
    		}
    	};

    	return [disabled, title, name, property];
    }

    class Property extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, { name: 2, property: 3, disabled: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Property",
    			options,
    			id: create_fragment$6.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*name*/ ctx[2] === undefined && !("name" in props)) {
    			console.warn("<Property> was created without expected prop 'name'");
    		}

    		if (/*property*/ ctx[3] === undefined && !("property" in props)) {
    			console.warn("<Property> was created without expected prop 'property'");
    		}
    	}

    	get name() {
    		throw new Error("<Property>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<Property>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get property() {
    		throw new Error("<Property>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set property(value) {
    		throw new Error("<Property>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Property>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Property>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Components/Timeline/SelectionRect.svelte generated by Svelte v3.38.2 */

    const file$5 = "src/Components/Timeline/SelectionRect.svelte";

    function create_fragment$5(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "timeline-selection-rect");
    			set_style(div, "top", "50px");
    			set_style(div, "left", "400px");
    			set_style(div, "width", "200px");
    			set_style(div, "height", "150px");
    			add_location(div, file$5, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("SelectionRect", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SelectionRect> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class SelectionRect extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SelectionRect",
    			options,
    			id: create_fragment$5.name
    		});
    	}
    }

    /* src/Components/Timeline/Timeline.svelte generated by Svelte v3.38.2 */
    const file$4 = "src/Components/Timeline/Timeline.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[13] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[16] = list[i];
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[19] = list[i];
    	child_ctx[21] = i;
    	return child_ctx;
    }

    function get_each_context_3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[13] = list[i];
    	return child_ctx;
    }

    function get_each_context_4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[16] = list[i];
    	return child_ctx;
    }

    // (65:12) {#each animated.animations as animationObject}
    function create_each_block_4(ctx) {
    	let property;
    	let current;

    	property = new Property({
    			props: {
    				name: /*animationObject*/ ctx[16].name,
    				property: /*animationObject*/ ctx[16].property,
    				disabled: /*animationObject*/ ctx[16].animation.disabled
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(property.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(property, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const property_changes = {};
    			if (dirty & /*animatedElements*/ 4) property_changes.name = /*animationObject*/ ctx[16].name;
    			if (dirty & /*animatedElements*/ 4) property_changes.property = /*animationObject*/ ctx[16].property;
    			if (dirty & /*animatedElements*/ 4) property_changes.disabled = /*animationObject*/ ctx[16].animation.disabled;
    			property.$set(property_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(property.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(property.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(property, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4.name,
    		type: "each",
    		source: "(65:12) {#each animated.animations as animationObject}",
    		ctx
    	});

    	return block;
    }

    // (63:8) {#each animatedElements as animated}
    function create_each_block_3(ctx) {
    	let element_1;
    	let t;
    	let each_1_anchor;
    	let current;

    	element_1 = new Element$1({
    			props: {
    				title: /*animated*/ ctx[13].element.title,
    				type: /*animated*/ ctx[13].element.type
    			},
    			$$inline: true
    		});

    	let each_value_4 = /*animated*/ ctx[13].animations;
    	validate_each_argument(each_value_4);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			create_component(element_1.$$.fragment);
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			mount_component(element_1, target, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const element_1_changes = {};
    			if (dirty & /*animatedElements*/ 4) element_1_changes.title = /*animated*/ ctx[13].element.title;
    			if (dirty & /*animatedElements*/ 4) element_1_changes.type = /*animated*/ ctx[13].element.type;
    			element_1.$set(element_1_changes);

    			if (dirty & /*animatedElements*/ 4) {
    				each_value_4 = /*animated*/ ctx[13].animations;
    				validate_each_argument(each_value_4);
    				let i;

    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4(ctx, each_value_4, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_4(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_4.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(element_1.$$.fragment, local);

    			for (let i = 0; i < each_value_4.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(element_1.$$.fragment, local);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(element_1, detaching);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3.name,
    		type: "each",
    		source: "(63:8) {#each animatedElements as animated}",
    		ctx
    	});

    	return block;
    }

    // (78:24) {#each animationObject.animation.keyframes as keyframe, index}
    function create_each_block_2(ctx) {
    	let keyframe;
    	let t;
    	let easing;
    	let current;

    	keyframe = new Keyframe$1({
    			props: { offset: /*keyframe*/ ctx[19].offset },
    			$$inline: true
    		});

    	easing = new Easing({
    			props: {
    				start: /*keyframe*/ ctx[19].offset,
    				end: /*animationObject*/ ctx[16].animation.keyframes[/*index*/ ctx[21] + 1]?.offset
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(keyframe.$$.fragment);
    			t = space();
    			create_component(easing.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(keyframe, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(easing, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const keyframe_changes = {};
    			if (dirty & /*animatedElements*/ 4) keyframe_changes.offset = /*keyframe*/ ctx[19].offset;
    			keyframe.$set(keyframe_changes);
    			const easing_changes = {};
    			if (dirty & /*animatedElements*/ 4) easing_changes.start = /*keyframe*/ ctx[19].offset;
    			if (dirty & /*animatedElements*/ 4) easing_changes.end = /*animationObject*/ ctx[16].animation.keyframes[/*index*/ ctx[21] + 1]?.offset;
    			easing.$set(easing_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(keyframe.$$.fragment, local);
    			transition_in(easing.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(keyframe.$$.fragment, local);
    			transition_out(easing.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(keyframe, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(easing, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(78:24) {#each animationObject.animation.keyframes as keyframe, index}",
    		ctx
    	});

    	return block;
    }

    // (77:20) <TimelineItem keyframes={true} disabled={animationObject.animation.disabled}>
    function create_default_slot(ctx) {
    	let t;
    	let current;
    	let each_value_2 = /*animationObject*/ ctx[16].animation.keyframes;
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, t, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*animatedElements*/ 4) {
    				each_value_2 = /*animationObject*/ ctx[16].animation.keyframes;
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_2(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(t.parentNode, t);
    					}
    				}

    				group_outros();

    				for (i = each_value_2.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_2.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(77:20) <TimelineItem keyframes={true} disabled={animationObject.animation.disabled}>",
    		ctx
    	});

    	return block;
    }

    // (76:16) {#each animated.animations as animationObject}
    function create_each_block_1(ctx) {
    	let timelineitem;
    	let current;

    	timelineitem = new TimelineItem({
    			props: {
    				keyframes: true,
    				disabled: /*animationObject*/ ctx[16].animation.disabled,
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(timelineitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(timelineitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const timelineitem_changes = {};
    			if (dirty & /*animatedElements*/ 4) timelineitem_changes.disabled = /*animationObject*/ ctx[16].animation.disabled;

    			if (dirty & /*$$scope, animatedElements*/ 67108868) {
    				timelineitem_changes.$$scope = { dirty, ctx };
    			}

    			timelineitem.$set(timelineitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(timelineitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(timelineitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(timelineitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(76:16) {#each animated.animations as animationObject}",
    		ctx
    	});

    	return block;
    }

    // (72:12) {#each animatedElements as animated}
    function create_each_block(ctx) {
    	let timelineitem;
    	let t;
    	let each_1_anchor;
    	let current;
    	timelineitem = new TimelineItem({ $$inline: true });
    	let each_value_1 = /*animated*/ ctx[13].animations;
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			create_component(timelineitem.$$.fragment);
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			mount_component(timelineitem, target, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*animatedElements*/ 4) {
    				each_value_1 = /*animated*/ ctx[13].animations;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(timelineitem.$$.fragment, local);

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(timelineitem.$$.fragment, local);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(timelineitem, detaching);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(72:12) {#each animatedElements as animated}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let div4;
    	let div0;
    	let t0;
    	let div3;
    	let div1;
    	let t1;
    	let div2;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value_3 = /*animatedElements*/ ctx[2];
    	validate_each_argument(each_value_3);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks_1[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
    	}

    	const out = i => transition_out(each_blocks_1[i], 1, 1, () => {
    		each_blocks_1[i] = null;
    	});

    	let each_value = /*animatedElements*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const out_1 = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div0 = element("div");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t0 = space();
    			div3 = element("div");
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t1 = space();
    			div2 = element("div");
    			attr_dev(div0, "class", "timeline-elements scroll scroll-invisible scroll-no-padding");
    			attr_dev(div0, "hidden-x", "");
    			add_location(div0, file$4, 61, 4, 1712);
    			attr_dev(div1, "class", "timeline-items-wrapper");
    			add_location(div1, file$4, 70, 8, 2347);
    			attr_dev(div2, "class", "timeline-play-line");
    			add_location(div2, file$4, 87, 8, 3253);
    			attr_dev(div3, "class", "timeline-keyframes scroll scroll-no-hide scroll-no-padding");
    			add_location(div3, file$4, 69, 4, 2222);
    			attr_dev(div4, "class", "timeline");
    			add_location(div4, file$4, 60, 0, 1684);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div0);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(div0, null);
    			}

    			/*div0_binding*/ ctx[9](div0);
    			append_dev(div4, t0);
    			append_dev(div4, div3);
    			append_dev(div3, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			/*div3_binding*/ ctx[10](div3);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "scroll", /*onScroll*/ ctx[3], false, false, false),
    					listen_dev(div3, "scroll", /*onScroll*/ ctx[3], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*animatedElements*/ 4) {
    				each_value_3 = /*animatedElements*/ ctx[2];
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3(ctx, each_value_3, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    						transition_in(each_blocks_1[i], 1);
    					} else {
    						each_blocks_1[i] = create_each_block_3(child_ctx);
    						each_blocks_1[i].c();
    						transition_in(each_blocks_1[i], 1);
    						each_blocks_1[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_3.length; i < each_blocks_1.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (dirty & /*animatedElements*/ 4) {
    				each_value = /*animatedElements*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div1, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out_1(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_3.length; i += 1) {
    				transition_in(each_blocks_1[i]);
    			}

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks_1 = each_blocks_1.filter(Boolean);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				transition_out(each_blocks_1[i]);
    			}

    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			destroy_each(each_blocks_1, detaching);
    			/*div0_binding*/ ctx[9](null);
    			destroy_each(each_blocks, detaching);
    			/*div3_binding*/ ctx[10](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }



    function mapAnimations(element, list) {
    	const animations = [];

    	for (const name in list) {
    		if (!list.hasOwnProperty(name)) {
    			continue;
    		}

    		for (const property in list[name]) {
    			if (!list[name].hasOwnProperty(property)) {
    				continue;
    			}

    			animations.push({
    				name,
    				property,
    				animation: list[name][property]
    			});
    		}
    	}

    	return { element, animations };
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let animatedElements;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Timeline", slots, []);
    	
    	let { animationManager } = $$props;
    	let { playOffset } = $$props;
    	let { playOffsetMax } = $$props;
    	let { scrollTop = 0 } = $$props;
    	let { scrollLeft = 0 } = $$props;

    	/* Scroll sync Y */
    	let leftPane;

    	let rightPane;
    	let isScrollingTop = false;
    	let prevScrollTop = scrollTop;

    	const onScroll = e => {
    		if (isScrollingTop) {
    			e.preventDefault();
    			return;
    		}

    		isScrollingTop = true;
    		const el = e.target;
    		const top = el.scrollTop;

    		if (top !== prevScrollTop) {
    			(el === rightPane ? leftPane : rightPane).scrollTop = top;
    			$$invalidate(4, scrollTop = prevScrollTop = top);
    		} else if (el === rightPane) {
    			$$invalidate(5, scrollLeft = rightPane.scrollLeft);
    		} //rightPane.scrollWidth

    		isScrollingTop = false;
    	};

    	const writable_props = ["animationManager", "playOffset", "playOffsetMax", "scrollTop", "scrollLeft"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Timeline> was created with unknown prop '${key}'`);
    	});

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			leftPane = $$value;
    			$$invalidate(0, leftPane);
    		});
    	}

    	function div3_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			rightPane = $$value;
    			$$invalidate(1, rightPane);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ("animationManager" in $$props) $$invalidate(6, animationManager = $$props.animationManager);
    		if ("playOffset" in $$props) $$invalidate(7, playOffset = $$props.playOffset);
    		if ("playOffsetMax" in $$props) $$invalidate(8, playOffsetMax = $$props.playOffsetMax);
    		if ("scrollTop" in $$props) $$invalidate(4, scrollTop = $$props.scrollTop);
    		if ("scrollLeft" in $$props) $$invalidate(5, scrollLeft = $$props.scrollLeft);
    	};

    	$$self.$capture_state = () => ({
    		mapAnimations,
    		TimelineItem,
    		Keyframe: Keyframe$1,
    		Easing,
    		LocalMarker,
    		Element: Element$1,
    		Property,
    		SelectionRect,
    		animationManager,
    		playOffset,
    		playOffsetMax,
    		scrollTop,
    		scrollLeft,
    		leftPane,
    		rightPane,
    		isScrollingTop,
    		prevScrollTop,
    		onScroll,
    		animatedElements
    	});

    	$$self.$inject_state = $$props => {
    		if ("animationManager" in $$props) $$invalidate(6, animationManager = $$props.animationManager);
    		if ("playOffset" in $$props) $$invalidate(7, playOffset = $$props.playOffset);
    		if ("playOffsetMax" in $$props) $$invalidate(8, playOffsetMax = $$props.playOffsetMax);
    		if ("scrollTop" in $$props) $$invalidate(4, scrollTop = $$props.scrollTop);
    		if ("scrollLeft" in $$props) $$invalidate(5, scrollLeft = $$props.scrollLeft);
    		if ("leftPane" in $$props) $$invalidate(0, leftPane = $$props.leftPane);
    		if ("rightPane" in $$props) $$invalidate(1, rightPane = $$props.rightPane);
    		if ("isScrollingTop" in $$props) isScrollingTop = $$props.isScrollingTop;
    		if ("prevScrollTop" in $$props) prevScrollTop = $$props.prevScrollTop;
    		if ("animatedElements" in $$props) $$invalidate(2, animatedElements = $$props.animatedElements);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*animationManager*/ 64) {
    			$$invalidate(2, animatedElements = animationManager.map(mapAnimations));
    		}
    	};

    	return [
    		leftPane,
    		rightPane,
    		animatedElements,
    		onScroll,
    		scrollTop,
    		scrollLeft,
    		animationManager,
    		playOffset,
    		playOffsetMax,
    		div0_binding,
    		div3_binding
    	];
    }

    class Timeline extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
    			animationManager: 6,
    			playOffset: 7,
    			playOffsetMax: 8,
    			scrollTop: 4,
    			scrollLeft: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Timeline",
    			options,
    			id: create_fragment$4.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*animationManager*/ ctx[6] === undefined && !("animationManager" in props)) {
    			console.warn("<Timeline> was created without expected prop 'animationManager'");
    		}

    		if (/*playOffset*/ ctx[7] === undefined && !("playOffset" in props)) {
    			console.warn("<Timeline> was created without expected prop 'playOffset'");
    		}

    		if (/*playOffsetMax*/ ctx[8] === undefined && !("playOffsetMax" in props)) {
    			console.warn("<Timeline> was created without expected prop 'playOffsetMax'");
    		}
    	}

    	get animationManager() {
    		throw new Error("<Timeline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set animationManager(value) {
    		throw new Error("<Timeline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get playOffset() {
    		throw new Error("<Timeline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set playOffset(value) {
    		throw new Error("<Timeline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get playOffsetMax() {
    		throw new Error("<Timeline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set playOffsetMax(value) {
    		throw new Error("<Timeline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scrollTop() {
    		throw new Error("<Timeline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scrollTop(value) {
    		throw new Error("<Timeline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scrollLeft() {
    		throw new Error("<Timeline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scrollLeft(value) {
    		throw new Error("<Timeline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Components/Timeline/TimelineRuler.svelte generated by Svelte v3.38.2 */

    const file$3 = "src/Components/Timeline/TimelineRuler.svelte";

    function create_fragment$3(ctx) {
    	let canvas_1;

    	const block = {
    		c: function create() {
    			canvas_1 = element("canvas");
    			attr_dev(canvas_1, "class", "timeline-ruler");
    			add_location(canvas_1, file$3, 4, 0, 82);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, canvas_1, anchor);
    			/*canvas_1_binding*/ ctx[3](canvas_1);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(canvas_1);
    			/*canvas_1_binding*/ ctx[3](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("TimelineRuler", slots, []);
    	let { zoom = 1 } = $$props;
    	let { left = 0 } = $$props;
    	let canvas;
    	const writable_props = ["zoom", "left"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TimelineRuler> was created with unknown prop '${key}'`);
    	});

    	function canvas_1_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			canvas = $$value;
    			$$invalidate(0, canvas);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ("zoom" in $$props) $$invalidate(1, zoom = $$props.zoom);
    		if ("left" in $$props) $$invalidate(2, left = $$props.left);
    	};

    	$$self.$capture_state = () => ({ zoom, left, canvas });

    	$$self.$inject_state = $$props => {
    		if ("zoom" in $$props) $$invalidate(1, zoom = $$props.zoom);
    		if ("left" in $$props) $$invalidate(2, left = $$props.left);
    		if ("canvas" in $$props) $$invalidate(0, canvas = $$props.canvas);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [canvas, zoom, left, canvas_1_binding];
    }

    class TimelineRuler extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, { zoom: 1, left: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TimelineRuler",
    			options,
    			id: create_fragment$3.name
    		});
    	}

    	get zoom() {
    		throw new Error("<TimelineRuler>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set zoom(value) {
    		throw new Error("<TimelineRuler>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get left() {
    		throw new Error("<TimelineRuler>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set left(value) {
    		throw new Error("<TimelineRuler>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Components/Timeline/index.svelte generated by Svelte v3.38.2 */
    const file$2 = "src/Components/Timeline/index.svelte";

    function create_fragment$2(ctx) {
    	let div1;
    	let div0;
    	let timelinecontrols;
    	let updating_playOffset;
    	let updating_playOffsetMax;
    	let t0;
    	let timelineruler;
    	let updating_zoom;
    	let t1;
    	let timeline;
    	let updating_animationManager;
    	let updating_scrollTop;
    	let updating_scrollLeft;
    	let updating_playOffset_1;
    	let updating_playOffsetMax_1;
    	let current;

    	function timelinecontrols_playOffset_binding(value) {
    		/*timelinecontrols_playOffset_binding*/ ctx[8](value);
    	}

    	function timelinecontrols_playOffsetMax_binding(value) {
    		/*timelinecontrols_playOffsetMax_binding*/ ctx[9](value);
    	}

    	let timelinecontrols_props = {};

    	if (/*playOffset*/ ctx[2] !== void 0) {
    		timelinecontrols_props.playOffset = /*playOffset*/ ctx[2];
    	}

    	if (/*playOffsetMax*/ ctx[3] !== void 0) {
    		timelinecontrols_props.playOffsetMax = /*playOffsetMax*/ ctx[3];
    	}

    	timelinecontrols = new TimelineControls({
    			props: timelinecontrols_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(timelinecontrols, "playOffset", timelinecontrols_playOffset_binding));
    	binding_callbacks.push(() => bind(timelinecontrols, "playOffsetMax", timelinecontrols_playOffsetMax_binding));

    	function timelineruler_zoom_binding(value) {
    		/*timelineruler_zoom_binding*/ ctx[10](value);
    	}

    	let timelineruler_props = { left: /*scrollLeft*/ ctx[5] };

    	if (/*zoom*/ ctx[1] !== void 0) {
    		timelineruler_props.zoom = /*zoom*/ ctx[1];
    	}

    	timelineruler = new TimelineRuler({
    			props: timelineruler_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(timelineruler, "zoom", timelineruler_zoom_binding));

    	function timeline_animationManager_binding(value) {
    		/*timeline_animationManager_binding*/ ctx[11](value);
    	}

    	function timeline_scrollTop_binding(value) {
    		/*timeline_scrollTop_binding*/ ctx[12](value);
    	}

    	function timeline_scrollLeft_binding(value) {
    		/*timeline_scrollLeft_binding*/ ctx[13](value);
    	}

    	function timeline_playOffset_binding(value) {
    		/*timeline_playOffset_binding*/ ctx[14](value);
    	}

    	function timeline_playOffsetMax_binding(value) {
    		/*timeline_playOffsetMax_binding*/ ctx[15](value);
    	}

    	let timeline_props = {};

    	if (/*animationManager*/ ctx[0] !== void 0) {
    		timeline_props.animationManager = /*animationManager*/ ctx[0];
    	}

    	if (/*scrollTop*/ ctx[4] !== void 0) {
    		timeline_props.scrollTop = /*scrollTop*/ ctx[4];
    	}

    	if (/*scrollLeft*/ ctx[5] !== void 0) {
    		timeline_props.scrollLeft = /*scrollLeft*/ ctx[5];
    	}

    	if (/*playOffset*/ ctx[2] !== void 0) {
    		timeline_props.playOffset = /*playOffset*/ ctx[2];
    	}

    	if (/*playOffsetMax*/ ctx[3] !== void 0) {
    		timeline_props.playOffsetMax = /*playOffsetMax*/ ctx[3];
    	}

    	timeline = new Timeline({ props: timeline_props, $$inline: true });
    	binding_callbacks.push(() => bind(timeline, "animationManager", timeline_animationManager_binding));
    	binding_callbacks.push(() => bind(timeline, "scrollTop", timeline_scrollTop_binding));
    	binding_callbacks.push(() => bind(timeline, "scrollLeft", timeline_scrollLeft_binding));
    	binding_callbacks.push(() => bind(timeline, "playOffset", timeline_playOffset_binding));
    	binding_callbacks.push(() => bind(timeline, "playOffsetMax", timeline_playOffsetMax_binding));

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			create_component(timelinecontrols.$$.fragment);
    			t0 = space();
    			create_component(timelineruler.$$.fragment);
    			t1 = space();
    			create_component(timeline.$$.fragment);
    			attr_dev(div0, "class", "timeline-controls-wrapper");
    			add_location(div0, file$2, 20, 4, 652);
    			attr_dev(div1, "class", "timeline-wrapper");
    			attr_dev(div1, "style", /*style*/ ctx[6]);
    			add_location(div1, file$2, 19, 0, 600);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			mount_component(timelinecontrols, div0, null);
    			append_dev(div0, t0);
    			mount_component(timelineruler, div0, null);
    			append_dev(div1, t1);
    			mount_component(timeline, div1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const timelinecontrols_changes = {};

    			if (!updating_playOffset && dirty & /*playOffset*/ 4) {
    				updating_playOffset = true;
    				timelinecontrols_changes.playOffset = /*playOffset*/ ctx[2];
    				add_flush_callback(() => updating_playOffset = false);
    			}

    			if (!updating_playOffsetMax && dirty & /*playOffsetMax*/ 8) {
    				updating_playOffsetMax = true;
    				timelinecontrols_changes.playOffsetMax = /*playOffsetMax*/ ctx[3];
    				add_flush_callback(() => updating_playOffsetMax = false);
    			}

    			timelinecontrols.$set(timelinecontrols_changes);
    			const timelineruler_changes = {};
    			if (dirty & /*scrollLeft*/ 32) timelineruler_changes.left = /*scrollLeft*/ ctx[5];

    			if (!updating_zoom && dirty & /*zoom*/ 2) {
    				updating_zoom = true;
    				timelineruler_changes.zoom = /*zoom*/ ctx[1];
    				add_flush_callback(() => updating_zoom = false);
    			}

    			timelineruler.$set(timelineruler_changes);
    			const timeline_changes = {};

    			if (!updating_animationManager && dirty & /*animationManager*/ 1) {
    				updating_animationManager = true;
    				timeline_changes.animationManager = /*animationManager*/ ctx[0];
    				add_flush_callback(() => updating_animationManager = false);
    			}

    			if (!updating_scrollTop && dirty & /*scrollTop*/ 16) {
    				updating_scrollTop = true;
    				timeline_changes.scrollTop = /*scrollTop*/ ctx[4];
    				add_flush_callback(() => updating_scrollTop = false);
    			}

    			if (!updating_scrollLeft && dirty & /*scrollLeft*/ 32) {
    				updating_scrollLeft = true;
    				timeline_changes.scrollLeft = /*scrollLeft*/ ctx[5];
    				add_flush_callback(() => updating_scrollLeft = false);
    			}

    			if (!updating_playOffset_1 && dirty & /*playOffset*/ 4) {
    				updating_playOffset_1 = true;
    				timeline_changes.playOffset = /*playOffset*/ ctx[2];
    				add_flush_callback(() => updating_playOffset_1 = false);
    			}

    			if (!updating_playOffsetMax_1 && dirty & /*playOffsetMax*/ 8) {
    				updating_playOffsetMax_1 = true;
    				timeline_changes.playOffsetMax = /*playOffsetMax*/ ctx[3];
    				add_flush_callback(() => updating_playOffsetMax_1 = false);
    			}

    			timeline.$set(timeline_changes);

    			if (!current || dirty & /*style*/ 64) {
    				attr_dev(div1, "style", /*style*/ ctx[6]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(timelinecontrols.$$.fragment, local);
    			transition_in(timelineruler.$$.fragment, local);
    			transition_in(timeline.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(timelinecontrols.$$.fragment, local);
    			transition_out(timelineruler.$$.fragment, local);
    			transition_out(timeline.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(timelinecontrols);
    			destroy_component(timelineruler);
    			destroy_component(timeline);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let unit;
    	let style;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Timeline", slots, []);
    	
    	let { animationManager } = $$props;
    	let { zoom = 1 } = $$props;
    	let { playOffset = 0 } = $$props;
    	let { playOffsetMax = 3000 } = $$props;
    	let scrollTop = 0;
    	let scrollLeft = 0;
    	const writable_props = ["animationManager", "zoom", "playOffset", "playOffsetMax"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Timeline> was created with unknown prop '${key}'`);
    	});

    	function timelinecontrols_playOffset_binding(value) {
    		playOffset = value;
    		$$invalidate(2, playOffset);
    	}

    	function timelinecontrols_playOffsetMax_binding(value) {
    		playOffsetMax = value;
    		$$invalidate(3, playOffsetMax);
    	}

    	function timelineruler_zoom_binding(value) {
    		zoom = value;
    		$$invalidate(1, zoom);
    	}

    	function timeline_animationManager_binding(value) {
    		animationManager = value;
    		$$invalidate(0, animationManager);
    	}

    	function timeline_scrollTop_binding(value) {
    		scrollTop = value;
    		$$invalidate(4, scrollTop);
    	}

    	function timeline_scrollLeft_binding(value) {
    		scrollLeft = value;
    		$$invalidate(5, scrollLeft);
    	}

    	function timeline_playOffset_binding(value) {
    		playOffset = value;
    		$$invalidate(2, playOffset);
    	}

    	function timeline_playOffsetMax_binding(value) {
    		playOffsetMax = value;
    		$$invalidate(3, playOffsetMax);
    	}

    	$$self.$$set = $$props => {
    		if ("animationManager" in $$props) $$invalidate(0, animationManager = $$props.animationManager);
    		if ("zoom" in $$props) $$invalidate(1, zoom = $$props.zoom);
    		if ("playOffset" in $$props) $$invalidate(2, playOffset = $$props.playOffset);
    		if ("playOffsetMax" in $$props) $$invalidate(3, playOffsetMax = $$props.playOffsetMax);
    	};

    	$$self.$capture_state = () => ({
    		TimelineControls,
    		Timeline,
    		TimelineRuler,
    		animationManager,
    		zoom,
    		playOffset,
    		playOffsetMax,
    		scrollTop,
    		scrollLeft,
    		unit,
    		style
    	});

    	$$self.$inject_state = $$props => {
    		if ("animationManager" in $$props) $$invalidate(0, animationManager = $$props.animationManager);
    		if ("zoom" in $$props) $$invalidate(1, zoom = $$props.zoom);
    		if ("playOffset" in $$props) $$invalidate(2, playOffset = $$props.playOffset);
    		if ("playOffsetMax" in $$props) $$invalidate(3, playOffsetMax = $$props.playOffsetMax);
    		if ("scrollTop" in $$props) $$invalidate(4, scrollTop = $$props.scrollTop);
    		if ("scrollLeft" in $$props) $$invalidate(5, scrollLeft = $$props.scrollLeft);
    		if ("unit" in $$props) $$invalidate(7, unit = $$props.unit);
    		if ("style" in $$props) $$invalidate(6, style = $$props.style);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*zoom*/ 2) {
    			$$invalidate(7, unit = zoom * 1);
    		}

    		if ($$self.$$.dirty & /*playOffset, scrollTop, animationManager, unit*/ 149) {
    			// TODO: use zoom and others
    			$$invalidate(6, style = `
        --timeline-play-offset: ${playOffset};
        --timeline-scroll-top: ${scrollTop}px;
        --timeline-max-offset: ${animationManager.duration};
        --timeline-ms-unit: ${unit}px;
    `);
    		}
    	};

    	return [
    		animationManager,
    		zoom,
    		playOffset,
    		playOffsetMax,
    		scrollTop,
    		scrollLeft,
    		style,
    		unit,
    		timelinecontrols_playOffset_binding,
    		timelinecontrols_playOffsetMax_binding,
    		timelineruler_zoom_binding,
    		timeline_animationManager_binding,
    		timeline_scrollTop_binding,
    		timeline_scrollLeft_binding,
    		timeline_playOffset_binding,
    		timeline_playOffsetMax_binding
    	];
    }

    class Timeline_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
    			animationManager: 0,
    			zoom: 1,
    			playOffset: 2,
    			playOffsetMax: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Timeline_1",
    			options,
    			id: create_fragment$2.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*animationManager*/ ctx[0] === undefined && !("animationManager" in props)) {
    			console.warn("<Timeline> was created without expected prop 'animationManager'");
    		}
    	}

    	get animationManager() {
    		throw new Error("<Timeline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set animationManager(value) {
    		throw new Error("<Timeline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get zoom() {
    		throw new Error("<Timeline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set zoom(value) {
    		throw new Error("<Timeline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get playOffset() {
    		throw new Error("<Timeline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set playOffset(value) {
    		throw new Error("<Timeline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get playOffsetMax() {
    		throw new Error("<Timeline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set playOffsetMax(value) {
    		throw new Error("<Timeline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const EPSILON = 0.00001;
    function round(value) {
        return Number.isInteger(value) ? value : Math.round(value * 100) / 100;
    }
    function clamp(value, min = 0, max = 1) {
        return value <= min ? min : (value >= max ? max : value);
    }
    function isCloseTo(a, b) {
        return Math.abs(a - b) <= EPSILON;
    }
    function numberToString(value) {
        return Number.isInteger(value) ? value.toString() : value.toFixed(2);
    }

    // TinyColor v1.4.2
    // https://github.com/bgrins/TinyColor
    // Brian Grinstead, MIT License
    var trimLeft = /^\s+/, trimRight = /\s+$/, mathRound = Math.round, mathMin = Math.min, mathMax = Math.max, mathRandom = Math.random;
    function tinycolor(color, opts) {
        color = (color) ? color : '';
        opts = opts || {};
        // If input is already a tinycolor, return itself
        if (color instanceof tinycolor) {
            return color;
        }
        // If we are called as a function, call using new instead
        if (!(this instanceof tinycolor)) {
            // @ts-ignore
            return new tinycolor(color, opts);
        }
        var rgb = inputToRGB(color);
        this._originalInput = color,
            this._r = rgb.r,
            this._g = rgb.g,
            this._b = rgb.b,
            this._a = rgb.a,
            this._roundA = mathRound(100 * this._a) / 100,
            this._format = opts.format || rgb.format;
        this._gradientType = opts.gradientType;
        // Don't let the range of [0,255] come back in [0,1].
        // Potentially lose a little bit of precision here, but will fix issues where
        // .5 gets interpreted as half of the total, instead of half of 1
        // If it was supposed to be 128, this was already taken care of by `inputToRgb`
        if (this._r < 1) {
            this._r = mathRound(this._r);
        }
        if (this._g < 1) {
            this._g = mathRound(this._g);
        }
        if (this._b < 1) {
            this._b = mathRound(this._b);
        }
        this._ok = rgb.ok;
    }
    tinycolor.prototype = {
        isDark: function () {
            return this.getBrightness() < 128;
        },
        isLight: function () {
            return !this.isDark();
        },
        isValid: function () {
            return this._ok;
        },
        getOriginalInput: function () {
            return this._originalInput;
        },
        getFormat: function () {
            return this._format;
        },
        getAlpha: function () {
            return this._a;
        },
        getBrightness: function () {
            //http://www.w3.org/TR/AERT#color-contrast
            var rgb = this.toRgb();
            return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
        },
        getLuminance: function () {
            //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
            var rgb = this.toRgb();
            var RsRGB, GsRGB, BsRGB, R, G, B;
            RsRGB = rgb.r / 255;
            GsRGB = rgb.g / 255;
            BsRGB = rgb.b / 255;
            if (RsRGB <= 0.03928) {
                R = RsRGB / 12.92;
            }
            else {
                R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);
            }
            if (GsRGB <= 0.03928) {
                G = GsRGB / 12.92;
            }
            else {
                G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);
            }
            if (BsRGB <= 0.03928) {
                B = BsRGB / 12.92;
            }
            else {
                B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);
            }
            return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);
        },
        setAlpha: function (value) {
            this._a = boundAlpha(value);
            this._roundA = mathRound(100 * this._a) / 100;
            return this;
        },
        toHsv: function () {
            var hsv = rgbToHsv(this._r, this._g, this._b);
            return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };
        },
        toHsvString: function () {
            var hsv = rgbToHsv(this._r, this._g, this._b);
            var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);
            return (this._a == 1) ?
                "hsv(" + h + ", " + s + "%, " + v + "%)" :
                "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
        },
        toHsl: function () {
            var hsl = rgbToHsl(this._r, this._g, this._b);
            return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };
        },
        toHslString: function () {
            var hsl = rgbToHsl(this._r, this._g, this._b);
            var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);
            return (this._a == 1) ?
                "hsl(" + h + ", " + s + "%, " + l + "%)" :
                "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
        },
        toHex: function (allow3Char) {
            return rgbToHex(this._r, this._g, this._b, allow3Char);
        },
        toHexString: function (allow3Char) {
            return '#' + this.toHex(allow3Char);
        },
        toHex8: function (allow4Char) {
            return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
        },
        toHex8String: function (allow4Char) {
            return '#' + this.toHex8(allow4Char);
        },
        toRgb: function () {
            return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };
        },
        toRgbString: function () {
            return (this._a == 1) ?
                "rgb(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" :
                "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
        },
        toPercentageRgb: function () {
            return {
                r: mathRound(bound01(this._r, 255) * 100) + "%",
                g: mathRound(bound01(this._g, 255) * 100) + "%",
                b: mathRound(bound01(this._b, 255) * 100) + "%",
                a: this._a
            };
        },
        toPercentageRgbString: function () {
            return (this._a == 1) ?
                "rgb(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" :
                "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
        },
        toName: function () {
            if (this._a === 0) {
                return "transparent";
            }
            if (this._a < 1) {
                return false;
            }
            return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
        },
        toFilter: function (secondColor) {
            var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
            var secondHex8String = hex8String;
            var gradientType = this._gradientType ? "GradientType = 1, " : "";
            if (secondColor) {
                var s = tinycolor(secondColor);
                secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
            }
            return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
        },
        toString: function (format) {
            var formatSet = !!format;
            format = format || this._format;
            var formattedString = false;
            var hasAlpha = this._a < 1 && this._a >= 0;
            var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");
            if (needsAlphaFormat) {
                // Special case for "transparent", all other non-alpha formats
                // will return rgba when there is transparency.
                if (format === "name" && this._a === 0) {
                    return this.toName();
                }
                return this.toRgbString();
            }
            if (format === "rgb") {
                formattedString = this.toRgbString();
            }
            if (format === "prgb") {
                formattedString = this.toPercentageRgbString();
            }
            if (format === "hex" || format === "hex6") {
                formattedString = this.toHexString();
            }
            if (format === "hex3") {
                formattedString = this.toHexString(true);
            }
            if (format === "hex4") {
                formattedString = this.toHex8String(true);
            }
            if (format === "hex8") {
                formattedString = this.toHex8String();
            }
            if (format === "name") {
                formattedString = this.toName();
            }
            if (format === "hsl") {
                formattedString = this.toHslString();
            }
            if (format === "hsv") {
                formattedString = this.toHsvString();
            }
            return formattedString || this.toHexString();
        },
        clone: function () {
            return tinycolor(this.toString());
        },
        _applyModification: function (fn, args) {
            var color = fn.apply(null, [this].concat([].slice.call(args)));
            this._r = color._r;
            this._g = color._g;
            this._b = color._b;
            this.setAlpha(color._a);
            return this;
        },
        lighten: function () {
            return this._applyModification(lighten, arguments);
        },
        brighten: function () {
            return this._applyModification(brighten, arguments);
        },
        darken: function () {
            return this._applyModification(darken, arguments);
        },
        desaturate: function () {
            return this._applyModification(desaturate, arguments);
        },
        saturate: function () {
            return this._applyModification(saturate, arguments);
        },
        greyscale: function () {
            return this._applyModification(greyscale, arguments);
        },
        spin: function () {
            return this._applyModification(spin, arguments);
        },
        _applyCombination: function (fn, args) {
            return fn.apply(null, [this].concat([].slice.call(args)));
        },
        analogous: function () {
            return this._applyCombination(analogous, arguments);
        },
        complement: function () {
            return this._applyCombination(complement, arguments);
        },
        monochromatic: function () {
            return this._applyCombination(monochromatic, arguments);
        },
        splitcomplement: function () {
            return this._applyCombination(splitcomplement, arguments);
        },
        triad: function () {
            return this._applyCombination(triad, arguments);
        },
        tetrad: function () {
            return this._applyCombination(tetrad, arguments);
        }
    };
    // If input is an object, force 1 into "1.0" to handle ratios properly
    // String input requires "1.0" as input, so 1 will be treated as 1
    tinycolor.fromRatio = function (color, opts) {
        if (typeof color == "object") {
            var newColor = {};
            for (var i in color) {
                if (color.hasOwnProperty(i)) {
                    if (i === "a") {
                        newColor[i] = color[i];
                    }
                    else {
                        newColor[i] = convertToPercentage(color[i]);
                    }
                }
            }
            color = newColor;
        }
        return tinycolor(color, opts);
    };
    // Given a string or object, convert that input to RGB
    // Possible string inputs:
    //
    //     "red"
    //     "#f00" or "f00"
    //     "#ff0000" or "ff0000"
    //     "#ff000000" or "ff000000"
    //     "rgb 255 0 0" or "rgb (255, 0, 0)"
    //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
    //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
    //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
    //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
    //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
    //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
    //
    function inputToRGB(color) {
        var rgb = { r: 0, g: 0, b: 0 };
        var a = 1;
        var s = null;
        var v = null;
        var l = null;
        var ok = false;
        let format = false;
        if (typeof color == "string") {
            color = stringInputToObject(color);
        }
        if (typeof color == "object") {
            if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
                rgb = rgbToRgb(color.r, color.g, color.b);
                ok = true;
                format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
            }
            else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
                s = convertToPercentage(color.s);
                v = convertToPercentage(color.v);
                rgb = hsvToRgb(color.h, s, v);
                ok = true;
                format = "hsv";
            }
            else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
                s = convertToPercentage(color.s);
                l = convertToPercentage(color.l);
                rgb = hslToRgb(color.h, s, l);
                ok = true;
                format = "hsl";
            }
            if (color.hasOwnProperty("a")) {
                a = color.a;
            }
        }
        a = boundAlpha(a);
        return {
            ok: ok,
            format: color.format || format,
            r: mathMin(255, mathMax(rgb.r, 0)),
            g: mathMin(255, mathMax(rgb.g, 0)),
            b: mathMin(255, mathMax(rgb.b, 0)),
            a: a
        };
    }
    // Conversion Functions
    // --------------------
    // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
    // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>
    // `rgbToRgb`
    // Handle bounds / percentage checking to conform to CSS color spec
    // <http://www.w3.org/TR/css3-color/>
    // *Assumes:* r, g, b in [0, 255] or [0, 1]
    // *Returns:* { r, g, b } in [0, 255]
    function rgbToRgb(r, g, b) {
        return {
            r: bound01(r, 255) * 255,
            g: bound01(g, 255) * 255,
            b: bound01(b, 255) * 255
        };
    }
    // `rgbToHsl`
    // Converts an RGB color value to HSL.
    // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
    // *Returns:* { h, s, l } in [0,1]
    function rgbToHsl(r, g, b) {
        r = bound01(r, 255);
        g = bound01(g, 255);
        b = bound01(b, 255);
        var max = mathMax(r, g, b), min = mathMin(r, g, b);
        var h, s, l = (max + min) / 2;
        if (max == min) {
            h = s = 0; // achromatic
        }
        else {
            var d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            switch (max) {
                case r:
                    h = (g - b) / d + (g < b ? 6 : 0);
                    break;
                case g:
                    h = (b - r) / d + 2;
                    break;
                case b:
                    h = (r - g) / d + 4;
                    break;
            }
            h /= 6;
        }
        return { h: h, s: s, l: l };
    }
    // `hslToRgb`
    // Converts an HSL color value to RGB.
    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
    // *Returns:* { r, g, b } in the set [0, 255]
    function hslToRgb(h, s, l) {
        var r, g, b;
        h = bound01(h, 360);
        s = bound01(s, 100);
        l = bound01(l, 100);
        function hue2rgb(p, q, t) {
            if (t < 0)
                t += 1;
            if (t > 1)
                t -= 1;
            if (t < 1 / 6)
                return p + (q - p) * 6 * t;
            if (t < 1 / 2)
                return q;
            if (t < 2 / 3)
                return p + (q - p) * (2 / 3 - t) * 6;
            return p;
        }
        if (s === 0) {
            r = g = b = l; // achromatic
        }
        else {
            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            var p = 2 * l - q;
            r = hue2rgb(p, q, h + 1 / 3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1 / 3);
        }
        return { r: r * 255, g: g * 255, b: b * 255 };
    }
    // `rgbToHsv`
    // Converts an RGB color value to HSV
    // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
    // *Returns:* { h, s, v } in [0,1]
    function rgbToHsv(r, g, b) {
        r = bound01(r, 255);
        g = bound01(g, 255);
        b = bound01(b, 255);
        var max = mathMax(r, g, b), min = mathMin(r, g, b);
        var h, s, v = max;
        var d = max - min;
        s = max === 0 ? 0 : d / max;
        if (max == min) {
            h = 0; // achromatic
        }
        else {
            switch (max) {
                case r:
                    h = (g - b) / d + (g < b ? 6 : 0);
                    break;
                case g:
                    h = (b - r) / d + 2;
                    break;
                case b:
                    h = (r - g) / d + 4;
                    break;
            }
            h /= 6;
        }
        return { h: h, s: s, v: v };
    }
    // `hsvToRgb`
    // Converts an HSV color value to RGB.
    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
    // *Returns:* { r, g, b } in the set [0, 255]
    function hsvToRgb(h, s, v) {
        h = bound01(h, 360) * 6;
        s = bound01(s, 100);
        v = bound01(v, 100);
        var i = Math.floor(h), f = h - i, p = v * (1 - s), q = v * (1 - f * s), t = v * (1 - (1 - f) * s), mod = i % 6, r = [v, q, p, p, t, v][mod], g = [t, v, v, q, p, p][mod], b = [p, p, t, v, v, q][mod];
        return { r: r * 255, g: g * 255, b: b * 255 };
    }
    // `rgbToHex`
    // Converts an RGB color to hex
    // Assumes r, g, and b are contained in the set [0, 255]
    // Returns a 3 or 6 character hex
    function rgbToHex(r, g, b, allow3Char) {
        var hex = [
            pad2(mathRound(r).toString(16)),
            pad2(mathRound(g).toString(16)),
            pad2(mathRound(b).toString(16))
        ];
        // Return a 3 character hex if possible
        if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
            return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
        }
        return hex.join("");
    }
    // `rgbaToHex`
    // Converts an RGBA color plus alpha transparency to hex
    // Assumes r, g, b are contained in the set [0, 255] and
    // a in [0, 1]. Returns a 4 or 8 character rgba hex
    function rgbaToHex(r, g, b, a, allow4Char) {
        var hex = [
            pad2(mathRound(r).toString(16)),
            pad2(mathRound(g).toString(16)),
            pad2(mathRound(b).toString(16)),
            pad2(convertDecimalToHex(a))
        ];
        // Return a 4 character hex if possible
        if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
            return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
        }
        return hex.join("");
    }
    // `rgbaToArgbHex`
    // Converts an RGBA color to an ARGB Hex8 string
    // Rarely used, but required for "toFilter()"
    function rgbaToArgbHex(r, g, b, a) {
        var hex = [
            pad2(convertDecimalToHex(a)),
            pad2(mathRound(r).toString(16)),
            pad2(mathRound(g).toString(16)),
            pad2(mathRound(b).toString(16))
        ];
        return hex.join("");
    }
    // `equals`
    // Can be called with any tinycolor input
    tinycolor.equals = function (color1, color2) {
        if (!color1 || !color2) {
            return false;
        }
        return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
    };
    tinycolor.random = function () {
        return tinycolor.fromRatio({
            r: mathRandom(),
            g: mathRandom(),
            b: mathRandom()
        });
    };
    // Modification Functions
    // ----------------------
    // Thanks to less.js for some of the basics here
    // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>
    function desaturate(color, amount) {
        amount = (amount === 0) ? 0 : (amount || 10);
        var hsl = tinycolor(color).toHsl();
        hsl.s -= amount / 100;
        hsl.s = clamp01(hsl.s);
        return tinycolor(hsl);
    }
    function saturate(color, amount) {
        amount = (amount === 0) ? 0 : (amount || 10);
        var hsl = tinycolor(color).toHsl();
        hsl.s += amount / 100;
        hsl.s = clamp01(hsl.s);
        return tinycolor(hsl);
    }
    function greyscale(color) {
        return tinycolor(color).desaturate(100);
    }
    function lighten(color, amount) {
        amount = (amount === 0) ? 0 : (amount || 10);
        var hsl = tinycolor(color).toHsl();
        hsl.l += amount / 100;
        hsl.l = clamp01(hsl.l);
        return tinycolor(hsl);
    }
    function brighten(color, amount) {
        amount = (amount === 0) ? 0 : (amount || 10);
        var rgb = tinycolor(color).toRgb();
        rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));
        rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));
        rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));
        return tinycolor(rgb);
    }
    function darken(color, amount) {
        amount = (amount === 0) ? 0 : (amount || 10);
        var hsl = tinycolor(color).toHsl();
        hsl.l -= amount / 100;
        hsl.l = clamp01(hsl.l);
        return tinycolor(hsl);
    }
    // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
    // Values outside of this range will be wrapped into this range.
    function spin(color, amount) {
        var hsl = tinycolor(color).toHsl();
        var hue = (hsl.h + amount) % 360;
        hsl.h = hue < 0 ? 360 + hue : hue;
        return tinycolor(hsl);
    }
    // Combination Functions
    // ---------------------
    // Thanks to jQuery xColor for some of the ideas behind these
    // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>
    function complement(color) {
        var hsl = tinycolor(color).toHsl();
        hsl.h = (hsl.h + 180) % 360;
        return tinycolor(hsl);
    }
    function triad(color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [
            tinycolor(color),
            tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),
            tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })
        ];
    }
    function tetrad(color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [
            tinycolor(color),
            tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),
            tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),
            tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })
        ];
    }
    function splitcomplement(color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [
            tinycolor(color),
            tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),
            tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l })
        ];
    }
    function analogous(color, results, slices) {
        results = results || 6;
        slices = slices || 30;
        var hsl = tinycolor(color).toHsl();
        var part = 360 / slices;
        var ret = [tinycolor(color)];
        for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results;) {
            hsl.h = (hsl.h + part) % 360;
            ret.push(tinycolor(hsl));
        }
        return ret;
    }
    function monochromatic(color, results) {
        results = results || 6;
        var hsv = tinycolor(color).toHsv();
        var h = hsv.h, s = hsv.s, v = hsv.v;
        var ret = [];
        var modification = 1 / results;
        while (results--) {
            ret.push(tinycolor({ h: h, s: s, v: v }));
            v = (v + modification) % 1;
        }
        return ret;
    }
    // Utility Functions
    // ---------------------
    tinycolor.mix = function (color1, color2, amount) {
        amount = (amount === 0) ? 0 : (amount || 50);
        var rgb1 = tinycolor(color1).toRgb();
        var rgb2 = tinycolor(color2).toRgb();
        var p = amount / 100;
        var rgba = {
            r: ((rgb2.r - rgb1.r) * p) + rgb1.r,
            g: ((rgb2.g - rgb1.g) * p) + rgb1.g,
            b: ((rgb2.b - rgb1.b) * p) + rgb1.b,
            a: ((rgb2.a - rgb1.a) * p) + rgb1.a
        };
        return tinycolor(rgba);
    };
    // Readability Functions
    // ---------------------
    // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)
    // `contrast`
    // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
    tinycolor.readability = function (color1, color2) {
        var c1 = tinycolor(color1);
        var c2 = tinycolor(color2);
        return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
    };
    // `isReadable`
    // Ensure that foreground and background color combinations meet WCAG2 guidelines.
    // The third argument is an optional Object.
    //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
    //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
    // If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.
    // *Example*
    //    tinycolor.isReadable("#000", "#111") => false
    //    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
    tinycolor.isReadable = function (color1, color2, wcag2) {
        var readability = tinycolor.readability(color1, color2);
        var wcag2Parms, out;
        out = false;
        wcag2Parms = validateWCAG2Parms(wcag2);
        switch (wcag2Parms.level + wcag2Parms.size) {
            case "AAsmall":
            case "AAAlarge":
                out = readability >= 4.5;
                break;
            case "AAlarge":
                out = readability >= 3;
                break;
            case "AAAsmall":
                out = readability >= 7;
                break;
        }
        return out;
    };
    // `mostReadable`
    // Given a base color and a list of possible foreground or background
    // colors for that base, returns the most readable color.
    // Optionally returns Black or White if the most readable color is unreadable.
    // *Example*
    //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
    //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
    //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
    //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
    tinycolor.mostReadable = function (baseColor, colorList, args) {
        var bestColor = null;
        var bestScore = 0;
        var readability;
        var includeFallbackColors, level, size;
        args = args || {};
        includeFallbackColors = args.includeFallbackColors;
        level = args.level;
        size = args.size;
        for (var i = 0; i < colorList.length; i++) {
            readability = tinycolor.readability(baseColor, colorList[i]);
            if (readability > bestScore) {
                bestScore = readability;
                bestColor = tinycolor(colorList[i]);
            }
        }
        if (tinycolor.isReadable(baseColor, bestColor, { "level": level, "size": size }) || !includeFallbackColors) {
            return bestColor;
        }
        else {
            args.includeFallbackColors = false;
            return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
        }
    };
    // Big List of Colors
    // ------------------
    // <http://www.w3.org/TR/css3-color/#svg-color>
    var names = tinycolor.names = {
        aliceblue: "f0f8ff",
        antiquewhite: "faebd7",
        aqua: "0ff",
        aquamarine: "7fffd4",
        azure: "f0ffff",
        beige: "f5f5dc",
        bisque: "ffe4c4",
        black: "000",
        blanchedalmond: "ffebcd",
        blue: "00f",
        blueviolet: "8a2be2",
        brown: "a52a2a",
        burlywood: "deb887",
        burntsienna: "ea7e5d",
        cadetblue: "5f9ea0",
        chartreuse: "7fff00",
        chocolate: "d2691e",
        coral: "ff7f50",
        cornflowerblue: "6495ed",
        cornsilk: "fff8dc",
        crimson: "dc143c",
        cyan: "0ff",
        darkblue: "00008b",
        darkcyan: "008b8b",
        darkgoldenrod: "b8860b",
        darkgray: "a9a9a9",
        darkgreen: "006400",
        darkgrey: "a9a9a9",
        darkkhaki: "bdb76b",
        darkmagenta: "8b008b",
        darkolivegreen: "556b2f",
        darkorange: "ff8c00",
        darkorchid: "9932cc",
        darkred: "8b0000",
        darksalmon: "e9967a",
        darkseagreen: "8fbc8f",
        darkslateblue: "483d8b",
        darkslategray: "2f4f4f",
        darkslategrey: "2f4f4f",
        darkturquoise: "00ced1",
        darkviolet: "9400d3",
        deeppink: "ff1493",
        deepskyblue: "00bfff",
        dimgray: "696969",
        dimgrey: "696969",
        dodgerblue: "1e90ff",
        firebrick: "b22222",
        floralwhite: "fffaf0",
        forestgreen: "228b22",
        fuchsia: "f0f",
        gainsboro: "dcdcdc",
        ghostwhite: "f8f8ff",
        gold: "ffd700",
        goldenrod: "daa520",
        gray: "808080",
        green: "008000",
        greenyellow: "adff2f",
        grey: "808080",
        honeydew: "f0fff0",
        hotpink: "ff69b4",
        indianred: "cd5c5c",
        indigo: "4b0082",
        ivory: "fffff0",
        khaki: "f0e68c",
        lavender: "e6e6fa",
        lavenderblush: "fff0f5",
        lawngreen: "7cfc00",
        lemonchiffon: "fffacd",
        lightblue: "add8e6",
        lightcoral: "f08080",
        lightcyan: "e0ffff",
        lightgoldenrodyellow: "fafad2",
        lightgray: "d3d3d3",
        lightgreen: "90ee90",
        lightgrey: "d3d3d3",
        lightpink: "ffb6c1",
        lightsalmon: "ffa07a",
        lightseagreen: "20b2aa",
        lightskyblue: "87cefa",
        lightslategray: "789",
        lightslategrey: "789",
        lightsteelblue: "b0c4de",
        lightyellow: "ffffe0",
        lime: "0f0",
        limegreen: "32cd32",
        linen: "faf0e6",
        magenta: "f0f",
        maroon: "800000",
        mediumaquamarine: "66cdaa",
        mediumblue: "0000cd",
        mediumorchid: "ba55d3",
        mediumpurple: "9370db",
        mediumseagreen: "3cb371",
        mediumslateblue: "7b68ee",
        mediumspringgreen: "00fa9a",
        mediumturquoise: "48d1cc",
        mediumvioletred: "c71585",
        midnightblue: "191970",
        mintcream: "f5fffa",
        mistyrose: "ffe4e1",
        moccasin: "ffe4b5",
        navajowhite: "ffdead",
        navy: "000080",
        oldlace: "fdf5e6",
        olive: "808000",
        olivedrab: "6b8e23",
        orange: "ffa500",
        orangered: "ff4500",
        orchid: "da70d6",
        palegoldenrod: "eee8aa",
        palegreen: "98fb98",
        paleturquoise: "afeeee",
        palevioletred: "db7093",
        papayawhip: "ffefd5",
        peachpuff: "ffdab9",
        peru: "cd853f",
        pink: "ffc0cb",
        plum: "dda0dd",
        powderblue: "b0e0e6",
        purple: "800080",
        rebeccapurple: "663399",
        red: "f00",
        rosybrown: "bc8f8f",
        royalblue: "4169e1",
        saddlebrown: "8b4513",
        salmon: "fa8072",
        sandybrown: "f4a460",
        seagreen: "2e8b57",
        seashell: "fff5ee",
        sienna: "a0522d",
        silver: "c0c0c0",
        skyblue: "87ceeb",
        slateblue: "6a5acd",
        slategray: "708090",
        slategrey: "708090",
        snow: "fffafa",
        springgreen: "00ff7f",
        steelblue: "4682b4",
        tan: "d2b48c",
        teal: "008080",
        thistle: "d8bfd8",
        tomato: "ff6347",
        turquoise: "40e0d0",
        violet: "ee82ee",
        wheat: "f5deb3",
        white: "fff",
        whitesmoke: "f5f5f5",
        yellow: "ff0",
        yellowgreen: "9acd32"
    };
    // Make it easy to access colors via `hexNames[hex]`
    var hexNames = tinycolor.hexNames = flip(names);
    // Utilities
    // ---------
    // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
    function flip(o) {
        var flipped = {};
        for (var i in o) {
            if (o.hasOwnProperty(i)) {
                flipped[o[i]] = i;
            }
        }
        return flipped;
    }
    // Return a valid alpha value [0,1] with all invalid values being set to 1
    function boundAlpha(a) {
        a = parseFloat(a);
        if (isNaN(a) || a < 0 || a > 1) {
            a = 1;
        }
        return a;
    }
    // Take input from [0, n] and return it as [0, 1]
    function bound01(n, max) {
        if (isOnePointZero(n)) {
            n = "100%";
        }
        var processPercent = isPercentage(n);
        n = mathMin(max, mathMax(0, parseFloat(n)));
        // Automatically convert percentage into number
        if (processPercent) {
            n = Math.trunc(n * max) / 100;
        }
        // Handle floating point rounding errors
        if ((Math.abs(n - max) < 0.000001)) {
            return 1;
        }
        // Convert into [0, 1] range if it isn't already
        return (n % max) / parseFloat(max);
    }
    // Force a number between 0 and 1
    function clamp01(val) {
        return mathMin(1, mathMax(0, val));
    }
    // Parse a base-16 hex value into a base-10 integer
    function parseIntFromHex(val) {
        return parseInt(val, 16);
    }
    // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
    // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
    function isOnePointZero(n) {
        return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
    }
    // Check to see if string passed in is a percentage
    function isPercentage(n) {
        return typeof n === "string" && n.indexOf('%') != -1;
    }
    // Force a hex value to have 2 characters
    function pad2(c) {
        return c.length == 1 ? '0' + c : '' + c;
    }
    // Replace a decimal with it's percentage value
    function convertToPercentage(n) {
        if (n <= 1) {
            n = (n * 100) + "%";
        }
        return n;
    }
    // Converts a decimal to a hex value
    function convertDecimalToHex(d) {
        return Math.round(parseFloat(d) * 255).toString(16);
    }
    // Converts a hex value to a decimal
    function convertHexToDecimal(h) {
        return (parseIntFromHex(h) / 255);
    }
    var matchers = (function () {
        // <http://www.w3.org/TR/css3-values/#integers>
        var CSS_INTEGER = "[-\\+]?\\d+%?";
        // <http://www.w3.org/TR/css3-values/#number-value>
        var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
        // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
        var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
        // Actual matching.
        // Parentheses and commas are optional, but not required.
        // Whitespace can take the place of commas or opening paren
        var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
        var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
        return {
            CSS_UNIT: new RegExp(CSS_UNIT),
            rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
            rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
            hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
            hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
            hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
            hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
            hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
            hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
            hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
            hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
        };
    })();
    // `isValidCSSUnit`
    // Take in a single string / number and check to see if it looks like a CSS unit
    // (see `matchers` above for definition).
    function isValidCSSUnit(color) {
        return !!matchers.CSS_UNIT.exec(color);
    }
    // `stringInputToObject`
    // Permissive string parsing.  Take in a number of formats, and output an object
    // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
    function stringInputToObject(color) {
        color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();
        var named = false;
        if (names[color]) {
            color = names[color];
            named = true;
        }
        else if (color == 'transparent') {
            return { r: 0, g: 0, b: 0, a: 0, format: "name" };
        }
        // Try to match string input using regular expressions.
        // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
        // Just return an object and let the conversion functions handle that.
        // This way the result will be the same whether the tinycolor is initialized with string or object.
        var match;
        if ((match = matchers.rgb.exec(color))) {
            return { r: match[1], g: match[2], b: match[3] };
        }
        if ((match = matchers.rgba.exec(color))) {
            return { r: match[1], g: match[2], b: match[3], a: match[4] };
        }
        if ((match = matchers.hsl.exec(color))) {
            return { h: match[1], s: match[2], l: match[3] };
        }
        if ((match = matchers.hsla.exec(color))) {
            return { h: match[1], s: match[2], l: match[3], a: match[4] };
        }
        if ((match = matchers.hsv.exec(color))) {
            return { h: match[1], s: match[2], v: match[3] };
        }
        if ((match = matchers.hsva.exec(color))) {
            return { h: match[1], s: match[2], v: match[3], a: match[4] };
        }
        if ((match = matchers.hex8.exec(color))) {
            return {
                r: parseIntFromHex(match[1]),
                g: parseIntFromHex(match[2]),
                b: parseIntFromHex(match[3]),
                a: convertHexToDecimal(match[4]),
                format: named ? "name" : "hex8"
            };
        }
        if ((match = matchers.hex6.exec(color))) {
            return {
                r: parseIntFromHex(match[1]),
                g: parseIntFromHex(match[2]),
                b: parseIntFromHex(match[3]),
                format: named ? "name" : "hex"
            };
        }
        if ((match = matchers.hex4.exec(color))) {
            return {
                r: parseIntFromHex(match[1] + '' + match[1]),
                g: parseIntFromHex(match[2] + '' + match[2]),
                b: parseIntFromHex(match[3] + '' + match[3]),
                a: convertHexToDecimal(match[4] + '' + match[4]),
                format: named ? "name" : "hex8"
            };
        }
        if ((match = matchers.hex3.exec(color))) {
            return {
                r: parseIntFromHex(match[1] + '' + match[1]),
                g: parseIntFromHex(match[2] + '' + match[2]),
                b: parseIntFromHex(match[3] + '' + match[3]),
                format: named ? "name" : "hex"
            };
        }
        return false;
    }
    function validateWCAG2Parms(parms) {
        // return valid WCAG2 parms for isReadable.
        // If input parms are invalid, return {"level":"AA", "size":"small"}
        var level, size;
        parms = parms || { "level": "AA", "size": "small" };
        level = (parms.level || "AA").toUpperCase();
        size = (parms.size || "small").toLowerCase();
        if (level !== "AA" && level !== "AAA") {
            level = "AA";
        }
        if (size !== "small" && size !== "large") {
            size = "small";
        }
        return { "level": level, "size": size };
    }

    var Unit;
    (function (Unit) {
        Unit["PX"] = "px";
        Unit["PT"] = "pt";
        Unit["PC"] = "pc";
        Unit["CM"] = "cm";
        Unit["MM"] = "mm";
        Unit["IN"] = "in";
    })(Unit || (Unit = {}));
    const DPI = 96.0;
    ({
        [Unit.PT](value) {
            return value * DPI / 72;
        },
        [Unit.PC](value) {
            return value * 15;
        },
        [Unit.CM](value) {
            return value * DPI / 2.54;
        },
        [Unit.MM](value) {
            return value * DPI / 25.4;
        },
        [Unit.IN](value) {
            return value * DPI;
        },
    });
    ({
        [Unit.PT](value) {
            return value * 72 / DPI;
        },
        [Unit.PC](value) {
            return value / 15;
        },
        [Unit.CM](value) {
            return value * 2.54 / DPI;
        },
        [Unit.MM](value) {
            return value * 25.4 / DPI;
        },
        [Unit.IN](value) {
            return value / DPI;
        },
    });

    const RADIANS = Math.PI / 180;
    function getRangePercent(value, min, max) {
        if (min === max) {
            return 1;
        }
        return (value - min) / (max - min);
    }

    const SERIALIZE = Symbol("serialize");
    const UNSERIALIZE = Symbol("unserialize");

    const classMap = new Map();
    const namedMap = new Map();
    var repository = {
        register(handler) {
            if (!handler.class) {
                return;
            }
            if (!handler.name) {
                // noinspection JSPrimitiveTypeWrapperUsage
                handler.name = new String(handler.class.name);
            }
            else if (typeof handler.name === "string") {
                // noinspection JSPrimitiveTypeWrapperUsage
                handler.name = new String(handler.name);
            }
            classMap.set(handler.class, handler);
            namedMap.set(typeof handler.name === "object" ? handler.name.valueOf() : handler.name, handler);
        },
        registerCustom(classObject, serialize, unserialize, hydrate = null, name = null) {
            this.register({
                class: classObject,
                name,
                serialize,
                unserialize(data, push) {
                    push(unserialize(data), hydrate);
                }
            });
        },
        registerSerializable(classObject, name = null) {
            if (!(SERIALIZE in classObject.prototype)) {
                return false;
            }
            this.register({
                class: classObject,
                name,
                native: false,
                serialize: SerializableSerialize,
                unserialize: SerializableUnserialize,
            });
            return true;
        },
        hasName(name) {
            return namedMap.has(name);
        },
        hasClass(ctor) {
            return classMap.has(ctor);
        },
        canHandleObject(obj) {
            return classMap.has(obj.constructor);
        },
        getHandlerByName(name) {
            return namedMap.get(name) || null;
        },
        getHandlerByClass(cls) {
            return classMap.get(cls) || null;
        },
        getHandlerByObject(obj) {
            return classMap.get(obj.constructor) || null;
        },
    };
    function SerializableSerialize(value) {
        const data = value[SERIALIZE]();
        // No constructor or constructor shortcut
        if (data == null || Array.isArray(data)) {
            return { data };
        }
        // No constructor
        if (!data.hasOwnProperty('constructor')) {
            if (Object.keys(data).length === 0) {
                return { data: undefined };
            }
            return { data: undefined, lazy: data };
        }
        const obj = {
            data: Array.isArray(data.constructor) ? data.constructor : undefined,
            lazy: undefined,
        };
        delete data.constructor;
        if (Object.keys(data).length > 0) {
            obj.lazy = data;
        }
        return obj;
    }
    function SerializableUnserialize(data, push, classObject) {
        let obj;
        if (Array.isArray(data)) {
            obj = new classObject(...data);
        }
        else {
            obj = new classObject();
        }
        push(obj, SerializableHydrate);
    }
    function SerializableHydrate(value, lazy) {
        if (UNSERIALIZE in value) {
            value[UNSERIALIZE](lazy);
        }
    }

    repository.register(createBoxedValueHandler(Boolean, 22 /* Boolean */));
    repository.register(createBoxedValueHandler(Number, 23 /* Number */));
    repository.register(createBoxedValueHandler(String, 25 /* String */));
    repository.register({
        class: BigInt,
        native: true,
        name: 24 /* BigInt */,
        serialize(value, serializer) {
            serializer.bigint(value.valueOf());
        },
        unserialize(push, unserializer) {
            push(new Object(unserializer.value()));
        }
    });
    repository.register({
        class: RegExp,
        native: true,
        name: 26 /* RegExp */,
        serialize(value, serializer) {
            serializer.stringValue(value.source);
            serializer.stringValue(value.flags);
        },
        unserialize(push, unserializer) {
            push(new RegExp(unserializer.stringValue(), unserializer.stringValue()));
        }
    });
    repository.register({
        class: Date,
        native: true,
        name: 27 /* Date */,
        serialize(value, serializer) {
            serializer.stringValue(value.toISOString());
        },
        unserialize(push, unserializer) {
            push(new Date(unserializer.stringValue()));
        }
    });
    repository.register({
        class: Map,
        native: true,
        name: 28 /* Map */,
        serialize(value, serializer) {
            serializer.number(value.size);
            for (const [key, val] of value.entries()) {
                serializer.value(key);
                serializer.value(val);
            }
        },
        unserialize(push, unserializer) {
            const map = new Map();
            push(map);
            let size = unserializer.value();
            while (size-- > 0) {
                map.set(unserializer.value(), unserializer.value());
            }
        }
    });
    repository.register({
        class: Set,
        native: true,
        name: 29 /* Set */,
        serialize(value, serializer) {
            serializer.number(value.size);
            for (const val of value.values()) {
                serializer.value(val);
            }
        },
        unserialize(push, unserializer) {
            const set = new Set();
            push(set);
            let size = unserializer.value();
            while (size-- > 0) {
                set.add(unserializer.value());
            }
        }
    });
    repository.register(createArrayBufferHandler(ArrayBuffer, 30 /* ArrayBuffer */));
    repository.register(createArrayBufferHandler(SharedArrayBuffer, 31 /* SharedArrayBuffer */));
    repository.register(createTypedArrayHandler(DataView, 32 /* DataView */));
    repository.register(createTypedArrayHandler(Uint8ClampedArray, 33 /* Uint8ClampedArray */));
    repository.register(createTypedArrayHandler(Uint8Array, 34 /* Uint8Array */));
    repository.register(createTypedArrayHandler(Int8Array, 35 /* Int8Array */));
    repository.register(createTypedArrayHandler(Uint16Array, 36 /* Uint16Array */));
    repository.register(createTypedArrayHandler(Int16Array, 37 /* Int16Array */));
    repository.register(createTypedArrayHandler(Uint32Array, 38 /* Uint32Array */));
    repository.register(createTypedArrayHandler(Int32Array, 39 /* Int32Array */));
    repository.register(createTypedArrayHandler(BigUint64Array, 40 /* BigUint64Array */));
    repository.register(createTypedArrayHandler(BigInt64Array, 41 /* BigInt64Array */));
    repository.register(createTypedArrayHandler(Float32Array, 42 /* Float32Array */));
    repository.register(createTypedArrayHandler(Float64Array, 43 /* Float64Array */));
    globalThis.ImageData && repository.register({
        class: ImageData,
        native: true,
        name: 102 /* ImageData */,
        serialize(value, serializer) {
            serializer.number(value.width);
            serializer.number(value.height);
            serializer.object(value.data);
        },
        unserialize(push, unserializer) {
            const width = unserializer.value();
            const height = unserializer.value();
            push(new ImageData(unserializer.value(), width, height));
        }
    });
    repository.register({
        class: URL,
        native: true,
        name: 100 /* URL */,
        serialize(value, serializer) {
            serializer.string(value.href);
        },
        unserialize(push, unserializer) {
            push(new URL(unserializer.value()));
        }
    });
    repository.register({
        class: URLSearchParams,
        native: true,
        name: 101 /* URLSearchParams */,
        serialize(value, serializer) {
            serializer.string(value.toString());
        },
        unserialize(push, unserializer) {
            push(new URLSearchParams(unserializer.value()));
        }
    });
    function createArrayBufferHandler(cls, name) {
        return {
            class: cls,
            native: true,
            name,
            serialize(value, serializer) {
                serializer.number(value.byteLength);
                serializer.view.writeBuffer(value);
            },
            unserialize(push, unserializer) {
                const buf = new cls(unserializer.value());
                push(buf);
                unserializer.view.readIntoBuffer(buf);
            }
        };
    }
    function createTypedArrayHandler(cls, name) {
        return {
            class: cls,
            native: true,
            name,
            serialize(value, serializer) {
                serializer.number(value.byteOffset);
                serializer.number(value.byteLength);
                serializer.object(value.buffer);
            },
            unserialize(push, unserializer) {
                const offset = unserializer.value();
                const length = unserializer.value();
                push(new cls(unserializer.value(), offset, length));
            }
        };
    }
    function createBoxedValueHandler(cls, name) {
        return {
            class: cls,
            native: true,
            name,
            serialize(value, serializer) {
                serializer.value(value.valueOf());
            },
            unserialize(push, unserializer) {
                push(new cls(unserializer.value()));
            }
        };
    }

    function serializable(constructor, name) {
        return repository.registerSerializable(constructor, name);
    }

    function registerSerializableMap(map) {
        for (const [name, func] of Object.entries(map)) {
            serializable(func, name);
        }
    }
    const UUID_REGEX = /[018]/g;
    function uuid(separator = '') {
        const arr = crypto.getRandomValues(new Uint8Array(31));
        let i = 0;
        return `10000000${separator}1000${separator}4000${separator}8000${separator}100000000000`
            .replace(UUID_REGEX, (char) => {
            const c = parseInt(char);
            return (c ^ arr[i++] & 15 >> c / 4).toString(16);
        });
    }

    function interpolateNumber(percent, from, to) {
        return from + percent * (to - from);
    }
    function interpolateColorComponent(percent, from, to) {
        return clamp(Math.round(from + percent * (to - from)), 0, 255);
    }
    function interpolateAlphaComponent(percent, from, to) {
        return clamp(round(interpolateNumber(percent, from, to)), 0, 1);
    }

    var FillRule;
    (function (FillRule) {
        FillRule[FillRule["NonZero"] = 0] = "NonZero";
        FillRule[FillRule["EvenOdd"] = 1] = "EvenOdd";
    })(FillRule || (FillRule = {}));
    var BrushType;
    (function (BrushType) {
        BrushType[BrushType["None"] = 0] = "None";
        BrushType[BrushType["Solid"] = 1] = "Solid";
        BrushType[BrushType["LinearGradient"] = 2] = "LinearGradient";
        BrushType[BrushType["RadialGradient"] = 3] = "RadialGradient";
        BrushType[BrushType["TwoPointGradient"] = 4] = "TwoPointGradient";
        BrushType[BrushType["ConicalGradient"] = 5] = "ConicalGradient";
        BrushType[BrushType["Pattern"] = 6] = "Pattern";
        BrushType[BrushType["Pointer"] = 7] = "Pointer";
    })(BrushType || (BrushType = {}));
    var PaintOrder;
    (function (PaintOrder) {
        PaintOrder[PaintOrder["FillStrokeMarkers"] = 0] = "FillStrokeMarkers";
        PaintOrder[PaintOrder["FillMarkersStroke"] = 1] = "FillMarkersStroke";
        PaintOrder[PaintOrder["StrokeFillMarkers"] = 2] = "StrokeFillMarkers";
        PaintOrder[PaintOrder["StrokeMarkersFill"] = 3] = "StrokeMarkersFill";
        PaintOrder[PaintOrder["MarkersFillStroke"] = 4] = "MarkersFillStroke";
        PaintOrder[PaintOrder["MarkersStrokeFill"] = 5] = "MarkersStrokeFill";
    })(PaintOrder || (PaintOrder = {}));
    class BaseBrush {
        constructor(type, opacity) {
            this._type = type;
            this._opacity = opacity;
        }
        get type() {
            return this._type;
        }
        get opacity() {
            return this._opacity;
        }
        get isVisible() {
            return this._opacity > 0;
        }
        set opacity(value) {
            this._opacity = clamp(value, 0, 1);
        }
        applyPaint(paint) {
            paint.isAntiAlias = true;
            paint.alpha = this._opacity;
            paint.style = Skia.SkPaintStyle.Fill;
            return true;
        }
    }
    class EmptyBrush extends BaseBrush {
        constructor(opacity) {
            super(BrushType.None, opacity !== null && opacity !== void 0 ? opacity : 1);
        }
        [SERIALIZE]() {
            return [this._opacity];
        }
        get isVisible() {
            return false;
        }
        clone() {
            return new EmptyBrush(this._opacity);
        }
    }

    class Color {
        constructor(r = 0, g = 0, b = 0, a = 1.0) {
            this._rgba = null;
            this.r = r;
            this.g = g;
            this.b = b;
            this.a = a;
        }
        [SERIALIZE]() {
            return [this.r, this.g, this.b, this.a];
        }
        get code() {
            return (((this.a * 255) << 24) | (this.r << 16) | (this.g << 8) | (this.b << 0)) >>> 0;
        }
        get rgba() {
            if (!this._rgba) {
                this._rgba = `rgba(${this.r}, ${this.g}, ${this.b}, ${this.a})`;
            }
            return this._rgba;
        }
        clone() {
            return new Color(this.r, this.g, this.b, this.a);
        }
        inverted() {
            return new Color(255 - this.r, 255 - this.g, 255 - this.b, this.a);
        }
        equals(other) {
            return (this.r === other.r &&
                this.g === other.g &&
                this.b === other.b &&
                this.a === other.a);
        }
        interpolate(percent, color) {
            if (percent <= 0) {
                return this;
            }
            if (percent >= 1) {
                return color;
            }
            return new Color(interpolateColorComponent(percent, this.r, color.r), interpolateColorComponent(percent, this.g, color.g), interpolateColorComponent(percent, this.b, color.b), interpolateAlphaComponent(percent, this.a, color.a));
        }
        toArray() {
            return [this.r, this.g, this.b, this.a];
        }
        toIntArray() {
            return [this.r, this.g, this.b, this.a * 255];
        }
        toFloatArray() {
            return [this.r / 255, this.g / 255, this.b / 255, this.a];
        }
        static fromCode(code) {
            return new Color((code >> 16) & 0xFF, (code >> 8) & 0xFF, (code >> 0) & 0xFF, ((code >> 24) & 0xFF) / 255);
        }
        static from(data) {
            const color = tinycolor(data);
            if (!color.isValid()) {
                return Color.transparent;
            }
            const c = color.toRgb();
            return new Color(c.r, c.g, c.b, c.a);
        }
    }
    Color.transparent = new Color(0, 0, 0, 0);
    Color.white = new Color(255, 255, 255);
    Color.black = new Color(0, 0, 0);
    Color.red = new Color(255, 0, 0);
    Color.green = new Color(0, 255, 0);
    Color.blue = new Color(0, 0, 255);

    class SolidBrush extends BaseBrush {
        constructor(color, opacity = 1) {
            super(BrushType.Solid, opacity);
            this.color = color;
        }
        [SERIALIZE]() {
            return [this.color, this._opacity];
        }
        get isVisible() {
            return this.opacity > 0 && this.color.a > 0;
        }
        applyPaint(paint) {
            super.applyPaint(paint);
            paint.color = this.color.code;
            // When setting paint.color, the opacity is lost
            // so we must add it again
            paint.addAlpha(this.opacity);
            return true;
        }
        clone() {
            return new SolidBrush(this.color, this._opacity);
        }
        static fromColor(color, opacity = 1) {
            return new SolidBrush(color, opacity);
        }
        static get BLACK() {
            return new SolidBrush(Color.black);
        }
        static get WHITE() {
            return new SolidBrush(Color.white);
        }
        static get TRANSPARENT() {
            return new SolidBrush(Color.transparent, 0);
        }
    }

    class StopColorList {
        constructor(list, reference) {
            this._nativeCache = null;
            this._stringCache = null;
            this.list = list || [];
            this.reference = reference || null;
        }
        get length() {
            return this.list.length;
        }
        get isVisible() {
            for (const stop of this.list) {
                if (stop.color.a > 0) {
                    return true;
                }
            }
            return false;
        }
        getColorAt(index) {
            var _a;
            return (_a = this.list[index]) === null || _a === void 0 ? void 0 : _a.color;
        }
        setColorAt(index, color) {
            if (index > this.list.length || this.list[index].color.equals(color)) {
                return false;
            }
            this.list[index].color = color;
            this._nativeCache = this._stringCache = null;
            return true;
        }
        getOffsetAt(index) {
            var _a;
            return (_a = this.list[index]) === null || _a === void 0 ? void 0 : _a.offset;
        }
        setOffsetAt(index, offset) {
            if (index > this.list.length || this.list[index].offset === offset) {
                return false;
            }
            this.list[index].offset = offset;
            this.list.sort(sortStopColors);
            this._nativeCache = this._stringCache = null;
            return true;
        }
        removeColorAt(index) {
            if (index > this.list.length) {
                return false;
            }
            this.list.splice(index, 1);
            this._nativeCache = this._stringCache = null;
            return true;
        }
        addStopColor(offset, color) {
            if (color == null) {
                color = this.computeColor(offset);
            }
            const stop = { color, offset };
            this.list.push(stop);
            this.list.sort(sortStopColors);
            this._nativeCache = this._stringCache = null;
            return stop;
        }
        reverseOffsets() {
            let changed = false;
            for (const color of this.list) {
                if (color.offset !== 0.5) {
                    color.offset = 1 - color.offset;
                    changed = true;
                }
            }
            if (changed) {
                this.list.reverse();
                this._nativeCache = this._stringCache = null;
                return true;
            }
            return false;
        }
        computeColor(offset) {
            const list = this.list;
            const length = list.length;
            if (length === 0) {
                return Color.black;
            }
            if (length === 1) {
                return list[0].color;
            }
            if (offset <= list[0].offset) {
                return list[0].color;
            }
            const last = length - 1;
            if (offset >= list[last].offset) {
                return list[last].color;
            }
            for (let i = 2; i < last; i++) {
                const prev = list[i - 1];
                const current = list[i];
                if (prev.offset <= offset && offset <= current.offset) {
                    if (offset === prev.offset) {
                        return prev.color;
                    }
                    if (offset === current.offset) {
                        return current.color;
                    }
                    return prev.color.interpolate(getRangePercent(offset, prev.offset, current.offset), current.color);
                }
            }
            return list[last].color;
        }
        static fromColor(color, reference) {
            if (!color) {
                return new StopColorList([
                    { color: Color.black, offset: 0 },
                    { color: Color.white, offset: 1 },
                ], reference);
            }
            return new StopColorList([
                { color: color, offset: 0 },
                { color: color.inverted(), offset: 1 },
            ], reference);
        }
        toNative() {
            if (this._nativeCache) {
                return this._nativeCache;
            }
            const ret = {
                colors: [],
                offsets: [],
            };
            for (const stop of this.list) {
                ret.colors.push(stop.color.code);
                ret.offsets.push(stop.offset);
            }
            return this._nativeCache = ret;
        }
        toString() {
            if (this._stringCache === null) {
                this._stringCache = this.list.map(stopColorToString).join(', ');
            }
            return this._stringCache;
        }
        clone() {
            if (this.reference) {
                return this;
            }
            return new StopColorList(this.list.map(cloneStopColor), null);
        }
        [SERIALIZE]() {
            return [this.list, this.reference];
        }
    }
    function cloneStopColor(stop) {
        return { color: stop.color, offset: stop.offset };
    }
    function stopColorToString(stop) {
        return stop.color + ' ' + numberToString(stop.offset * 100) + '%';
    }
    function sortStopColors(a, b) {
        if (a.offset === b.offset) {
            return 0;
        }
        return a.offset < b.offset ? -1 : 1;
    }

    var SpreadMethod;
    (function (SpreadMethod) {
        SpreadMethod[SpreadMethod["Pad"] = 0] = "Pad";
        SpreadMethod[SpreadMethod["Repeat"] = 1] = "Repeat";
        SpreadMethod[SpreadMethod["Reflect"] = 2] = "Reflect";
    })(SpreadMethod || (SpreadMethod = {}));
    class GradientBrush extends BaseBrush {
        constructor(type, stopColors, spread, opacity = 1, transform = null) {
            super(type, opacity);
            this.transform = null;
            this.stopColors = stopColors;
            this.spread = spread;
            this.transform = transform;
        }
        get isVisible() {
            if (!this._opacity) {
                return false;
            }
            return this.stopColors.isVisible;
        }
        get nativeSpreadMethod() {
            switch (this.spread) {
                case SpreadMethod.Repeat:
                    return Skia.SkTileMode.Repeat;
                case SpreadMethod.Reflect:
                    return Skia.SkTileMode.Mirror;
                case SpreadMethod.Pad:
                default:
                    return Skia.SkTileMode.Clamp; //TODO: or decal?
            }
        }
    }

    class LinearGradientBrush extends GradientBrush {
        constructor(start, end, stopColors, spread = SpreadMethod.Pad, opacity = 1, transform = null) {
            super(BrushType.LinearGradient, stopColors, spread, opacity, transform);
            this.start = start;
            this.end = end;
        }
        [SERIALIZE]() {
            return [
                this.start, this.end,
                this.stopColors, this.spread, this.opacity, this.transform,
            ];
        }
        clone() {
            return new LinearGradientBrush(this.start.clone(), this.end.clone(), this.stopColors.clone(), this.spread, this._opacity, this.transform ? this.transform.clone() : null);
        }
        applyPaint(paint) {
            super.applyPaint(paint);
            const stop = this.stopColors.toNative();
            paint.shader = Skia.SkShader.MakeLinearGradient(this.start, this.end, stop.colors, stop.offsets, this.nativeSpreadMethod, this.transform);
            return true;
        }
    }

    class RadialGradientBrush extends GradientBrush {
        constructor(center, radius, stopColors, spread = SpreadMethod.Pad, opacity = 1, transform = null) {
            super(BrushType.RadialGradient, stopColors, spread, opacity, transform);
            this.center = center;
            this.radius = radius;
        }
        [SERIALIZE]() {
            return [
                this.center, this.radius,
                this.stopColors, this.spread, this.opacity, this.transform,
            ];
        }
        clone() {
            return new RadialGradientBrush(this.center.clone(), this.radius, this.stopColors.clone(), this.spread, this._opacity, this.transform ? this.transform.clone() : null);
        }
        applyPaint(paint) {
            super.applyPaint(paint);
            const stop = this.stopColors.toNative();
            paint.shader = Skia.SkShader.MakeRadialGradient(this.center, this.radius, stop.colors, stop.offsets, this.nativeSpreadMethod, this.transform);
            return true;
        }
    }

    class TwoPointGradientBrush extends GradientBrush {
        constructor(start, startRadius, end, endRadius, stopColors, spread = SpreadMethod.Pad, opacity = 1, transform = null) {
            super(BrushType.TwoPointGradient, stopColors, spread, opacity, transform);
            this.start = start;
            this.startRadius = startRadius;
            this.end = end;
            this.endRadius = endRadius;
        }
        [SERIALIZE]() {
            return [
                this.start, this.startRadius, this.end, this.endRadius,
                this.stopColors, this.spread, this.opacity, this.transform,
            ];
        }
        clone() {
            return new TwoPointGradientBrush(this.start.clone(), this.startRadius, this.end.clone(), this.endRadius, this.stopColors.clone(), this.spread, this._opacity, this.transform ? this.transform.clone() : null);
        }
        applyPaint(paint) {
            super.applyPaint(paint);
            const stop = this.stopColors.toNative();
            paint.shader = Skia.SkShader.MakeTwoPointConicalGradient(this.start, this.startRadius, this.end, this.endRadius, stop.colors, stop.offsets, this.nativeSpreadMethod, this.transform);
            return true;
        }
    }

    class ConicalGradientBrush extends GradientBrush {
        constructor(center, stopColors, spread = SpreadMethod.Pad, startAngle = 0, endAngle = 360, opacity = 1, transform = null) {
            super(BrushType.ConicalGradient, stopColors, spread, opacity, transform);
            this.center = center;
            this.startAngle = startAngle;
            this.endAngle = endAngle;
        }
        [SERIALIZE]() {
            return [
                this.center, this.startAngle, this.endAngle,
                this.stopColors, this.spread, this.opacity, this.transform,
            ];
        }
        clone() {
            return new ConicalGradientBrush(this.center.clone(), this.stopColors.clone(), this.spread, this.startAngle, this.endAngle, this._opacity, this.transform ? this.transform.clone() : null);
        }
        applyPaint(paint) {
            super.applyPaint(paint);
            const stop = this.stopColors.toNative();
            paint.shader = Skia.SkShader.MakeSweepGradient(this.center, this.startAngle, this.endAngle, stop.colors, stop.offsets, this.nativeSpreadMethod, this.transform);
            return true;
        }
    }

    class Point {
        constructor(x, y) {
            this.x = x;
            this.y = y;
        }
        /**
         * Vector direction (angle)
         */
        get direction() {
            return Math.atan2(this.y, this.x);
        }
        get length() {
            return Math.sqrt(this.x * this.x + this.y * this.y);
        }
        get isZero() {
            return this.x === 0 && this.y === 0;
        }
        get isUnit() {
            return isCloseTo(this.length, 1);
        }
        isPerpendicularTo(vector) {
            return isCloseTo(this.dot(vector), 0);
        }
        distanceTo(other) {
            return Point.distance(this, other);
        }
        add(p) {
            return new Point(this.x + p.x, this.y + p.y);
        }
        sub(p) {
            return new Point(this.x - p.x, this.y - p.y);
        }
        scale(s) {
            return new Point(s * this.x, s * this.y);
        }
        offset(x, y) {
            return new Point(this.x + x, this.y + y);
        }
        /**
         * Dot product
         * @param vector
         */
        dot(vector) {
            return this.x * vector.x + this.y * vector.y;
        }
        /**
         * Cross product
         * @param vector
         */
        cross(vector) {
            return this.x * vector.y - this.y * vector.x;
        }
        negate() {
            return new Point(-this.x, -this.y);
        }
        toLength(length) {
            if (this.isZero) {
                return new Point(0, 0);
            }
            return this.scale(length / this.length);
        }
        /**
         * Normalize vector
         */
        toUnit() {
            return this.toLength(1);
        }
        equals(other) {
            return this.x === other.x && this.y === other.y;
        }
        clone() {
            return new Point(this.x, this.y);
        }
        [SERIALIZE]() {
            return [this.x, this.y];
        }
        static fromObject(o) {
            return new Point(o.x, o.y);
        }
        /**
         * Creates a vector from an angle
         * @param angle In degrees
         * @param length
         */
        static fromAngle(angle, length = 1) {
            return this.fromDirection(angle * RADIANS, length);
        }
        /**
         * Creates a vector from a direction
         * @param radians angle in radians
         * @param length
         */
        static fromDirection(radians, length = 1) {
            return new Point(length * Math.cos(radians), length * Math.sin(radians));
        }
        /**
         * Distance between two points
         * @param a
         * @param b
         */
        static distance(a, b) {
            return Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2);
        }
        /**
         * Center point
         * @param a
         * @param b
         */
        static center(a, b) {
            return new Point((a.x + b.x) / 2, (a.y + b.y) / 2);
        }
    }
    Point.ZERO = new Point(0, 0);
    Point.ONE = new Point(1, 1);

    class Matrix {
        constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {
            this.value = [a, b, c, d, tx, ty];
        }
        get a() {
            return this.value[0];
        }
        get b() {
            return this.value[1];
        }
        get c() {
            return this.value[2];
        }
        get d() {
            return this.value[3];
        }
        /**
         * Alias of tx
         */
        get e() {
            return this.value[4];
        }
        /**
         * Alias of ty
         */
        get f() {
            return this.value[5];
        }
        get tx() {
            return this.value[4];
        }
        get ty() {
            return this.value[5];
        }
        get determinant() {
            const m = this.value;
            return m[0] * m[3] - m[1] * m[2];
        }
        get isInvertible() {
            return this.determinant !== 0;
        }
        get isIdentity() {
            const m = this.value;
            return m[0] === 1 && m[1] === 0 &&
                m[2] === 0 && m[3] === 1 &&
                m[4] === 0 && m[5] === 0;
        }
        toIdentity() {
            const m = this.value;
            m[0] = m[3] = 1;
            m[1] = m[2] = m[4] = m[5] = 0;
            return this;
        }
        reset(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {
            const m = this.value;
            m[0] = a;
            m[1] = b;
            m[2] = c;
            m[3] = d;
            m[4] = tx;
            m[5] = ty;
            return this;
        }
        panZoom(pan, zoom = 1) {
            return this.scale(zoom, zoom).translate(pan.x / zoom, pan.y / zoom);
        }
        translate(x = 0, y = 0) {
            if (x === 0 && y === 0) {
                return this;
            }
            const m = this.value;
            m[4] += m[0] * x + m[2] * y;
            m[5] += m[1] * x + m[3] * y;
            return this;
        }
        scale(x = 1, y = 1) {
            if (x === 1 && y === 1) {
                return this;
            }
            const m = this.value;
            m[0] *= x;
            m[1] *= x;
            m[2] *= y;
            m[3] *= y;
            return this;
        }
        skew(x = 0, y = 0) {
            x %= 360;
            y %= 360;
            if (x === 0 && y === 0) {
                return this;
            }
            const m = this.value;
            const a = m[0];
            const b = m[1];
            const c = m[2];
            const d = m[3];
            if (x) {
                x = Math.tan(x * RADIANS);
                m[2] += a * x;
                m[3] += b * x;
            }
            if (y) {
                y = Math.tan(y * RADIANS);
                m[0] += c * y;
                m[1] += d * y;
            }
            return this;
        }
        rotate(angle) {
            angle %= 360;
            if (angle) {
                angle *= RADIANS;
                const sin = Math.sin(angle);
                const cos = Math.cos(angle);
                const m = this.value;
                const a = m[0];
                const b = m[1];
                m[0] = a * cos + m[2] * sin;
                m[1] = b * cos + m[3] * sin;
                m[2] = m[2] * cos - a * sin;
                m[3] = m[3] * cos - b * sin;
            }
            return this;
        }
        inverse() {
            inverseArray(this.value, this.value);
            return this;
        }
        multiply(other) {
            multiplyArray$1(this.value, other.value, this.value);
            return this;
        }
        preMultiply(other) {
            multiplyArray$1(other.value, this.value, this.value);
            return this;
        }
        point(x, y) {
            const m = this.value;
            return new Point(m[0] * x + m[2] * y + m[4], m[1] * x + m[3] * y + m[5]);
        }
        shiftlessPoint(x, y) {
            const m = this.value;
            return new Point(m[0] * x + m[2] * y, m[1] * x + m[3] * y);
        }
        transformPoint(point) {
            return this.point(point.x, point.y);
        }
        inversePoint(x, y) {
            const m = [];
            if (inverseArray(this.value, m)) {
                return new Point(m[0] * x + m[2] * y + m[4], m[1] * x + m[3] * y + m[5]);
            }
            return new Point(x, y);
        }
        inverseShiftlessPoint(x, y) {
            const m = [];
            if (inverseArray(this.value, m)) {
                return new Point(m[0] * x + m[2] * y, m[1] * x + m[3] * y);
            }
            return new Point(x, y);
        }
        transformInversePoint(point) {
            return this.inversePoint(point.x, point.y);
        }
        clone() {
            const m = this.value;
            return new Matrix(m[0], m[1], m[2], m[3], m[4], m[5]);
        }
        equals(other) {
            return this.value.every((value, index) => value === other.value[index]);
        }
        toString() {
            return `matrix(${this.value.join(' ')})`;
        }
        [SERIALIZE]() {
            return this.value;
        }
        static Create(matrix) {
            if (!matrix) {
                return new Matrix();
            }
            if (Array.isArray(matrix)) {
                return new Matrix(...matrix);
            }
            return new Matrix(matrix.a || 0, matrix.b || 0, matrix.c || 0, matrix.d || 0, matrix.e || 0, matrix.f || 0);
        }
        static CreatePanZoom(pan, zoom = 1) {
            return new Matrix(zoom, 0, 0, zoom, pan.x, pan.y);
        }
        static CreateDevicePixelRatio(dpr = 1) {
            return new Matrix(dpr, 0, 0, dpr, 0, 0);
        }
    }
    function multiplyArray$1(left, right, dst) {
        const a = left[0] * right[0] + left[2] * right[1];
        const b = left[1] * right[0] + left[3] * right[1];
        const c = left[0] * right[2] + left[2] * right[3];
        const d = left[1] * right[2] + left[3] * right[3];
        const tx = left[0] * right[4] + left[2] * right[5] + left[4];
        const ty = left[1] * right[4] + left[3] * right[5] + left[5];
        dst[0] = a;
        dst[1] = b;
        dst[2] = c;
        dst[3] = d;
        dst[4] = tx;
        dst[5] = ty;
    }
    function inverseArray(src, dst) {
        const det = src[0] * src[3] - src[1] * src[2];
        if (det === 0) {
            return false;
        }
        const a = src[3] / det, b = -src[1] / det, c = -src[2] / det, d = src[0] / det, e = -(src[3] * src[4] - src[2] * src[5]) / det, f = (src[1] * src[4] - src[0] * src[5]) / det;
        dst[0] = a;
        dst[1] = b;
        dst[2] = c;
        dst[3] = d;
        dst[4] = e;
        dst[5] = f;
        return true;
    }

    var PatternTile;
    (function (PatternTile) {
        PatternTile[PatternTile["None"] = 0] = "None";
        PatternTile[PatternTile["Vertical"] = 1] = "Vertical";
        PatternTile[PatternTile["ReflectVertical"] = 2] = "ReflectVertical";
        PatternTile[PatternTile["Horizontal"] = 3] = "Horizontal";
        PatternTile[PatternTile["ReflectHorizontal"] = 4] = "ReflectHorizontal";
        PatternTile[PatternTile["Both"] = 5] = "Both";
        PatternTile[PatternTile["ReflectBoth"] = 6] = "ReflectBoth";
    })(PatternTile || (PatternTile = {}));
    class PatternBrush extends BaseBrush {
        constructor(pattern, opacity = 1, tile = PatternTile.Both, transform = new Matrix(), rectangle = null) {
            super(BrushType.Pattern, opacity);
            this._pattern = pattern;
            this._tile = tile;
            this._transform = transform;
            this._rectangle = rectangle;
        }
        [SERIALIZE]() {
            return [this._pattern, this._opacity, this._tile, this._transform, this._rectangle];
        }
        applyPaint(paint) {
            super.applyPaint(paint);
            const picture = this._pattern.getPicture();
            let xTile, yTile;
            switch (this._tile) {
                case PatternTile.Horizontal:
                    xTile = Skia.SkTileMode.Repeat;
                    yTile = Skia.SkTileMode.Decal;
                    break;
                case PatternTile.ReflectHorizontal:
                    xTile = Skia.SkTileMode.Mirror;
                    yTile = Skia.SkTileMode.Decal;
                    break;
                case PatternTile.Vertical:
                    xTile = Skia.SkTileMode.Decal;
                    yTile = Skia.SkTileMode.Repeat;
                    break;
                case PatternTile.ReflectVertical:
                    xTile = Skia.SkTileMode.Decal;
                    yTile = Skia.SkTileMode.Mirror;
                    break;
                case PatternTile.Both:
                    xTile = Skia.SkTileMode.Repeat;
                    yTile = Skia.SkTileMode.Repeat;
                    break;
                case PatternTile.ReflectBoth:
                    xTile = Skia.SkTileMode.Mirror;
                    yTile = Skia.SkTileMode.Mirror;
                    break;
                case PatternTile.None:
                default:
                    xTile = Skia.SkTileMode.Decal;
                    yTile = Skia.SkTileMode.Decal;
                    break;
            }
            if (this._rectangle !== null) {
                paint.shader = picture.makeShader(xTile, yTile, this._transform, this._rectangle);
            }
            else {
                paint.shader = picture.makeShader(xTile, yTile, this._transform);
            }
            picture.delete();
            return true;
        }
        clone() {
            return new PatternBrush(this._pattern, this._opacity, this._tile, this._transform.clone(), this._rectangle ? this._rectangle.clone() : null);
        }
    }

    class PointerBrush extends BaseBrush {
        constructor(brush, opacity = 1) {
            super(BrushType.Pointer, opacity);
            this._pointer = brush;
        }
        [SERIALIZE]() {
            return [this._pointer, this._opacity];
        }
        get pointer() {
            return this._pointer;
        }
        applyPaint(paint) {
            if (this._pointer.applyPaint(paint)) {
                return super.applyPaint(paint);
            }
            return false;
        }
        clone() {
            return new PointerBrush(this._pointer, this._opacity);
        }
    }

    class Rectangle {
        constructor(x, y, width, height) {
            this.x = x;
            this.y = y;
            if (width < 0) {
                this.x += width;
                width = -width;
            }
            if (height < 0) {
                this.y += height;
                height = -height;
            }
            this.width = width;
            this.height = height;
            this.top = y;
            this.bottom = y + height;
            this.left = x;
            this.right = x + width;
        }
        clone() {
            return new Rectangle(this.x, this.y, this.width, this.height);
        }
        equals(other) {
            return (this.x === other.x &&
                this.y === other.y &&
                this.width === other.width &&
                this.height === other.height);
        }
        intersects(other) {
            return !(this.right < other.left ||
                other.right < this.left ||
                this.bottom < other.top ||
                other.bottom < this.top);
        }
        containsPoint(point) {
            return this.contains(point.x, point.y);
        }
        contains(x, y) {
            return x >= this.left && x <= this.right && y >= this.top && y <= this.bottom;
        }
        get middle() {
            if (!this._middle) {
                this._middle = new Point(this.x + this.width / 2, this.y + this.height / 2);
            }
            return this._middle;
        }
        get topLeft() {
            if (!this._topLeft) {
                this._topLeft = new Point(this.left, this.top);
            }
            return this._topLeft;
        }
        get topRight() {
            if (!this._topRight) {
                this._topRight = new Point(this.right, this.top);
            }
            return this._topRight;
        }
        get bottomLeft() {
            if (!this._bottomLeft) {
                this._bottomLeft = new Point(this.left, this.bottom);
            }
            return this._bottomLeft;
        }
        get bottomRight() {
            if (!this._bottomRight) {
                this._bottomRight = new Point(this.right, this.bottom);
            }
            return this._bottomRight;
        }
        get isVisible() {
            return this.width > 0 && this.height > 0;
        }
        inset(x, y = x) {
            return this.outset(-x, -y);
        }
        outset(x, y = x) {
            return new Rectangle(this.x - x, this.y - y, this.width + 2 * x, this.height + 2 * y);
        }
        [SERIALIZE]() {
            return [this.x, this.y, this.width, this.height];
        }
        static fromLTRBObject(o) {
            return new Rectangle(o.left, o.top, o.right - o.left, o.bottom - o.top);
        }
        static fromLTRB(left, top, right, bottom) {
            return new Rectangle(left, top, right - left, bottom - top);
        }
        static fromSize(size) {
            return new Rectangle(0, 0, size.width, size.height);
        }
        static fromPoints(...points) {
            if (points.length === 0) {
                return new Rectangle(0, 0, 0, 0);
            }
            let left = points[0].x;
            let top = points[0].y;
            let right = left;
            let bottom = top;
            for (let i = 1; i < points.length; i++) {
                const p = points[i];
                if (p.x < left) {
                    left = p.x;
                }
                else if (p.x > right) {
                    right = p.x;
                }
                if (p.y < top) {
                    top = p.y;
                }
                else if (p.y > bottom) {
                    bottom = p.y;
                }
            }
            return new Rectangle(left, top, right - left, bottom - top);
        }
        static merge(rects) {
            let left = Number.POSITIVE_INFINITY;
            let top = Number.POSITIVE_INFINITY;
            let right = Number.NEGATIVE_INFINITY;
            let bottom = Number.NEGATIVE_INFINITY;
            let r = null;
            for (r of rects) {
                if (r.left < left) {
                    left = r.left;
                }
                if (r.top < top) {
                    top = r.top;
                }
                if (r.right > right) {
                    right = r.right;
                }
                if (r.bottom > bottom) {
                    bottom = r.bottom;
                }
            }
            if (r === null) {
                return new Rectangle(0, 0, 0, 0);
            }
            return new Rectangle(left, top, right - left, bottom - top);
        }
    }

    var BlendMode;
    (function (BlendMode) {
        BlendMode[BlendMode["Color"] = 0] = "Color";
        BlendMode[BlendMode["ColorBurn"] = 1] = "ColorBurn";
        BlendMode[BlendMode["ColorDodge"] = 2] = "ColorDodge";
        BlendMode[BlendMode["Darken"] = 3] = "Darken";
        BlendMode[BlendMode["Difference"] = 4] = "Difference";
        BlendMode[BlendMode["Exclusion"] = 5] = "Exclusion";
        BlendMode[BlendMode["HardLight"] = 6] = "HardLight";
        BlendMode[BlendMode["Hue"] = 7] = "Hue";
        BlendMode[BlendMode["Lighten"] = 8] = "Lighten";
        BlendMode[BlendMode["Luminosity"] = 9] = "Luminosity";
        BlendMode[BlendMode["Multiply"] = 10] = "Multiply";
        BlendMode[BlendMode["Normal"] = 11] = "Normal";
        BlendMode[BlendMode["Overlay"] = 12] = "Overlay";
        BlendMode[BlendMode["Saturation"] = 13] = "Saturation";
        BlendMode[BlendMode["Screen"] = 14] = "Screen";
        BlendMode[BlendMode["SoftLight"] = 15] = "SoftLight";
    })(BlendMode || (BlendMode = {}));
    class Composition {
        constructor(blend = BlendMode.Normal, opacity = 1, isolate = false) {
            this.blend = blend;
            this.opacity = clamp(opacity, 0, 1);
            this.isolate = isolate;
        }
        [SERIALIZE]() {
            return [this.blend, this.opacity, this.isolate];
        }
        clone() {
            return new Composition(this.blend, this.opacity, this.isolate);
        }
        get needsLayer() {
            return this.isolate || this.opacity !== 1 || this.blend !== BlendMode.Normal;
        }
        get isVisible() {
            return this.opacity > 0;
        }
        applyPaint(paint) {
            paint.isAntiAlias = true;
            paint.alpha = this.opacity;
            switch (this.blend) {
                case BlendMode.Color:
                    paint.blendMode = Skia.SkBlendMode.Color;
                    break;
                case BlendMode.ColorBurn:
                    paint.blendMode = Skia.SkBlendMode.ColorBurn;
                    break;
                case BlendMode.ColorDodge:
                    paint.blendMode = Skia.SkBlendMode.ColorDodge;
                    break;
                case BlendMode.Darken:
                    paint.blendMode = Skia.SkBlendMode.Darken;
                    break;
                case BlendMode.Difference:
                    paint.blendMode = Skia.SkBlendMode.Difference;
                    break;
                case BlendMode.Exclusion:
                    paint.blendMode = Skia.SkBlendMode.Exclusion;
                    break;
                case BlendMode.HardLight:
                    paint.blendMode = Skia.SkBlendMode.HardLight;
                    break;
                case BlendMode.Hue:
                    paint.blendMode = Skia.SkBlendMode.Hue;
                    break;
                case BlendMode.Lighten:
                    paint.blendMode = Skia.SkBlendMode.Lighten;
                    break;
                case BlendMode.Luminosity:
                    paint.blendMode = Skia.SkBlendMode.Luminosity;
                    break;
                case BlendMode.Multiply:
                    paint.blendMode = Skia.SkBlendMode.Multiply;
                    break;
                case BlendMode.Normal:
                    paint.blendMode = Skia.SkBlendMode.SrcOver;
                    break;
                case BlendMode.Overlay:
                    paint.blendMode = Skia.SkBlendMode.Overlay;
                    break;
                case BlendMode.Saturation:
                    paint.blendMode = Skia.SkBlendMode.Saturation;
                    break;
                case BlendMode.Screen:
                    paint.blendMode = Skia.SkBlendMode.Screen;
                    break;
                case BlendMode.SoftLight:
                    paint.blendMode = Skia.SkBlendMode.SoftLight;
                    break;
            }
        }
    }
    new Composition(BlendMode.Normal, 1);
    new Composition(BlendMode.Normal, 1, true);
    function ApplyCompositionPaint(paint, composition) {
        if (!composition || !composition.needsLayer) {
            return false;
        }
        composition.applyPaint(paint);
        return true;
    }

    class DrawingContext {
        constructor(canvas, matrix = new Matrix()) {
            this._stack = [];
            this._paint = null;
            this._canvas = canvas;
            this._matrix = matrix;
            this._paint = new Skia.SkPaint();
            this._canvas.setMatrix(matrix);
        }
        get canvas() {
            return this._canvas;
        }
        dispose() {
            // Do not delete canvas
            this._canvas = null;
            if (this._paint) {
                this._paint.delete();
                this._paint = null;
            }
        }
        get matrix() {
            return this._matrix;
        }
        set matrix(value) {
            this._matrix = value;
            this._canvas.setMatrix(value);
        }
        multiplyMatrix(matrix) {
            if (!matrix.isIdentity) {
                this.matrix = this._matrix.multiply(matrix);
            }
        }
        clipRect(rectangle) {
            this._canvas.clipRect(rectangle);
        }
        clipPath(pathObject) {
            this._canvas.clipPath(pathObject.path, Skia.SkClipOp.Intersect, true);
        }
        clear(color = Color.white) {
            this._canvas.clear(color.code);
        }
        fillRect(rect, brush) {
            if (!brush.isVisible) {
                return;
            }
            const paint = this._paint;
            if (brush.applyPaint(paint)) {
                this._canvas.drawRect(rect, paint);
            }
            paint.reset();
        }
        strokeRect(rect, pen) {
            if (!pen.isVisible) {
                return;
            }
            const paint = this._paint;
            if (pen.applyPaint(paint)) {
                this._canvas.drawRect(rect, paint);
            }
            paint.reset();
        }
        fillCircle(center, radius, brush) {
            if (!brush.isVisible) {
                return;
            }
            const paint = this._paint;
            if (brush.applyPaint(paint)) {
                this._canvas.drawCircle(center, radius, paint);
            }
            paint.reset();
        }
        strokeCircle(center, radius, pen) {
            if (!pen.isVisible) {
                return;
            }
            const paint = this._paint;
            if (pen.applyPaint(paint)) {
                this._canvas.drawCircle(center, radius, paint);
            }
            paint.reset();
        }
        fillText(text, brush, typeface, point, size = 10) {
            if (!brush.isVisible) {
                return;
            }
            const paint = this._paint;
            if (brush.applyPaint(paint)) {
                const f = new Skia.SkFont(typeface, size);
                f.hinting = Skia.SkFontHinting.Normal;
                f.edging = Skia.SkFontEdging.SubpixelAntiAlias;
                f.isSubpixel = true;
                this._canvas.drawText(text, paint, f, Skia.SkTextEncoding.UTF8, point);
            }
            paint.reset();
        }
        drawLine(from, to, pen) {
            if (!pen.isVisible) {
                return;
            }
            const paint = this._paint;
            if (pen.applyPaint(paint)) {
                this._canvas.drawLine(from, to, paint);
            }
            paint.reset();
        }
        drawImage(image, dx = 0, dy = 0, composition) {
            // TODO: check sampling here
            const paint = this._paint;
            if (ApplyCompositionPaint(paint, composition)) {
                const sampling = Skia.SkSamplingOptions.MakeMitchell();
                this._canvas.drawImage(image, dx, dy, sampling, paint);
                sampling.delete();
                paint.reset();
            }
            else {
                this._canvas.drawImage(image, dx, dy);
            }
        }
        drawPicture(picture, composition) {
            const paint = this._paint;
            if (ApplyCompositionPaint(paint, composition)) {
                this._canvas.drawPicture(picture, paint);
                paint.reset();
            }
            else {
                this._canvas.drawPicture(picture);
            }
        }
        fillPath(path, brush) {
            if (path.isEmpty || !brush.isVisible) {
                return;
            }
            const paint = this._paint;
            if (brush.applyPaint(paint)) {
                this._canvas.drawPath(path, paint);
            }
            paint.reset();
        }
        strokePath(path, pen) {
            if (path.isEmpty || !pen.isVisible) {
                return;
            }
            const paint = this._paint;
            if (pen.applyPaint(paint)) {
                this._canvas.drawPath(path, paint);
            }
            paint.reset();
        }
        recordPicture(element, callback) {
            const recorder = new Skia.SkPictureRecorder();
            const context = new DrawingContext(recorder.beginRecording(element.localBounds));
            const newBounds = callback.call(element, context);
            const picture = newBounds
                ? recorder.finishRecordingAsPicture(newBounds)
                : recorder.finishRecordingAsPicture();
            recorder.delete();
            context.dispose();
            return picture;
        }
        flush() {
            this._canvas.flush();
        }
        restore() {
            if (this._stack.length === 0) {
                return;
            }
            this._canvas.restore();
            const ctx = this._stack.pop();
            this._matrix = ctx.matrix; // this is restored on canvas
        }
        save() {
            this._canvas.save();
            this._stack.push({
                matrix: this._matrix.clone(),
            });
        }
        static getStrokePath(path, pen) {
            const paint = new Skia.SkPaint();
            pen.applyPaint(paint);
            const res = path.getFilled(paint);
            paint.delete();
            return res;
        }
    }

    var Orientation;
    (function (Orientation) {
        Orientation[Orientation["None"] = 0] = "None";
        Orientation[Orientation["Auto"] = 1] = "Auto";
        Orientation[Orientation["AutoReverse"] = -1] = "AutoReverse";
    })(Orientation || (Orientation = {}));
    class GraphicsElement {
        constructor(id = null) {
            // Element
            this._id = null;
            this._locked = false;
            this._hidden = false;
            this._title = null;
            // Node
            this._parent = null;
            this._next = null;
            this._prev = null;
            this._first = null;
            this._last = null;
            // Transform
            this._originX = 0;
            this._originY = 0;
            this._translateX = 0;
            this._translateY = 0;
            this._scaleX = 1;
            this._scaleY = 1;
            this._skewX = 0;
            this._skewY = 0;
            this._rotate = 0;
            this._orientation = Orientation.None;
            // Bounds
            this._localBounds = null;
            this._localTightBounds = null;
            this._globalBounds = null;
            this._globalTightBounds = null;
            this._pictureCache = null;
            // Matrix
            this._globalMatrix = null;
            this._localMatrix = null;
            // Composition
            this._composition = null;
            this._id = id;
        }
        get parent() {
            return this._parent;
        }
        get firstChild() {
            return this._first;
        }
        get lastChild() {
            return this._last;
        }
        get nextSibling() {
            return this._next;
        }
        get previousSibling() {
            return this._prev;
        }
        get hasChildren() {
            return this._first != null;
        }
        /**
         * Unique element id
         */
        get id() {
            return this._id;
        }
        /**
         * Element title
         */
        get title() {
            return this._title;
        }
        set title(value) {
            this._title = value;
        }
        /**
         * True if element cannot be selected with mouse
         */
        get locked() {
            return this._locked;
        }
        set locked(value) {
            this._locked = value;
        }
        /**
         * True if element should not be rendered
         */
        get hidden() {
            return this._hidden;
        }
        set hidden(value) {
            if (value !== this._hidden) {
                this._hidden = value;
                this.invalidate();
            }
        }
        /**
         * Bounds without transform applied
         */
        get localBounds() {
            return this.globalBounds;
        }
        /**
         * Tight bounds without transform applied
         */
        get localTightBounds() {
            return this.globalTightBounds;
        }
        /**
         * Bounds with global transform applied
         */
        get globalBounds() {
            if (this._globalBounds == null) {
                this._globalBounds = Rectangle.merge(this.childrenPropertyIterator('globalBounds'));
            }
            return this._globalBounds;
        }
        /**
         * Tight bounds with global transform applied
         */
        get globalTightBounds() {
            if (this._globalTightBounds == null) {
                this._globalTightBounds = Rectangle.merge(this.childrenPropertyIterator('globalTightBounds'));
            }
            return this._globalTightBounds;
        }
        /**
         * Matrix of this element
         */
        get localMatrix() {
            if (this._localMatrix === null) {
                this._localMatrix = this.getLocalMatrix();
            }
            return this._localMatrix;
        }
        /**
         * Full matrix to this element
         */
        get globalMatrix() {
            if (this._globalMatrix === null) {
                const local = this.localMatrix;
                if (!this._parent) {
                    return this._globalMatrix = local;
                }
                const global = this._parent.globalMatrix;
                if (global.isIdentity) {
                    return this._globalMatrix = local;
                }
                return this._globalMatrix = global.clone().multiply(local);
            }
            return this._globalMatrix;
        }
        /**
         * Invoke when the "picture" changed (shape, color, etc.)
         * This will also invoke parent.invalidate()
         * Do NOT invoke when the matrix (local or global) has changed
         */
        invalidate() {
            if (this._pictureCache !== null) {
                this._pictureCache.delete();
                this._pictureCache = null;
            }
            if (this._parent != null) {
                this._parent.invalidate();
            }
        }
        /**
         * Invoke when the matrix of an ancestor has changed
         * This is also invoke invalidateGlobalMatrix() for every children
         */
        invalidateGlobalMatrix() {
            this._globalMatrix = null;
            this._globalBounds = null;
            this._globalTightBounds = null;
            for (let n = this._first; n !== null; n = n._next) {
                if (n._globalMatrix !== null) {
                    n.invalidateGlobalMatrix();
                }
            }
        }
        /**
         * Invoke when local matrix has changed
         * This is also:
         *   - invoke invalidateGlobalMatrix() for every children
         *   - invoke invalidateBoundsAndPicture(true)
         * @protected
         */
        invalidateLocalMatrix() {
            if (this._globalMatrix !== null) {
                this.invalidateGlobalMatrix();
            }
            this._localMatrix = null;
            // Invalidate parent's picture, so he can draw us with the new local matrix
            this.invalidateBoundsAndPicture(true);
        }
        /**
         * Invoked by invalidateLocalMatrix()
         * This is a helper for: invalidateBounds() + invalidate()
         * @protected
         */
        invalidateBoundsAndPicture(parentPictureOnly = false) {
            // Invalidate all bounds
            this._localBounds = null;
            this._localTightBounds = null;
            this._globalBounds = null;
            this._globalTightBounds = null;
            // Remove self picture
            if (!parentPictureOnly) {
                if (this._pictureCache !== null) {
                    this._pictureCache.delete();
                    this._pictureCache = null;
                }
            }
            if (this._parent != null) {
                if (parentPictureOnly) {
                    // Remove parent picture
                    if (this._parent._pictureCache !== null) {
                        this._parent._pictureCache.delete();
                        this._parent._pictureCache = null;
                    }
                }
                // Bubble
                this._parent.invalidateBoundsAndPicture(parentPictureOnly);
            }
        }
        /**
         * Draws contents of the element into a picture
         */
        getPicture() {
            if (this._pictureCache === null) {
                const recorder = new Skia.SkPictureRecorder();
                const context = new DrawingContext(recorder.beginRecording(this.pictureBounds));
                const newBounds = this.drawOnPicture(context);
                this._pictureCache = newBounds
                    ? recorder.finishRecordingAsPicture(newBounds)
                    : recorder.finishRecordingAsPicture();
                recorder.delete();
                context.dispose();
            }
            return this._pictureCache;
        }
        bringForward() {
            if (!this._next || !this._parent) {
                return false;
            }
            this._parent.insertAfter(this, this._next);
            return true;
        }
        sendBackward() {
            if (!this._prev || !this._parent) {
                return false;
            }
            this._parent.insertBefore(this, this._prev);
            return true;
        }
        bringToFront() {
            if (!this._next || !this._parent) {
                return false;
            }
            this._parent.insertAfter(this, this._parent._last);
            return true;
        }
        sendToBack() {
            if (!this._prev || !this._parent) {
                return false;
            }
            this._parent.insertBefore(this, this._parent._first);
            return true;
        }
        remove() {
            if (!this._parent) {
                return false;
            }
            this._parent.removeChild(this);
            return true;
        }
        insertAfter(node, target) {
            if (!this.supportsChildren) {
                throw new Error("Children are not supported");
            }
            if (target._parent !== this) {
                throw new Error('Invalid target');
            }
            if (node._parent) {
                if (node._parent === this && node._prev === target) {
                    // Already in the right place
                    return node;
                }
                // We wrap here because we don't want to invalidate twice
                GraphicsElement.preventInvalidation(() => {
                    node._parent.removeChild(node);
                });
            }
            node._parent = this;
            const next = target._next;
            target._next = node;
            node._prev = target;
            node._next = next;
            if (next) {
                next._prev = node;
            }
            else {
                this._last = node;
            }
            if (!GraphicsElement.invalidationPrevented) {
                node.invalidateGlobalMatrix();
                this.invalidateBoundsAndPicture();
            }
            return node;
        }
        insertBefore(node, target) {
            if (!this.supportsChildren) {
                throw new Error("Children are not supported");
            }
            if (target._parent !== this) {
                throw new Error('Invalid target');
            }
            if (node._parent) {
                if (node._parent === this && node._next === target) {
                    // Already in the right place
                    return node;
                }
                // We wrap here because we don't want to invalidate twice
                GraphicsElement.preventInvalidation(() => {
                    node._parent.removeChild(node);
                });
            }
            node._parent = this;
            const prev = target._prev;
            target._prev = node;
            node._next = target;
            node._prev = prev;
            if (prev) {
                prev._next = node;
            }
            else {
                this._first = node;
            }
            if (!GraphicsElement.invalidationPrevented) {
                node.invalidateGlobalMatrix();
                this.invalidateBoundsAndPicture();
            }
            return node;
        }
        appendChild(node) {
            if (!this.supportsChildren) {
                throw new Error("Children are not supported");
            }
            for (let n = this._parent; n != null; n = n._parent) {
                if (n === node) {
                    throw new Error('Invalid node');
                }
            }
            if (node._parent) {
                // We wrap here because we don't want to invalidate twice
                GraphicsElement.preventInvalidation(() => {
                    node._parent.removeChild(node);
                });
            }
            node._parent = this;
            if (this._last) {
                this._last._next = node;
                node._prev = this._last;
            }
            this._last = node;
            if (!this._first) {
                this._first = node;
            }
            if (!GraphicsElement.invalidationPrevented) {
                node.invalidateGlobalMatrix();
                this.invalidateBoundsAndPicture();
            }
            return node;
        }
        prependChild(node) {
            if (this._first) {
                return this.insertBefore(node, this._first);
            }
            return this.appendChild(node);
        }
        removeChild(node) {
            if (!this.supportsChildren) {
                throw new Error("Children are not supported");
            }
            if (node._parent !== this) {
                throw new Error('Invalid node');
            }
            if (this._first === node) {
                if (this._last === node) {
                    this._first = this._last = null;
                }
                else {
                    this._first = node._next;
                    this._first._prev = null;
                }
            }
            else if (this._last === node) {
                this._last = node._prev;
                this._last._next = null;
            }
            else {
                node._next._prev = node._prev;
                node._prev._next = node._next;
            }
            node._parent = node._next = node._prev = null;
            if (!GraphicsElement.invalidationPrevented) {
                this.invalidateBoundsAndPicture();
            }
            return node;
        }
        // Transforms
        getLocalMatrix() {
            const matrix = new Matrix();
            matrix
                .translate(this._originX, this._originY)
                .rotate(this._rotate)
                .skew(this._skewX, 0)
                .skew(0, this._skewY)
                .scale(this._scaleX, this._scaleY)
                .translate(this._translateX, this._translateY);
            return matrix;
        }
        get originX() {
            return this._originX;
        }
        set originX(value) {
            const d = value - this._originX;
            this._originX = value;
            this._translateX -= d;
            this.invalidateLocalMatrix();
        }
        get originY() {
            return this._originY;
        }
        set originY(value) {
            const d = value - this._originY;
            this._originY = value;
            this._translateY -= d;
            this.invalidateLocalMatrix();
        }
        get translateX() {
            return this._translateX;
        }
        set translateX(value) {
            this._translateX = value;
            this.invalidateLocalMatrix();
        }
        get translateY() {
            return this._translateY;
        }
        set translateY(value) {
            this._translateY = value;
            this.invalidateLocalMatrix();
        }
        get scaleX() {
            return this._scaleX;
        }
        set scaleX(value) {
            this._scaleX = value;
            this.invalidateLocalMatrix();
        }
        get scaleY() {
            return this._scaleY;
        }
        set scaleY(value) {
            this._scaleY = value;
            this.invalidateLocalMatrix();
        }
        get rotate() {
            return this._rotate;
        }
        set rotate(value) {
            this._rotate = value;
            this.invalidateLocalMatrix();
        }
        get orientation() {
            return this._orientation;
        }
        set orientation(value) {
            this._orientation = value;
        }
        // Coordinates
        get position() {
            // TODO: what is this?
            return new Point(this._originX, this._originY);
        }
        set position(value) {
            // TODO: what is this?
            this._originX = value.x;
            this._originY = value.y;
            this.invalidateLocalMatrix();
        }
        // Opacity
        get opacity() {
            return this.composition.opacity;
        }
        set opacity(value) {
            value = clamp(value, 0, 1);
            if (value !== this.composition.opacity) {
                this.composition.opacity = value;
                this.invalidate();
            }
        }
        // Blend mode
        get blend() {
            return this.composition.blend;
        }
        set blend(value) {
            if (value !== this.composition.blend) {
                this.composition.blend = value;
                this.invalidate();
            }
        }
        // Isolate
        get isolate() {
            return this.composition.isolate;
        }
        set isolate(value) {
            if (value !== this.composition.isolate) {
                this.composition.isolate = value;
                this.invalidate();
            }
        }
        // Composition
        get composition() {
            if (this._composition == null) {
                this._composition = new Composition();
            }
            return this._composition;
        }
        get isVisible() {
            return this.composition.isVisible;
        }
        createClone() {
            // @ts-ignore
            return new this.constructor(this._id);
        }
        clone() {
            const clone = this.createClone();
            clone._title = this._title;
            clone._locked = this._locked;
            clone._hidden = this._hidden;
            clone._originX = this._originX;
            clone._originY = this._originY;
            clone._translateX = this._translateX;
            clone._translateY = this._translateY;
            clone._scaleX = this._scaleX;
            clone._scaleY = this._scaleY;
            clone._skewX = this._skewX;
            clone._skewY = this._skewY;
            clone._rotate = this._rotate;
            clone._orientation = this._orientation;
            clone._composition = this._composition ? this._composition.clone() : null;
            this.onClone(clone);
            if (this.hasChildren) {
                GraphicsElement.preventInvalidation(() => {
                    for (const child of this.children()) {
                        clone.appendChild(child.clone());
                    }
                });
            }
            if (this._localMatrix) {
                clone._localMatrix = this._localMatrix;
            }
            return clone;
        }
        draw(context) {
            if (this._hidden || !this.isVisible) {
                // Early exit
                return;
            }
            context.save();
            context.multiplyMatrix(this.localMatrix);
            context.drawPicture(this.getPicture(), this.composition);
            context.restore();
        }
        getElementAt(point) {
            if (this.hidden) {
                return null;
            }
            // TODO: check if locked ...
            for (const child of this.children(true)) {
                const result = child.getElementAt(point);
                if (result) {
                    return result;
                }
            }
            return null;
        }
        dispose() {
            // Remove picture cache
            if (this._pictureCache !== null) {
                this._pictureCache.delete();
                this._pictureCache = null;
            }
            // Remove other objects cache
            this._composition = null;
            this._globalMatrix = null;
            this._localMatrix = null;
            this._globalBounds = null;
            this._globalTightBounds = null;
            this._localBounds = null;
            this._localTightBounds = null;
            // Dispose children
            for (let node = this._first; node != null; node = node._next) {
                node.dispose();
            }
            // Remove links
            this._parent = this._prev = this._next = this._first = this._last = null;
        }
        /**
         * Iterates all children in reverse order
         */
        *[Symbol.iterator]() {
            for (let node = this._last; node != null; node = node._prev) {
                yield node;
            }
        }
        /**
         * Iterates all children
         * @param reverse
         */
        *children(reverse = false) {
            if (reverse) {
                for (let node = this._last; node != null; node = node._prev) {
                    yield node;
                }
            }
            else {
                for (let node = this._first; node != null; node = node._next) {
                    yield node;
                }
            }
        }
        /**
         * Bounds (without transform) where paint is allowed
         * @protected
         */
        get pictureBounds() {
            return this.localBounds;
        }
        /**
         * Draws the element
         * @param context
         * @return If this functions returns a rect => overwrites picture bounds
         * @protected
         */
        drawOnPicture(context) {
            this.drawChildrenOnPicture(context);
        }
        /**
         * Draws children
         * @param context
         * @protected
         */
        drawChildrenOnPicture(context) {
            for (let node = this._first; node != null; node = node._next) {
                node.draw(context);
            }
        }
        *childrenPropertyIterator(prop) {
            for (let node = this._first; node != null; node = node._next) {
                yield node[prop];
            }
        }
        [SERIALIZE]() {
            const data = {};
            if (this.hasChildren) {
                data.children = Array.from(this.children());
            }
            data.element = [this._locked, this._hidden, this._title];
            data.transform = [
                this._originX, this._originY,
                this._translateX, this._translateY,
                this._scaleX, this._scaleY,
                this._skewX, this._skewY,
                this._rotate, this._orientation
            ];
            data.composition = this._composition;
            this.onSerialize(data);
            return data;
        }
        [UNSERIALIZE](data) {
            [this._locked, this._hidden, this._title] = data.element;
            [
                this._originX, this._originY,
                this._translateX, this._translateY,
                this._scaleX, this._scaleY,
                this._skewX, this._skewY,
                this._rotate, this._orientation,
            ] = data.transform;
            this._composition = data.composition;
            this.onUnserialize(data);
            if (!data.children || !data.children.length) {
                return;
            }
            GraphicsElement.preventInvalidation(() => {
                for (const child of data.children) {
                    this.appendChild(child);
                }
            });
        }
        static preventInvalidation(f) {
            this.invalidationPrevented++;
            try {
                f();
            }
            finally {
                this.invalidationPrevented--;
            }
        }
    }
    GraphicsElement.invalidationPrevented = 0;

    var StrokeLineCap;
    (function (StrokeLineCap) {
        StrokeLineCap[StrokeLineCap["Butt"] = 0] = "Butt";
        StrokeLineCap[StrokeLineCap["Round"] = 1] = "Round";
        StrokeLineCap[StrokeLineCap["Square"] = 2] = "Square";
    })(StrokeLineCap || (StrokeLineCap = {}));
    var StrokeLineJoin;
    (function (StrokeLineJoin) {
        StrokeLineJoin[StrokeLineJoin["Miter"] = 0] = "Miter";
        StrokeLineJoin[StrokeLineJoin["Round"] = 1] = "Round";
        StrokeLineJoin[StrokeLineJoin["Bevel"] = 2] = "Bevel";
    })(StrokeLineJoin || (StrokeLineJoin = {}));
    var PenType;
    (function (PenType) {
        PenType[PenType["Default"] = 0] = "Default";
    })(PenType || (PenType = {}));
    class BasePen {
        constructor(brush = SolidBrush.BLACK, width = 1, lineCap = StrokeLineCap.Butt, lineJoin = StrokeLineJoin.Miter, miterLimit = 4, dashes = [], offset = 0) {
            this._brush = brush;
            this._width = width;
            this._lineCap = lineCap;
            this._lineJoin = lineJoin;
            this._miterLimit = miterLimit;
            this._dashes = dashes;
            this._offset = offset;
        }
        clone() {
            const ctor = this.constructor;
            // @ts-ignore
            return new ctor(this._brush.clone(), this._width, this._lineCap, this._lineJoin, this._miterLimit, this._dashes.slice(), this._offset);
        }
        [SERIALIZE]() {
            return [
                this._brush, this._width,
                this._lineCap, this._lineJoin, this._miterLimit,
                this._dashes, this._offset,
            ];
        }
        get brush() {
            return this._brush;
        }
        set brush(value) {
            this._brush = value;
        }
        get width() {
            return this._width;
        }
        set width(value) {
            this._width = value;
        }
        get lineCap() {
            return this._lineCap;
        }
        set lineCap(value) {
            this._lineCap = value;
        }
        get lineJoin() {
            return this._lineJoin;
        }
        set lineJoin(value) {
            this._lineJoin = value;
        }
        get miterLimit() {
            return this._miterLimit;
        }
        set miterLimit(value) {
            this._miterLimit = value;
        }
        get dashes() {
            return this._dashes;
        }
        set dashes(value) {
            this._dashes = value;
        }
        get offset() {
            return this._offset;
        }
        set offset(value) {
            this._offset = value;
        }
        get isVisible() {
            return this._brush.isVisible && this._width > 0;
        }
        applyPaint(paint) {
            if (!this._brush.applyPaint(paint)) {
                return false;
            }
            paint.style = Skia.SkPaintStyle.Stroke;
            paint.strokeWidth = this._width;
            paint.strokeMiter = this._miterLimit;
            switch (this._lineJoin) {
                case StrokeLineJoin.Bevel:
                    paint.strokeJoin = Skia.SkPaintStrokeJoin.Bevel;
                    break;
                case StrokeLineJoin.Round:
                    paint.strokeJoin = Skia.SkPaintStrokeJoin.Round;
                    break;
                case StrokeLineJoin.Miter:
                default:
                    paint.strokeJoin = Skia.SkPaintStrokeJoin.Miter;
                    break;
            }
            switch (this._lineCap) {
                case StrokeLineCap.Square:
                    paint.strokeCap = Skia.SkPaintStrokeCap.Square;
                    break;
                case StrokeLineCap.Round:
                    paint.strokeCap = Skia.SkPaintStrokeCap.Round;
                    break;
                case StrokeLineCap.Butt:
                default:
                    paint.strokeCap = Skia.SkPaintStrokeCap.Butt;
                    break;
            }
            if (this._dashes.length > 0) {
                paint.pathEffect = Skia.SkPathEffect.MakeDash(this._dashes, this._offset);
            }
            return true;
        }
    }

    class DefaultPen extends BasePen {
        get type() {
            return PenType.Default;
        }
    }

    class PaintElement extends GraphicsElement {
        constructor() {
            super(...arguments);
            this._rule = FillRule.NonZero;
            this._paintOrder = PaintOrder.FillStrokeMarkers;
        }
        /**
         * Fill rule
         */
        get fillRule() {
            return this._rule;
        }
        set fillRule(value) {
            this._rule = value;
            this.invalidate();
        }
        get nativeFillRule() {
            return this._rule === FillRule.EvenOdd
                ? Skia.SkPathFillType.EvenOdd
                : Skia.SkPathFillType.Winding;
        }
        get paintOrder() {
            return this._paintOrder;
        }
        set paintOrder(value) {
            this._paintOrder = value;
            this.invalidate();
        }
        // Fill
        get fill() {
            if (!this._fill) {
                this._fill = new EmptyBrush();
            }
            return this._fill;
        }
        set fill(value) {
            this._fill = value;
            this.invalidate();
        }
        get fillOpacity() {
            return this.fill.opacity;
        }
        set fillOpacity(value) {
            this.fill.opacity = value;
            this.invalidate();
        }
        // Stroke
        get stroke() {
            if (!this._stroke) {
                this._stroke = new DefaultPen();
            }
            return this._stroke;
        }
        set stroke(value) {
            this._stroke = value;
            this.invalidateBoundsAndPicture();
        }
        get strokeBrush() {
            return this.stroke.brush;
        }
        set strokeBrush(value) {
            this.stroke.brush = value;
            this.invalidate();
        }
        get strokeOpacity() {
            return this.stroke.brush.opacity;
        }
        set strokeOpacity(value) {
            this.stroke.brush.opacity = value;
            this.invalidate();
        }
        get strokeLineWidth() {
            return this.stroke.width;
        }
        set strokeLineWidth(value) {
            this.stroke.width = value;
            this.invalidateBoundsAndPicture();
        }
        get strokeLineCap() {
            return this.stroke.lineCap;
        }
        set strokeLineCap(value) {
            const stroke = this.stroke;
            if (value !== stroke.lineCap) {
                stroke.lineCap = value;
                if (stroke.isVisible) {
                    this.invalidateBoundsAndPicture();
                }
            }
        }
        get strokeLineJoin() {
            return this.stroke.lineJoin;
        }
        set strokeLineJoin(value) {
            const stroke = this.stroke;
            if (value !== stroke.lineJoin) {
                stroke.lineJoin = value;
                if (stroke.isVisible) {
                    this.invalidateBoundsAndPicture();
                }
            }
        }
        get strokeMiterLimit() {
            return this.stroke.miterLimit;
        }
        set strokeMiterLimit(value) {
            value = clamp(value, 1, Number.POSITIVE_INFINITY);
            const stroke = this.stroke;
            if (value !== stroke.miterLimit) {
                stroke.miterLimit = value;
                if (stroke.isVisible) {
                    this.invalidateBoundsAndPicture();
                }
            }
        }
        get strokeDashArray() {
            return this.stroke.dashes;
        }
        set strokeDashArray(value) {
            const stroke = this.stroke;
            if (value !== stroke.dashes) {
                stroke.dashes = value;
                if (stroke.isVisible) {
                    this.invalidateBoundsAndPicture();
                }
            }
        }
        get strokeDashOffset() {
            return this.stroke.offset;
        }
        set strokeDashOffset(value) {
            const stroke = this.stroke;
            if (value !== stroke.offset) {
                stroke.offset = value;
                if (stroke.isVisible) {
                    this.invalidateBoundsAndPicture();
                }
            }
        }
        get isVisible() {
            if (!super.isVisible) {
                return false;
            }
            return (this._fill && this._fill.isVisible) || (this._stroke && this._stroke.isVisible);
        }
        swapColors(keepOpacity = false) {
            const fill = this.fill;
            const stroke = this.stroke.brush;
            this._stroke.brush = fill;
            this._fill = stroke;
            if (keepOpacity) {
                // Swap opacity back
                const fillOp = fill.opacity;
                fill.opacity = stroke.opacity;
                stroke.opacity = fillOp;
            }
            this.invalidate();
        }
        drawOnPicture(context) {
            const path = this.pathToDraw;
            if (!path) {
                return null;
            }
            let rect = null;
            let prevRule = null;
            const rule = this.nativeFillRule;
            if (path.fillType !== rule) {
                prevRule = path.fillType;
                path.fillType = rule;
            }
            switch (this._paintOrder) {
                case PaintOrder.FillStrokeMarkers:
                default:
                    context.fillPath(path, this.fill);
                    context.strokePath(path, this.stroke);
                    rect = this.paintMarkers(context);
                    break;
                case PaintOrder.FillMarkersStroke:
                    context.fillPath(path, this.fill);
                    rect = this.paintMarkers(context);
                    context.strokePath(path, this.stroke);
                    break;
                case PaintOrder.StrokeFillMarkers:
                    context.strokePath(path, this.stroke);
                    context.fillPath(path, this.fill);
                    rect = this.paintMarkers(context);
                    break;
                case PaintOrder.StrokeMarkersFill:
                    context.strokePath(path, this.stroke);
                    rect = this.paintMarkers(context);
                    context.fillPath(path, this.fill);
                    break;
                case PaintOrder.MarkersFillStroke:
                    rect = this.paintMarkers(context);
                    context.fillPath(path, this.fill);
                    context.strokePath(path, this.stroke);
                    break;
                case PaintOrder.MarkersStrokeFill:
                    rect = this.paintMarkers(context);
                    context.strokePath(path, this.stroke);
                    context.fillPath(path, this.fill);
                    break;
            }
            if (!rect) {
                rect = path.getBounds();
            }
            if (prevRule !== null) {
                path.fillType = prevRule;
            }
            return rect;
        }
        get supportsChildren() {
            return false;
        }
        dispose() {
            super.dispose();
            this._fill = this._stroke = null;
        }
        paintMarkers(context) {
            // TODO: implement markers sometime
            return null;
        }
        onClone(clone) {
            clone._fill = this._fill ? this._fill.clone() : null;
            clone._stroke = this._stroke ? this._stroke.clone() : null;
            clone._rule = this._rule;
            clone._paintOrder = this._paintOrder;
        }
        onSerialize(data) {
            data.paint = [this._fill, this._stroke, this._rule, this._paintOrder];
        }
        onUnserialize(data) {
            [this._fill, this._stroke, this._rule, this._paintOrder] = data.paint;
        }
    }

    class ShapeElement extends PaintElement {
        constructor(shape, id = null) {
            super(id);
            this._localPath = null;
            this._pathNeedsRebuild = false;
            this._globalPath = null;
            this._shape = shape;
        }
        get shape() {
            return this._shape;
        }
        set shape(value) {
            if (value !== this._shape) {
                this._shape = value;
                this.invalidateShape();
            }
        }
        get type() {
            return this._shape.type;
        }
        get pathToDraw() {
            return this.localPath;
        }
        /**
         * A native path object
         * This object is managed by the element
         */
        get localPath() {
            let setup = false;
            if (this._localPath == null) {
                this._localPath = new Skia.SkPath();
                setup = true;
            }
            else if (this._pathNeedsRebuild) {
                this._localPath.reset();
                setup = true;
            }
            if (setup) {
                this._localPath.isVolatile = true;
                this._localPath.fillType = this.nativeFillRule;
                this._shape.setupPath(this._localPath);
                this._pathNeedsRebuild = false;
            }
            return this._localPath;
        }
        /**
         * A native path object with globalMatrix applied
         * This object is managed by the element
         */
        get globalPath() {
            if (this._globalPath === null) {
                this._globalPath = this.localPath.copy();
                const matrix = this.globalMatrix;
                if (!matrix.isIdentity) {
                    this._globalPath.transform(matrix);
                }
            }
            return this._globalPath;
        }
        /**
         * @inheritDoc
         */
        get localBounds() {
            if (this._localBounds === null) {
                this._localBounds = Rectangle.fromLTRBObject(this.localPath.getBounds());
            }
            return this._localBounds;
        }
        /**
         * @inheritDoc
         */
        get localTightBounds() {
            if (this._localTightBounds === null) {
                this._localTightBounds = Rectangle.fromLTRBObject(this.localPath.computeTightBounds());
            }
            return this._localTightBounds;
        }
        /**
         * @inheritDoc
         */
        get globalBounds() {
            if (this._globalBounds !== null) {
                return this._globalBounds;
            }
            const matrix = this.globalMatrix;
            if (matrix.isIdentity) {
                return this._globalBounds = this.localBounds;
            }
            return this._globalBounds = Rectangle.fromLTRBObject(this.globalPath.getBounds());
        }
        /**
         * @inheritDoc
         */
        get globalTightBounds() {
            if (this._globalTightBounds !== null) {
                return this._globalTightBounds;
            }
            const matrix = this.globalMatrix;
            if (matrix.isIdentity) {
                return this._globalTightBounds = this.localTightBounds;
            }
            return this._globalTightBounds = Rectangle.fromLTRBObject(this.globalPath.computeTightBounds());
        }
        /**
         * @inheritDoc
         */
        get pictureBounds() {
            const bounds = this.localBounds;
            const width = this.strokeLineWidth;
            // We just offset with 2 * line width
            // TODO: get extra padding from filters
            return width > 0 ? bounds.outset(width * 2) : bounds;
        }
        invalidateBoundsAndPicture(parentPictureOnly = false) {
            if (this._globalPath !== null) {
                this._globalPath.delete();
                this._globalPath = null;
            }
            super.invalidateBoundsAndPicture(parentPictureOnly);
        }
        invalidateShape() {
            if (ShapeElement.invalidationPrevented) {
                return;
            }
            this._pathNeedsRebuild = true;
            this.invalidateBoundsAndPicture();
        }
        createClone() {
            // @ts-ignore
            return new this.constructor(this._shape.clone(), this._id);
        }
        onSerialize(data) {
            super.onSerialize(data);
            data.constructor = [this._shape, this._id];
        }
        dispose() {
            super.dispose();
            if (this._localPath !== null) {
                this._localPath.delete();
                this._localPath = null;
            }
            if (this._globalPath !== null) {
                this._globalPath.delete();
                this._globalPath = null;
            }
            this._shape = null;
        }
    }

    class GroupElement extends GraphicsElement {
        get type() {
            return "group";
        }
        get supportsChildren() {
            return true;
        }
        onClone(clone) { }
        onSerialize(data) { }
        onUnserialize(data) { }
    }

    class EllipseShape {
        constructor(rx = 1, ry = 1) {
            this.rx = rx;
            this.ry = ry;
        }
        get type() {
            return "ellipse";
        }
        [SERIALIZE]() {
            return [this.rx, this.ry];
        }
        get oval() {
            return new Rectangle(-this.rx, -this.ry, this.rx * 2, this.ry * 2);
        }
        clone() {
            return new EllipseShape(this.rx, this.ry);
        }
        setupPath(path) {
            path.addEllipse(0, 0, this.rx, this.ry);
        }
    }
    class EllipseElement extends ShapeElement {
        get rx() {
            return this._shape.rx;
        }
        set rx(value) {
            value = clamp(value, 0, Number.POSITIVE_INFINITY);
            if (value !== this._shape.rx) {
                this._shape.rx = value;
                this.invalidateShape();
            }
        }
        get ry() {
            return this._shape.ry;
        }
        set ry(value) {
            value = clamp(value, 0, Number.POSITIVE_INFINITY);
            if (value !== this._shape.ry) {
                this._shape.ry = value;
                this.invalidateShape();
            }
        }
    }

    function isGTZero(value) {
        return value > 0;
    }
    class RectShapeRadius {
        constructor(rx, ry, multiple = false) {
            this._rx = rx;
            this._ry = ry;
            this._multiple = multiple;
            this.fix();
        }
        get isRounded() {
            if (!this._multiple) {
                return this._rx > 0 || this._ry > 0;
            }
            return (this._rx.findIndex(isGTZero) !== -1
                ||
                    this._ry.findIndex(isGTZero) !== -1);
        }
        get multiple() {
            return this._multiple;
        }
        set multiple(value) {
            if (this._multiple !== value) {
                this._multiple = value;
                this.fix();
            }
        }
        get rx() {
            return this._rx;
        }
        set rx(value) {
            if (this._rx === value) {
                return;
            }
            const fix = typeof this._rx !== typeof value;
            this._rx = value;
            fix && this.fix();
        }
        get ry() {
            return this._ry;
        }
        set ry(value) {
            if (this._ry === value) {
                return;
            }
            const fix = typeof this._ry !== typeof value;
            this._ry = value;
            fix && this.fix();
        }
        [SERIALIZE]() {
            return [this._rx, this._ry, this._multiple];
        }
        clone() {
            return new RectShapeRadius(this._multiple && Array.isArray(this._rx) ? [...this._rx] : this._rx, this._multiple && Array.isArray(this._ry) ? [...this._ry] : this._ry, this._multiple);
        }
        fix() {
            const ax = Array.isArray(this._rx);
            const ay = Array.isArray(this._ry);
            if (this._multiple) {
                if (!ax) {
                    const r = this._rx;
                    this._rx = [r, r, r, r];
                }
                if (!ay) {
                    const r = this._ry;
                    this._ry = [r, r, r, r];
                }
            }
            else {
                if (ax) {
                    this._rx = this._rx[0];
                }
                if (ay) {
                    this._ry = this._ry[0];
                }
            }
        }
    }
    class RectShape {
        constructor(width = 1, height = 1, radius = null) {
            this.width = width;
            this.height = height;
            this.radius = radius || (new RectShapeRadius(0, 0, false));
        }
        get type() {
            return "rect";
        }
        [SERIALIZE]() {
            return [this.width, this.height, this.radius];
        }
        get isRounded() {
            return this.radius.isRounded;
        }
        get oval() {
            return new Rectangle(0, 0, this.width, this.height);
        }
        clone() {
            return new RectShape(this.width, this.height, this.radius.clone());
        }
        setupPath(path) {
            if (!this.radius.isRounded) {
                path.addRect(0, 0, this.width, this.height);
                return;
            }
            const rx = this.radius.rx;
            const ry = this.radius.ry;
            if (!this.radius.multiple) {
                path.addRoundRect(this.oval, rx, ry);
                return;
            }
            path.addRRect({
                rect: this.oval,
                rx1: rx[0],
                ry1: ry[0],
                rx2: rx[1],
                ry2: ry[1],
                rx3: rx[2],
                ry3: ry[2],
                rx4: rx[3],
                ry4: ry[3],
            });
        }
    }
    class RectElement extends ShapeElement {
        get radius() {
            return this._shape.radius;
        }
        set radius(value) {
            if (this._shape.radius !== value) {
                this._shape.radius = value;
                this.invalidateShape();
            }
        }
        get width() {
            return this._shape.width;
        }
        set width(value) {
            value = clamp(value, 0, Number.POSITIVE_INFINITY);
            if (value !== this._shape.width) {
                this._shape.width = value;
                this.invalidateShape();
            }
        }
        get height() {
            return this._shape.height;
        }
        set height(value) {
            value = clamp(value, 0, Number.POSITIVE_INFINITY);
            if (value !== this._shape.height) {
                this._shape.height = value;
                this.invalidateShape();
            }
        }
    }

    class PolyShape {
        constructor(points, isClosed = false) {
            this.points = points;
            this.isClosed = isClosed;
        }
        get type() {
            return "poly";
        }
        clone() {
            return new PolyShape(this.points.slice(), this.isClosed);
        }
        [SERIALIZE]() {
            return [this.points, this.isClosed];
        }
        get isLine() {
            return !this.isClosed && this.points.length === 2;
        }
        setupPath(path) {
            path.addPoly(this.points, this.isClosed);
        }
    }
    class PolyElement extends ShapeElement {
        get points() {
            return this._shape.points;
        }
        set points(value) {
            if (value !== this._shape.points) {
                this._shape.points = value;
                this.invalidateShape();
            }
        }
        get isClosed() {
            return this._shape.isClosed;
        }
        set isClosed(value) {
            if (value !== this._shape.isClosed) {
                this._shape.isClosed = value;
                this.invalidateShape();
            }
        }
    }

    class RegularPolygonShape {
        constructor(sides, radius, cornerRadius = 0) {
            this.sides = sides;
            this.radius = radius;
            this.cornerRadius = cornerRadius;
        }
        get type() {
            return "regular-polygon";
        }
        [SERIALIZE]() {
            return [this.sides, this.radius, this.cornerRadius];
        }
        clone() {
            return new RegularPolygonShape(this.sides, this.radius, this.cornerRadius);
        }
        setupPath(path) {
            path.addRegularPolygon(0, 0, this.radius, this.sides, this.cornerRadius);
        }
    }
    class RegularPolygonElement extends ShapeElement {
        get sides() {
            return this._shape.sides;
        }
        set sides(value) {
            value = clamp(value, 3, Number.POSITIVE_INFINITY);
            if (value !== this._shape.sides) {
                this._shape.sides = value;
                this.invalidateShape();
            }
        }
        get radius() {
            return this._shape.radius;
        }
        set radius(value) {
            value = clamp(value, 0, Number.POSITIVE_INFINITY);
            if (value !== this._shape.radius) {
                this._shape.radius = value;
                this.invalidateShape();
            }
        }
        get cornerRadius() {
            return this._shape.cornerRadius;
        }
        set cornerRadius(value) {
            value = clamp(value, 0, 1);
            if (value !== this._shape.cornerRadius) {
                this._shape.cornerRadius = value;
                this.invalidateShape();
            }
        }
    }

    class StarShape {
        constructor(sides, outerRadius, innerRadius, outerCornerRadius = 0, innerCornerRadius = 0, outerRotate = 0, innerRotate = 0, rotate = 0) {
            this.sides = sides;
            this.outerRadius = outerRadius;
            this.innerRadius = innerRadius;
            this.outerCornerRadius = outerCornerRadius;
            this.innerCornerRadius = innerCornerRadius;
            this.outerRotate = outerRotate;
            this.innerRotate = innerRotate;
            this.rotate = rotate;
        }
        get type() {
            return "star";
        }
        [SERIALIZE]() {
            return [
                this.sides,
                this.outerRadius, this.innerRadius,
                this.outerCornerRadius, this.innerCornerRadius,
                this.outerRotate, this.innerRotate, this.rotate,
            ];
        }
        clone() {
            return new StarShape(this.sides, this.outerRadius, this.innerRadius, this.outerCornerRadius, this.innerCornerRadius, this.outerRotate, this.innerRotate, this.rotate);
        }
        setupPath(path) {
            path.addStar(0, 0, this.outerRadius, this.innerRadius, this.sides, this.outerRotate, this.innerRotate, this.outerCornerRadius, this.innerCornerRadius, this.rotate);
        }
    }
    class StarElement extends ShapeElement {
        get sides() {
            return this._shape.sides;
        }
        set sides(value) {
            value = clamp(value, 3, Number.POSITIVE_INFINITY);
            if (value !== this._shape.sides) {
                this._shape.sides = value;
                this.invalidateShape();
            }
        }
        get outerRadius() {
            return this._shape.outerRadius;
        }
        set outerRadius(value) {
            value = clamp(value, 0, Number.POSITIVE_INFINITY);
            if (value !== this._shape.outerRadius) {
                this._shape.outerRadius = value;
                this.invalidateShape();
            }
        }
        get innerRadius() {
            return this._shape.innerRadius;
        }
        set innerRadius(value) {
            value = clamp(value, 0, Number.POSITIVE_INFINITY);
            if (value !== this._shape.innerRadius) {
                this._shape.innerRadius = value;
                this.invalidateShape();
            }
        }
        get outerCornerRadius() {
            return this._shape.outerCornerRadius;
        }
        set outerCornerRadius(value) {
            value = clamp(value, 0, 1);
            if (value !== this._shape.outerCornerRadius) {
                this._shape.outerCornerRadius = value;
                this.invalidateShape();
            }
        }
        get innerCornerRadius() {
            return this._shape.innerCornerRadius;
        }
        set innerCornerRadius(value) {
            value = clamp(value, 0, 1);
            if (value !== this._shape.innerCornerRadius) {
                this._shape.innerCornerRadius = value;
                this.invalidateShape();
            }
        }
        get outerRotate() {
            return this._shape.outerRotate;
        }
        set outerRotate(value) {
            if (value !== this._shape.outerRotate) {
                this._shape.outerRotate = value;
                this.invalidateShape();
            }
        }
        get innerRotate() {
            return this._shape.innerRotate;
        }
        set innerRotate(value) {
            if (value !== this._shape.innerRotate) {
                this._shape.innerRotate = value;
                this.invalidateShape();
            }
        }
        get allRotate() {
            return this._shape.rotate;
        }
        set allRotate(value) {
            if (value !== this._shape.rotate) {
                this._shape.rotate = value;
                this.invalidateShape();
            }
        }
    }

    var PathJoint;
    (function (PathJoint) {
        PathJoint[PathJoint["Cusp"] = 0] = "Cusp";
        PathJoint[PathJoint["Corner"] = 1] = "Corner";
        PathJoint[PathJoint["Symmetric"] = 2] = "Symmetric";
        PathJoint[PathJoint["Asymmetric"] = 3] = "Asymmetric";
    })(PathJoint || (PathJoint = {}));
    var PathNodeType;
    (function (PathNodeType) {
        PathNodeType[PathNodeType["Normal"] = 0] = "Normal";
        PathNodeType[PathNodeType["Start"] = -1] = "Start";
        PathNodeType[PathNodeType["End"] = 1] = "End";
    })(PathNodeType || (PathNodeType = {}));
    // TODO: finish this class
    class PathShape {
        constructor(nodes) {
            this.nodes = nodes;
        }
        get type() {
            return "path";
        }
        [SERIALIZE]() {
            return [this.nodes];
        }
        hover(point) {
            // TODO: remove this from here
            const options = {
                handleRadius: 10,
                nodeRadius: 15,
                strokeWidth: 3,
            };
            const nodes = this.nodes;
            const length = nodes.length;
            for (let i = 0; i < length; i++) {
                const node = nodes[i];
                if (node.joint !== PathJoint.Corner) {
                    if (isInRadius(point, options.handleRadius, node.handleOut)) {
                        ({
                            type: 'handle',
                            nodeIndex: i,
                            node,
                            handle: node.handleOut,
                            handleType: 'out',
                        });
                        continue;
                    }
                    if (isInRadius(point, options.handleRadius, node.handleIn)) {
                        ({
                            type: 'handle',
                            nodeIndex: i,
                            node,
                            handle: node.handleIn,
                            handleType: 'in',
                        });
                        continue;
                    }
                    if (isInRadius(point, options.strokeWidth, node)) {
                        continue;
                    }
                }
            }
        }
        hoverAt(x, y) {
            // TODO: remove this from here
            const options = {
                handleRadius: 10,
                nodeRadius: 15,
                strokeWidth: 3,
            };
            // check handles, nodes, paths???
            const nodes = this.nodes;
            const p = { x, y };
            let prev = null;
            for (let i = nodes.length - 1; i > 0; i--) {
                const node = nodes[i];
                if (node.joint !== PathJoint.Corner) {
                    if (isInRadius(p, options.handleRadius, node.handleOut)) {
                        return {
                            type: 'handle',
                            nodeIndex: i,
                            node,
                            handle: node.handleOut,
                        };
                    }
                    if (isInRadius(p, options.handleRadius, node.handleIn)) {
                        return {
                            type: 'handle',
                            nodeIndex: i,
                            node,
                            handle: node.handleIn,
                        };
                    }
                }
                if (isInRadius(p, options.strokeWidth, node)) {
                    return {
                        type: 'node',
                        nodeIndex: i,
                        node,
                    };
                }
                if (node.type === PathNodeType.End) {
                    prev = matchStart(nodes, i);
                }
                if (prev && isNearLine(p, options.strokeWidth, node, prev)) {
                    return {
                        type: 'line',
                        nodeIndex: i,
                        node,
                    };
                }
                prev = node.type === PathNodeType.Start ? null : node;
            }
        }
        moveBy(dx, dy) {
            return moveNodesBy(this.nodes, dx, dy);
        }
        moveNodesBy(indexes, dx, dy) {
            return moveNodesBy(this.getIndexes(indexes).map(index => this.nodes[index]), dx, dy);
        }
        deleteNodes(indexes) {
            indexes = this.getIndexes(indexes);
            if (!indexes.length) {
                return false;
            }
            const nodes = this.nodes;
            indexes
                .sort((a, b) => a - b)
                .forEach(index => {
                if (nodes[index].type === PathNodeType.Start) {
                    if (index < nodes.length - 1 && nodes[index + 1].type !== PathNodeType.Start) {
                        nodes[index + 1].type = PathNodeType.Start;
                    }
                }
                nodes.splice(index, 1);
            });
            return true;
        }
        breakNodes(indexes) {
            indexes = this.getIndexes(indexes);
            if (!indexes.length) {
                return false;
            }
            // TODO:
            return true;
        }
        clone() {
            // TODO: proper clone
            return new PathShape(this.nodes.map(value => (Object.assign({}, value))));
        }
        setupPath(path) {
            const nodes = this.nodes;
            const length = nodes.length;
            let prev = null;
            let first = null;
            for (let i = 0; i < length; i++) {
                const node = nodes[i];
                if (!prev || node.type === PathNodeType.Start) {
                    path.moveTo(node.x, node.y);
                    prev = node;
                    first = node;
                    continue;
                }
                drawCurve(path, prev, node);
                if (node.type === PathNodeType.End) {
                    drawCurve(path, node, first);
                    path.close();
                    first = prev = null;
                }
                else {
                    prev = node;
                }
            }
        }
        getIndexes(indexes) {
            const nodes = this.nodes;
            const length = nodes.length;
            return indexes.filter((value, index, array) => {
                if (value < 0 || value >= length || !Number.isInteger(value)) {
                    return false;
                }
                return array.indexOf(value) === index;
            });
        }
        static fromSkPath(path) {
            return new PathShape(nodesFromSkPath(path));
        }
        static fromString(path) {
            const skPath = Skia.SkPath.MakeFromString(path, false);
            const ret = this.fromSkPath(skPath);
            skPath.delete();
            return ret;
        }
    }
    class PathElement extends ShapeElement {
        get nodes() {
            return this._shape.nodes;
        }
        set nodes(value) {
            if (value !== this._shape.nodes) {
                this._shape.nodes = value;
                this.invalidateShape();
            }
        }
    }
    function drawCurve(path, from, to) {
        if (to.joint === PathJoint.Corner || !to.handleIn) {
            if (from.joint === PathJoint.Corner || !from.handleOut) {
                path.lineTo(to.x, to.y);
            }
            else {
                path.quadTo(to.x, to.y, from.handleOut.x, from.handleOut.y);
            }
        }
        else {
            if (from.joint === PathJoint.Corner || !from.handleOut) {
                path.quadTo(to.x, to.y, to.handleIn.x, to.handleIn.y);
            }
            else {
                path.cubicTo(to.x, to.y, from.handleOut.x, from.handleOut.y, to.handleIn.x, to.handleIn.y);
            }
        }
    }
    function nodesFromSkPath(path) {
        const nodes = [];
        let first = null;
        let last = null;
        path.walk((verb, p, cp1, cp2) => {
            switch (verb) {
                case Skia.SkPathVerb.Move:
                    first = {
                        x: p.x,
                        y: p.y,
                        type: PathNodeType.Start,
                        joint: PathJoint.Cusp,
                        handleIn: null,
                        handleOut: null,
                    };
                    last = first;
                    break;
                case Skia.SkPathVerb.Close:
                    if (last) {
                        last.type = PathNodeType.End;
                    }
                    first = last = null;
                    break;
                case Skia.SkPathVerb.Line:
                    last = {
                        x: p.x,
                        y: p.y,
                        type: PathNodeType.Normal,
                        joint: PathJoint.Corner,
                        handleIn: null,
                        handleOut: null,
                    };
                    break;
                case Skia.SkPathVerb.Quad:
                    if (last) {
                        last.handleOut = cp1;
                    }
                    last = {
                        x: p.x,
                        y: p.y,
                        type: PathNodeType.Normal,
                        joint: PathJoint.Cusp,
                        handleIn: null,
                        handleOut: null,
                    };
                    break;
                case Skia.SkPathVerb.Cubic:
                    if (last) {
                        last.handleOut = cp1;
                    }
                    last = {
                        x: p.x,
                        y: p.y,
                        type: PathNodeType.Normal,
                        joint: PathJoint.Cusp,
                        handleIn: cp2,
                        handleOut: null,
                    };
                    break;
            }
            if (last) {
                nodes.push(last);
            }
        }, false);
        return nodes;
    }
    function moveNodesBy(nodes, dx, dy) {
        if (dx === 0 && dy === 0) {
            return false;
        }
        const length = nodes.length;
        if (!length) {
            return false;
        }
        // TODO: points are immutable, we cannot move them this way
        for (let i = 0; i < length; i++) {
            const node = nodes[i];
            node.x += dx;
            node.y += dy;
            if (node.handleIn) {
                node.handleIn.x += dx;
                node.handleIn.y += dy;
            }
            if (node.handleOut) {
                node.handleOut.x += dx;
                node.handleOut.y += dy;
            }
        }
        return true;
    }
    function isInRadius(point, radius, center) {
        if (!center) {
            return false;
        }
        return Point.distance(point, center) <= radius;
    }
    function isNearLine(point, width, from, to) {
        // TODO: ...
        if (from.joint === PathJoint.Corner || !from.handleOut) {
            if (to.joint === PathJoint.Corner || !to.handleIn) ;
            // checkOnQuad(from, to, to.handleIn)
        }
        if (to.joint === PathJoint.Corner || !to.handleIn) ;
        //checkOnCubic(from, to, from.handleOut, to.handleIn);
        return false;
    }
    function matchStart(nodes, index) {
        while (--index > 0) {
            if (nodes[index].type === PathNodeType.Start) {
                return nodes[index];
            }
            if (nodes[index].type === PathNodeType.End) {
                return null;
            }
        }
        return null;
    }

    class ColorMatrix {
        constructor(value) {
            if (!value || value.length !== 20) {
                value = new Float32Array(20);
                value[0] = value[6] = value[12] = value[18] = 1;
            }
            this.value = value;
        }
        /**
         * Creates a clone
         */
        clone() {
            return new ColorMatrix(this.value.slice());
        }
        [SERIALIZE]() {
            return [this.value];
        }
        /**
         * Resets matrix
         */
        toIdentity() {
            const v = this.value;
            v[0] = v[6] = v[12] = v[18] = 1;
            v[1] = v[2] = v[3] = v[4] =
                v[5] = v[7] = v[8] = v[9] =
                    v[10] = v[11] = v[13] = v[14] =
                        v[15] = v[16] = v[17] = v[19] = 0;
            return this;
        }
        /**
         * Pre multiply matrix
         * @param matrix
         */
        preMultiply(matrix) {
            multiplyArray(matrix instanceof ColorMatrix ? matrix.value : matrix, this.value, this.value);
            return this;
        }
        /**
         * Multiply matrix
         * @param matrix
         */
        multiply(matrix) {
            multiplyArray(this.value, matrix instanceof ColorMatrix ? matrix.value : matrix, this.value);
            return this;
        }
        /**
         * Brightness filter
         * @param v
         */
        brightness(v) {
            return this.multiply([
                v, 0, 0, 0, 0,
                0, v, 0, 0, 0,
                0, 0, v, 0, 0,
                0, 0, 0, 1, 0,
            ]);
        }
        luminanceToAlpha() {
            return this.multiply([
                0, 0, 0, 0, 0,
                0, 0, 0, 0, 0,
                0, 0, 0, 0, 0,
                0.2125, 0.7154, 0.0721, 0, 0
            ]);
        }
        /**
         * Grayscale filter
         * @param v
         */
        greyscale(v) {
            return this.multiply([
                v, v, v, 0, 0,
                v, v, v, 0, 0,
                v, v, v, 0, 0,
                0, 0, 0, 1, 0,
            ]);
        }
        /**
         * Hue-rotate filter
         * @param deg
         */
        hueRotate(deg) {
            deg *= RADIANS;
            const cosR = Math.cos(deg);
            const sinR = Math.sin(deg);
            const wCosR = (1 - cosR) / 3;
            const wSinR = sinR * Math.sqrt(3) / 3;
            return this.multiply([
                cosR + wCosR, wCosR - wSinR, wCosR + wSinR, 0, 0,
                wCosR + wSinR, cosR + wCosR, wCosR - wSinR, 0, 0,
                wCosR - wSinR, wCosR - wSinR, cosR + wCosR, 0, 0,
                0, 0, 0, 1, 0,
            ]);
        }
        /**
         * Contrast filter
         * @param v
         */
        contrast(v) {
            const o = -v / 2;
            v++;
            return this.multiply([
                v, 0, 0, 0, o,
                0, v, 0, 0, o,
                0, 0, v, 0, o,
                0, 0, 0, 1, 0,
            ]);
        }
        /**
         * Saturate filter
         * @param v
         */
        saturate(v) {
            const x = 1 + v * 2 / 3;
            const y = (1 - x) / 2;
            return this.multiply([
                x, y, y, 0, 0,
                y, x, y, 0, 0,
                y, y, x, 0, 0,
                0, 0, 0, 1, 0,
            ]);
        }
        /**
         * Desaturate filter
         * @param v
         */
        desaturate(v = 1) {
            return this.saturate(-v);
        }
        /**
         * Sepia filter
         * @param v
         */
        sepia(v) {
            return this.multiply([
                1 - 0.607 * v, 0.769 * v, 0.189 * v, 0, 0,
                0.349 * v, 1 - 0.314 * v, 0.168 * v, 0, 0,
                0.272 * v, 0.534 * v, 1 - 0.869 * v, 0, 0,
                0, 0, 0, 1, 0,
            ]);
        }
        // ---
        /**
         * Black and white
         */
        blackAndWhite() {
            return this.multiply([
                0.3, 0.6, 0.1, 0, 0,
                0.3, 0.6, 0.1, 0, 0,
                0.3, 0.6, 0.1, 0, 0,
                0, 0, 0, 1, 0,
            ]);
        }
        /**
         * Negative image (inverse of classic rgb matrix)
         */
        negative() {
            return this.multiply([
                -1, 0, 0, 1, 0,
                0, -1, 0, 1, 0,
                0, 0, -1, 1, 0,
                0, 0, 0, 1, 0,
            ]);
        }
        /**
         * Transforms : Red -> Blue and Blue -> Red
         */
        bgr() {
            return this.multiply([
                0, 0, 1, 0, 0,
                0, 1, 0, 0, 0,
                1, 0, 0, 0, 0,
                0, 0, 0, 1, 0,
            ]);
        }
        /**
         * Color motion picture process invented in 1916
         */
        technicolor() {
            return this.multiply([
                1.9125277891456083, -0.8545344976951645, -0.09155508482755585, 0, 11.793603434377337,
                -0.3087833385928097, 1.7658908555458428, -0.10601743074722245, 0, -70.35205161461398,
                -0.231103377548616, -0.7501899197440212, 1.847597816108189, 0, 30.950940869491138,
                0, 0, 0, 1, 0,
            ]);
        }
        /**
         * Polaroid filter
         */
        polaroid() {
            return this.multiply([
                1.438, -0.062, -0.062, 0, 0,
                -0.122, 1.378, -0.122, 0, 0,
                -0.016, -0.016, 1.483, 0, 0,
                0, 0, 0, 1, 0,
            ]);
        }
        /**
         * Color reversal film introduced by Eastman Kodak in 1935
         */
        kodachrome() {
            return this.multiply([
                1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,
                -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,
                -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,
                0, 0, 0, 1, 0,
            ]);
        }
        /**
         * Browni filter
         */
        browni() {
            return this.multiply([
                0.5997023498159715, 0.34553243048391263, -0.2708298674538042, 0, 47.43192855600873,
                -0.037703249837783157, 0.8609577587992641, 0.15059552388459913, 0, -36.96841498319127,
                0.24113635128153335, -0.07441037908422492, 0.44972182064877153, 0, -7.562075277591283,
                0, 0, 0, 1, 0,
            ]);
        }
        /**
         * Vintage filter
         */
        vintage() {
            return this.multiply([
                0.6279345635605994, 0.3202183420819367, -0.03965408211312453, 0, 9.651285835294123,
                0.02578397704808868, 0.6441188644374771, 0.03259127616149294, 0, 7.462829176470591,
                0.0466055556782719, -0.0851232987247891, 0.5241648018700465, 0, 5.159190588235296,
                0, 0, 0, 1, 0,
            ]);
        }
        /**
         * Color tone
         * @param desaturation
         * @param toned
         * @param lightColor
         * @param darkColor
         */
        colorTone(desaturation = 0.2, toned = 0.15, lightColor = 0xFFE580, darkColor = 0x338000) {
            const lR = ((lightColor >> 16) & 0xFF) / 255;
            const lG = ((lightColor >> 8) & 0xFF) / 255;
            const lB = (lightColor & 0xFF) / 255;
            const dR = ((darkColor >> 16) & 0xFF) / 255;
            const dG = ((darkColor >> 8) & 0xFF) / 255;
            const dB = (darkColor & 0xFF) / 255;
            return this.multiply([
                0.3, 0.59, 0.11, 0, 0,
                lR, lG, lB, desaturation, 0,
                dR, dG, dB, toned, 0,
                lR - dR, lG - dG, lB - dB, 0, 0,
            ]);
        }
        /**
         * Night effect
         * @param v
         */
        night(v = 0.1) {
            return this.multiply([
                -v * 2, -v, 0, 0, 0,
                -v, 0, v, 0, 0,
                0, v, v * 2, 0, 0,
                0, 0, 0, 1, 0,
            ]);
        }
        /**
         * Predator effect
         * @param v
         */
        predator(v) {
            return this.multiply([
                11.224130630493164 * v, -4.794486999511719 * v, -2.8746118545532227 * v, 0, 0.40342438220977783 * v,
                -3.6330697536468506 * v, 9.193157196044922 * v, -2.951810836791992 * v, 0, -1.316135048866272 * v,
                -3.2184197902679443 * v, -4.2375030517578125 * v, 7.476448059082031 * v, 0, 0.8044459223747253 * v,
                0, 0, 0, 1, 0,
            ]);
        }
        /**
         * LSD effect
         */
        lsd() {
            return this.multiply([
                2, -0.4, 0.5, 0, 0,
                -0.5, 2, -0.4, 0, 0,
                -0.4, -0.5, 3, 0, 0,
                0, 0, 0, 1, 0,
            ]);
        }
        warm() {
            return this.multiply([
                1.06, 0, 0, 0, 0,
                0, 1.01, 0, 0, 0,
                0, 0, 0.93, 0, 0,
                0, 0, 0, 1, 0
            ]);
        }
        cool() {
            return this.multiply([
                0.99, 0, 0, 0, 0,
                0, 0.93, 0, 0, 0,
                0, 0, 1.08, 0, 0,
                0, 0, 0, 1, 0
            ]);
        }
        exposure(v) {
            return this.multiply([
                v, 0, 0, 0, 0,
                0, v, 0, 0, 0,
                0, 0, v, 0, 0,
                0, 0, 0, 1, 0
            ]);
        }
        temperature(v) {
            return this.multiply([
                1 + v, 0, 0, 0, 0,
                0, 1, 0, 0, 0,
                0, 0, 1 - v, 0, 0,
                0, 0, 0, 1, 0
            ]);
        }
        tint(v) {
            return this.multiply([
                1 + v, 0, 0, 0, 0,
                0, 1, 0, 0, 0,
                0, 0, 1 + v, 0, 0,
                0, 0, 0, 1, 0
            ]);
        }
        // ----
        protanomaly() {
            return this.multiply([
                0.817, 0.183, 0, 0, 0,
                0.333, 0.667, 0, 0, 0,
                0, 0.125, 0.875, 0, 0,
                0, 0, 0, 1, 0
            ]);
        }
        deuteranomaly() {
            return this.multiply([
                0.8, 0.2, 0, 0, 0,
                0.258, 0.742, 0, 0, 0,
                0, 0.142, 0.858, 0, 0,
                0, 0, 0, 1, 0
            ]);
        }
        protanopia() {
            return this.multiply([
                0.567, 0.433, 0, 0, 0,
                0.558, 0.442, 0, 0, 0,
                0, 0.242, 0.758, 0, 0,
                0, 0, 0, 1, 0
            ]);
        }
        deuteranopia() {
            return this.multiply([
                0.625, 0.375, 0, 0, 0,
                0.7, 0.3, 0, 0, 0,
                0, 0.3, 0.7, 0, 0,
                0, 0, 0, 1, 0
            ]);
        }
        tritanopia() {
            return this.multiply([
                0.95, 0.05, 0, 0, 0,
                0, 0.433, 0.567, 0, 0,
                0, 0.475, 0.525, 0, 0,
                0, 0, 0, 1, 0
            ]);
        }
        achromatopsia() {
            return this.multiply([
                0.299, 0.587, 0.114, 0, 0,
                0.299, 0.587, 0.114, 0, 0,
                0.299, 0.587, 0.114, 0, 0,
                0, 0, 0, 1, 0
            ]);
        }
        achromatomaly() {
            return this.multiply([
                0.618, 0.320, 0.062, 0, 0,
                0.163, 0.775, 0.062, 0, 0,
                0.163, 0.320, 0.516, 0, 0,
                0, 0, 0, 1, 0
            ]);
        }
    }
    function multiplyArray(left, right, dest) {
        // Red Channel
        dest[0] = (left[0] * right[0]) + (left[1] * right[5]) + (left[2] * right[10]) + (left[3] * right[15]);
        dest[1] = (left[0] * right[1]) + (left[1] * right[6]) + (left[2] * right[11]) + (left[3] * right[16]);
        dest[2] = (left[0] * right[2]) + (left[1] * right[7]) + (left[2] * right[12]) + (left[3] * right[17]);
        dest[3] = (left[0] * right[3]) + (left[1] * right[8]) + (left[2] * right[13]) + (left[3] * right[18]);
        dest[4] = (left[0] * right[4]) + (left[1] * right[9]) + (left[2] * right[14]) + (left[3] * right[19]) + left[4];
        // Green Channel
        dest[5] = (left[5] * right[0]) + (left[6] * right[5]) + (left[7] * right[10]) + (left[8] * right[15]);
        dest[6] = (left[5] * right[1]) + (left[6] * right[6]) + (left[7] * right[11]) + (left[8] * right[16]);
        dest[7] = (left[5] * right[2]) + (left[6] * right[7]) + (left[7] * right[12]) + (left[8] * right[17]);
        dest[8] = (left[5] * right[3]) + (left[6] * right[8]) + (left[7] * right[13]) + (left[8] * right[18]);
        dest[9] = (left[5] * right[4]) + (left[6] * right[9]) + (left[7] * right[14]) + (left[8] * right[19]) + left[9];
        // Blue Channel
        dest[10] = (left[10] * right[0]) + (left[11] * right[5]) + (left[12] * right[10]) + (left[13] * right[15]);
        dest[11] = (left[10] * right[1]) + (left[11] * right[6]) + (left[12] * right[11]) + (left[13] * right[16]);
        dest[12] = (left[10] * right[2]) + (left[11] * right[7]) + (left[12] * right[12]) + (left[13] * right[17]);
        dest[13] = (left[10] * right[3]) + (left[11] * right[8]) + (left[12] * right[13]) + (left[13] * right[18]);
        dest[14] = (left[10] * right[4]) + (left[11] * right[9]) + (left[12] * right[14]) + (left[13] * right[19]) + left[14];
        // Alpha Channel
        dest[15] = (left[15] * right[0]) + (left[16] * right[5]) + (left[17] * right[10]) + (left[18] * right[15]);
        dest[16] = (left[15] * right[1]) + (left[16] * right[6]) + (left[17] * right[11]) + (left[18] * right[16]);
        dest[17] = (left[15] * right[2]) + (left[16] * right[7]) + (left[17] * right[12]) + (left[18] * right[17]);
        dest[18] = (left[15] * right[3]) + (left[16] * right[8]) + (left[17] * right[13]) + (left[18] * right[18]);
        dest[19] = (left[15] * right[4]) + (left[16] * right[9]) + (left[17] * right[14]) + (left[18] * right[19]) + left[19];
    }

    class Document$1 extends GraphicsElement {
        constructor(bounds, id) {
            super(id !== null && id !== void 0 ? id : uuid());
            this.bounds = bounds;
        }
        get type() {
            return "document";
        }
        onClone(clone) {
        }
        onSerialize(data) {
            // TODO: ...
        }
        onUnserialize(data) {
        }
        get supportsChildren() {
            return true;
        }
        draw(context) {
            if (this._hidden || !this.isVisible) {
                // Early exit
                return;
            }
            context.save();
            context.multiplyMatrix(this.localMatrix);
            context.fillRect(this.bounds, SolidBrush.WHITE);
            context.drawPicture(this.getPicture(), this.composition);
            context.restore();
        }
    }

    class Keyframe {
        constructor(value, offset = 0, easing = null) {
            this.value = value;
            this.offset = offset;
            this.easing = easing;
        }
        [SERIALIZE]() {
            return [this.value, this.offset, this.easing];
        }
    }
    class Animation {
        constructor(interpolator, keyframes = null, disabled = false) {
            this.interpolate = interpolator;
            this.keyframes = keyframes !== null && keyframes !== void 0 ? keyframes : [];
            this.disabled = disabled;
        }
        [SERIALIZE]() {
            return [this.keyframes, this.disabled];
        }
        get length() {
            return this.keyframes.length;
        }
        get isAnimated() {
            return !this.disabled && this.keyframes.length > 1;
        }
        get hasKeyframes() {
            return this.keyframes.length > 0;
        }
        getKeyframeAtIndex(index) {
            return this.keyframes[index] || null;
        }
        removeKeyframeAtIndex(index) {
            const r = this.keyframes.splice(index, 1);
            return r.length > 0 ? r[0] : null;
        }
        addKeyframe(keyframe) {
            const offset = keyframe.offset;
            const length = this.keyframes.length;
            for (let i = 0; i < length; i++) {
                const k = this.keyframes[i];
                if (offset === k.offset) {
                    return this.keyframes[i] = keyframe;
                }
                if (offset < k.offset) {
                    if (i === 0) {
                        this.keyframes.unshift(keyframe);
                    }
                    else {
                        this.keyframes.splice(i - 1, 0, keyframe);
                    }
                    return keyframe;
                }
            }
            this.keyframes.push(keyframe);
            return keyframe;
        }
        removeKeyframe(keyframe) {
            const index = this.keyframes.indexOf(keyframe);
            if (index !== -1) {
                this.keyframes.splice(index, 1);
                return true;
            }
            return false;
        }
        getKeyframeAtOffset(offset) {
            const length = this.keyframes.length;
            for (let i = 0; i < length; i++) {
                const k = this.keyframes[i];
                if (offset === k.offset) {
                    return k;
                }
                if (k.offset > offset) {
                    return null;
                }
            }
            return null;
        }
        addKeyframeAtOffset(offset, value, easing = null) {
            offset = clamp(offset, 0, 1);
            if (value == null) {
                value = this.getValueAtOffset(offset);
            }
            let keyframe = this.getKeyframeAtOffset(offset);
            if (keyframe != null) {
                keyframe.value = value;
                if (easing != null) {
                    keyframe.easing = easing;
                }
                return keyframe;
            }
            return this.addKeyframe(this.createKeyframe(value, offset, easing));
        }
        removeKeyframeAtOffset(offset) {
            const keyframe = this.getKeyframeAtOffset(offset);
            if (keyframe == null) {
                return false;
            }
            return this.removeKeyframe(keyframe);
        }
        getValueAtOffset(offset) {
            const keyframes = this.keyframes;
            const last = keyframes.length - 1;
            if (last === -1) {
                return null;
            }
            if (last === 0) {
                return keyframes[0].value;
            }
            if (offset <= keyframes[0].offset) {
                return keyframes[0].value;
            }
            if (offset >= keyframes[last].offset) {
                return keyframes[last].value;
            }
            for (let i = 1; i <= last; i++) {
                if (offset > keyframes[i].offset) {
                    continue;
                }
                const j = i - 1;
                let percent = getRangePercent(offset, keyframes[j].offset, keyframes[i].offset);
                const easing = keyframes[j].easing;
                if (easing != null) {
                    percent = easing.value(percent);
                }
                return this.interpolate(percent, keyframes[j].value, keyframes[i].value);
            }
            return null;
        }
        createKeyframe(value, offset, easing = null) {
            return new Keyframe(value, offset, easing);
        }
        *[Symbol.iterator]() {
            const length = this.keyframes.length;
            for (let i = 0; i < length; i++) {
                yield this.keyframes[i];
            }
        }
    }
    class AnimationManager {
        constructor(duration, animations) {
            this._map = animations !== null && animations !== void 0 ? animations : new Map();
            this.duration = duration || 0;
        }
        [SERIALIZE]() {
            return [this._map];
        }
        map(f) {
            const list = [];
            let r;
            for (const [element, animationList] of this._map.entries()) {
                r = f(element, animationList);
                if (r != null) {
                    list.push(r);
                }
            }
            return list;
        }
        getAnimationList(element) {
            return this._map.has(element) ? this._map.get(element) : null;
        }
        removeAnimationList(element) {
            if (this._map.has(element)) {
                this._map.delete(element);
                return true;
            }
            return false;
        }
        isAnimated(element) {
            const list = this.getAnimationList(element);
            if (list == null) {
                return false;
            }
            for (const propAnimations of Object.values(list)) {
                for (const animation of Object.values(propAnimations)) {
                    if (animation.isAnimated) {
                        return true;
                    }
                }
            }
            return false;
        }
        getAnimation(element, name, property) {
            const list = this.getAnimationList(element);
            if (list == null || !(name in list) || !(property in list[name])) {
                return null;
            }
            return list[name][property];
        }
        removeAnimation(element, name, property) {
            const list = this.getAnimationList(element);
            if (list == null || !(name in list) || !(property in list[name])) {
                return false;
            }
            delete list[name][property];
            return true;
        }
        addAnimation(element, name, property, animation) {
            let list;
            if (this._map.has(element)) {
                list = this._map.get(element);
            }
            else {
                list = {};
                this._map.set(element, list);
            }
            if (!(name in list)) {
                list[name] = {};
            }
            list[name][property] = animation;
        }
    }

    class NumberAnimation extends Animation {
        constructor(keyframes, disabled = false) {
            super(interpolateNumber, keyframes, disabled);
        }
    }

    var MoveElementMode;
    (function (MoveElementMode) {
        MoveElementMode["APPEND"] = "append";
        MoveElementMode["PREPEND"] = "prepend";
        MoveElementMode["BEFORE"] = "before";
        MoveElementMode["AFTER"] = "after";
    })(MoveElementMode || (MoveElementMode = {}));

    class Ruler {
        constructor(engine, rulerH, rulerV, size) {
            this._rulerH = null;
            this._rulerV = null;
            this._cacheH = null;
            this._cacheV = null;
            this._engine = null;
            this.visible = true;
            this._engine = engine;
            this._rulerH = rulerH.getContext('2d', { alpha: false });
            this._rulerV = rulerV.getContext('2d', { alpha: false });
            this.size = size;
        }
        updateSize(width, height, dpr) {
            const size = this.size;
            this._rulerH.canvas.style.width = width + 'px';
            this._rulerH.canvas.style.height = size + 'px';
            this._rulerH.canvas.width = width * dpr;
            this._rulerH.canvas.height = size * dpr;
            this._rulerV.canvas.style.height = height + 'px';
            this._rulerV.canvas.style.width = size + 'px';
            this._rulerV.canvas.height = height * dpr;
            this._rulerV.canvas.width = size * dpr;
            this._rulerH.scale(dpr, dpr);
            this._rulerV.scale(dpr, dpr);
        }
        draw(clear = false, event = null) {
            if (!this.visible) {
                return;
            }
            const rulerH = this._rulerH;
            const rulerV = this._rulerV;
            if (clear) {
                this._cacheH = this._cacheV = null;
            }
            if (this._cacheH !== null) {
                rulerH.putImageData(this._cacheH, 0, 0);
                rulerV.putImageData(this._cacheV, 0, 0);
                if (event) {
                    this.drawIndicator(rulerH, event.x, false);
                    this.drawIndicator(rulerV, event.y, true);
                }
            }
            const engine = this._engine;
            const width = engine.canvasElement.width;
            const zoom = engine.zoom;
            const pan = engine.pan;
            this.drawRuler(rulerH, width, zoom, pan.x, false);
            this.drawRuler(rulerV, width, zoom, pan.y, true);
            if (!clear && this._cacheH === null) {
                this._cacheH = rulerH.getImageData(0, 0, rulerH.canvas.width, rulerH.canvas.height);
                this._cacheV = rulerV.getImageData(0, 0, rulerV.canvas.width, rulerV.canvas.height);
            }
            if (event) {
                this.drawIndicator(rulerH, event.canvasPosition.x, false);
                this.drawIndicator(rulerV, event.canvasPosition.y, true);
            }
        }
        drawRuler(ctx, width, zoom, pan, vertical) {
            ctx.save();
            ctx.fillStyle = this._engine.themeProperties.main;
            if (vertical) {
                ctx.fillRect(0, 0, this.size, ctx.canvas.height);
            }
            else {
                ctx.fillRect(0, 0, ctx.canvas.width, this.size);
            }
            ctx.fillStyle = ctx.strokeStyle = this._engine.themeProperties.text;
            ctx.font = '10px sans-serif';
            ctx.textAlign = 'left';
            ctx.textBaseline = "ideographic";
            ctx.lineWidth = 1;
            let step = 0, start = 0;
            if (zoom >= 1) {
                if (zoom < 5) {
                    step = 100;
                }
                else if (zoom >= 5 && zoom < 10) {
                    step = 50;
                }
                else if (zoom >= 10 && zoom < 25) {
                    step = 20;
                }
                else {
                    step = 10;
                }
            }
            else if (zoom < 1) {
                if (zoom >= 0.5) {
                    step = 200;
                }
                else if (zoom >= 0.25) {
                    step = 400;
                }
                else if (zoom >= 0.125) {
                    step = 800;
                }
                else if (zoom >= 0.05) {
                    step = 1600;
                }
                else if (zoom >= 0.02) {
                    step = 3200;
                }
                else {
                    step = 6400;
                }
            }
            const segment = step * zoom;
            const unit = segment / 10;
            const tx = Math.floor(pan % segment);
            const path = new Path2D();
            if (pan > 0) {
                start = (Math.ceil(-pan / segment) - 1) * step;
            }
            else {
                start = (Math.floor(-pan / segment) - 1) * step;
            }
            if (vertical) {
                ctx.translate(0, 0);
                ctx.rotate(RADIANS * 90);
                ctx.translate(tx + 0.5, -this.size + 0.5);
            }
            else {
                ctx.translate(tx + 0.5, 0.5);
            }
            const max = Math.ceil(width / segment) + 2;
            for (let i = -1, k = 0; i < max; i++, k++) {
                const x = i * segment;
                for (let j = 0; j < 10; j++) {
                    const px = Math.floor(x + j * unit);
                    path.moveTo(px, vertical ? 0 : this.size);
                    if (j === 0) {
                        path.lineTo(px, vertical ? 24 : 8);
                        ctx.fillText((start + k * step).toString(), px + 4, vertical ? 20 : 16);
                    }
                    else if (j === 5) {
                        path.lineTo(px, vertical ? 12 : 20);
                    }
                    else {
                        path.lineTo(px, vertical ? 8 : 24);
                    }
                }
            }
            ctx.stroke(path);
            ctx.restore();
        }
        drawIndicator(ctx, position, vertical) {
            const path = new Path2D();
            position += 0.5;
            ctx.save();
            ctx.lineWidth = 1;
            ctx.strokeStyle = this._engine.themeProperties.primary;
            if (vertical) {
                path.moveTo(0.5, position);
                path.lineTo(this.size + 0.5, position);
            }
            else {
                path.moveTo(position, 0.5);
                path.lineTo(position, this.size + 0.5);
            }
            ctx.stroke(path);
            ctx.restore();
        }
    }

    const RULER_SIZE = 32;
    const ZOOM_MIN = 0.01;
    const ZOOM_MAX = 50;
    var RenderHint;
    (function (RenderHint) {
        /**
         * Use the cached picture
         */
        RenderHint[RenderHint["Cache"] = 0] = "Cache";
        /**
         * ??? When?
         */
        RenderHint[RenderHint["Clear"] = 1] = "Clear";
        /**
         * ??? When? Clear vs Draw?
         */
        RenderHint[RenderHint["Draw"] = 2] = "Draw";
    })(RenderHint || (RenderHint = {}));
    class CanvasEngine extends HTMLElement {
        constructor() {
            super();
            this._element = null;
            this._ruler = null;
            this._context = null;
            this._renderCache = null;
            this._tool = null;
            this._document = null;
            this._pan = Point.ZERO;
            this._zoom = 1;
            this._background = null;
            this._boundingBox = null;
            this._pointerDownEvent = null;
            this._theme = null;
            this._surface = null;
            this._selection = null;
            this._onDisconnect = null;
            this.attachShadow({ mode: "open" });
            this.shadowRoot.innerHTML = getCanvasEngineTemplate();
            this._element = this.shadowRoot.getElementById('main');
            this.dpr = this.ownerDocument.defaultView.devicePixelRatio || 1;
            this._boundingBox = this.getBoundingClientRect();
            this._ruler = new Ruler(this, this.shadowRoot.getElementById('rulerH'), this.shadowRoot.getElementById('rulerV'), RULER_SIZE);
        }
        get themeProperties() {
            return this._theme;
        }
        get surface() {
            if (!this._surface) {
                this._surface = Skia.SkSurface.MakeWebGLCanvasSurface(this._element, this._element.width, this._element.height);
            }
            return this._surface;
        }
        get context() {
            if (!this._context) {
                this._context = new DrawingContext(this.surface.getCanvas());
            }
            return this._context;
        }
        getColorAt(point) {
            // TODO: how to take the color of pixel???
            return Color.fromCode(this.surface.getCanvas().colorAt(point));
        }
        get showRuler() {
            return this._ruler.visible;
        }
        set showRuler(value) {
            if (value === this._ruler.visible) {
                return;
            }
            const classList = this.shadowRoot.getElementById('grid').classList;
            if (value) {
                classList.remove('no-ruler');
            }
            else {
                classList.add('no-ruler');
            }
            this._ruler.visible = value;
            this._onElementResize();
        }
        get rulerSize() {
            return this._ruler.visible ? this._ruler.size : 0;
        }
        get selection() {
            return this._selection;
        }
        get canvasElement() {
            return this._element;
        }
        get pan() {
            return this._pan;
        }
        set pan(value) {
            this.panAndZoom(value, this._zoom);
        }
        get zoom() {
            return this._zoom;
        }
        set zoom(value) {
            this.panAndZoom(this._pan, value);
        }
        panAndZoom(pan, zoom, event) {
            zoom = clamp(zoom, ZOOM_MIN, ZOOM_MAX);
            this._pan = pan;
            this._zoom = zoom;
            this.render(RenderHint.Clear);
            this._ruler.draw(true, event);
        }
        get matrix() {
            return Matrix.CreatePanZoom(this._pan, this._zoom);
        }
        /**
         * Inform the UI that the drawing has changed
         */
        async update() {
            await Promise.resolve();
            this.dispatchEvent(new Event('update'));
        }
        /**
         * Draws the document and tool
         */
        async refresh() {
            this.render(RenderHint.Draw, false);
            if (this._tool) {
                await this._tool.refresh(this.buildToolEvent(null));
            }
        }
        /**
         * Draws the document (without tool)
         * @param hint
         * @param flush
         */
        render(hint = RenderHint.Cache, flush = true) {
            // TODO: grid, guides
            if (hint !== RenderHint.Cache) {
                // Clear render cache
                if (this._renderCache !== null) {
                    this._renderCache.delete();
                    this._renderCache = null;
                }
            }
            const context = this.context;
            context.clear(this._background);
            if (this._renderCache !== null) {
                // Draw bitmap cache at scale 1:1
                context.save();
                context.matrix = context.matrix.toIdentity();
                context.drawImage(this._renderCache);
                context.restore();
                if (flush) {
                    context.flush();
                }
                return;
            }
            const document = this._document;
            if (document !== null) {
                // Draw document only if exists
                context.save();
                context.matrix = context.matrix.panZoom(this._pan, this._zoom);
                document.draw(context);
                context.restore();
            }
            if (hint === RenderHint.Cache && this._renderCache === null) {
                this._renderCache = this.surface.makeImageSnapshot();
            }
            if (flush) {
                context.flush();
            }
        }
        get document() {
            return this._document;
        }
        set document(value) {
            if (this._document === value) {
                return;
            }
            // TODO: ...
            if (this._selection) {
                this._selection.clear();
            }
            this._document = value;
            // this._zoom = 1;
            // this._pan = new Point(0, 0);
            this.render(RenderHint.Draw);
            this._ruler.draw(true);
        }
        get tool() {
            return this._tool;
        }
        set tool(value) {
            this.setCurrentTool(value);
        }
        /**
         * Sets current tool with optional data
         * @param tool
         * @param data
         */
        setCurrentTool(tool, data) {
            const event = { engine: this };
            if (this._tool === tool) {
                if (tool) {
                    tool.deactivate(event);
                    tool.activate(event, data);
                }
                return;
            }
            if (this._tool) {
                this._tool.deactivate(event);
            }
            this._tool = tool;
            tool.activate(event, data);
        }
        /**
         * Get mouse position relative to canvas
         * @param x
         * @param y
         */
        getCanvasMouse(x, y) {
            const rect = this._boundingBox;
            const padding = this.rulerSize;
            return new Point(x - rect.x - padding, y - rect.y - padding);
        }
        /**
         * Get mouse position relative to document (resolves pan & zoom)
         * @param x
         * @param y
         */
        getDocumentMouse(x, y) {
            const rect = this._boundingBox;
            const padding = this.rulerSize;
            const pan = this._pan;
            const zoom = this._zoom;
            return new Point((x - rect.x - padding - pan.x) / zoom, (y - rect.y - padding - pan.y) / zoom);
        }
        connectedCallback() {
            // TODO: add https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio#Monitoring_screen_resolution_or_zoom_level_changes
            if (!this.isConnected) {
                return;
            }
            if (this._onDisconnect) {
                this._onDisconnect();
                this._onDisconnect = null;
            }
            // @ts-ignore
            const obs = new ResizeObserver(this._onElementResize.bind(this));
            obs.observe(this);
            const handler = this._onPointerEvent.bind(this);
            const canvas = this._element;
            const window = canvas.ownerDocument.defaultView;
            canvas.addEventListener('pointerdown', handler);
            window.addEventListener('pointerup', handler);
            window.addEventListener('pointermove', handler);
            canvas.addEventListener('pointerenter', handler);
            canvas.addEventListener('pointerleave', handler);
            const wheel = this._onWheel.bind(this);
            canvas.addEventListener('wheel', wheel);
            this._onDisconnect = () => {
                obs.unobserve(this);
                canvas.removeEventListener('pointerdown', handler);
                window.removeEventListener('pointerup', handler);
                window.removeEventListener('pointermove', handler);
                canvas.removeEventListener('pointerenter', handler);
                canvas.removeEventListener('pointerleave', handler);
                canvas.removeEventListener('wheel', wheel);
            };
            this.refreshTheme();
        }
        disconnectedCallback() {
            if (this._onDisconnect) {
                this._onDisconnect();
                this._onDisconnect = null;
            }
        }
        static get observedAttributes() {
            return ['theme'];
        }
        attributeChangedCallback(name, oldValue, newValue) {
            if (name === 'theme') {
                this.refreshTheme(true);
            }
        }
        refreshTheme(render = false) {
            const computed = this.ownerDocument.defaultView.getComputedStyle(this);
            this._theme = {
                main: computed.getPropertyValue('--engine-main-color'),
                sub: computed.getPropertyValue('--engine-sub-color'),
                primary: computed.getPropertyValue('--engine-primary-color'),
                text: computed.getPropertyValue('--engine-text-color'),
            };
            this._background = Color.from(this._theme.sub);
            if (render) {
                this.render(RenderHint.Draw);
            }
            if (this._ruler) {
                this._ruler.draw(true);
            }
        }
        _onElementResize() {
            const rect = this._boundingBox = this.getBoundingClientRect();
            const ruler = this._ruler;
            const canvas = this._element;
            const padding = ruler.visible ? ruler.size : 0;
            const dpr = this.dpr;
            const width = rect.width - padding;
            const height = rect.height - padding;
            canvas.style.width = width + 'px';
            canvas.style.height = height + 'px';
            canvas.width = width * dpr;
            canvas.height = height * dpr;
            ruler.updateSize(width, height, dpr);
            if (this._surface) {
                this._surface.delete();
                this._surface = null;
            }
            if (this._context) {
                this._context.dispose();
                this._context = null;
            }
            this.render(RenderHint.Draw);
            ruler.draw(true);
        }
        async _onPointerEvent(event) {
            let lazyToolEvent = null;
            let method = null;
            switch (event.type) {
                case "pointermove":
                    if (!this._pointerDownEvent && event.composedPath().indexOf(this) < 0) {
                        // Not for us
                        return;
                    }
                    this._ruler.draw(false, lazyToolEvent = this.buildToolEvent(event));
                    method = 'onPointerMove';
                    break;
                case "pointerdown":
                    this._pointerDownEvent = lazyToolEvent = this.buildToolEvent(event);
                    method = 'onPointerDown';
                    break;
                case "pointerup":
                    if (!this._pointerDownEvent) {
                        // We did not start it
                        return;
                    }
                    lazyToolEvent = this.buildToolEvent(event);
                    this._pointerDownEvent = null;
                    method = 'onPointerUp';
                    break;
                case "pointerenter":
                    this._ruler.draw(false, lazyToolEvent = this.buildToolEvent(event));
                    method = 'onPointerEnter';
                    break;
                case "pointerleave":
                    this._ruler.draw();
                    method = 'onPointerLeave';
                    break;
                default:
                    return;
            }
            event.preventDefault();
            event.stopImmediatePropagation();
            if (method && this._tool && this._tool[method]) {
                const context = this.context;
                context.save();
                await this._tool[method](lazyToolEvent || this.buildToolEvent(event));
                context.restore();
            }
        }
        async _onWheel(event) {
            event.preventDefault();
            event.stopImmediatePropagation();
            let zoom, originalZoom, coefficient;
            // TODO: find a better way to calc zoom
            zoom = originalZoom = this._zoom;
            coefficient = clamp(1 - (0.005 * event.deltaY), .85, 1.15);
            zoom = clamp(zoom * coefficient, 0.01, 50);
            if (originalZoom === zoom) {
                return;
            }
            const toolEvent = this.buildToolEvent(event);
            const originalPan = this._pan;
            const ox = (originalPan.x - toolEvent.canvasPosition.x) / originalZoom;
            const oy = (originalPan.y - toolEvent.canvasPosition.y) / originalZoom;
            const pan = new Point(ox * zoom + toolEvent.canvasPosition.x, oy * zoom + toolEvent.canvasPosition.y);
            toolEvent.originalPan = originalPan;
            toolEvent.originalZoom = originalZoom;
            toolEvent.pan = pan;
            toolEvent.zoom = zoom;
            this.panAndZoom(pan, zoom, toolEvent);
            if (this._tool && this._tool.onWheel) {
                await this._tool.onWheel(toolEvent);
            }
        }
        buildToolEvent(event) {
            if (!event) {
                // @ts-ignore
                return {
                    pan: this._pan,
                    zoom: this._zoom,
                    engine: this,
                };
            }
            const rect = this._boundingBox;
            const padding = this.rulerSize;
            const canvasPosition = new Point(event.clientX - rect.x - padding, event.clientY - rect.y - padding);
            return {
                event,
                canvasPosition,
                x: (canvasPosition.x - this._pan.x) / this._zoom,
                y: (canvasPosition.y - this._pan.y) / this._zoom,
                button: event.button > 2 ? 3 : event.button,
                delta: event instanceof WheelEvent ? event.deltaY : 0,
                pointerdown: this._pointerDownEvent,
                pan: this._pan,
                zoom: this._zoom,
                engine: this,
            };
        }
    }
    function getCanvasEngineTemplate() {
        return `
<style>            
    :host {
        display: block;
        margin: 0;
        padding: 0;
        border: none;
        min-width: 300px;
        min-height: 300px;
        height: 100%;
        width: 100%;
        outline: none;
    }
    
    :host, :host([theme="dark"]) {
        --engine-main-color: #1F1F23;
        --engine-sub-color: #2F2E33;
        --engine-primary-color: #4D7CFF;
        --engine-text-color: #ABABB0;
    }
    
    :host([theme="light"]) {
        --engine-main-color: #FFFFFF;
        --engine-sub-color: #e9e9ec; 
        --engine-primary-color: #4D7CFF;
        --engine-text-color: #57575C;
    }
    
    #main {
        background: var(--engine-sub-color);
    }
    #grid {
        display: grid;
        grid-template-columns: 32px 1fr;
        grid-template-rows: 32px 1fr;
        grid-gap: 0;
        outline: none;
        border: none;
        padding: 0;
        margin: 0;
        max-width: 100%;
        max-height: 100%;
        box-sizing: border-box;
    }
    #grid.no-ruler {
        grid-template-rows: 1fr;
        grid-template-columns: 1fr;
        grid-template-areas: "main";
    }
    #grid.no-ruler > bg-ruler, #grid.no-ruler > .measure-unit {
        display: none;
    }
    #grid.no-ruler > canvas {
        grid-area: main;
    }
    
    .bg-ruler {
        background: var(--engine-main-color);
    }
    .measure-unit {
        display: flex;
        flex: 1;
        font-size: 10px;
        font-family: sans-serif;
        color: var(--engine-text-color);
        justify-content: center;
        align-items: center;
        user-select: none;
    }
</style>
<div id="grid">
    <div class="bg-ruler measure-unit">px</div>
    <canvas id="rulerH" class="bg-ruler" height="32"></canvas>
    <canvas id="rulerV" class="bg-ruler" width="32"></canvas>
    <canvas id="main"></canvas>
</div>
`;
    }

    var PointerButton;
    (function (PointerButton) {
        PointerButton[PointerButton["Left"] = 0] = "Left";
        PointerButton[PointerButton["Wheel"] = 1] = "Wheel";
        PointerButton[PointerButton["Right"] = 2] = "Right";
        PointerButton[PointerButton["Unknown"] = 3] = "Unknown";
    })(PointerButton || (PointerButton = {}));

    class BaseTool {
        constructor() {
            // Engine at activate
            this.engine = null;
            // Data at activate
            this.data = null;
            this.pivot = null;
            /*
                protected drawSelectionRectangle(event: ToolPointerEvent, pivot: PointLike, fill: Brush): boolean {
                    const engine = event.engine;
            
                    const rect = this.getSelectionRectangle(pivot, event, engine.matrix);
            
                    if (!rect.isVisible) {
                        return false;
                    }
            
                    engine.render(RenderHint.Cache, false);
            
                    event.context.fillRect(rect, fill);
                    event.context.flush();
            
                    return true;
                }
            
                protected getSelectionRectangle(pivot: PointLike, cursor: PointLike, matrix?: Matrix): Rectangle {
                    if (matrix && !matrix.isIdentity) {
                        return Rectangle.fromPoints(matrix.transformPoint(pivot), matrix.transformPoint(cursor));
                    }
            
                    return Rectangle.fromPoints(pivot, cursor);
                }
                */
        }
        activate(event, data) {
            this.data = data;
            this.engine = event.engine;
        }
        deactivate(event) {
            this.data = null;
            this.engine = null;
        }
        async refresh(event) {
            event.engine.render();
        }
        async onWheel(event) {
            event.engine.panAndZoom(event.pan, event.zoom, event);
            await this.afterPanZoom(event);
        }
        async onPointerEnter(event) {
            event.engine.render();
        }
        async onPointerLeave(event) {
            event.engine.render();
        }
        async onPointerDown(event) {
            if (event.button === PointerButton.Left) {
                await this.onPointerLeftDown(event);
            }
            else if (event.button === PointerButton.Wheel) {
                this.pivot = event.canvasPosition;
            }
        }
        async onPointerUp(event) {
            if (event.button === PointerButton.Left) {
                await this.onPointerLeftUp(event);
            }
            else if (event.button === PointerButton.Wheel) {
                await this.doPan(event);
            }
            else if (event.button === PointerButton.Right) ;
            this.pivot = null;
        }
        async onPointerMove(event) {
            if (event.pointerdown) {
                if (event.pointerdown.button === PointerButton.Left) {
                    await this.onPointerLeftMove(event);
                }
                else if (event.pointerdown.button === PointerButton.Wheel) {
                    await this.doPan(event);
                    this.pivot = event.canvasPosition;
                }
            }
            else {
                await this.onHover(event);
            }
        }
        async doPan(event, pivot = this.pivot) {
            const pan = event.engine.pan;
            event.engine.pan = new Point(pan.x + event.canvasPosition.x - pivot.x, pan.y + event.canvasPosition.y - pivot.y);
            await this.afterPanZoom(event);
        }
        async afterPanZoom(event) { }
    }

    class PanTool extends BaseTool {
        get type() {
            return "pan";
        }
        async onHover(event) {
        }
        async onPointerLeftDown(event) {
            this.pivot = event.canvasPosition;
        }
        async onPointerLeftMove(event) {
            if (!this.pivot) {
                return;
            }
            await this.doPan(event);
            this.pivot = event.canvasPosition;
        }
        async onPointerLeftUp(event) {
            if (this.pivot) {
                await this.doPan(event);
            }
        }
    }

    customElements.define('expressive-canvas-engine', CanvasEngine);
    registerSerializableMap({
        'Point': Point,
        'Rectangle': Rectangle,
        'Matrix': Matrix,
        'Color': Color,
        'ColorMatrix': ColorMatrix,
        'Composition': Composition,
        // Pen
        'DefaultPen': DefaultPen,
        // Brush
        'EmptyBrush': EmptyBrush,
        'SolidBrush': SolidBrush,
        'PatternBrush': PatternBrush,
        'PointerBrush': PointerBrush,
        'StopColorList': StopColorList,
        'LinearGradientBrush': LinearGradientBrush,
        'RadialGradientBrush': RadialGradientBrush,
        'TwoPointGradientBrush': TwoPointGradientBrush,
        'ConicalGradientBrush': ConicalGradientBrush,
        // Shapes
        'EllipseShape': EllipseShape,
        'PathShape': PathShape,
        'PolyShape': PolyShape,
        'RectShape': RectShape,
        'RegularPolygonShape': RegularPolygonShape,
        'StarShape': StarShape,
        // Elements
        'GroupElement': GroupElement,
        'EllipseElement': EllipseElement,
        'PathElement': PathElement,
        'PolyElement': PolyElement,
        'RectElement': RectElement,
        'RegularPolygonElement': RegularPolygonElement,
        'StarElement': StarElement,
        // Animations
        'AnimationManager': AnimationManager,
        'Keyframe': Keyframe,
        'NumberAnimation': NumberAnimation,
    });

    const doc = new Document$1(new Rectangle(0, 0, 500, 800), 'doc-1');
    const rect = new RectElement(new RectShape(100, 100), 'rect-1');
    rect.title = 'Rect 1';
    rect.fill = new SolidBrush(Color.from('green'));
    rect.stroke = new DefaultPen(new SolidBrush(Color.from('blue')), 5);
    const rect2 = new RectElement(new RectShape(300, 300), 'rect-2');
    rect2.title = 'Rect 2';
    rect2.fill = new SolidBrush(Color.from('yellow'));
    rect2.stroke = new DefaultPen(new SolidBrush(Color.from('red')), 3);
    rect2.translateX = 500;
    rect2.translateY = 200;
    doc.appendChild(rect);
    doc.appendChild(rect2);
    const animationManager = new AnimationManager(1200);
    animationManager.addAnimation(rect, 'global', 'translateX', new NumberAnimation([
        new Keyframe(0, 0),
        new Keyframe(100, 500),
        new Keyframe(300, 1000),
    ], false));
    animationManager.addAnimation(rect, 'global', 'translateY', new NumberAnimation([
        new Keyframe(0, 100),
        new Keyframe(10, 300),
        new Keyframe(50, 800),
    ], false));
    animationManager.addAnimation(rect2, 'global', 'scaleX', new NumberAnimation([
        new Keyframe(0, 0),
        new Keyframe(100, 500),
        new Keyframe(300, 1000),
    ], false));

    /* src/Components/Canvas.svelte generated by Svelte v3.38.2 */
    const file$1 = "src/Components/Canvas.svelte";

    function create_fragment$1(ctx) {
    	let div;
    	let expressive_canvas_engine;

    	const block = {
    		c: function create() {
    			div = element("div");
    			expressive_canvas_engine = element("expressive-canvas-engine");
    			set_custom_element_data(expressive_canvas_engine, "theme", "dark");
    			add_location(expressive_canvas_engine, file$1, 12, 4, 328);
    			add_location(div, file$1, 11, 0, 317);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, expressive_canvas_engine);
    			/*expressive_canvas_engine_binding*/ ctx[2](expressive_canvas_engine);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*expressive_canvas_engine_binding*/ ctx[2](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Canvas", slots, []);
    	let { document } = $$props;
    	let canvas;

    	onMount(() => {
    		$$invalidate(0, canvas.document = document, canvas);
    		$$invalidate(0, canvas.tool = new PanTool(), canvas);
    		canvas.render();
    	}); //console.log(canvas.themeProperties)

    	const writable_props = ["document"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Canvas> was created with unknown prop '${key}'`);
    	});

    	function expressive_canvas_engine_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			canvas = $$value;
    			$$invalidate(0, canvas);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ("document" in $$props) $$invalidate(1, document = $$props.document);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		CanvasEngine,
    		Document: Document$1,
    		PanTool,
    		document,
    		canvas
    	});

    	$$self.$inject_state = $$props => {
    		if ("document" in $$props) $$invalidate(1, document = $$props.document);
    		if ("canvas" in $$props) $$invalidate(0, canvas = $$props.canvas);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [canvas, document, expressive_canvas_engine_binding];
    }

    class Canvas extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, { document: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Canvas",
    			options,
    			id: create_fragment$1.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*document*/ ctx[1] === undefined && !("document" in props)) {
    			console.warn("<Canvas> was created without expected prop 'document'");
    		}
    	}

    	get document() {
    		throw new Error("<Canvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set document(value) {
    		throw new Error("<Canvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/App.svelte generated by Svelte v3.38.2 */
    const file = "src/App.svelte";

    function create_fragment(ctx) {
    	let sp_icons_medium;
    	let t0;
    	let sp_theme;
    	let div0;
    	let t1;
    	let t2;
    	let div2;
    	let toolbarregionup;
    	let updating_selected;
    	let t3;
    	let div1;
    	let t5;
    	let sp_split_view0;
    	let div3;
    	let sp_button;
    	let t7;
    	let div4;
    	let t9;
    	let sp_split_view1;
    	let canvas;
    	let t10;
    	let timeline;
    	let sp_theme_color_value;
    	let current;
    	let mounted;
    	let dispose;

    	function toolbarregionup_selected_binding(value) {
    		/*toolbarregionup_selected_binding*/ ctx[3](value);
    	}

    	let toolbarregionup_props = { buttons: ToolbarRegionUpButtons };

    	if (/*$CanvasStateTool*/ ctx[1] !== void 0) {
    		toolbarregionup_props.selected = /*$CanvasStateTool*/ ctx[1];
    	}

    	toolbarregionup = new ToolbarRegionUp({
    			props: toolbarregionup_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(toolbarregionup, "selected", toolbarregionup_selected_binding));
    	canvas = new Canvas({ props: { document: doc }, $$inline: true });

    	timeline = new Timeline_1({
    			props: {
    				animationManager,
    				playOffset: /*$TimelinePlayOffset*/ ctx[2]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			sp_icons_medium = element("sp-icons-medium");
    			t0 = space();
    			sp_theme = element("sp-theme");
    			div0 = element("div");
    			t1 = text(/*$CanvasStateTool*/ ctx[1]);
    			t2 = space();
    			div2 = element("div");
    			create_component(toolbarregionup.$$.fragment);
    			t3 = space();
    			div1 = element("div");
    			div1.textContent = "down";
    			t5 = space();
    			sp_split_view0 = element("sp-split-view");
    			div3 = element("div");
    			sp_button = element("sp-button");
    			sp_button.textContent = "Change theme";
    			t7 = space();
    			div4 = element("div");
    			div4.textContent = "tree";
    			t9 = space();
    			sp_split_view1 = element("sp-split-view");
    			create_component(canvas.$$.fragment);
    			t10 = space();
    			create_component(timeline.$$.fragment);
    			add_location(sp_icons_medium, file, 44, 0, 1323);
    			set_style(div0, "grid-area", "menubar");
    			attr_dev(div0, "class", "svelte-1m07uhd");
    			add_location(div0, file, 46, 4, 1441);
    			attr_dev(div1, "class", "svelte-1m07uhd");
    			add_location(div1, file, 51, 8, 1645);
    			attr_dev(div2, "class", "toolbar svelte-1m07uhd");
    			add_location(div2, file, 49, 4, 1519);
    			add_location(sp_button, file, 55, 12, 1829);
    			attr_dev(div3, "class", "scroll svelte-1m07uhd");
    			attr_dev(div3, "hidden-x", "");
    			add_location(div3, file, 54, 8, 1786);
    			attr_dev(div4, "class", "scroll svelte-1m07uhd");
    			attr_dev(div4, "hidden-x", "");
    			add_location(div4, file, 57, 8, 1932);
    			set_style(sp_split_view0, "grid-area", "sidebar");
    			set_custom_element_data(sp_split_view0, "resizable", "");
    			set_custom_element_data(sp_split_view0, "vertical", "");
    			set_custom_element_data(sp_split_view0, "primary-min", "380");
    			set_custom_element_data(sp_split_view0, "primary-size", "75%");
    			add_location(sp_split_view0, file, 53, 4, 1678);
    			set_custom_element_data(sp_split_view1, "class", "content svelte-1m07uhd");
    			set_custom_element_data(sp_split_view1, "resizable", "");
    			set_custom_element_data(sp_split_view1, "vertical", "");
    			set_custom_element_data(sp_split_view1, "primary-size", "80%");
    			set_custom_element_data(sp_split_view1, "secondary-min", "0");
    			set_custom_element_data(sp_split_view1, "secondary-max", "600");
    			add_location(sp_split_view1, file, 61, 4, 2023);
    			set_custom_element_data(sp_theme, "scale", "medium");
    			set_custom_element_data(sp_theme, "color", sp_theme_color_value = /*themeLight*/ ctx[0] ? "light" : "dark");
    			set_custom_element_data(sp_theme, "class", "app svelte-1m07uhd");
    			add_location(sp_theme, file, 45, 0, 1360);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, sp_icons_medium, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, sp_theme, anchor);
    			append_dev(sp_theme, div0);
    			append_dev(div0, t1);
    			append_dev(sp_theme, t2);
    			append_dev(sp_theme, div2);
    			mount_component(toolbarregionup, div2, null);
    			append_dev(div2, t3);
    			append_dev(div2, div1);
    			append_dev(sp_theme, t5);
    			append_dev(sp_theme, sp_split_view0);
    			append_dev(sp_split_view0, div3);
    			append_dev(div3, sp_button);
    			append_dev(sp_split_view0, t7);
    			append_dev(sp_split_view0, div4);
    			append_dev(sp_theme, t9);
    			append_dev(sp_theme, sp_split_view1);
    			mount_component(canvas, sp_split_view1, null);
    			append_dev(sp_split_view1, t10);
    			mount_component(timeline, sp_split_view1, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(sp_button, "click", /*click_handler*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*$CanvasStateTool*/ 2) set_data_dev(t1, /*$CanvasStateTool*/ ctx[1]);
    			const toolbarregionup_changes = {};

    			if (!updating_selected && dirty & /*$CanvasStateTool*/ 2) {
    				updating_selected = true;
    				toolbarregionup_changes.selected = /*$CanvasStateTool*/ ctx[1];
    				add_flush_callback(() => updating_selected = false);
    			}

    			toolbarregionup.$set(toolbarregionup_changes);
    			const timeline_changes = {};
    			if (dirty & /*$TimelinePlayOffset*/ 4) timeline_changes.playOffset = /*$TimelinePlayOffset*/ ctx[2];
    			timeline.$set(timeline_changes);

    			if (!current || dirty & /*themeLight*/ 1 && sp_theme_color_value !== (sp_theme_color_value = /*themeLight*/ ctx[0] ? "light" : "dark")) {
    				set_custom_element_data(sp_theme, "color", sp_theme_color_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(toolbarregionup.$$.fragment, local);
    			transition_in(canvas.$$.fragment, local);
    			transition_in(timeline.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(toolbarregionup.$$.fragment, local);
    			transition_out(canvas.$$.fragment, local);
    			transition_out(timeline.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(sp_icons_medium);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(sp_theme);
    			destroy_component(toolbarregionup);
    			destroy_component(canvas);
    			destroy_component(timeline);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const ToolbarRegionUpButtons = [
    	{
    		tool: "pan",
    		icon: "expr:pan-tool",
    		title: "Pan Tool"
    	},
    	{
    		tool: "selection",
    		icon: "expr:selection-tool",
    		title: "Selection Tool"
    	},
    	[
    		{
    			tool: "rectangle-tool",
    			icon: "expr:rectangle-tool",
    			title: "Rectangle Tool"
    		},
    		{
    			tool: "polygon-tool",
    			icon: "expr:polygon-tool",
    			title: "Polygon Tool"
    		},
    		{
    			tool: "star-tool",
    			icon: "expr:star-tool",
    			title: "Star Tool"
    		},
    		{
    			tool: "line-tool",
    			icon: "expr:line-tool",
    			title: "Line Tool"
    		}
    	]
    ];

    function instance($$self, $$props, $$invalidate) {
    	let $CanvasStateTool;
    	let $TimelinePlayOffset;
    	validate_store(CanvasStateTool, "CanvasStateTool");
    	component_subscribe($$self, CanvasStateTool, $$value => $$invalidate(1, $CanvasStateTool = $$value));
    	validate_store(TimelinePlayOffset, "TimelinePlayOffset");
    	component_subscribe($$self, TimelinePlayOffset, $$value => $$invalidate(2, $TimelinePlayOffset = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("App", slots, []);
    	let themeLight = false;
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	function toolbarregionup_selected_binding(value) {
    		$CanvasStateTool = value;
    		CanvasStateTool.set($CanvasStateTool);
    	}

    	const click_handler = () => $$invalidate(0, themeLight = !themeLight);

    	$$self.$capture_state = () => ({
    		ToolbarRegionUpButtons,
    		TimelinePlayOffset,
    		ToolbarRegionUp,
    		Timeline: Timeline_1,
    		doc,
    		animationManager,
    		CanvasStateTool,
    		Canvas,
    		themeLight,
    		$CanvasStateTool,
    		$TimelinePlayOffset
    	});

    	$$self.$inject_state = $$props => {
    		if ("themeLight" in $$props) $$invalidate(0, themeLight = $$props.themeLight);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		themeLight,
    		$CanvasStateTool,
    		$TimelinePlayOffset,
    		toolbarregionup_selected_binding,
    		click_handler
    	];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    var CustomIcons = "<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"height: 0; width: 0; position: absolute; visibility: hidden;\">\n\n    <symbol id=\"expr:fill-none\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M14 0h-12c-1.105 0-2 0.895-2 2v0 12c0 1.105 0.895 2 2 2v0h12c1.105 0 2-0.895 2-2v0-12c0-1.105-0.895-2-2-2v0zM1 2c0.001-0.552 0.448-0.999 1-1h12c0.059 0.007 0.112 0.018 0.164 0.034l-0.007-0.002-13.125 13.125c-0.014-0.045-0.025-0.098-0.031-0.153l-0-0.004zM15 14c-0.001 0.552-0.448 0.999-1 1h-12c-0.061-0.007-0.116-0.018-0.169-0.035l0.007 0.002 13.129-13.129c0.014 0.046 0.026 0.101 0.032 0.158l0 0.004z\" />\n    </symbol>\n\n    <symbol id=\"expr:fill-solid\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M1.75 0h12.5c0.966 0 1.75 0.783 1.75 1.75v12.5c0 0.966-0.784 1.75-1.75 1.75h-12.5c-0.967 0-1.75-0.784-1.75-1.75v-12.5c0-0.967 0.783-1.75 1.75-1.75z\" />\n    </symbol>\n\n    <symbol id=\"expr:fill-pattern\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M14 0h-12c-1.105 0-2 0.895-2 2v0 12c0 1.105 0.895 2 2 2v0h12c1.105 0 2-0.895 2-2v0-12c0-1.105-0.895-2-2-2v0zM15 14c-0.001 0.552-0.448 0.999-1 1h-12c-0.552-0.001-0.999-0.448-1-1v-12c0.001-0.552 0.448-0.999 1-1h12c0.552 0.001 0.999 0.448 1 1v0z\" />\n        <path d=\"M1.146 3.431l2.28-2.28 2.28 2.28-2.28 2.28-2.28-2.28z\" />\n        <path d=\"M5.724 3.431l2.28-2.28 2.28 2.28-2.28 2.28-2.28-2.28z\" />\n        <path d=\"M10.295 3.431l2.28-2.28 2.28 2.28-2.28 2.28-2.28-2.28z\" />\n        <path d=\"M1.146 7.991l2.28-2.28 2.28 2.28-2.28 2.28-2.28-2.28z\" />\n        <path d=\"M5.724 7.991l2.28-2.28 2.28 2.28-2.28 2.28-2.28-2.28z\" />\n        <path d=\"M10.295 7.991l2.28-2.28 2.28 2.28-2.28 2.28-2.28-2.28z\" />\n        <path d=\"M1.146 12.569l2.28-2.28 2.28 2.28-2.28 2.28-2.28-2.28z\" />\n        <path d=\"M5.724 12.569l2.28-2.28 2.28 2.28-2.28 2.28-2.28-2.28z\" />\n        <path d=\"M10.295 12.569l2.28-2.28 2.28 2.28-2.28 2.28-2.28-2.28z\" />\n    </symbol>\n\n    <symbol id=\"expr:menu-burger\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M0.267 1h15.466c0.147 0 0.267 0.12 0.267 0.267v1.466c0 0.147-0.12 0.267-0.267 0.267h-15.466c-0.147 0-0.267-0.12-0.267-0.267v-1.466c0-0.147 0.12-0.267 0.267-0.267z\" />\n        <path\n            d=\"M0.267 13h15.466c0.147 0 0.267 0.12 0.267 0.267v1.466c0 0.147-0.12 0.267-0.267 0.267h-15.466c-0.147 0-0.267-0.12-0.267-0.267v-1.466c0-0.147 0.12-0.267 0.267-0.267z\" />\n        <path\n            d=\"M0.267 7h15.466c0.147 0 0.267 0.12 0.267 0.267v1.466c0 0.147-0.12 0.267-0.267 0.267h-15.466c-0.147 0-0.267-0.12-0.267-0.267v-1.466c0-0.147 0.12-0.267 0.267-0.267z\" />\n    </symbol>\n\n    <symbol id=\"expr:menu-dots\" viewBox=\"0 0 16 16\">\n        <path d=\"M4 8c0 1.105-0.895 2-2 2s-2-0.895-2-2c0-1.105 0.895-2 2-2s2 0.895 2 2z\" />\n        <path d=\"M10 8c0 1.105-0.895 2-2 2s-2-0.895-2-2c0-1.105 0.895-2 2-2s2 0.895 2 2z\" />\n        <path d=\"M16 8c0 1.105-0.895 2-2 2s-2-0.895-2-2c0-1.105 0.895-2 2-2s2 0.895 2 2z\" />\n    </symbol>\n\n    <symbol id=\"expr:swatch\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M7.25 0h-7c-0.138 0-0.25 0.112-0.25 0.25v0 7c0 0.138 0.112 0.25 0.25 0.25v0h7c0.138 0 0.25-0.112 0.25-0.25v0-7c0-0.138-0.112-0.25-0.25-0.25v0zM6.5 6.5h-5.5v-5.5h5.5z\" />\n        <path\n            d=\"M8.75 0h7c0.138 0 0.25 0.112 0.25 0.25v7c0 0.138-0.112 0.25-0.25 0.25h-7c-0.138 0-0.25-0.112-0.25-0.25v-7c0-0.138 0.112-0.25 0.25-0.25z\" />\n        <path\n            d=\"M15.75 8.5h-7c-0.138 0-0.25 0.112-0.25 0.25v0 7c0 0.138 0.112 0.25 0.25 0.25v0h7c0.138 0 0.25-0.112 0.25-0.25v0-7c0-0.138-0.112-0.25-0.25-0.25v0zM15 15h-5.5v-5.5h5.5z\" />\n        <path\n            d=\"M0.25 8.5h7c0.138 0 0.25 0.112 0.25 0.25v7c0 0.138-0.112 0.25-0.25 0.25h-7c-0.138 0-0.25-0.112-0.25-0.25v-7c0-0.138 0.112-0.25 0.25-0.25z\" />\n    </symbol>\n\n    <symbol id=\"expr:tweak\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M8 8c-0.003 0.179-0.021 0.351-0.053 0.519l0.003-0.019h8.050v-1h-8.050c0.029 0.149 0.047 0.321 0.050 0.497l0 0.003z\" />\n        <path\n            d=\"M2 8c0.003-0.179 0.021-0.351 0.053-0.519l-0.003 0.019h-2.050v1h2.050c-0.029-0.149-0.047-0.321-0.050-0.497l-0-0.003z\" />\n        <path\n            d=\"M11 2c0.003-0.179 0.021-0.351 0.053-0.519l-0.003 0.019h-11.050v1h11.050c-0.029-0.149-0.047-0.321-0.050-0.497l-0-0.003z\" />\n        <path\n            d=\"M0 13.494v1h11.050c-0.029-0.147-0.047-0.317-0.050-0.491l-0-0.003c0.003-0.181 0.021-0.355 0.054-0.525l-0.003 0.019z\" />\n        <path\n            d=\"M14 4c1.105 0 2-0.895 2-2s-0.895-2-2-2c-1.105 0-2 0.895-2 2v0c0 1.105 0.895 2 2 2v0zM14 1c0.552 0 1 0.448 1 1s-0.448 1-1 1c-0.552 0-1-0.448-1-1v0c0-0.552 0.448-1 1-1v0z\" />\n        <path\n            d=\"M3 8c0 1.105 0.895 2 2 2s2-0.895 2-2c0-1.105-0.895-2-2-2v0c-1.105 0-2 0.895-2 2v0zM6 8c0 0.552-0.448 1-1 1s-1-0.448-1-1c0-0.552 0.448-1 1-1v0c0.552 0 1 0.448 1 1v0z\" />\n        <path\n            d=\"M14 12c-1.105 0-2 0.895-2 2s0.895 2 2 2c1.105 0 2-0.895 2-2v0c0-1.105-0.895-2-2-2v0zM14 15c-0.552 0-1-0.448-1-1s0.448-1 1-1c0.552 0 1 0.448 1 1v0c0 0.552-0.448 1-1 1v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:player-start\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M1.25 1h2c0.138 0 0.25 0.112 0.25 0.25v13.5c0 0.138-0.112 0.25-0.25 0.25h-2c-0.138 0-0.25-0.112-0.25-0.25v-13.5c0-0.138 0.112-0.25 0.25-0.25z\" />\n        <path\n            d=\"M14.954 1.123c-0.051-0.076-0.136-0.125-0.233-0.125-0.058 0-0.111 0.017-0.156 0.047l0.001-0.001-10.942 6.741c-0.075 0.044-0.124 0.124-0.124 0.215s0.049 0.171 0.123 0.214l0.001 0.001 10.942 6.741c0.043 0.029 0.097 0.047 0.155 0.047 0.148 0 0.269-0.115 0.279-0.26l0-0.001v-13.484c-0.004-0.051-0.020-0.097-0.047-0.136l0.001 0.001z\" />\n    </symbol>\n\n    <symbol id=\"expr:player-end\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M12.75 1h2c0.138 0 0.25 0.112 0.25 0.25v13.5c0 0.138-0.112 0.25-0.25 0.25h-2c-0.138 0-0.25-0.112-0.25-0.25v-13.5c0-0.138 0.112-0.25 0.25-0.25z\" />\n        <path\n            d=\"M12.376 7.785l-10.942-6.741c-0.044-0.029-0.097-0.047-0.155-0.047-0.148 0-0.269 0.115-0.279 0.26l-0 0.001v13.484c0.010 0.146 0.132 0.261 0.279 0.261 0.058 0 0.111-0.017 0.156-0.047l-0.001 0.001 10.942-6.741c0.075-0.044 0.124-0.124 0.124-0.215s-0.050-0.171-0.123-0.214l-0.001-0.001z\" />\n    </symbol>\n\n    <symbol id=\"expr:player-prevkey\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M13.2 1h1.6c0.114 0.015 0.201 0.111 0.201 0.228 0 0.008-0 0.015-0.001 0.023l0-0.001v13.5c0.001 0.007 0.001 0.014 0.001 0.022 0 0.117-0.087 0.213-0.2 0.228l-0.001 0h-1.6c-0.114-0.015-0.201-0.111-0.201-0.228 0-0.008 0-0.015 0.001-0.023l-0 0.001v-13.5c-0.001-0.007-0.001-0.014-0.001-0.022 0-0.117 0.087-0.213 0.2-0.228l0.001-0z\" />\n        <path\n            d=\"M1.107 7.785l9.515-6.741c0.038-0.026 0.085-0.042 0.136-0.042 0.134 0 0.242 0.108 0.242 0.242 0 0.005-0 0.010-0 0.014l0-0.001v13.484c0 0.004 0 0.009 0 0.013 0 0.134-0.108 0.242-0.242 0.242-0.051 0-0.097-0.015-0.136-0.042l0.001 0.001-9.515-6.741c-0.066-0.049-0.108-0.127-0.108-0.215s0.042-0.166 0.107-0.215l0.001-0z\" />\n    </symbol>\n\n    <symbol id=\"expr:player-nextkey\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M2.8 1h-1.6c-0.114 0.015-0.201 0.111-0.201 0.228 0 0.008 0 0.015 0.001 0.023l-0-0.001v13.5c-0.001 0.007-0.001 0.014-0.001 0.022 0 0.117 0.087 0.213 0.2 0.228l0.001 0h1.6c0.114-0.015 0.201-0.111 0.201-0.228 0-0.008-0-0.015-0.001-0.023l0 0.001v-13.5c0.001-0.007 0.001-0.014 0.001-0.022 0-0.117-0.087-0.213-0.2-0.228l-0.001-0z\" />\n        <path\n            d=\"M14.893 7.785l-9.515-6.741c-0.038-0.026-0.085-0.041-0.135-0.041-0.134 0-0.242 0.108-0.242 0.242 0 0.005 0 0.009 0 0.014l-0-0.001v13.484c-0 0.004-0 0.009-0 0.013 0 0.134 0.108 0.242 0.242 0.242 0.051 0 0.097-0.015 0.136-0.042l-0.001 0.001 9.515-6.741c0.066-0.049 0.108-0.127 0.108-0.215s-0.042-0.166-0.107-0.215l-0.001-0z\" />\n    </symbol>\n\n    <symbol id=\"expr:player-reverseplay\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M13.316 1.044c0.043-0.029 0.097-0.047 0.155-0.047 0.148 0 0.269 0.115 0.279 0.26l0 0.001v13.484c-0.010 0.146-0.132 0.261-0.279 0.261-0.058 0-0.111-0.017-0.156-0.047l0.001 0.001-10.942-6.741c-0.075-0.044-0.124-0.124-0.124-0.215s0.050-0.171 0.123-0.214l0.001-0.001z\" />\n    </symbol>\n\n    <symbol id=\"expr:player-play\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M2.684 1.044c-0.043-0.029-0.097-0.047-0.155-0.047-0.148 0-0.269 0.115-0.279 0.26l-0 0.001v13.484c0.010 0.146 0.132 0.261 0.279 0.261 0.058 0 0.111-0.017 0.156-0.047l-0.001 0.001 10.942-6.741c0.075-0.044 0.124-0.124 0.124-0.215s-0.050-0.171-0.123-0.214l-0.001-0.001z\" />\n    </symbol>\n\n    <symbol id=\"expr:player-record\" viewBox=\"0 0 16 16\">\n        <path d=\"M15 8c0 3.866-3.134 7-7 7s-7-3.134-7-7c0-3.866 3.134-7 7-7s7 3.134 7 7z\" />\n    </symbol>\n\n    <symbol id=\"expr:player-stop\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M6.4 1h-4.8c-0.331 0-0.6 0.112-0.6 0.25v13.5c0 0.138 0.269 0.25 0.6 0.25h4.8c0.331 0 0.6-0.112 0.6-0.25v-13.5c0-0.138-0.269-0.25-0.6-0.25z\" />\n        <path\n            d=\"M14.4 1h-4.8c-0.331 0-0.6 0.112-0.6 0.25v13.5c0 0.138 0.269 0.25 0.6 0.25h4.8c0.331 0 0.6-0.112 0.6-0.25v-13.5c0-0.138-0.269-0.25-0.6-0.25z\" />\n    </symbol>\n\n    <symbol id=\"expr:path\" viewBox=\"0 0 16 16\">\n        <path d=\"M13,11a1.994,1.994,0,0,0-1.925,1.488c-1.586-.047-2.6-.354-3-.923-.528-.749-.056-2.1.4-3.4.54-1.543,1.1-3.139.266-4.312-.611-.86-1.832-1.287-3.8-1.342a2,2,0,1,0-.007,1c1.582.046,2.594.354,3,.925.533.748.061,2.1-.4,3.4-.54,1.543-1.1,3.139-.266,4.311.611.861,1.833,1.288,3.805,1.343A2,2,0,1,0,13,11ZM3,4A1,1,0,1,1,4,3,1,1,0,0,1,3,4ZM13,14a1,1,0,1,1,1-1A1,1,0,0,1,13,14Z\" />\n    </symbol>\n\n    <symbol id=\"expr:text-uppercase\" viewBox=\"0 0 16 16\">\n        <path d=\"M4.325 12.64h-1.64v-7.979h-2.673v-1.3h6.976v1.3h-2.663z\" />\n        <path d=\"M13.325 12.64h-1.64v-7.979h-2.673v-1.3h6.976v1.3h-2.663z\" />\n    </symbol>\n\n    <symbol id=\"expr:text-lowercase\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M5.866 11.303c0.409-0.001 0.803-0.067 1.172-0.188l-0.027 0.008v1.179c-0.192 0.081-0.417 0.147-0.65 0.187l-0.019 0.003c-0.252 0.049-0.543 0.077-0.839 0.077-0.003 0-0.007 0-0.010-0h0.001q-2.224 0-2.224-2.344v-3.97h-1.005v-0.693l1.079-0.573 0.533-1.558h0.966v1.643h2.1v1.185h-2.1v3.942c-0.003 0.028-0.004 0.060-0.004 0.093 0 0.286 0.109 0.548 0.288 0.744l-0.001-0.001c0.182 0.166 0.426 0.267 0.693 0.267 0.017 0 0.034-0 0.050-0.001l-0.002 0zM12.591 11.303c0.409-0.001 0.803-0.067 1.172-0.188l-0.027 0.008v1.179c-0.192 0.081-0.417 0.147-0.65 0.187l-0.019 0.003c-0.252 0.049-0.543 0.077-0.839 0.077-0.003 0-0.007 0-0.010-0h0.001q-2.224 0-2.224-2.344v-3.97h-1.006v-0.693l1.079-0.573 0.533-1.557h0.966v1.642h2.1v1.185h-2.1v3.942c-0.002 0.028-0.004 0.060-0.004 0.093 0 0.286 0.109 0.548 0.288 0.744l-0.001-0.001c0.182 0.166 0.426 0.267 0.693 0.267 0.017 0 0.034-0 0.051-0.001l-0.002 0z\" />\n    </symbol>\n\n    <symbol id=\"expr:text-capitalize\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M5.656 12.515h-1.5v-7.871h-2.69v-1.284h6.882v1.284h-2.692zM13.457 11.454c0.385-0.001 0.755-0.063 1.102-0.176l-0.025 0.007v1.105c-0.181 0.076-0.392 0.138-0.611 0.175l-0.018 0.003c-0.237 0.046-0.509 0.072-0.787 0.072-0.005 0-0.009 0-0.014-0h0.001q-2.092 0-2.092-2.2v-3.736h-0.944v-0.65l0.946-0.463 0.57-1.54h0.908v1.54h1.972v1.113h-1.973v3.707c-0.002 0.026-0.004 0.057-0.004 0.087 0 0.269 0.102 0.515 0.27 0.7l-0.001-0.001c0.172 0.16 0.404 0.258 0.659 0.258 0.014 0 0.028-0 0.042-0.001l-0.002 0z\" />\n    </symbol>\n\n    <symbol id=\"expr:text-subscript\" viewBox=\"0 0 16 16\">\n        <path d=\"M6.949 11.769h-1.634v-8.593h-2.94v-1.4h7.515v1.4h-2.941z\" />\n        <path\n            d=\"M13.617 14.224h-1.191v-2.551c0.002-0.025 0.003-0.055 0.003-0.085 0-0.23-0.064-0.446-0.174-0.63l0.003 0.006c-0.113-0.148-0.289-0.242-0.487-0.242-0.017 0-0.034 0.001-0.050 0.002l0.002-0c-0.021-0.002-0.046-0.003-0.071-0.003-0.268 0-0.506 0.132-0.651 0.335l-0.002 0.002c-0.144 0.275-0.229 0.601-0.229 0.946 0 0.058 0.002 0.116 0.007 0.173l-0.001-0.007v2.055h-1.188v-4.367h0.91l0.16 0.559h0.066c0.133-0.209 0.32-0.374 0.541-0.476l0.008-0.003c0.224-0.103 0.486-0.162 0.761-0.162 0.012 0 0.024 0 0.035 0l-0.002-0c0.033-0.002 0.070-0.004 0.109-0.004 0.406 0 0.775 0.158 1.048 0.417l-0.001-0.001c0.248 0.288 0.399 0.665 0.399 1.077 0 0.039-0.001 0.078-0.004 0.117l0-0.005z\" />\n    </symbol>\n\n    <symbol id=\"expr:text-superscript\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M15.117 6.226h-1.191v-2.551c0.002-0.025 0.003-0.055 0.003-0.085 0-0.23-0.064-0.446-0.174-0.63l0.003 0.006c-0.113-0.148-0.289-0.242-0.487-0.242-0.017 0-0.034 0.001-0.050 0.002l0.002-0c-0.021-0.002-0.046-0.003-0.071-0.003-0.268 0-0.506 0.132-0.651 0.335l-0.002 0.002c-0.144 0.275-0.229 0.601-0.229 0.946 0 0.058 0.002 0.116 0.007 0.173l-0.001-0.007v2.055h-1.188v-4.367h0.91l0.16 0.559h0.066c0.133-0.209 0.32-0.374 0.541-0.476l0.008-0.003c0.224-0.103 0.486-0.162 0.762-0.162 0.012 0 0.023 0 0.035 0l-0.002-0c0.032-0.002 0.070-0.004 0.108-0.004 0.406 0 0.775 0.158 1.048 0.417l-0.001-0.001c0.248 0.288 0.399 0.665 0.399 1.077 0 0.039-0.001 0.078-0.004 0.117l0-0.005z\" />\n        <path d=\"M5.449 14.226h-1.634v-8.593h-2.94v-1.4h7.515v1.4h-2.941z\" />\n    </symbol>\n\n    <symbol id=\"expr:text-bold\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M3.921 2.505h3.423c0.142-0.011 0.308-0.017 0.476-0.017 1.065 0 2.071 0.252 2.962 0.7l-0.038-0.017c0.642 0.419 1.060 1.134 1.060 1.947 0 0.060-0.002 0.12-0.007 0.179l0-0.008c0.002 0.033 0.002 0.073 0.002 0.112 0 0.563-0.174 1.085-0.471 1.515l0.006-0.009c-0.286 0.401-0.719 0.68-1.22 0.759l-0.010 0.001v0.075c0.612 0.099 1.137 0.416 1.503 0.867l0.004 0.004c0.292 0.439 0.466 0.979 0.466 1.559 0 0.049-0.001 0.099-0.004 0.148l0-0.007c0.002 0.040 0.003 0.086 0.003 0.132 0 0.899-0.424 1.7-1.083 2.212l-0.006 0.005c-0.751 0.532-1.687 0.85-2.696 0.85-0.090 0-0.18-0.003-0.269-0.008l0.012 0.001h-4.115zM6.253 6.861h1.359c0.057 0.005 0.124 0.007 0.191 0.007 0.433 0 0.841-0.111 1.195-0.307l-0.013 0.006c0.262-0.203 0.429-0.518 0.429-0.872 0-0.035-0.002-0.069-0.005-0.103l0 0.004c0.002-0.023 0.003-0.050 0.003-0.078 0-0.35-0.185-0.656-0.462-0.827l-0.004-0.002c-0.371-0.179-0.807-0.284-1.268-0.284-0.071 0-0.14 0.002-0.21 0.007l0.009-0.001h-1.226zM6.253 8.712v2.867h1.52c0.054 0.005 0.116 0.007 0.18 0.007 0.463 0 0.893-0.139 1.251-0.378l-0.008 0.005c0.285-0.251 0.463-0.616 0.463-1.023 0-0.037-0.002-0.074-0.004-0.111l0 0.005q0-1.371-1.956-1.371z\" />\n    </symbol>\n\n    <symbol id=\"expr:text-italic\" viewBox=\"0 0 16 16\">\n        <path d=\"M6 13.354l2.278-10.708h1.722l-2.279 10.708z\" />\n    </symbol>\n\n    <symbol id=\"expr:text-underline\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M11.959 1.5v6.464c0.001 0.026 0.001 0.057 0.001 0.087 0 0.679-0.176 1.316-0.486 1.869l0.010-0.019c-0.323 0.556-0.792 0.995-1.356 1.271l-0.019 0.008c-0.593 0.283-1.288 0.449-2.022 0.449-0.045 0-0.090-0.001-0.135-0.002l0.007 0c-0.074 0.005-0.16 0.008-0.248 0.008-1.015 0-1.942-0.376-2.65-0.996l0.005 0.004c-0.642-0.644-1.038-1.532-1.038-2.513 0-0.068 0.002-0.135 0.006-0.202l-0 0.009v-6.437h1.642v6.321c-0.006 0.063-0.009 0.137-0.009 0.211 0 0.615 0.22 1.179 0.586 1.617l-0.003-0.004c0.416 0.37 0.967 0.596 1.571 0.596 0.069 0 0.136-0.003 0.204-0.009l-0.009 0.001q2.311 0 2.311-2.426v-6.307z\" />\n        <path d=\"M1 13.5h14v1h-14v-1z\" />\n    </symbol>\n\n    <symbol id=\"expr:text-strikethrough\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M7.833 6.995c-0.283-0.126-0.519-0.252-0.745-0.391l0.027 0.015c-0.235-0.143-0.429-0.332-0.575-0.554l-0.004-0.007c-0.111-0.194-0.177-0.427-0.177-0.675 0-0.014 0-0.028 0.001-0.042l-0 0.002c-0-0.012-0.001-0.027-0.001-0.042 0-0.376 0.171-0.711 0.439-0.934l0.002-0.002c0.319-0.235 0.719-0.377 1.153-0.377 0.048 0 0.095 0.002 0.143 0.005l-0.006-0c0.93 0.033 1.802 0.251 2.59 0.617l-0.041-0.017 0.556-1.428c-0.899-0.418-1.95-0.665-3.059-0.672l-0.002-0c-0.062-0.003-0.135-0.006-0.208-0.006-0.884 0-1.7 0.291-2.358 0.782l0.010-0.007c-0.584 0.474-0.955 1.192-0.955 1.996 0 0.040 0.001 0.079 0.003 0.119l-0-0.006c-0 0.015-0 0.032-0 0.049 0 0.584 0.173 1.128 0.47 1.584l-0.007-0.011z\" />\n        <path\n            d=\"M15 7.995h-14v1h7.289c0.337 0.18 0.624 0.363 0.895 0.566l-0.018-0.013c0.278 0.245 0.453 0.603 0.453 1.001 0 0.006-0 0.012-0 0.018l0-0.001c0.001 0.014 0.001 0.031 0.001 0.048 0 0.411-0.192 0.776-0.492 1.012l-0.003 0.002c-0.379 0.255-0.846 0.407-1.348 0.407-0.065 0-0.13-0.003-0.194-0.008l0.008 0.001c-0.548-0.007-1.075-0.079-1.58-0.21l0.046 0.010c-0.596-0.144-1.114-0.33-1.606-0.564l0.049 0.021v1.654c0.801 0.359 1.735 0.569 2.719 0.569 0.090 0 0.179-0.002 0.268-0.005l-0.013 0c0.078 0.005 0.169 0.008 0.261 0.008 0.969 0 1.867-0.307 2.601-0.829l-0.014 0.009c0.633-0.497 1.036-1.263 1.036-2.123 0-0.042-0.001-0.084-0.003-0.125l0 0.006c0.001-0.021 0.001-0.045 0.001-0.069 0-0.431-0.094-0.841-0.263-1.209l0.007 0.018c-0.035-0.070-0.087-0.128-0.128-0.194h4.028z\" />\n    </symbol>\n\n    <symbol id=\"expr:character-spacing\" viewBox=\"0 0 16 16\">\n        <path d=\"M14.5 11.225l-1.5-1v1.5h-10v-1.5l-3 2 3 2v-1.5h10v1.5l3-2-1.5-1z\" />\n        <path\n            d=\"M5.349 8.226l2.25-6.425h-1.090l-1.341 3.974c-0.049 0.141-0.114 0.358-0.193 0.651s-0.138 0.551-0.176 0.773q-0.034-0.219-0.153-0.67c-0.080-0.3-0.154-0.546-0.225-0.736l-1.34-4h-1.081l2.241 6.425z\" />\n        <path\n            d=\"M9.335 6.441h2.456l0.642 1.784h1.116l-2.4-6.451h-1.149l-2.4 6.451h1.106zM10.222 3.861c0.12-0.316 0.24-0.711 0.334-1.116l0.013-0.066q0.045 0.175 0.16 0.554c0.079 0.252 0.139 0.437 0.183 0.554l0.6 1.749h-1.87z\" />\n    </symbol>\n\n    <symbol id=\"expr:line-spacing\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M6.093 3.513h8.814c0.328 0 0.593 0.265 0.593 0.593v0.314c0 0.327-0.265 0.593-0.593 0.593h-8.814c-0.327 0-0.593-0.266-0.593-0.593v-0.314c0-0.328 0.266-0.593 0.593-0.593z\" />\n        <path\n            d=\"M6.088 7.513h8.824c0.325 0 0.588 0.263 0.588 0.588v0.311c0 0.325-0.263 0.588-0.588 0.588h-8.824c-0.325 0-0.588-0.263-0.588-0.588v-0.311c0-0.325 0.263-0.588 0.588-0.588z\" />\n        <path\n            d=\"M6.088 11.513h8.824c0.325 0 0.588 0.263 0.588 0.588v0.311c0 0.325-0.263 0.588-0.588 0.588h-8.824c-0.325 0-0.588-0.263-0.588-0.588v-0.311c0-0.325 0.263-0.588 0.588-0.588z\" />\n        <path d=\"M4.5 4l-2-3-2 3h1.5v8h-1.5l2 3 2-3h-1.5v-8h1.5z\" />\n    </symbol>\n\n    <symbol id=\"expr:text-left\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M0.75 1.25h8.5c0.414 0 0.75 0.336 0.75 0.75v0 0c0 0.414-0.336 0.75-0.75 0.75v0h-8.5c-0.414 0-0.75-0.336-0.75-0.75v0 0c0-0.414 0.336-0.75 0.75-0.75v0z\" />\n        <path\n            d=\"M0.744 5.25h14.512c0 0 0 0 0 0 0.411 0 0.744 0.333 0.744 0.743v0c-0 0.411-0.333 0.744-0.744 0.744-0 0-0 0-0 0h-14.512c-0 0-0 0-0 0-0.411 0-0.744-0.333-0.744-0.743v-0c0-0.411 0.333-0.744 0.744-0.744 0 0 0 0 0 0h-0z\" />\n        <path\n            d=\"M0.744 9.25h8.512c0 0 0 0 0 0 0.411 0 0.744 0.333 0.744 0.743v0c-0 0.411-0.333 0.743-0.744 0.743-0 0-0 0-0 0h-8.512c-0 0-0 0-0 0-0.411 0-0.744-0.333-0.744-0.743v-0c0-0.411 0.333-0.743 0.744-0.743 0 0 0 0 0 0h-0z\" />\n        <path\n            d=\"M0.75 13.25h14.5c0.414 0 0.75 0.336 0.75 0.75v0 0c0 0.414-0.336 0.75-0.75 0.75v0h-14.5c-0.414 0-0.75-0.336-0.75-0.75v0 0c0-0.414 0.336-0.75 0.75-0.75v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:text-center\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M3.75 1.25h8.5c0.414 0 0.75 0.336 0.75 0.75v0 0c0 0.414-0.336 0.75-0.75 0.75v0h-8.5c-0.414 0-0.75-0.336-0.75-0.75v0 0c0-0.414 0.336-0.75 0.75-0.75v0z\" />\n        <path\n            d=\"M0.744 5.25h14.512c0 0 0 0 0 0 0.411 0 0.744 0.333 0.744 0.743v0c-0 0.411-0.333 0.744-0.744 0.744-0 0-0 0-0 0h-14.512c-0 0-0 0-0 0-0.411 0-0.744-0.333-0.744-0.743v-0c0-0.411 0.333-0.744 0.744-0.744 0 0 0 0 0 0h-0z\" />\n        <path\n            d=\"M3.744 9.25h8.512c0 0 0 0 0 0 0.411 0 0.744 0.333 0.744 0.743v0c-0 0.411-0.333 0.743-0.744 0.743-0 0-0 0-0 0h-8.512c-0 0-0 0-0 0-0.411 0-0.744-0.333-0.744-0.743v-0c0-0.411 0.333-0.743 0.744-0.743 0 0 0 0 0 0h-0z\" />\n        <path\n            d=\"M0.75 13.25h14.5c0.414 0 0.75 0.336 0.75 0.75v0 0c0 0.414-0.336 0.75-0.75 0.75v0h-14.5c-0.414 0-0.75-0.336-0.75-0.75v0 0c0-0.414 0.336-0.75 0.75-0.75v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:text-right\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M6.75 2.75h8.5c0.414 0 0.75-0.336 0.75-0.75s-0.336-0.75-0.75-0.75v0h-8.5c-0.414 0-0.75 0.336-0.75 0.75s0.336 0.75 0.75 0.75v0z\" />\n        <path\n            d=\"M15.256 5.25h-14.512c-0.411 0-0.744 0.333-0.744 0.744s0.333 0.744 0.744 0.744v0h14.512c0.411 0 0.744-0.333 0.744-0.744s-0.333-0.744-0.744-0.744v0z\" />\n        <path\n            d=\"M15.256 9.25h-8.512c-0.411 0-0.744 0.333-0.744 0.744s0.333 0.744 0.744 0.744v0h8.512c0.411 0 0.744-0.333 0.744-0.744s-0.333-0.744-0.744-0.744v0z\" />\n        <path\n            d=\"M15.25 13.25h-14.5c-0.414 0-0.75 0.336-0.75 0.75s0.336 0.75 0.75 0.75v0h14.5c0.414 0 0.75-0.336 0.75-0.75s-0.336-0.75-0.75-0.75v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:text-justify\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M0.75 1.25h14.5c0.414 0 0.75 0.336 0.75 0.75v0 0c0 0.414-0.336 0.75-0.75 0.75v0h-14.5c-0.414 0-0.75-0.336-0.75-0.75v0 0c0-0.414 0.336-0.75 0.75-0.75v0z\" />\n        <path\n            d=\"M0.744 5.25h14.512c0 0 0 0 0 0 0.411 0 0.744 0.333 0.744 0.743v0c-0 0.411-0.333 0.744-0.744 0.744-0 0-0 0-0 0h-14.512c-0 0-0 0-0 0-0.411 0-0.744-0.333-0.744-0.743v-0c0-0.411 0.333-0.744 0.744-0.744 0 0 0 0 0 0h-0z\" />\n        <path\n            d=\"M0.744 9.25h14.512c0 0 0 0 0 0 0.411 0 0.744 0.333 0.744 0.743v0c-0 0.411-0.333 0.743-0.744 0.743-0 0-0 0-0 0h-14.512c-0 0-0 0-0 0-0.411 0-0.744-0.333-0.744-0.743v-0c0-0.411 0.333-0.743 0.744-0.743 0 0 0 0 0 0h-0z\" />\n        <path\n            d=\"M0.75 13.25h14.5c0.414 0 0.75 0.336 0.75 0.75v0 0c0 0.414-0.336 0.75-0.75 0.75v0h-14.5c-0.414 0-0.75-0.336-0.75-0.75v0 0c0-0.414 0.336-0.75 0.75-0.75v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:radius-same\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M10 0h-4c-3.314 0-6 2.686-6 6v0 4c0 3.314 2.686 6 6 6v0h4c3.314 0 6-2.686 6-6v0-4c0-3.314-2.686-6-6-6v0zM15 10c0 2.761-2.239 5-5 5v0h-4c-2.761 0-5-2.239-5-5v0-4c0-2.761 2.239-5 5-5v0h4c2.761 0 5 2.239 5 5v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:radius-separate\" viewBox=\"0 0 16 16\">\n        <path d=\"M0 6h1c0-2.761 2.239-5 5-5v0-1c-3.314 0-6 2.686-6 6v0z\" />\n        <path d=\"M15 6h1c0-3.314-2.686-6-6-6v0 1c2.761 0 5 2.239 5 5v0z\" />\n        <path d=\"M1 10h-1c0 3.314 2.686 6 6 6v0-1c-2.761 0-5-2.239-5-5v0z\" />\n        <path d=\"M10 15v1c3.314 0 6-2.686 6-6v0h-1c0 2.761-2.239 5-5 5v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:maintain-checked\" viewBox=\"0 0 16 16\">\n        <path d=\"M2 8c0 1.657 1.343 3 3 3v0h6c1.657 0 3-1.343 3-3s-1.343-3-3-3v0h-6c-1.657 0-3 1.343-3 3v0z\" />\n        <path\n            d=\"M1 8c0-2.209 1.791-4 4-4v0h1v-1h-1c-2.761 0-5 2.239-5 5s2.239 5 5 5v0h1v-1h-1c-2.209 0-4-1.791-4-4v0z\" />\n        <path\n            d=\"M11 3h-1v1h1c0 0 0.001 0 0.001 0 2.209 0 4 1.791 4 4s-1.79 3.999-3.999 4h-1.002v1h1c2.761 0 5-2.239 5-5s-2.239-5-5-5v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:maintain-unchecked\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M1 8c0-2.209 1.791-4 4-4v0h1v-1h-1c-2.761 0-5 2.239-5 5s2.239 5 5 5v0h1v-1h-1c-2.209 0-4-1.791-4-4v0z\" />\n        <path\n            d=\"M11 3h-1v1h1c0 0 0.001 0 0.001 0 2.209 0 4 1.791 4 4s-1.79 3.999-3.999 4h-1.002v1h1c2.761 0 5-2.239 5-5s-2.239-5-5-5v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:rotate\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M8.002 15c-0.009 0-0.020 0-0.030 0-3.866 0-7-3.134-7-7s3.134-7 7-7c2.596 0 4.862 1.413 6.071 3.513l0.018 0.034-1.883-0.269-0.141 0.99 3.466 0.495 0.494-3.465-0.99-0.142-0.231 1.618c-1.435-2.263-3.928-3.744-6.765-3.744-4.41 0-7.985 3.575-7.985 7.985s3.575 7.985 7.985 7.985c3.799 0 6.979-2.653 7.786-6.208l0.010-0.053h-1.032c-0.802 3.045-3.528 5.255-6.772 5.261h-0.001z\" />\n        <path d=\"M9.002 8c0 0.552-0.448 1-1 1s-1-0.448-1-1c0-0.552 0.448-1 1-1s1 0.448 1 1z\" />\n    </symbol>\n\n    <symbol id=\"expr:add-color\" viewBox=\"0 0 16 16\">\n        <path d=\"M8.318 11.203v-2.5h2.414v-0.809h-2.414l-0.003-2.508h-0.814v2.508h-2.4v0.809h2.403v2.5h0.814z\" />\n        <path d=\"M0 10h1v2h-1v-2z\" />\n        <path d=\"M0 7h1v2h-1v-2z\" />\n        <path d=\"M0 4h1v2h-1v-2z\" />\n        <path d=\"M10 0h2v1h-2v-1z\" />\n        <path d=\"M7 0h2v1h-2v-1z\" />\n        <path d=\"M4 0h2v1h-2v-1z\" />\n        <path d=\"M10 15h2v1h-2v-1z\" />\n        <path d=\"M7 15h2v1h-2v-1z\" />\n        <path d=\"M4 15h2v1h-2v-1z\" />\n        <path d=\"M1 0h-1v3h1v-2h2v-1h-2z\" />\n        <path d=\"M1 15v-2h-1v3h3v-1h-2z\" />\n        <path d=\"M15 0h-2v1h2v2h1v-3h-1z\" />\n        <path d=\"M15 10h1v2h-1v-2z\" />\n        <path d=\"M15 7h1v2h-1v-2z\" />\n        <path d=\"M15 4h1v2h-1v-2z\" />\n        <path d=\"M15 14v1h-2v1h3v-3h-1v1z\" />\n    </symbol>\n\n    <symbol id=\"expr:align-to-selection\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M13 16v-1h-3.5v1h-3v-1h-3.5v1h-3v-3h0.974v-3.5h-0.974v-3h0.974v-3.5h-0.974v-3h3v1h3.5v-1h3v1h3.5v-1h3v3h-0.974v3.5h0.974v3h-0.974v3.5h0.974v3zM9.5 13v1h3.5v-1h1v-3.5h-1v-3h1v-3.5h-1v-1h-3.5v1h-3v-1h-3.5v1h-1v3.5h1v3h-1v3.5h1v1h3.5v-1zM7 8c0-0.552 0.448-1 1-1s1 0.448 1 1c0 0.552-0.448 1-1 1v0c-0.552 0-1-0.448-1-1v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:artboard-tool\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M16 4v-1h-1.5v-1.5h-1v1.5h-11v-1.5h-1v1.5h-1.5v1h1.5v8h-1.5v1h1.5v1.5h1v-1.5h11v1.5h1v-1.5h1.5v-1h-1.5v-8zM13.5 12h-11v-8h11z\" />\n    </symbol>\n\n    <symbol id=\"expr:assets\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M1.133 1h3.734c0.073 0 0.133 0.060 0.133 0.133v3.734c0 0.073-0.060 0.133-0.133 0.133h-3.734c-0.073 0-0.133-0.060-0.133-0.133v-3.734c0-0.073 0.060-0.133 0.133-0.133z\" />\n        <path\n            d=\"M6.133 1h3.734c0.073 0 0.133 0.060 0.133 0.133v3.734c0 0.073-0.060 0.133-0.133 0.133h-3.734c-0.073 0-0.133-0.060-0.133-0.133v-3.734c0-0.073 0.060-0.133 0.133-0.133z\" />\n        <path\n            d=\"M11.133 1h3.734c0.073 0 0.133 0.060 0.133 0.133v3.734c0 0.073-0.060 0.133-0.133 0.133h-3.734c-0.073 0-0.133-0.060-0.133-0.133v-3.734c0-0.073 0.060-0.133 0.133-0.133z\" />\n        <path\n            d=\"M1.133 6h3.734c0.073 0 0.133 0.060 0.133 0.133v3.734c0 0.073-0.060 0.133-0.133 0.133h-3.734c-0.073 0-0.133-0.060-0.133-0.133v-3.734c0-0.073 0.060-0.133 0.133-0.133z\" />\n        <path\n            d=\"M6.133 6h3.734c0.073 0 0.133 0.060 0.133 0.133v3.734c0 0.073-0.060 0.133-0.133 0.133h-3.734c-0.073 0-0.133-0.060-0.133-0.133v-3.734c0-0.073 0.060-0.133 0.133-0.133z\" />\n        <path\n            d=\"M11.133 6h3.734c0.073 0 0.133 0.060 0.133 0.133v3.734c0 0.073-0.060 0.133-0.133 0.133h-3.734c-0.073 0-0.133-0.060-0.133-0.133v-3.734c0-0.073 0.060-0.133 0.133-0.133z\" />\n        <path\n            d=\"M1.133 11h3.734c0.073 0 0.133 0.060 0.133 0.133v3.734c0 0.073-0.060 0.133-0.133 0.133h-3.734c-0.073 0-0.133-0.060-0.133-0.133v-3.734c0-0.073 0.060-0.133 0.133-0.133z\" />\n        <path\n            d=\"M6.133 11h3.734c0.073 0 0.133 0.060 0.133 0.133v3.734c0 0.073-0.060 0.133-0.133 0.133h-3.734c-0.073 0-0.133-0.060-0.133-0.133v-3.734c0-0.073 0.060-0.133 0.133-0.133z\" />\n        <path\n            d=\"M11.133 11h3.734c0.073 0 0.133 0.060 0.133 0.133v3.734c0 0.073-0.060 0.133-0.133 0.133h-3.734c-0.073 0-0.133-0.060-0.133-0.133v-3.734c0-0.073 0.060-0.133 0.133-0.133z\" />\n    </symbol>\n\n    <symbol id=\"expr:boolean-add\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M15.271 4.5h-3.771v-3.771c-0.001-0.126-0.103-0.228-0.229-0.229h-10.542c-0.126 0.001-0.228 0.103-0.229 0.229v10.542c0.001 0.126 0.103 0.228 0.229 0.229h3.771v3.771c0.001 0.126 0.103 0.228 0.229 0.229h10.542c0.126-0.001 0.228-0.103 0.229-0.229v-10.542c-0.001-0.126-0.103-0.228-0.229-0.229h-0z\" />\n    </symbol>\n\n    <symbol id=\"expr:boolean-divide\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M11.5 0.73c0-0.001 0-0.003 0-0.004 0-0.123-0.099-0.224-0.222-0.226h-10.548c-0.001-0-0.003-0-0.004-0-0.123 0-0.224 0.099-0.226 0.222v10.548c-0 0.001-0 0.003-0 0.004 0 0.123 0.099 0.224 0.222 0.226h2.778v-8h8z\" />\n        <path d=\"M4.5 4.5h7v7h-7v-7z\" />\n        <path\n            d=\"M15.278 4.5h-2.778v8h-8v2.77c-0 0.001-0 0.003-0 0.004 0 0.123 0.099 0.224 0.222 0.226h10.548c0.001 0 0.003 0 0.004 0 0.123 0 0.224-0.099 0.226-0.222v-10.548c0-0.001 0-0.003 0-0.004 0-0.123-0.099-0.224-0.222-0.226h-0z\" />\n    </symbol>\n\n    <symbol id=\"expr:boolean-intersect\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M15.271 4.5h-3.771v-3.771c-0.001-0.126-0.103-0.228-0.229-0.229h-10.542c-0.126 0.001-0.228 0.103-0.229 0.229v10.542c0.001 0.126 0.103 0.228 0.229 0.229h3.771v3.771c0.001 0.126 0.103 0.228 0.229 0.229h10.542c0.126-0.001 0.228-0.103 0.229-0.229v-10.542c-0.001-0.126-0.103-0.228-0.229-0.229h-0zM1.5 10.5v-9h9v3h-5.771c-0.126 0.001-0.228 0.103-0.229 0.229v5.771zM14.5 14.5h-9v-3h5.771c0.126-0.001 0.228-0.103 0.229-0.229v-5.771h3z\" />\n    </symbol>\n\n    <symbol id=\"expr:boolean-overlap\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M15.278 4.5h-3.778v6.77c0 0.001 0 0.003 0 0.004 0 0.123-0.099 0.224-0.222 0.226h-6.778v3.77c-0 0.001-0 0.003-0 0.004 0 0.123 0.099 0.224 0.222 0.226h10.548c0.001 0 0.003 0 0.004 0 0.123 0 0.224-0.099 0.226-0.222v-10.548c0-0.001 0-0.003 0-0.004 0-0.123-0.099-0.224-0.222-0.226h-0z\" />\n        <path\n            d=\"M4.722 4.5h6.778v-3.77c0-0.001 0-0.003 0-0.004 0-0.123-0.099-0.224-0.222-0.226h-10.548c-0.001-0-0.003-0-0.004-0-0.123 0-0.224 0.099-0.226 0.222v10.548c-0 0.001-0 0.003-0 0.004 0 0.123 0.099 0.224 0.222 0.226h3.778v-6.77c-0-0.001-0-0.003-0-0.004 0-0.123 0.099-0.224 0.222-0.226h0z\" />\n    </symbol>\n\n    <symbol id=\"expr:boolean-substract\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M15.27 4.5h-3.77v-3.77c0-0.001 0-0.003 0-0.004 0-0.123-0.099-0.224-0.222-0.226h-10.548c-0.001-0-0.003-0-0.004-0-0.123 0-0.224 0.099-0.226 0.222v10.548c-0 0.001-0 0.003-0 0.004 0 0.123 0.099 0.224 0.222 0.226h3.778v3.77c-0 0.001-0 0.003-0 0.004 0 0.123 0.099 0.224 0.222 0.226h10.548c0.001 0 0.003 0 0.004 0 0.123 0 0.224-0.099 0.226-0.222v-10.548c0-0.001 0-0.003 0-0.004 0-0.123-0.099-0.224-0.222-0.226h-0zM14.5 14.5h-9v-9h9z\" />\n    </symbol>\n\n    <symbol id=\"expr:bring-forward\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M0.265 0h8.47c0.146 0 0.265 0.119 0.265 0.265v6.47c0 0.146-0.119 0.265-0.265 0.265h-8.47c-0.146 0-0.265-0.119-0.265-0.265v-6.47c0-0.146 0.119-0.265 0.265-0.265z\" />\n        <path\n            d=\"M8.735 9h-8.47c-0 0-0.001 0-0.001 0-0.145 0-0.263 0.118-0.264 0.263v6.472c0 0 0 0.001 0 0.001 0 0.145 0.118 0.263 0.263 0.264h8.472c0 0 0.001 0 0.001 0 0.145 0 0.263-0.118 0.264-0.263v-6.472c0-0 0-0.001 0-0.001 0-0.145-0.118-0.263-0.263-0.264h-0zM8 15h-7v-5h7z\" />\n        <path d=\"M13 4l-3 4h2v4h2v-4h2z\" />\n    </symbol>\n\n    <symbol id=\"expr:send-backward\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M0.265 9h8.47c0.146 0 0.265 0.119 0.265 0.265v6.47c0 0.146-0.119 0.265-0.265 0.265h-8.47c-0.146 0-0.265-0.119-0.265-0.265v-6.47c0-0.146 0.119-0.265 0.265-0.265z\" />\n        <path\n            d=\"M8.735 7h-8.47c-0 0-0.001 0-0.001 0-0.145 0-0.263-0.118-0.264-0.263v-6.472c0-0 0-0.001 0-0.001 0-0.145 0.118-0.263 0.263-0.264h8.472c0 0 0.001 0 0.001 0 0.145 0 0.263 0.118 0.264 0.263v6.472c0 0 0 0.001 0 0.001 0 0.145-0.118 0.263-0.263 0.264h-0zM8 1h-7v5h7z\" />\n        <path d=\"M13 12l-3-4h2v-4h2v4h2z\" />\n    </symbol>\n\n    <symbol id=\"expr:bring-front\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M0.265 0h8.47c0.146 0 0.265 0.119 0.265 0.265v6.47c0 0.146-0.119 0.265-0.265 0.265h-8.47c-0.146 0-0.265-0.119-0.265-0.265v-6.47c0-0.146 0.119-0.265 0.265-0.265z\" />\n        <path d=\"M13 4l-3 4h2v4h2v-4h2z\" />\n        <path d=\"M0 9h1v1h-1v-1z\" />\n        <path d=\"M2 9h1v1h-1v-1z\" />\n        <path d=\"M4 9h1v1h-1v-1z\" />\n        <path d=\"M6 9h1v1h-1v-1z\" />\n        <path d=\"M2 15h1v1h-1v-1z\" />\n        <path d=\"M4 15h1v1h-1v-1z\" />\n        <path d=\"M6 15h1v1h-1v-1z\" />\n        <path d=\"M0 11h1v1h-1v-1z\" />\n        <path d=\"M0 13h1v1h-1v-1z\" />\n        <path d=\"M8 11h1v1h-1v-1z\" />\n        <path d=\"M8 13h1v1h-1v-1z\" />\n        <path d=\"M8 9h1v1h-1v-1z\" />\n        <path d=\"M0 15h1v1h-1v-1z\" />\n        <path d=\"M8 15h1v1h-1v-1z\" />\n    </symbol>\n\n    <symbol id=\"expr:send-back\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M0.265 9h8.47c0.146 0 0.265 0.119 0.265 0.265v6.47c0 0.146-0.119 0.265-0.265 0.265h-8.47c-0.146 0-0.265-0.119-0.265-0.265v-6.47c0-0.146 0.119-0.265 0.265-0.265z\" />\n        <path d=\"M13 12l-3-4h2v-4h2v4h2z\" />\n        <path d=\"M0 6h1v1h-1v-1z\" />\n        <path d=\"M2 6h1v1h-1v-1z\" />\n        <path d=\"M4 6h1v1h-1v-1z\" />\n        <path d=\"M6 6h1v1h-1v-1z\" />\n        <path d=\"M2 0h1v1h-1v-1z\" />\n        <path d=\"M4 0h1v1h-1v-1z\" />\n        <path d=\"M6 0h1v1h-1v-1z\" />\n        <path d=\"M0 4h1v1h-1v-1z\" />\n        <path d=\"M0 2h1v1h-1v-1z\" />\n        <path d=\"M8 4h1v1h-1v-1z\" />\n        <path d=\"M8 2h1v1h-1v-1z\" />\n        <path d=\"M8 6h1v1h-1v-1z\" />\n        <path d=\"M0 0h1v1h-1v-1z\" />\n        <path d=\"M8 0h1v1h-1v-1z\" />\n    </symbol>\n\n    <symbol id=\"expr:cap-butt\" viewBox=\"0 0 16 16\">\n        <path d=\"M1.503 10.5v3.5h14.5v-4.5h-12.507c-0.46 0.608-1.181 0.998-1.993 1h-0z\" />\n        <path d=\"M1.503 2v3.5c0.812 0.002 1.533 0.392 1.988 0.994l0.005 0.006h12.507v-4.5z\" />\n        <path\n            d=\"M1.503 6.5c-0.002-0-0.004-0-0.006-0-0.828 0-1.5 0.672-1.5 1.5s0.672 1.5 1.5 1.5c0.649 0 1.202-0.412 1.411-0.99l0.003-0.010h13.092v-1h-13.092c-0.211-0.586-0.761-0.997-1.408-1h-0zM1.503 8.5c-0.276 0-0.5-0.224-0.5-0.5s0.224-0.5 0.5-0.5c0.276 0 0.5 0.224 0.5 0.5v0c0 0.276-0.224 0.5-0.5 0.5v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:cap-square\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M0 2v12h16v-4.5h-7.507c-0.461 0.61-1.185 1-2 1-1.381 0-2.5-1.119-2.5-2.5s1.119-2.5 2.5-2.5c0.815 0 1.539 0.39 1.995 0.994l0.005 0.006h7.507v-4.5z\" />\n        <path\n            d=\"M6.5 6.5c-0.002-0-0.004-0-0.006-0-0.828 0-1.5 0.672-1.5 1.5s0.672 1.5 1.5 1.5c0.649 0 1.202-0.412 1.411-0.99l0.003-0.010h8.092v-1h-8.092c-0.211-0.586-0.761-0.997-1.408-1h-0zM6.5 8.5c-0.276 0-0.5-0.224-0.5-0.5s0.224-0.5 0.5-0.5c0.276 0 0.5 0.224 0.5 0.5v0c0 0.276-0.224 0.5-0.5 0.5v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:cap-round\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M0 8v0c0 3.314 2.686 6 6 6v0h10v-4.5h-7.507c-0.461 0.61-1.185 1-2 1-1.381 0-2.5-1.119-2.5-2.5s1.119-2.5 2.5-2.5c0.815 0 1.539 0.39 1.995 0.994l0.005 0.006h7.507v-4.5h-10c-3.314 0-6 2.686-6 6v0z\" />\n        <path\n            d=\"M6.5 6.5c-0.002-0-0.004-0-0.006-0-0.828 0-1.5 0.672-1.5 1.5s0.672 1.5 1.5 1.5c0.649 0 1.202-0.412 1.411-0.99l0.003-0.010h8.092v-1h-8.092c-0.211-0.586-0.761-0.997-1.408-1h-0zM6.5 8.5c-0.276 0-0.5-0.224-0.5-0.5s0.224-0.5 0.5-0.5c0.276 0 0.5 0.224 0.5 0.5v0c0 0.276-0.224 0.5-0.5 0.5v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:colorpicker-tool\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M15.118 1.033l-0.151-0.151c-0.493-0.492-1.173-0.797-1.925-0.797s-1.432 0.304-1.925 0.797l-2.524 2.524-0.033-0.033c-0.119-0.12-0.285-0.194-0.467-0.194s-0.347 0.074-0.466 0.193l-0.001 0.001-0.17 0.169c-0.119 0.12-0.193 0.285-0.193 0.467s0.074 0.348 0.193 0.468l0.283 0.283-3.52 3.52c-1.143 1.143-2.975 3.381-2.975 3.381s-0.373 1.922-0.59 2.684l-0.363 0.363c-0.128 0.128-0.207 0.305-0.207 0.5s0.079 0.372 0.207 0.5v0c0.128 0.128 0.305 0.207 0.5 0.207s0.372-0.079 0.5-0.207l0.363-0.363c0.762-0.217 2.684-0.59 2.684-0.59s2.238-1.832 3.381-2.975l3.52-3.52 0.283 0.282c0.119 0.12 0.285 0.194 0.467 0.194s0.347-0.074 0.466-0.193l0.001-0.001 0.17-0.169c0.12-0.119 0.194-0.285 0.194-0.467s-0.074-0.347-0.193-0.466l-0.034-0.034 2.524-2.524c0.493-0.492 0.798-1.173 0.798-1.925s-0.305-1.432-0.798-1.925l-0-0zM7.013 11.073c-0.9 0.9-2.555 2.285-3.115 2.749-0.446 0.089-1.383 0.279-2.067 0.445-0.013-0.023-0.026-0.042-0.040-0.060l0.001 0.001c-0.017-0.013-0.036-0.026-0.057-0.038l-0.002-0.001c0.165-0.684 0.356-1.621 0.445-2.067 0.464-0.56 1.846-2.212 2.749-3.115l3.52-3.52 2.086 2.086z\" />\n    </symbol>\n\n    <symbol id=\"expr:delete\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M12.7 1.5h-2.729c-0.068-0.563-0.542-0.996-1.117-1h-1.208c-0.575 0.004-1.049 0.437-1.116 0.995l-0.001 0.005h-3.229c-0.994 0-1.8 0.806-1.8 1.8v0 0.2h13v-0.2c0-0.994-0.806-1.8-1.8-1.8v0z\" />\n        <path\n            d=\"M2 14.5c0 0.552 0.448 1 1 1v0h10c0.552 0 1-0.448 1-1v0-10h-12zM11 6.5c0-0.276 0.224-0.5 0.5-0.5s0.5 0.224 0.5 0.5v0 7.5c0 0.276-0.224 0.5-0.5 0.5s-0.5-0.224-0.5-0.5v0zM7.5 6.5c0-0.276 0.224-0.5 0.5-0.5s0.5 0.224 0.5 0.5v0 7.5c0 0.276-0.224 0.5-0.5 0.5s-0.5-0.224-0.5-0.5v0zM4 6.5c0-0.276 0.224-0.5 0.5-0.5s0.5 0.224 0.5 0.5v0 7.5c0 0.276-0.224 0.5-0.5 0.5s-0.5-0.224-0.5-0.5v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:direct-selection-tool\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M13.919 10.726l-11.5-10.66c-0.044-0.040-0.103-0.065-0.168-0.065-0.136 0-0.247 0.109-0.251 0.244v15.5c0 0 0 0.001 0 0.001 0 0.139 0.112 0.251 0.251 0.251 0.068 0 0.129-0.027 0.174-0.070l-0 0 4.533-4.32c0.041-0.040 0.097-0.066 0.158-0.069l0.001-0 6.646-0.378c0.132-0.008 0.237-0.117 0.237-0.251 0-0.073-0.031-0.139-0.081-0.184l-0-0zM7.060 10.537c-0.311 0.018-0.588 0.146-0.796 0.347l0-0-3.264 3.111v-12.033l8.948 8.297z\" />\n    </symbol>\n\n    <symbol id=\"expr:drop-arrow\" viewBox=\"0 0 16 16\">\n        <path d=\"M8.102 10.207l-3.45-3.348 0.696-0.718 2.732 2.652 2.561-2.641 0.718 0.696-3.257 3.359z\" />\n    </symbol>\n\n    <symbol id=\"expr:duplicate-layer\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M13.891 5h-8.391v9.891c0.001 0.612 0.497 1.108 1.109 1.109h7.282c0.612-0.001 1.108-0.497 1.109-1.109v-8.782c-0.001-0.612-0.497-1.108-1.109-1.109h-0z\" />\n        <path\n            d=\"M10.5 1.109c0-0 0-0.001 0-0.001 0-0.612-0.495-1.107-1.107-1.108h-7.284c-0 0-0.001 0-0.001 0-0.612 0-1.107 0.495-1.108 1.107v8.784c0 0 0 0.001 0 0.001 0 0.612 0.496 1.107 1.107 1.108h2.402v-7h5.991z\" />\n    </symbol>\n\n    <symbol id=\"expr:ellipse-tool\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M8 15.5c-4.142 0-7.5-3.358-7.5-7.5s3.358-7.5 7.5-7.5c4.142 0 7.5 3.358 7.5 7.5v0c-0.005 4.14-3.36 7.495-7.5 7.5h-0zM8 1.5c-3.59 0-6.5 2.91-6.5 6.5s2.91 6.5 6.5 6.5c3.59 0 6.5-2.91 6.5-6.5v0c-0.004-3.588-2.912-6.496-6.5-6.5h-0z\" />\n    </symbol>\n\n    <symbol id=\"expr:fill-evenodd\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M13.25 15h-10.5c-0.966-0.001-1.749-0.784-1.75-1.75v-10.5c0.001-0.966 0.784-1.749 1.75-1.75h10.5c0.966 0.001 1.749 0.784 1.75 1.75v10.5c-0.001 0.966-0.784 1.749-1.75 1.75h-0zM8 4c-2.209 0-4 1.791-4 4s1.791 4 4 4c2.209 0 4-1.791 4-4v0c0-2.209-1.791-4-4-4v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:fill-nonzero\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M2.75 15c-0.966-0.001-1.749-0.784-1.75-1.75v-10.5c0.001-0.966 0.784-1.749 1.75-1.75h10.5c0.966 0.001 1.749 0.784 1.75 1.75v10.5c-0.002 0.966-0.784 1.748-1.75 1.75h-0zM4 8c0 2.209 1.791 4 4 4s4-1.791 4-4c0-2.209-1.791-4-4-4v0c-2.209 0-4 1.791-4 4v0zM5 8c0-1.657 1.343-3 3-3s3 1.343 3 3c0 1.657-1.343 3-3 3v0c-1.657 0-3-1.343-3-3v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:flip-horizontally\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M7.759 0h0.484c0.142 0 0.258 0.116 0.258 0.258v15.484c0 0.142-0.116 0.258-0.258 0.258h-0.484c-0.142 0-0.258-0.116-0.258-0.258v-15.484c0-0.142 0.116-0.258 0.258-0.258z\" />\n        <path\n            d=\"M5.245 1.5c-0.082 0-0.154 0.039-0.2 0.099l-0 0.001-4.993 6.28c-0.034 0.042-0.054 0.095-0.054 0.153s0.020 0.112 0.054 0.154l-0-0 4.994 6.222c0.046 0.058 0.116 0.095 0.195 0.095 0.002 0 0.004-0 0.006-0h-0c0.002 0 0.004 0 0.006 0 0.136 0 0.247-0.109 0.25-0.244v-12.505c0-0.002 0-0.003 0-0.005 0-0.136-0.109-0.247-0.245-0.25h-0zM4.501 12.124l-3.289-4.1 3.289-4.133z\" />\n        <path\n            d=\"M15.947 7.876l-4.993-6.276c-0.047-0.059-0.119-0.096-0.199-0.096-0.139 0-0.251 0.111-0.254 0.249v12.5c0.003 0.138 0.115 0.249 0.254 0.249 0.080 0 0.151-0.037 0.198-0.094l0-0 4.994-6.222c0.034-0.042 0.055-0.096 0.055-0.155s-0.021-0.113-0.055-0.155l0 0z\" />\n    </symbol>\n\n    <symbol id=\"expr:flip-vertically\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M0.258 7.5h15.484c0.142 0 0.258 0.116 0.258 0.258v0.484c0 0.142-0.116 0.258-0.258 0.258h-15.484c-0.142 0-0.258-0.116-0.258-0.258v-0.484c0-0.142 0.116-0.258 0.258-0.258z\" />\n        <path\n            d=\"M14.5 5.244c0-0.082-0.039-0.154-0.099-0.2l-0.001-0-6.276-4.99c-0.042-0.034-0.095-0.054-0.154-0.054s-0.112 0.020-0.154 0.054l0-0-6.222 4.994c-0.058 0.046-0.095 0.116-0.095 0.195 0 0.002 0 0.004 0 0.006v-0c-0 0.002-0 0.004-0 0.006 0 0.136 0.109 0.247 0.244 0.25h12.507c0.138-0.001 0.249-0.112 0.249-0.25 0-0 0-0 0-0.001v0zM3.876 4.5l4.1-3.289 4.133 3.289z\" />\n        <path\n            d=\"M8.124 15.946l6.276-4.993c0.059-0.047 0.096-0.119 0.096-0.199 0-0.137-0.109-0.249-0.245-0.254l-0-0h-12.5c-0.138 0.003-0.249 0.115-0.249 0.254 0 0.080 0.037 0.151 0.094 0.198l0 0 6.22 4.994c0.042 0.034 0.095 0.054 0.154 0.054s0.112-0.020 0.154-0.054l-0 0z\" />\n    </symbol>\n\n    <symbol id=\"expr:group\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M8 2.5c0-0.552-0.448-1-1-1v0h-6c-0.552 0-1 0.448-1 1v0 0.5h8.153c-0.092-0.142-0.148-0.314-0.153-0.499l-0-0.001z\" />\n        <path\n            d=\"M0 4v9.5c0 0.552 0.448 1 1 1v0h14c0.552 0 1-0.448 1-1v0-9c-0.005-0.186-0.061-0.358-0.155-0.504l0.002 0.004z\" />\n    </symbol>\n\n    <symbol id=\"expr:guidelines-toggle\" viewBox=\"0 0 16 16\">\n        <path d=\"M16 4h-11v-4h-1.026v4h-3.974v1h3.974v11h1.026v-11h11z\" />\n    </symbol>\n\n    <symbol id=\"expr:hide\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M13.59 5.056c-0.214-0.206-0.442-0.403-0.681-0.586l-0.019-0.014 2.641-2.642c0.136-0.136 0.22-0.323 0.22-0.53 0-0.414-0.336-0.75-0.75-0.75-0.207 0-0.395 0.084-0.53 0.22l-13.436 13.442c-0.13 0.135-0.21 0.318-0.21 0.521 0 0.414 0.336 0.75 0.75 0.75 0.203 0 0.387-0.080 0.522-0.211l3.466-3.465c0.727 0.253 1.565 0.401 2.436 0.406l0.003 0c0.001 0 0.003 0 0.005 0 2.181 0 4.155-0.883 5.585-2.31l-0 0 2.41-2.42zM12.88 9.177c-1.235 1.248-2.948 2.020-4.841 2.020-0.014 0-0.027-0-0.041-0l0.002 0c-0 0-0 0-0 0-0.585 0-1.153-0.073-1.695-0.21l0.048 0.010 0.5-0.5c0.342 0.141 0.739 0.225 1.154 0.229l0.002 0c1.795 0 3.25-1.455 3.25-3.25v0c-0.001-0.381-0.071-0.745-0.197-1.081l0.007 0.021c-0.012 0.775-0.643 1.4-1.42 1.4h-0c-0.035 0-0.066-0.013-0.1-0.016l2.632-2.628c0.259 0.19 0.488 0.382 0.702 0.587l-0.002-0.002 1.71 1.71z\" />\n        <path\n            d=\"M2.85 10.267l0.7-0.71c-0.153-0.123-0.29-0.248-0.419-0.379l-0.001-0.001-1.71-1.71 1.71-1.71c1.24-1.248 2.958-2.020 4.856-2.020 0.005 0 0.010 0 0.015 0h-0.001c0.446 0.001 0.882 0.041 1.305 0.117l-0.045-0.007 0.82-0.82c-0.613-0.184-1.317-0.29-2.046-0.29-0.012 0-0.024 0-0.036 0h0.002c-0.004-0-0.009-0-0.014-0-2.176 0-4.145 0.887-5.565 2.319l-0.001 0.001-2.42 2.41 2.42 2.42c0.131 0.135 0.272 0.26 0.421 0.373l0.009 0.007z\" />\n        <path\n            d=\"M4.76 7.476c-0 0.008-0 0.018-0 0.028 0 0.268 0.037 0.526 0.105 0.772l-0.005-0.020 3.93-3.93c-0.225-0.064-0.484-0.1-0.752-0.1-0.010 0-0.020 0-0.030 0l0.002-0c-1.794 0.003-3.247 1.456-3.25 3.25v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:image\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M2.038 15c-0.573-0.001-1.037-0.465-1.038-1.038v-11.924c0.001-0.573 0.465-1.037 1.038-1.038h11.924c0.573 0.001 1.037 0.465 1.038 1.038v11.924c-0.001 0.573-0.465 1.037-1.038 1.038h-0zM2 2.038v11.924l0.005 0.005 3.995-4.745 2 2.11 4-6.332 2 2.956v-5.918c0-0 0-0.001 0-0.001 0-0.020-0.016-0.036-0.036-0.037h-11.926c-0.021 0-0.038 0.017-0.038 0.038v0zM3.5 5.5c0-1.105 0.895-2 2-2s2 0.895 2 2c0 1.105-0.895 2-2 2v0c-1.105 0-2-0.895-2-2v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:join-bevel\" viewBox=\"0 0 16 16\">\n        <path d=\"M5.989 10v-10h-5.989v10l5.989 6h10.011v-6z\" />\n    </symbol>\n\n\n    <symbol id=\"expr:join-miter\" viewBox=\"0 0 16 16\">\n        <path d=\"M5.989 10v-10h-5.989v16h16v-6z\" />\n    </symbol>\n\n    <symbol id=\"expr:join-round\" viewBox=\"0 0 16 16\">\n        <path d=\"M5.989 10v-10h-5.989v10.011c0 3.308 2.681 5.989 5.989 5.989h10.011v-6z\" />\n    </symbol>\n\n    <symbol id=\"expr:layer\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M2.75 15c-0.966-0.001-1.749-0.784-1.75-1.75v-10.5c0-0.966 0.784-1.75 1.75-1.75v0h10.5c0.966 0.001 1.749 0.784 1.75 1.75v10.5c-0.001 0.966-0.784 1.749-1.75 1.75h-0zM8 11.062v2.938h3.062v-2.937h-3.062v-3.063h3.063v3.062h2.937v-3.062h-2.938v-3.063h2.938v-2.187c0-0.414-0.336-0.75-0.75-0.75v0h-2.188v2.937h-3.062v-2.937h-3.063v2.937h-2.937v3.063h2.937v3.062h-2.937v2.188c0 0.414 0.336 0.75 0.75 0.75v0h2.187v-2.938zM4.938 8v-3.062h3.062v3.062z\" />\n    </symbol>\n\n    <symbol id=\"expr:layers\" viewBox=\"0 0 16 16\">\n        <path d=\"M8 0.827l-8 5.175 8 5.172 8-5.172z\" />\n        <path d=\"M8 14.172l-7.227-4.671-0.773 0.5 8 5.172 8-5.172-0.773-0.5z\" />\n    </symbol>\n\n    <symbol id=\"expr:lock\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M13 6h-1v-1c0-2.209-1.791-4-4-4s-4 1.791-4 4v0 1h-1c-0.552 0-1 0.448-1 1v0 7c0 0.552 0.448 1 1 1v0h10c0.552 0 1-0.448 1-1v0-7c0-0.552-0.448-1-1-1v0zM9 11.5h-2c-0.552 0-1-0.448-1-1s0.448-1 1-1v0h2c0.552 0 1 0.448 1 1s-0.448 1-1 1v0zM11 6h-6v-1c0-1.657 1.343-3 3-3s3 1.343 3 3v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:new-layer\" viewBox=\"0 0 16 16\">\n        <path d=\"M7 1l-5 5h5v-5z\" />\n        <path d=\"M13 1h-5v6h-6v7c0 0.552 0.448 1 1 1v0h10c0.552 0 1-0.448 1-1v0-12c0-0.552-0.448-1-1-1v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:pen-tool\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M15.828 4.576l-4.206-4.206c-0.045-0.045-0.108-0.073-0.177-0.073s-0.131 0.028-0.177 0.073v0l-2.734 2.734-6.346 2.8c-0.073 0.033-0.126 0.098-0.143 0.176l-0 0.002-1.939 9.321c-0.003 0.015-0.005 0.032-0.005 0.050 0 0.138 0.111 0.249 0.249 0.25h0c0.018-0 0.035-0.002 0.052-0.006l-0.002 0 9.331-1.94c0.075-0.017 0.136-0.064 0.17-0.129l0.001-0.001 3.010-5.788 2.913-2.913c0.045-0.045 0.072-0.107 0.072-0.176 0-0.068-0.027-0.129-0.071-0.174l0 0zM9.182 12.853l-6.97 1.449 2.574-2.574c0.072 0.026 0.155 0.044 0.241 0.050l0.003 0c0.552 0 1-0.448 1-1s-0.448-1-1-1c-0.552 0-1 0.448-1 1v0c0.006 0.089 0.024 0.172 0.051 0.25l-0.002-0.007-2.578 2.576 1.441-6.931 5.7-2.517 3.329 3.329z\" />\n    </symbol>\n\n    <symbol id=\"expr:line-tool\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M1.5 15c-0.276-0-0.5-0.224-0.5-0.5 0-0.138 0.056-0.263 0.146-0.354l13-13c0.091-0.094 0.219-0.153 0.36-0.153 0.276 0 0.5 0.224 0.5 0.5 0 0.141-0.058 0.269-0.152 0.36l-13 13c-0.090 0.091-0.215 0.146-0.353 0.146-0 0-0 0-0.001 0h0z\" />\n    </symbol>\n\n    <symbol id=\"expr:polygon-tool\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M15.961 15.14l-7.721-14.515c-0.043-0.079-0.126-0.132-0.22-0.132s-0.178 0.053-0.22 0.131l-0.001 0.001-7.76 14.514c-0.019 0.034-0.030 0.075-0.030 0.118 0 0.138 0.112 0.25 0.25 0.25h15.482c0.138-0.001 0.249-0.112 0.249-0.25 0-0.043-0.011-0.083-0.030-0.118l0.001 0.001zM1.51 14.507l6.507-12.17 6.473 12.17z\" />\n    </symbol>\n\n    <symbol id=\"expr:rectangle-tool\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M13.8 14.5h-11.6c-0.4 0-0.7-0.3-0.8-0.8v-11.5c0-0.4 0.3-0.7 0.8-0.8h11.5c0.4 0 0.7 0.3 0.8 0.8v11.5c0.003 0.026 0.005 0.056 0.005 0.087 0 0.391-0.315 0.709-0.705 0.713h-0zM2.5 13.5h11v-11h-11z\" />\n    </symbol>\n\n    <symbol id=\"expr:star-tool\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M15.751 6.427c0.035-0.043 0.057-0.098 0.057-0.159 0-0.116-0.079-0.214-0.186-0.242l-0.002-0-4.688-1.203c-0.064-0.017-0.117-0.057-0.15-0.11l-0.001-0.001-2.568-4.164c-0.045-0.072-0.124-0.118-0.213-0.118s-0.168 0.047-0.212 0.117l-0.001 0.001-2.568 4.164c-0.034 0.054-0.087 0.094-0.149 0.111l-0.002 0-4.688 1.203c-0.109 0.029-0.188 0.126-0.188 0.242 0 0.061 0.021 0.116 0.057 0.159l-0-0 3.103 3.785c0.035 0.043 0.057 0.099 0.057 0.159 0 0.006-0 0.011-0.001 0.017l0-0.001-0.326 4.917c-0 0.005-0.001 0.011-0.001 0.017 0 0.138 0.112 0.25 0.25 0.25 0.034 0 0.067-0.007 0.096-0.019l-0.002 0.001 4.479-1.831c0.028-0.012 0.061-0.019 0.095-0.019s0.067 0.007 0.097 0.019l-0.002-0.001 4.479 1.831c0.028 0.012 0.060 0.019 0.095 0.019 0.138 0 0.25-0.112 0.25-0.25 0-0.006-0-0.012-0.001-0.017l0 0.001-0.326-4.917c-0-0.005-0.001-0.010-0.001-0.016 0-0.061 0.021-0.116 0.057-0.16l-0 0zM11.875 9.578c-0.176 0.214-0.283 0.491-0.283 0.792 0 0.028 0.001 0.056 0.003 0.084l-0-0.004 0.247 3.722-3.367-1.377c-0.14-0.059-0.303-0.093-0.474-0.093s-0.334 0.034-0.482 0.096l0.008-0.003-3.367 1.377 0.247-3.719c0.002-0.025 0.003-0.053 0.003-0.083 0-0.301-0.106-0.577-0.284-0.793l0.002 0.002-2.359-2.878 3.549-0.911c0.32-0.083 0.584-0.282 0.75-0.549l0.003-0.005 1.93-3.13 1.93 3.129c0.169 0.273 0.435 0.472 0.747 0.553l0.009 0.002 3.546 0.91z\" />\n    </symbol>\n\n    <symbol id=\"expr:ruler-toggle\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M15.866 0h-15.733c-0 0-0 0-0 0-0.073 0-0.133 0.059-0.133 0.133 0 0 0 0 0 0v0 15.734c0 0 0 0 0 0 0 0.073 0.059 0.133 0.133 0.133 0 0 0 0 0 0h3.733c0 0 0 0 0 0 0.074 0 0.133-0.059 0.134-0.133v-11.867h11.866c0 0 0 0 0 0 0.074 0 0.133-0.059 0.134-0.133v-3.734c-0.001-0.074-0.060-0.133-0.134-0.133 0 0 0 0 0 0v0zM3 4v2h-2v-2zM3 9h-2v-2h2zM1 10h2v2h-2zM3 15h-2v-2h2zM4 1h2v2h-2zM7 1h2v2h-2zM10 1h2v2h-2zM15 3h-2v-2h2z\" />\n    </symbol>\n\n    <symbol id=\"expr:rulergrid\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M12.473-0.010l-1.992 1.992 1.017 1.017-0.707 0.707-1.017-1.016-1.414 1.413 2.017 2.017-0.707 0.707-2.017-2.017-1.414 1.414 1.017 1.017-0.707 0.707-1.018-1.017-1.414 1.414 1.767 1.767-0.707 0.707-1.767-1.767-1.419 1.414 1.017 1.017-0.707 0.707-1.010-1.016-1.3 1.3 3.536 3.536 12.482-12.485z\" />\n        <path d=\"M2.006 1.99h6.5v-1h-7.5v7.5h1z\" />\n        <path d=\"M14.006 13.99h-6.5v1h7.5v-7.5h-1z\" />\n    </symbol>\n\n    <symbol id=\"expr:selection-tool\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M2 0.246v15.5c0 0 0 0.001 0 0.001 0 0.139 0.112 0.251 0.251 0.251 0.068 0 0.129-0.027 0.174-0.070l-0 0 4.533-4.32c0.041-0.040 0.097-0.066 0.158-0.069l0.001-0 6.646-0.378c0.132-0.008 0.237-0.117 0.237-0.251 0-0.073-0.031-0.139-0.081-0.184l-0-0-11.5-10.66c-0.044-0.040-0.103-0.065-0.168-0.065-0.136 0-0.247 0.109-0.251 0.244v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:settings\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M15.886 9.3c0.070-0.389 0.111-0.839 0.114-1.297l0-0.003c-0.003-0.461-0.044-0.911-0.121-1.348l0.007 0.048-1.567-0.73c-0.128-0.393-0.27-0.727-0.437-1.045l0.018 0.037 0.59-1.623c-0.515-0.712-1.12-1.317-1.809-1.816l-0.023-0.016-1.623 0.59c-0.282-0.148-0.617-0.289-0.963-0.403l-0.048-0.013-0.724-1.567c-0.389-0.070-0.839-0.111-1.297-0.114l-0.003-0c-0.461 0.003-0.911 0.044-1.348 0.121l0.048-0.007-0.73 1.567c-0.393 0.128-0.727 0.27-1.045 0.437l0.037-0.018-1.623-0.59c-0.711 0.514-1.317 1.119-1.816 1.806l-0.016 0.023 0.593 1.623c-0.148 0.282-0.289 0.617-0.403 0.963l-0.013 0.048-1.57 0.727c-0.070 0.389-0.111 0.839-0.114 1.297l-0 0.003c0.003 0.461 0.044 0.911 0.121 1.348l-0.007-0.048 1.567 0.73c0.128 0.393 0.27 0.727 0.437 1.045l-0.018-0.037-0.59 1.623c0.515 0.712 1.12 1.317 1.809 1.816l0.023 0.016 1.62-0.593c0.283 0.149 0.617 0.29 0.964 0.404l0.047 0.013 0.73 1.567c0.388 0.070 0.836 0.112 1.294 0.116l0.003 0c0.461-0.003 0.911-0.044 1.348-0.121l-0.048 0.007 0.73-1.567c0.394-0.127 0.728-0.268 1.048-0.434l-0.037 0.017 1.623 0.591c0.711-0.515 1.317-1.12 1.816-1.809l0.016-0.023-0.59-1.623c0.148-0.282 0.289-0.617 0.403-0.963l0.013-0.048zM8 12.667c-2.578 0-4.667-2.089-4.667-4.667s2.089-4.667 4.667-4.667c2.578 0 4.667 2.089 4.667 4.667v0 0c-0.001 2.577-2.090 4.666-4.667 4.667h-0z\" />\n    </symbol>\n\n    <symbol id=\"expr:shaper-tool\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M14.73 5.56c-0.805-1.085-1.911-1.906-3.193-2.346l-0.047-0.014v-2.95c0-0.001 0-0.001 0-0.002 0-0.136-0.11-0.247-0.246-0.248h-10.994c-0.001 0-0.001-0-0.002-0-0.136 0-0.247 0.11-0.248 0.246v10.994c0 0.001-0 0.001-0 0.002 0 0.136 0.11 0.247 0.246 0.248h2.954c0.701 2.074 2.353 3.657 4.424 4.249l0.046 0.011v-1.040c-1.559-0.534-2.78-1.699-3.377-3.183l-0.013-0.037h0.52v-1h-3.8v-9.49h9.49v2.93l0.68 0.22c2.243 0.752 3.83 2.834 3.83 5.287 0 0.62-0.101 1.216-0.288 1.773l0.011-0.039-0.003 0.009v0.010l0.79 0.72c0.31-0.726 0.49-1.57 0.49-2.456 0-0.005 0-0.010-0-0.015v0.001c0-0.007 0-0.016 0-0.025 0-1.452-0.477-2.792-1.282-3.873l0.012 0.017z\" />\n        <path\n            d=\"M9.436 2.872c-0 0-0.001 0-0.001 0-0.703 0-1.38 0.11-2.016 0.313l0.047-0.013 0.3 0.954c0.497-0.161 1.069-0.254 1.662-0.254 0.003 0 0.005 0 0.008 0h-0z\" />\n        <path\n            d=\"M4.237 5.428l0.792 0.611c0.349-0.45 0.753-0.835 1.205-1.155l0.018-0.012-0.573-0.82c-0.554 0.392-1.030 0.846-1.431 1.361l-0.011 0.015z\" />\n        <path\n            d=\"M2.879 9.124l1 0.047c0.029-0.602 0.149-1.166 0.347-1.693l-0.013 0.038-0.939-0.345c-0.148 0.388-0.266 0.844-0.334 1.316l-0.004 0.035q-0.043 0.3-0.057 0.602z\" />\n        <path d=\"M8.67 16l2.66-2.535 0.391-0.069 3.688-0.21-6.739-6.247z\" />\n    </symbol>\n\n    <symbol id=\"expr:snap\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M14.75 0.5h-3.5c-0.138 0-0.25 0.112-0.25 0.25v0 6.75c0 2.21-0.79 4-3 4h-0.151c-1.597-0.113-2.85-1.436-2.85-3.052 0-0.021 0-0.042 0.001-0.063l-0 0.003v-7.638c0-0.138-0.112-0.25-0.25-0.25v0h-3.5c-0.138 0-0.25 0.112-0.25 0.25v0 7.75c0 3.866 3.134 7 7 7v0h0.207c3.797-0.216 6.794-3.348 6.794-7.18 0-0.038-0-0.077-0.001-0.115l0 0.006v-7.461c0-0.138-0.112-0.25-0.25-0.25v0zM8.178 14.5h-0.178c-3.312-0.004-5.996-2.688-6-6v-4h2v3.888c-0 0.014-0 0.031-0 0.047 0 2.158 1.679 3.924 3.802 4.064l0.012 0.001h0.186c2.505 0 4-1.869 4-5v-3h2v3.711c0.001 0.030 0.001 0.065 0.001 0.1 0 3.292-2.565 5.984-5.805 6.188l-0.018 0.001z\" />\n    </symbol>\n\n    <symbol id=\"expr:stroke-center\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M3 15.5c-1.381 0-2.5-1.119-2.5-2.5 0-0.815 0.39-1.539 0.994-1.995l0.006-0.005v-11h-1.5v16h16v-1.5h-11c-0.461 0.61-1.185 1-2 1v0z\" />\n        <path d=\"M6 10.013v-10.013h-1.5v11.005c0.189 0.143 0.352 0.306 0.49 0.489l0.005 0.006h11.005v-1.487z\" />\n        <path\n            d=\"M3.5 11.591v-11.591h-1v11.59c-0.591 0.21-1.006 0.765-1.006 1.416 0 0.828 0.672 1.5 1.5 1.5 0.652 0 1.206-0.415 1.413-0.996l0.003-0.010h11.59v-1h-11.591c-0.154-0.426-0.483-0.755-0.899-0.906l-0.010-0.003zM3 13.5c-0.276 0-0.5-0.224-0.5-0.5s0.224-0.5 0.5-0.5c0.276 0 0.5 0.224 0.5 0.5v0c0 0.276-0.224 0.5-0.5 0.5v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:stroke-inside\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M5 13.5c-1.381 0-2.5-1.119-2.5-2.5v0c0.001-0.286 0.047-0.561 0.131-0.819l-0.005 0.019 0.009-0.029 0.011-0.029c0.179-0.463 0.473-0.848 0.848-1.132l0.006-0.005v-9.005h-3.5v16h16v-3.5h-9c-0.461 0.61-1.185 1-2 1v0z\" />\n        <path\n            d=\"M6.5 10.5h-0.091c-0.154-0.426-0.483-0.755-0.899-0.906l-0.010-0.003v-9.591h-1v9.59c-0.591 0.21-1.006 0.765-1.006 1.416 0 0.828 0.672 1.5 1.5 1.5 0.652 0 1.206-0.415 1.413-0.996l0.003-0.010h9.59v-1zM5 11.5c-0.276 0-0.5-0.224-0.5-0.5s0.224-0.5 0.5-0.5c0.276 0 0.5 0.224 0.5 0.5v0c0 0.276-0.224 0.5-0.5 0.5v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:stroke-outside\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M2.003 13.088v-13.091h-1v13.090c-0.591 0.21-1.006 0.765-1.006 1.416 0 0.828 0.672 1.5 1.5 1.5 0.652 0 1.206-0.415 1.413-0.996l0.003-0.010h13.090v-1h-13.091c-0.154-0.426-0.483-0.755-0.899-0.906l-0.010-0.003zM1.503 14.997c-0.276 0-0.5-0.224-0.5-0.5s0.224-0.5 0.5-0.5c0.276 0 0.5 0.224 0.5 0.5v0c0 0.276-0.224 0.5-0.5 0.5v0z\" />\n        <path d=\"M7.003 8.997v-9h-4v13h13v-4h-9z\" />\n    </symbol>\n\n    <symbol id=\"expr:switch-horizontal\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M15.267 4.5h-6.534c-0.129 0-0.233 0.104-0.233 0.233v0 6.534c0 0.129 0.104 0.233 0.233 0.233v0h6.534c0.129 0 0.233-0.104 0.233-0.233v0 0-6.534c0-0.129-0.104-0.233-0.233-0.233v0zM14.5 10.5h-5v-5h5z\" />\n        <path\n            d=\"M0.733 4.5h6.534c0.129 0 0.233 0.104 0.233 0.233v6.534c0 0.129-0.104 0.233-0.233 0.233h-6.534c-0.129 0-0.233-0.104-0.233-0.233v-6.534c0-0.129 0.104-0.233 0.233-0.233z\" />\n        <path d=\"M2.492 2.5h8.5v1.5l3-2-3-2v1.5h-8.5c-0.276 0-0.5 0.224-0.5 0.5s0.224 0.5 0.5 0.5v0z\" />\n        <path d=\"M13.492 13.5h-8.5v-1.5l-3 2 3 2v-1.5h8.5c0.276 0 0.5-0.224 0.5-0.5s-0.224-0.5-0.5-0.5v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:switch-vertical\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M11.5 15.267v-6.534c0-0.129-0.104-0.233-0.233-0.233v0h-6.534c-0.129 0-0.233 0.104-0.233 0.233v0 6.534c0 0.129 0.104 0.233 0.233 0.233h6.534c0.129 0 0.233-0.104 0.233-0.233v0zM5.5 14.5v-5h5v5z\" />\n        <path\n            d=\"M4.733 0.5h6.534c0.129 0 0.233 0.104 0.233 0.233v6.534c0 0.129-0.104 0.233-0.233 0.233h-6.534c-0.129 0-0.233-0.104-0.233-0.233v-6.534c0-0.129 0.104-0.233 0.233-0.233z\" />\n        <path d=\"M13.5 2.492v8.5h-1.5l2 3 2-3h-1.5v-8.5c0-0.276-0.224-0.5-0.5-0.5s-0.5 0.224-0.5 0.5v0z\" />\n        <path d=\"M2.5 13.492v-8.5h1.5l-2-3-2 3h1.5v8.5c0 0.276 0.224 0.5 0.5 0.5s0.5-0.224 0.5-0.5v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:text-tool\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M12.609 15.168l-1.777-4.541h-5.723l-1.757 4.541h-1.68l5.644-14.336h1.4l5.612 14.336zM10.314 9.133l-1.66-4.424q-0.322-0.841-0.664-2.061c-0.197 0.831-0.408 1.519-0.657 2.189l0.042-0.128-1.675 4.424z\" />\n    </symbol>\n\n    <symbol id=\"expr:distribute-horizontally\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M7.75 0h0.5c0.138 0 0.25 0.112 0.25 0.25v15.5c0 0.138-0.112 0.25-0.25 0.25h-0.5c-0.138 0-0.25-0.112-0.25-0.25v-15.5c0-0.138 0.112-0.25 0.25-0.25z\" />\n        <path\n            d=\"M0.75 1.392h4.5c0.138 0 0.25 0.112 0.25 0.25v12.5c0 0.138-0.112 0.25-0.25 0.25h-4.5c-0.138 0-0.25-0.112-0.25-0.25v-12.5c0-0.138 0.112-0.25 0.25-0.25z\" />\n        <path\n            d=\"M10.75 1.245h4.5c0.138 0 0.25 0.112 0.25 0.25v12.5c0 0.138-0.112 0.25-0.25 0.25h-4.5c-0.138 0-0.25-0.112-0.25-0.25v-12.5c0-0.138 0.112-0.25 0.25-0.25z\" />\n    </symbol>\n\n    <symbol id=\"expr:distribute-vertically\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M0.25 7.5h15.5c0.138 0 0.25 0.112 0.25 0.25v0.5c0 0.138-0.112 0.25-0.25 0.25h-15.5c-0.138 0-0.25-0.112-0.25-0.25v-0.5c0-0.138 0.112-0.25 0.25-0.25z\" />\n        <path\n            d=\"M1.75 10.5h12.5c0.138 0 0.25 0.112 0.25 0.25v4.5c0 0.138-0.112 0.25-0.25 0.25h-12.5c-0.138 0-0.25-0.112-0.25-0.25v-4.5c0-0.138 0.112-0.25 0.25-0.25z\" />\n        <path\n            d=\"M1.75 0.5h12.5c0.138 0 0.25 0.112 0.25 0.25v4.5c0 0.138-0.112 0.25-0.25 0.25h-12.5c-0.138 0-0.25-0.112-0.25-0.25v-4.5c0-0.138 0.112-0.25 0.25-0.25z\" />\n    </symbol>\n\n    <symbol id=\"expr:h-align-left\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M0.267 0h0.488c0.147 0 0.267 0.12 0.267 0.267v15.466c0 0.147-0.12 0.267-0.267 0.267h-0.488c-0.147 0-0.267-0.12-0.267-0.267v-15.466c0-0.147 0.12-0.267 0.267-0.267z\" />\n        <path\n            d=\"M3.25 2h6.5c0.138 0 0.25 0.112 0.25 0.25v4.5c0 0.138-0.112 0.25-0.25 0.25h-6.5c-0.138 0-0.25-0.112-0.25-0.25v-4.5c0-0.138 0.112-0.25 0.25-0.25z\" />\n        <path\n            d=\"M3.25 9h12.5c0.138 0 0.25 0.112 0.25 0.25v4.5c0 0.138-0.112 0.25-0.25 0.25h-12.5c-0.138 0-0.25-0.112-0.25-0.25v-4.5c0-0.138 0.112-0.25 0.25-0.25z\" />\n    </symbol>\n\n    <symbol id=\"expr:h-align-center\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M7.768 16c-0 0-0.001 0-0.001 0-0.147 0-0.266-0.119-0.267-0.266v-1.734h-5.75c-0.138-0.001-0.249-0.112-0.25-0.25v-4.5c0-0.138 0.112-0.25 0.25-0.25v0h5.75v-2h-2.749c-0 0-0.001 0-0.001 0-0.138 0-0.249-0.111-0.25-0.249v-4.501c0-0.138 0.112-0.25 0.25-0.25v0h2.75v-1.733c0-0 0-0 0-0 0-0.147 0.12-0.267 0.267-0.267 0 0 0 0 0 0h0.488c0 0 0 0 0 0 0.147 0 0.267 0.119 0.267 0.267 0 0 0 0 0 0v0 1.733h2.729c0.138 0.001 0.249 0.112 0.25 0.25v4.5c0 0.138-0.112 0.25-0.25 0.25v0h-2.729v2h5.728c0.138 0 0.25 0.112 0.25 0.25v0 4.5c0 0.138-0.112 0.25-0.25 0.25v0h-5.728v1.733c0 0 0 0 0 0 0 0.147-0.12 0.267-0.267 0.267-0 0-0 0-0 0v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:h-align-right\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M15.245 0h0.488c0.147 0 0.267 0.12 0.267 0.267v15.466c0 0.147-0.12 0.267-0.267 0.267h-0.488c-0.147 0-0.267-0.12-0.267-0.267v-15.466c0-0.147 0.12-0.267 0.267-0.267z\" />\n        <path\n            d=\"M6.25 2h6.5c0.138 0 0.25 0.112 0.25 0.25v4.5c0 0.138-0.112 0.25-0.25 0.25h-6.5c-0.138 0-0.25-0.112-0.25-0.25v-4.5c0-0.138 0.112-0.25 0.25-0.25z\" />\n        <path\n            d=\"M0.25 9h12.5c0.138 0 0.25 0.112 0.25 0.25v4.5c0 0.138-0.112 0.25-0.25 0.25h-12.5c-0.138 0-0.25-0.112-0.25-0.25v-4.5c0-0.138 0.112-0.25 0.25-0.25z\" />\n    </symbol>\n\n    <symbol id=\"expr:v-align-bottom\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M0.267 14.978h15.466c0.147 0 0.267 0.12 0.267 0.267v0.488c0 0.147-0.12 0.267-0.267 0.267h-15.466c-0.147 0-0.267-0.12-0.267-0.267v-0.488c0-0.147 0.12-0.267 0.267-0.267z\" />\n        <path\n            d=\"M9.003 6h4.5c0.138 0 0.25 0.112 0.25 0.25v6.5c0 0.138-0.112 0.25-0.25 0.25h-4.5c-0.138 0-0.25-0.112-0.25-0.25v-6.5c0-0.138 0.112-0.25 0.25-0.25z\" />\n        <path\n            d=\"M2.003 0h4.5c0.138 0 0.25 0.112 0.25 0.25v12.5c0 0.138-0.112 0.25-0.25 0.25h-4.5c-0.138 0-0.25-0.112-0.25-0.25v-12.5c0-0.138 0.112-0.25 0.25-0.25z\" />\n    </symbol>\n\n    <symbol id=\"expr:v-align-center-01\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M0 7.768c0-0 0-0.001 0-0.001 0-0.147 0.119-0.266 0.266-0.267h1.734v-5.75c0.001-0.138 0.112-0.249 0.25-0.25h4.5c0.138 0 0.25 0.112 0.25 0.25v0 5.75h2v-2.749c0-0 0-0.001 0-0.001 0-0.138 0.111-0.249 0.249-0.25h4.501c0.138 0 0.25 0.112 0.25 0.25v0 2.75h1.733c0 0 0 0 0 0 0.147 0 0.267 0.12 0.267 0.267 0 0 0 0 0 0v0 0.488c0 0 0 0 0 0 0 0.147-0.12 0.267-0.267 0.267-0 0-0 0-0 0h-1.733v2.729c-0.001 0.138-0.112 0.249-0.25 0.25h-4.5c-0.138 0-0.25-0.112-0.25-0.25v0-2.729h-2v5.728c0 0.138-0.112 0.25-0.25 0.25v0h-4.5c-0.138 0-0.25-0.112-0.25-0.25v0-5.728h-1.733c-0 0-0 0-0 0-0.147 0-0.267-0.12-0.267-0.267 0-0 0-0 0-0v0z\" />\n    </symbol>\n\n    <symbol id=\"expr:v-align-top\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M0.267 0h15.466c0.147 0 0.267 0.12 0.267 0.267v0.488c0 0.147-0.12 0.267-0.267 0.267h-15.466c-0.147 0-0.267-0.12-0.267-0.267v-0.488c0-0.147 0.12-0.267 0.267-0.267z\" />\n        <path\n            d=\"M9.502 3h4.5c0.138 0 0.25 0.112 0.25 0.25v6.5c0 0.138-0.112 0.25-0.25 0.25h-4.5c-0.138 0-0.25-0.112-0.25-0.25v-6.5c0-0.138 0.112-0.25 0.25-0.25z\" />\n        <path\n            d=\"M2.502 3h4.5c0.138 0 0.25 0.112 0.25 0.25v12.5c0 0.138-0.112 0.25-0.25 0.25h-4.5c-0.138 0-0.25-0.112-0.25-0.25v-12.5c0-0.138 0.112-0.25 0.25-0.25z\" />\n    </symbol>\n\n    <symbol id=\"expr:zoom-tool\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M15.853 15.146l-3.5-3.5 0.146-0.146-0.933-0.933c0.893-1.105 1.433-2.526 1.433-4.074 0-3.594-2.913-6.507-6.507-6.507s-6.507 2.913-6.507 6.507c0 3.594 2.913 6.507 6.507 6.507 1.548 0 2.969-0.54 4.086-1.443l-0.012 0.010 0.933 0.933 0.146-0.146 3.5 3.5c0.091 0.090 0.215 0.146 0.353 0.146 0.276 0 0.501-0.224 0.501-0.501 0-0.137-0.055-0.262-0.145-0.352l0 0zM6.5 12c-3.038 0-5.5-2.462-5.5-5.5s2.462-5.5 5.5-5.5c3.038 0 5.5 2.462 5.5 5.5v0c-0.003 3.036-2.464 5.497-5.5 5.5h-0z\" />\n    </symbol>\n\n    <symbol id=\"expr:fill-linear-gradient\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M15.5,15.47a1.74,1.74,0,0,1-1.25.53H1.75a1.8,1.8,0,0,1-1.24-.51,1.7783,1.7783,0,0,1-.5-1.15A.2763.2763,0,0,1,0,14.25V1.75a.2763.2763,0,0,1,.01-.09A1.6468,1.6468,0,0,1,.53.5,1.725,1.725,0,0,1,1.75,0h12.5a1.8,1.8,0,0,1,1.24.51A1.7389,1.7389,0,0,1,16,1.75v12.5A1.725,1.725,0,0,1,15.5,15.47ZM15,1.75A.751.751,0,0,0,14.25,1H1.75a.7108.7108,0,0,0-.51.21A.734.734,0,0,0,1,1.75v12.5a.751.751,0,0,0,.75.75h12.5a.734.734,0,0,0,.54-.24.7108.7108,0,0,0,.21-.51Z\" />\n        <rect x=\"1.0004\" y=\"13\" width=\"14\" height=\"2\" fill-opacity=\"0\" />\n        <rect x=\"1.0004\" y=\"11\" width=\"14\" height=\"2\" opacity=\"0.124\" />\n        <rect x=\"1.0004\" y=\"9\" width=\"14\" height=\"2\" opacity=\"0.242\" />\n        <rect x=\"1.0004\" y=\"7\" width=\"14\" height=\"2\" opacity=\"0.319\" />\n        <rect x=\"1.0004\" y=\"5\" width=\"14\" height=\"2\" opacity=\"0.476\" />\n        <rect x=\"1.0004\" y=\"3\" width=\"14\" height=\"2\" opacity=\"0.597\" />\n        <rect x=\"1.0004\" y=\"1\" width=\"14\" height=\"2\" opacity=\"0.725\" />\n    </symbol>\n\n    <symbol id=\"expr:fill-radial-gradient\" viewBox=\"0 0 16 16\">\n        <rect x=\"0.5097\" y=\"0.5098\" width=\"14.98\" height=\"14.98\" fill-opacity=\"0\" />\n        <path\n            d=\"M15.5.53A1.74,1.74,0,0,0,14.25,0H1.75A1.8,1.8,0,0,0,.51.51a1.7778,1.7778,0,0,0-.5,1.15A.2736.2736,0,0,0,0,1.75v12.5a.2736.2736,0,0,0,.01.09A1.6468,1.6468,0,0,0,.53,15.5a1.7248,1.7248,0,0,0,1.22.5h12.5a1.8,1.8,0,0,0,1.24-.51A1.7389,1.7389,0,0,0,16,14.25V1.75A1.7254,1.7254,0,0,0,15.5.53ZM15,14.25a.751.751,0,0,1-.75.75H1.75a.7106.7106,0,0,1-.51-.21A.7336.7336,0,0,1,1,14.25V1.75A.751.751,0,0,1,1.75,1h12.5a.7343.7343,0,0,1,.54.24.7116.7116,0,0,1,.21.51Z\" />\n        <path d=\"M8,1.5H8A6.5,6.5,0,0,1,14.5,8h0A6.5,6.5,0,0,1,8,14.5H8A6.5,6.5,0,0,1,1.5,8h0A6.5,6.5,0,0,1,8,1.5Z\"\n            opacity=\"0.117\" />\n        <path\n            d=\"M8,2.583H8A5.4166,5.4166,0,0,1,13.416,8h0A5.4165,5.4165,0,0,1,8,13.416H8A5.4164,5.4164,0,0,1,2.583,8h0A5.4165,5.4165,0,0,1,8,2.583Z\"\n            opacity=\"0.242\" />\n        <rect x=\"3.667\" y=\"3.667\" width=\"8.667\" height=\"8.667\" rx=\"4.333\" opacity=\"0.321\" />\n        <path\n            d=\"M8,4.75H8A3.25,3.25,0,0,1,11.25,8h0A3.25,3.25,0,0,1,8,11.25H8A3.25,3.25,0,0,1,4.75,8h0A3.25,3.25,0,0,1,8,4.75Z\"\n            opacity=\"0.477\" />\n        <path\n            d=\"M8,5.833H8A2.1665,2.1665,0,0,1,10.166,8h0A2.1665,2.1665,0,0,1,8,10.166H8A2.1665,2.1665,0,0,1,5.833,8h0A2.1665,2.1665,0,0,1,8,5.833Z\"\n            opacity=\"0.6\" />\n        <rect x=\"6.917\" y=\"6.917\" width=\"2.167\" height=\"2.167\" rx=\"1.083\" />\n    </symbol>\n\n    <symbol id=\"expr:fill-conical-gradient\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M15.5.53A1.7119,1.7119,0,0,0,14.25,0H1.75A1.789,1.789,0,0,0,.51.51a1.7618,1.7618,0,0,0-.5,1.15A.2739.2739,0,0,0,0,1.75v12.5a.2733.2733,0,0,0,.01.09A1.6737,1.6737,0,0,0,.53,15.5a1.7146,1.7146,0,0,0,1.22.5h12.5a1.789,1.789,0,0,0,1.24-.51A1.7293,1.7293,0,0,0,16,14.25V1.75A1.7156,1.7156,0,0,0,15.5.53ZM15,14.25a.774.774,0,0,1-.22.53.7493.7493,0,0,1-.53.22H1.75a.7178.7178,0,0,1-.51-.21A.718.718,0,0,1,1,14.25V1.75a.7738.7738,0,0,1,.22-.53A.7489.7489,0,0,1,1.75,1h12.5a.718.718,0,0,1,.54.24.718.718,0,0,1,.21.51Z\" />\n        <path d=\"M8.01,0V8H8L1.22,1.22.51.51A1.789,1.789,0,0,1,1.75,0Z\" fill-opacity=\"0\" />\n        <path d=\"M15.5.53l-.71.71L8.03,8H8.01V0h6.24A1.7119,1.7119,0,0,1,15.5.53Z\" />\n        <path d=\"M8.01,8H8l.01.01Z\" />\n        <path d=\"M8.01,8.014,8.0282,8H8.01v.014Z\" />\n        <path d=\"M8,8H.01V1.66A1.7618,1.7618,0,0,1,.51.51l.71.71Z\" opacity=\"0.122\" />\n        <path d=\"M8.01,8.01v.01L1.24,14.79l-.71.71a1.6737,1.6737,0,0,1-.52-1.16V8H8Z\" opacity=\"0.238\" />\n        <path d=\"M16,1.75V8H8.03l6.76-6.76L15.5.53A1.7156,1.7156,0,0,1,16,1.75Z\" opacity=\"0.718\" />\n        <path d=\"M16,8v6.25a1.7293,1.7293,0,0,1-.51,1.24l-.71-.71L8.01,8.02V8.01L8.03,8Z\" opacity=\"0.6\" />\n        <path d=\"M8.01,8.02V16H1.75a1.7146,1.7146,0,0,1-1.22-.5l.71-.71Z\" opacity=\"0.358\" />\n        <path d=\"M15.49,15.49a1.789,1.789,0,0,1-1.24.51H8.01V8.02l6.77,6.76Z\" opacity=\"0.477\" />\n    </symbol>\n\n    <symbol id=\"expr:checkbox-unchecked\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M13,1H3A2,2,0,0,0,1,3V13a2,2,0,0,0,2,2H13a2,2,0,0,0,2-2V3A2,2,0,0,0,13,1Zm1,12a1.0011,1.0011,0,0,1-1,1H3a1.0011,1.0011,0,0,1-1-1V3A1.0011,1.0011,0,0,1,3,2H13a1.0011,1.0011,0,0,1,1,1Z\" />\n    </symbol>\n\n    <symbol id=\"expr:checkbox-checked\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M13,1H3A2,2,0,0,0,1,3V13a2,2,0,0,0,2,2H13a2,2,0,0,0,2-2V3A2,2,0,0,0,13,1Zm1,12a1.0011,1.0011,0,0,1-1,1H3a1.0011,1.0011,0,0,1-1-1V3A1.0011,1.0011,0,0,1,3,2H13a1.0011,1.0011,0,0,1,1,1Z\" />\n        <rect x=\"3\" y=\"3\" width=\"10\" height=\"10\" rx=\"1\" />\n    </symbol>\n\n    <symbol id=\"expr:radio-unchecked\" viewBox=\"0 0 16 16\">\n        <path d=\"M8,1a7,7,0,1,0,7,7A7,7,0,0,0,8,1ZM8,14a6,6,0,1,1,6-6A6.0068,6.0068,0,0,1,8,14Z\" />\n    </symbol>\n\n    <symbol id=\"expr:radio-checked\" viewBox=\"0 0 16 16\">\n        <circle cx=\"8\" cy=\"8\" r=\"5\" />\n        <path d=\"M8,1a7,7,0,1,0,7,7A7,7,0,0,0,8,1ZM8,14a6,6,0,1,1,6-6A6.0068,6.0068,0,0,1,8,14Z\" />\n    </symbol>\n\n    <symbol id=\"expr:gradient-tool\" viewBox=\"0 0 16 16\">\n        <rect x=\"1\" y=\"12.2857\" width=\"14\" height=\"1.7143\" fill-opacity=\"0\" />\n        <rect x=\"1\" y=\"10.5714\" width=\"14\" height=\"1.7143\" opacity=\"0.124\" style=\"isolation: isolate\" />\n        <rect x=\"1\" y=\"8.8571\" width=\"14\" height=\"1.7143\" opacity=\"0.242\" style=\"isolation: isolate\" />\n        <rect x=\"1\" y=\"7.1429\" width=\"14\" height=\"1.7143\" opacity=\"0.319\" style=\"isolation: isolate\" />\n        <rect x=\"1\" y=\"5.4286\" width=\"14\" height=\"1.7143\" opacity=\"0.476\" style=\"isolation: isolate\" />\n        <rect x=\"1\" y=\"3.7143\" width=\"14\" height=\"1.7143\" opacity=\"0.597\" style=\"isolation: isolate\" />\n        <rect x=\"1\" y=\"2\" width=\"14\" height=\"1.7143\" opacity=\"0.725\" style=\"isolation: isolate\" />\n        <path\n            d=\"M9.5,0h-3V1H1.25A1.25,1.25,0,0,0,0,2.25v11.5A1.25,1.25,0,0,0,1.25,15H6.5v1h3V15h5.25A1.25,1.25,0,0,0,16,13.75V2.25A1.25,1.25,0,0,0,14.75,1H9.5V0Zm-2,2V1h1V2Zm1,11V3h1V2h5.25a.2476.2476,0,0,1,.25.25v11.5a.2476.2476,0,0,1-.25.25H9.5V13ZM1.25,14A.2476.2476,0,0,1,1,13.75V2.25A.2476.2476,0,0,1,1.25,2H6.5V3h1V13h-1v1ZM7.5,15V14h1v1Z\" />\n    </symbol>\n\n    <symbol id=\"expr:pan-tool\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M14.98,3.3964a1.3888,1.3888,0,0,0-1.6743.8634c-.2947.8084-.7193,2.6764-.8987,3.0735a.1493.1493,0,0,1-.2826-.09c.13-.6662.5038-3.4.7259-4.6216a1.4517,1.4517,0,0,0-2.856-.5229C9.7674,3.3263,9.59,6.0757,9.4448,6.8A.1726.1726,0,0,1,9.1036,6.78c-.0767-.9206-.3653-3.9641-.4773-5.2634a1.45,1.45,0,0,0-2.89.25c.1218,1.4171.5155,4.2864.5992,5.2906a.0822.0822,0,0,1-.1592.0349c-.2284-.6281-.948-2.853-1.3206-3.8737a1.4626,1.4626,0,0,0-2.7551.9827C2.6663,5.8258,3.71,8.7908,4.03,9.7537a.1946.1946,0,0,1-.3384.1806c-.1087-.1378-.58-.9778-.8877-1.3739A1.5659,1.5659,0,1,0,.3767,10.5381a45.7485,45.7485,0,0,0,4.5594,4.7955,2.5231,2.5231,0,0,0,1.7915.4737h4.5813a1.6327,1.6327,0,0,0,1.5193-1.14l3.1-9.4937A1.3892,1.3892,0,0,0,14.98,3.3964Z\" />\n    </symbol>\n\n    <symbol id=\"expr:save\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M15.707,4.707,11.293.293A1,1,0,0,0,10.586,0H2A2,2,0,0,0,0,2V14a2,2,0,0,0,2,2H14a2,2,0,0,0,2-2V5.414A1,1,0,0,0,15.707,4.707ZM8,12a2.5,2.5,0,1,1,2.5-2.5A2.5,2.5,0,0,1,8,12Zm3-9a1,1,0,0,1-1,1H2A1,1,0,0,1,1,3V2A1,1,0,0,1,2,1h8a1,1,0,0,1,1,1Z\" />\n    </symbol>\n\n    <symbol id=\"expr:fit-view\" viewBox=\"0 0 16 16\">\n        <polygon points=\"0 4 4 0 0 0 0 4\" />\n        <polygon points=\"0 16 4 16 0 12 0 16\" />\n        <polygon points=\"12 0 16 4 16 0 12 0\" />\n        <polygon points=\"16 16 16 12 12 16 16 16\" />\n    </symbol>\n\n    <symbol id=\"expr:anchor-straight\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M15.874,14.16,11,8.97V3.5H5V8.97L.14,14.16a.5.5,0,0,0,.017.707l0,0a.5.5,0,0,0,.7-.03L5.872,9.5h4.261l5,5.34a.5.5,0,0,0,.37.16.486.486,0,0,0,.34-.13A.514.514,0,0,0,15.874,14.16ZM6,8.5v-4h4v4Z\" />\n    </symbol>\n\n    <symbol id=\"expr:anchor-mirrored\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M12.261,7H14.1a1,1,0,1,0,.88-1.448A.981.981,0,0,0,14.166,6H10.983V3.5H4.992V6H1.809A.979.979,0,0,0,1,5.552,1,1,0,1,0,1.879,7H3.744A6.194,6.194,0,0,0,2.137,8.24,9.207,9.207,0,0,0,.01,14.53.516.516,0,0,0,.539,15a.509.509,0,0,0,.469-.53A8.255,8.255,0,0,1,2.876,8.92,5.623,5.623,0,0,1,4.992,7.51V9.5h5.991v-2A5.575,5.575,0,0,1,13.1,8.89a8.33,8.33,0,0,1,1.867,5.58.51.51,0,0,0,.47.53h.029a.49.49,0,0,0,.5-.47,9.243,9.243,0,0,0-2.137-6.32A6.133,6.133,0,0,0,12.261,7ZM9.985,8.5H5.991v-4H9.985Z\" />\n    </symbol>\n\n    <symbol id=\"expr:anchor-asymmetric\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M15.933,14.249A34.26,34.26,0,0,0,11.5,8.079V7h1.168a.985.985,0,0,0,.833.478A1,1,0,1,0,12.64,6H11.5V3.5h-6V6H1.859A.991.991,0,0,0,1,5.477a1,1,0,0,0,0,2A.982.982,0,0,0,1.83,7h1.9A6.318,6.318,0,0,0,2.15,8.229a9.186,9.186,0,0,0-2.141,6.3.508.508,0,0,0,.53.47.508.508,0,0,0,.47-.53A8.3,8.3,0,0,1,2.878,8.9,5.636,5.636,0,0,1,5.5,7.339V9.5h5.942a36.392,36.392,0,0,1,3.622,5.25.5.5,0,0,0,.43.25.533.533,0,0,0,.25-.06A.507.507,0,0,0,15.933,14.249ZM10.5,8.5h-4v-4h4Z\" />\n    </symbol>\n\n    <symbol id=\"expr:anchor-disconnected\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M15,12.5a.984.984,0,0,0-.233.047l-.017-.017L11,8.79V3.5H5V6H1.862A.989.989,0,0,0,1,5.478a1,1,0,0,0,0,2A.985.985,0,0,0,1.832,7H3.75A6.231,6.231,0,0,0,2.14,8.24,9.2,9.2,0,0,0,.01,14.53a.489.489,0,0,0,.5.47H.54a.51.51,0,0,0,.47-.53A8.241,8.241,0,0,1,2.88,8.92,5.63,5.63,0,0,1,5,7.51V9.5h5.31l3.729,3.74.01.01a.99.99,0,1,0,1.2-.721A1.008,1.008,0,0,0,15,12.5Zm-9-4v-4h4v4Z\" />\n        <path d=\"M8.32,7.01A1.087,1.087,0,0,1,8.5,7H8.31Z\" />\n    </symbol>\n\n    <symbol id=\"expr:unknown\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M7.868,11.114a.6.6,0,0,0-.477.181.641.641,0,0,0-.162.446.631.631,0,0,0,.162.442.621.621,0,0,0,.477.173.639.639,0,0,0,.481-.173.626.626,0,0,0,.164-.442.638.638,0,0,0-.164-.446A.621.621,0,0,0,7.868,11.114Z\" />\n        <path\n            d=\"M8.032,3.644A2.522,2.522,0,0,0,6.3,4.227a1.973,1.973,0,0,0-.677,1.532H6.708a1.071,1.071,0,0,1,.363-.85,1.409,1.409,0,0,1,.961-.316,1.221,1.221,0,0,1,.938.347,1.365,1.365,0,0,1,.322.962A1.773,1.773,0,0,1,8.8,7.1l-.768.79a2.806,2.806,0,0,0-.6.895,3.5,3.5,0,0,0-.159,1.1H8.36a1.971,1.971,0,0,1,.428-1.363l.639-.632a2.941,2.941,0,0,0,.949-2.018,2.156,2.156,0,0,0-.618-1.63A2.388,2.388,0,0,0,8.032,3.644Z\" />\n        <path\n            d=\"M13.5.5H2.5a2,2,0,0,0-2,2v11a2,2,0,0,0,2,2h11a2,2,0,0,0,2-2V2.5A2,2,0,0,0,13.5.5Zm1,13a1,1,0,0,1-1,1H2.5a1,1,0,0,1-1-1V2.5a1,1,0,0,1,1-1h11a1,1,0,0,1,1,1Z\" />\n    </symbol>\n\n    <symbol id=\"expr:polygon\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M11.173,2.505,14.345,8,11.173,13.5H4.827L1.655,8,4.827,2.505h6.346m.577-1H4.25L.5,8,4.25,14.5h7.5L15.5,8,11.75,1.505Z\" />\n    </symbol>\n\n    <symbol id=\"expr:ellipse\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M8,2.5c3.584,0,6.5,2.467,6.5,5.5S11.584,13.5,8,13.5,1.5,11.033,1.5,8,4.416,2.5,8,2.5m0-1C3.858,1.5.5,4.41.5,8S3.858,14.5,8,14.5s7.5-2.91,7.5-6.5S12.142,1.5,8,1.5Z\" />\n    </symbol>\n\n    <symbol id=\"expr:clip-path\" viewBox=\"0 0 16 16\">\n        <path d=\"M11.01,11V.5H.5V11H11.01Zm-9.5-1H1.5V1.5H10v3A5.478,5.478,0,0,0,4.51,10Z\" />\n        <path d=\"M10.2,14.5l.04,1a5.62,5.62,0,0,0,1.09-.16l-.24-.97A5.305,5.305,0,0,1,10.2,14.5Z\" />\n        <path d=\"M8.09,15.15a4.875,4.875,0,0,0,1.06.28l.15-.98a5.2,5.2,0,0,1-.86-.23Z\" />\n        <path d=\"M11.94,14.07l.43.9a5.683,5.683,0,0,0,.94-.56l-.6-.8A4.61,4.61,0,0,1,11.94,14.07Z\" />\n        <path d=\"M6.23,14a6.29,6.29,0,0,0,.87.67l.53-.85a4.654,4.654,0,0,1-.71-.55Z\" />\n        <path d=\"M13.37,13l.75.66a5.156,5.156,0,0,0,.64-.89l-.86-.5A4.253,4.253,0,0,1,13.37,13Z\" />\n        <path d=\"M5.89,11.81l-.91.4a4.908,4.908,0,0,0,.53.95l.82-.57A5.018,5.018,0,0,1,5.89,11.81Z\" />\n        <path d=\"M14.27,11.46l.95.32a5.727,5.727,0,0,0,.25-1.07l-1-.13A4.482,4.482,0,0,1,14.27,11.46Z\" />\n        <path d=\"M14.5,9.68l1-.07a5.549,5.549,0,0,0-.19-1.08l-.96.26A4.475,4.475,0,0,1,14.5,9.68Z\" />\n        <path d=\"M14.02,7.96l.89-.46a5.314,5.314,0,0,0-.59-.92l-.78.62A4.244,4.244,0,0,1,14.02,7.96Z\" />\n        <path d=\"M13.56,5.79a6.343,6.343,0,0,0-.91-.62l-.48.88a4.065,4.065,0,0,1,.74.51Z\" />\n    </symbol>\n\n    <symbol id=\"expr:symbol\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M4.25,1h0A3.25,3.25,0,0,1,7.5,4.25V7.5a0,0,0,0,1,0,0H4.25A3.25,3.25,0,0,1,1,4.25v0A3.25,3.25,0,0,1,4.25,1Z\" />\n        <path\n            d=\"M11.75,1H15a0,0,0,0,1,0,0V4.25A3.25,3.25,0,0,1,11.75,7.5h0A3.25,3.25,0,0,1,8.5,4.25v0A3.25,3.25,0,0,1,11.75,1Z\"\n            transform=\"translate(23.5 8.5) rotate(180)\" />\n        <path\n            d=\"M4.25,8.5H7.5a0,0,0,0,1,0,0v3.25A3.25,3.25,0,0,1,4.25,15h0A3.25,3.25,0,0,1,1,11.75v0A3.25,3.25,0,0,1,4.25,8.5Z\" />\n        <path\n            d=\"M11.75,8.5h0A3.25,3.25,0,0,1,15,11.75V15a0,0,0,0,1,0,0H11.75A3.25,3.25,0,0,1,8.5,11.75v0A3.25,3.25,0,0,1,11.75,8.5Z\"\n            transform=\"translate(23.5 23.5) rotate(180)\" />\n    </symbol>\n\n    <symbol id=\"expr:center-origin-object\" viewBox=\"0 0 16 16\">\n        <polygon points=\"1 1 4 1 4 0 0 0 0 4 1 4 1 1\" />\n        <polygon points=\"1 12 0 12 0 16 4 16 4 15 1 15 1 12\" />\n        <polygon points=\"15 0 12 0 12 1 15 1 15 4 16 4 16 0 15 0\" />\n        <polygon points=\"15 15 12 15 12 16 16 16 16 12 15 12 15 15\" />\n        <circle cx=\"8.015\" cy=\"8\" r=\"1\" />\n        <path\n            d=\"M10.949,8.5H12.5v-1H10.949A2.99,2.99,0,0,0,8.5,5.05V3.5h-1V5.05A2.992,2.992,0,0,0,5.05,7.5H3.5v1H5.05A2.992,2.992,0,0,0,7.5,10.95V12.5h1V10.95A2.99,2.99,0,0,0,10.949,8.5ZM8,10a2,2,0,1,1,2-2A2,2,0,0,1,8,10Z\" />\n    </symbol>\n\n    <symbol id=\"expr:center-object-origin\" viewBox=\"0 0 16 16\">\n        <path d=\"M3,3H0V4H4V0H3Z\" />\n        <path d=\"M3,16H4V12H0v1H3Z\" />\n        <path d=\"M13,4h3V3H13V0H12V4Z\" />\n        <path d=\"M13,13h3V12H12v4h1Z\" />\n        <circle cx=\"8.014\" cy=\"8\" r=\"1\" />\n        <path d=\"M8,11a3,3,0,1,1,3-3A3,3,0,0,1,8,11ZM8,6a2,2,0,1,0,2,2A2,2,0,0,0,8,6Z\" />\n    </symbol>\n\n</svg>";

    LoadIcons(CustomIcons);
    var index = LoadApp();
    async function LoadApp() {
        window.Skia = await SkiaWasmInit();
        return new App({
            target: document.body,
            props: {},
        });
    }

    return index;

}());
//# sourceMappingURL=bundle.js.map
